push ebx sub esp , num call hexvar add eax , hexvar mov edx , dword ptr [ esp + hexvar ] add edx , hexvar sub esp , num push edx push dword ptr [ esp + hexvar ] mov ebx , eax call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax setne al movzx eax , al add esp , num pop ebx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) lw s1 , - hexvar ( gp ) sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s1 ) sw v0 , hexvar ( sp ) beqz a3 , hexvar lw t9 , - hexvar ( gp ) lw v1 , ( a3 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rcx cmp qword ptr [ rax ] , num setne dl mov qword ptr [ rbp - hexvar ] , rax mov byte ptr [ rbp - hexvar ] , dl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov edx , hexvar cmp qword ptr [ rcx + hexvar ] , rdx sete sil mov byte ptr [ rbp - hexvar ] , sil mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar xor eax , eax mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rcx ] mov esi , dword ptr [ rdx + hexvar ] and esi , num cmp esi , num mov esi , num cmove esi , eax mov eax , esi mov rsp , rbp pop rbp ret
push ebp mov ebp , esp push esi sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esi + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx add esp , num pop esi pop ebp ret
orr ip , r1 , r2 cmp ip , hexvar movlo r3 , num movhs r3 , num cmp r2 , num moveq r3 , num cmp r3 , num push { r4 , r5 , r6 , lr } bne hexvar cmp r0 , num mul r4 , r2 , r1 beq hexvar cmp r4 , num blt hexvar mov r1 , r4 bl hexvar adds r4 , r4 , num movne r4 , num cmp r0 , num movne r4 , num cmp r4 , num mov r5 , r0 beq hexvar mov r0 , num bl hexvar mov r0 , r5 pop { r4 , r5 , r6 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov esi , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov ecx , hexvar mov rdi , rax call hexvar leave ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esi ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + num ] , num mov dword ptr [ edx + num ] , num mov edx , dword ptr [ ebp + hexvar ] mov byte ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + hexvar ] mov byte ptr [ edx + hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx test al , num mov edx , num cmovne ecx , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + hexvar ] , ecx add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) addiu gp , gp , hexvar lw s0 , hexvar ( a0 ) sw ra , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw t0 , hexvar ( s0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw v0 , num ( a0 ) addiu v1 , sp , hexvar sw v1 , hexvar ( sp ) addiu v1 , zero , hexvar sw v1 , hexvar ( sp ) lw t9 , hexvar ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) sw zero , hexvar ( fp ) b hexvar nop lw v0 , hexvar ( fp ) sll v0 , v0 , num addiu v1 , fp , hexvar addu v0 , v1 , v0 sw zero , - hexvar ( v0 ) lw v0 , hexvar ( fp ) addiu v0 , v0 , num sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) sltiu v0 , v0 , num bnez v0 , hexvar nop addiu v0 , fp , hexvar move a1 , v0 lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) sw zero , hexvar ( fp ) b hexvar nop lw v0 , hexvar ( fp ) sll v0 , v0 , num addiu v1 , fp , hexvar addu v0 , v1 , v0 lw v0 , - hexvar ( v0 ) sltiu v1 , v0 , num beqz v1 , hexvar nop sll v1 , v0 , num lui v0 , hexvar addiu v0 , v0 , - hexvar addu v0 , v1 , v0 lw v0 , ( v0 ) jr v0 nop lw v0 , hexvar ( fp ) addiu v1 , v0 , num sw v1 , hexvar ( fp ) lw v1 , ( v0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ebp + hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar cmp dword ptr [ ebp + num ] , num je hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp + num ] , eax cmp dword ptr [ ebp + num ] , num jne hexvar cmp dword ptr [ ebp + hexvar ] , num je hexvar call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar bl hexvar str r0 , [ sp , num ] ldr r3 , [ sp , num ] cmp r3 , num bne hexvar mov r3 , num b hexvar mov r2 , num mov r1 , hexvar ldr r0 , [ pc , hexvar ] bl hexvar mov r2 , r0 ldr r3 , [ sp , num ] str r2 , [ r3 , hexvar ] mov r2 , num mov r1 , hexvar ldr r0 , [ pc , hexvar ] bl hexvar mov r2 , r0 ldr r3 , [ sp , num ] str r2 , [ r3 , hexvar ] mov r2 , num mov r1 , hexvar ldr r0 , [ pc , hexvar ] bl hexvar mov r2 , r0 ldr r3 , [ sp , num ] str r2 , [ r3 , hexvar ] mov r2 , num mov r1 , hexvar ldr r0 , [ pc , hexvar ] bl hexvar mov r2 , r0 ldr r3 , [ sp , num ] str r2 , [ r3 , hexvar ] mov r2 , num mov r1 , hexvar ldr r0 , [ pc , hexvar ] bl hexvar mov r2 , r0 ldr r3 , [ sp , num ] str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , num ] mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp push edi push esi push ebx call hexvar add ebp , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov esi , eax mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ ebx + hexvar ] mov dword ptr [ esp + hexvar ] , edx test eax , eax je hexvar push edx push esi xor edi , edi push dword ptr [ esp + hexvar ] push ebx mov esi , hexvar call dword ptr [ eax + num ] add esp , hexvar cmp eax , - num je hexvar mov esi , eax xor edi , edi add dword ptr [ ebx + hexvar ] , esi adc dword ptr [ ebx + hexvar ] , edi mov ecx , dword ptr [ esp + num ] mov ebx , dword ptr [ esp + hexvar ] mov eax , ecx mov edx , ebx xor eax , esi xor edx , edi or edx , eax je hexvar mov ebx , ebp call hexvar sub esp , hexvar mov dword ptr [ eax ] , hexvar push num call hexvar add esp , hexvar add esp , hexvar mov eax , esi mov edx , edi pop ebx pop esi pop edi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r2 , [ sp , num ] cmp r2 , r3 bne hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r3 , [ r3 , num ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] mov r2 , num strb r2 , [ r3 ] ldr r3 , [ sp , hexvar ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , hexvar ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , num ] str r2 , [ r3 , hexvar ] mov r1 , hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc } andeq r0 , r0 , r0 ldrble r7 , [ ip , - hexvar ] !
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) andi v0 , v0 , hexvar sltu v0 , zero , v0 andi v0 , v0 , hexvar sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) andi v0 , v0 , hexvar andi v0 , v0 , hexvar sb v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) beqz v0 , hexvar nop lbu v1 , hexvar ( fp ) addiu v0 , fp , hexvar move a1 , v1 move a0 , v0 jal hexvar nop lw gp , hexvar ( fp ) addiu v0 , fp , hexvar move a2 , v0 lui v0 , hexvar addiu a1 , v0 , hexvar lui v0 , hexvar addiu a0 , v0 , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) b hexvar nop lbu v1 , hexvar ( fp ) addiu v0 , fp , hexvar move a1 , v1 move a0 , v0 jal hexvar nop lw gp , hexvar ( fp ) addiu v0 , fp , hexvar move a2 , v0 lui v0 , hexvar addiu a1 , v0 , hexvar lui v0 , hexvar addiu a0 , v0 , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v1 , - hexvar ( gp ) lw a0 , hexvar ( fp ) lw v1 , ( v1 ) beq a0 , v1 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + num ] test edi , edi setne bl movzx edi , bl mov edi , dword ptr [ edi * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi jmp edi lea eax , [ ebp - hexvar ] mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , esp mov dword ptr [ edi + hexvar ] , esi mov dword ptr [ edi + num ] , edx mov dword ptr [ edi + num ] , ecx mov dword ptr [ edi ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] sub eax , - num seta bl movzx ecx , bl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp + hexvar ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , esp mov dword ptr [ eax ] , num call hexvar movzx ecx , al mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx mov eax , dword ptr [ ebp + hexvar ] mov cl , byte ptr [ eax ] mov byte ptr [ ebp - hexvar ] , cl movzx eax , byte ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx ] , eax mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rcx + hexvar ] jbe hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] add rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi + hexvar ] sub rsi , qword ptr [ rbp - hexvar ] add rsi , hexvar mov qword ptr [ rbp - hexvar ] , rsi mov rsi , rax mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ] sub rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov qword ptr [ rbp - hexvar ] , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbp push rbx push rax mov rax , qword ptr [ rdi + hexvar ] mov ebp , num test rax , rax je hexvar mov rbx , rdi mov rdx , rsp xor esi , esi xor ecx , ecx call rax test eax , eax jle hexvar mov rcx , qword ptr [ rsp ] mov edi , hexvar mov esi , hexvar mov rdx , rbx mov r8d , eax xor r9d , r9d call hexvar mov ebp , eax mov eax , ebp add rsp , num pop rbx pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar nop leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a3 , hexvar ( sp ) sw a2 , hexvar ( sp ) move a3 , a1 move a2 , a0 lui a1 , hexvar addiu a1 , a1 , - hexvar lw a0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
mov eax , dword ptr [ rip ] test eax , eax jne hexvar movaps xmm0 , xmmword ptr [ rip ] xorps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rip ] , xmm0 movaps xmmword ptr [ rip ] , xmm0 add byte ptr [ rsi ] , bh add byte ptr [ rax ] , al add byte ptr [ rax ] , al test dword ptr [ rax + hexvar ] , ebp
push rbp mov rbp , rsp sub rsp , hexvar xor eax , eax mov ecx , eax mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov r8 , qword ptr [ rbp - hexvar ] mov rdx , rcx call hexvar add rsp , hexvar pop rbp ret
movsxd rdx , dword ptr [ rip + hexvar ] mov rcx , qword ptr [ rip + hexvar ] push rbx mov rbx , qword ptr [ rcx + rdx * num ] mov rax , rdx lea rsi , [ rdx * num ] movzx edx , byte ptr [ rbx ] cmp dl , hexvar jne hexvar cmp byte ptr [ rbx + num ] , num jne hexvar add eax , num mov dword ptr [ rip + hexvar ] , eax mov rax , qword ptr [ rcx + rsi + num ] pop rbx cmp byte ptr [ rax ] , num sete al ret
push rbx mov rbx , rdi mov rdi , qword ptr [ rdi ] call hexvar lea ecx , [ rax - hexvar ] cmp ecx , num ja hexvar jmp qword ptr [ rcx * num + hexvar ] mov rax , qword ptr [ rbx + num ] mov rbx , qword ptr [ rax + hexvar ] add rbx , num mov rax , rbx pop rbx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , num mov dword ptr [ ebp - num ] , eax mov eax , ecx cdq mov ecx , num idiv ecx shl eax , num add esp , num pop ebp ret
push { r4 , r5 , r6 , lr } mov r4 , r1 mov r1 , r2 bl hexvar subs r5 , r0 , num beq hexvar mov r1 , r4 bl hexvar mov r4 , r0 bl hexvar mov r6 , r0 mov r0 , r5 ldr r5 , [ r6 ] bl hexvar cmp r0 , num bne hexvar mov r0 , r4 pop { r4 , r5 , r6 , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , hexvar mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] sub esi , dword ptr [ ebp + hexvar ] add esi , num add esi , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esi mov dword ptr [ ebp - hexvar ] , edx cdq mov esi , num idiv esi mov esi , dword ptr [ ebp - hexvar ] sub esi , edx add esi , num sub esi , num mov eax , esi mov dword ptr [ ebp - hexvar ] , ecx add esp , hexvar pop esi pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } sub sp , sp , hexvar mov r5 , r0 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r4 , [ r0 , hexvar ] ldr r6 , [ r4 , hexvar ] add r2 , sp , num mov r1 , r4 bl hexvar mov r3 , num str r3 , [ sp ] mov r2 , num mov r3 , num mov r0 , r5 bl hexvar cmp r0 , num movne r0 , num beq hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi ] mov rdi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdi ] sub rsi , rdi sete al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] xor ecx , ecx mov al , cl mov qword ptr [ rbp - hexvar ] , rsi mov byte ptr [ rbp - hexvar ] , al jmp rdi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + num ] sub rax , rcx sete dl mov rcx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov byte ptr [ rbp - hexvar ] , dl jmp rcx mov al , byte ptr [ rbp - hexvar ] xor ecx , ecx test al , num mov edx , num cmovne ecx , edx cmp ecx , num setne al and al , num movzx eax , al pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu a0 , zero , hexvar addiu a2 , zero , hexvar lw gp , hexvar ( sp ) move a1 , zero move a0 , v0 lw t9 , - hexvar ( gp ) jalr t9 move s0 , v0 lui a0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu a0 , a0 , - hexvar addiu a0 , zero , num lw v1 , num ( s1 )
cmp r0 , hexvar bls hexvar cmp r0 , hexvar bls hexvar cmp r0 , hexvar bls hexvar cmp r0 , hexvar bls hexvar ldr r3 , [ pc , hexvar ] cmp r0 , r3 bls hexvar add r3 , r3 , hexvar cmp r0 , r3 bls hexvar ldr r3 , [ pc , hexvar ] cmp r0 , r3 bls hexvar ldr r3 , [ pc , hexvar ] cmp r0 , r3 bls hexvar ldr r3 , [ pc , hexvar ] cmp r0 , r3 bls hexvar ldr r3 , [ pc , hexvar ] cmp r0 , r3 bls hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] cmp r0 , r3 movhi r3 , r2 ldr r2 , [ pc , hexvar ] mov r0 , r3 str r3 , [ r2 ] bx lr mov r3 , hexvar b hexvar mov r3 , hexvar b hexvar mov r3 , hexvar b hexvar mov r3 , hexvar b hexvar ldr r3 , [ pc , hexvar ] b hexvar strdeq r0 , r1 , [ r0 ] , -sp strdeq r0 , r1 , [ r0 ] , -r7 strdeq r0 , r1 , [ r0 ] , - fp strdeq r1 , r2 , [ r0 ] , -pc strdeq r3 , r4 , [ r0 ] , -sp andeq r7 , r0 , sp , ror num andeq r0 , r1 , r1 andeq ip , pc , r0 , asr num
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov eax , dword ptr [ rip + hexvar ] test eax , eax jns hexvar mov edi , num call hexvar mov dword ptr [ rip + hexvar ] , eax mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar lea rax , [ rip - hexvar ] jmp hexvar lea rax , [ rip - hexvar ] mov rdx , qword ptr [ rbp - num ] mov rdi , rdx call rax nop leave ret
push r14 push rbx push rax mov r14 , rsi mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi jne hexvar call hexvar mov rdi , rax mov qword ptr [ rbx + hexvar ] , rax test rax , rax je hexvar mov rsi , r14 call hexvar mov ecx , eax mov eax , num test ecx , ecx je hexvar add rsp , num pop rbx pop r14 ret
push { fp , lr } add fp , sp , num sub sp , sp , num str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num bge hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 , hexvar ] cmn r3 , hexvar beq hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar ldr r0 , [ fp , - hexvar ] bl hexvar ldr r3 , [ pc , hexvar ] ldr r0 , [ r3 , hexvar ] mov r3 , hexvar ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - num ] bl hexvar mov r3 , r0 mov r0 , r3 sub sp , fp , num pop { fp , pc }
push { r4 , r5 , r6 , lr } ldr r4 , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] sub sp , sp , hexvar ldr ip , [ r4 ] str r3 , [ sp ] mov r6 , r1 add r3 , sp , num mov r2 , hexvar mov r1 , num str ip , [ sp , hexvar ] mov r5 , r0 bl hexvar cmp r0 , num bhi hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] ldr r0 , [ sp , num ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , pc }
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ] mov esi , dword ptr [ rbp - hexvar ] mov edi , esi shl rdi , num add rdx , rdi cmp dword ptr [ rdx + num ] , num jne hexvar xorps xmm0 , xmm0 movss dword ptr [ rbp - num ] , xmm0 jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx shl rsi , num add rcx , rsi mov rcx , qword ptr [ rcx + num ] movss xmm0 , dword ptr [ rax + rcx * num ] movss dword ptr [ rbp - num ] , xmm0 movss xmm0 , dword ptr [ rbp - num ] pop rbp ret
sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rdi mov qword ptr [ rsp + num ] , rsi mov qword ptr [ rsp ] , rdx cmp qword ptr [ rsp + hexvar ] , num jne hexvar movabs rdi , num movabs rsi , num mov edx , hexvar call hexvar jmp hexvar jmp hexvar cmp qword ptr [ rsp + num ] , num jne hexvar movabs rdi , num movabs rsi , num mov edx , hexvar call hexvar jmp hexvar jmp hexvar cmp qword ptr [ rsp ] , num jne hexvar movabs rdi , num movabs rsi , num mov edx , hexvar call hexvar jmp hexvar mov rdi , qword ptr [ rsp + hexvar ] mov rsi , qword ptr [ rsp + num ] mov rax , qword ptr [ rsp ] add rax , num mov rcx , qword ptr [ rsp ] mov ecx , dword ptr [ rcx + num ] mov rdx , rax call hexvar xor eax , eax add rsp , hexvar ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r7 , [ pc , hexvar ] mov r5 , r0 ldrb r0 , [ r0 ] ldr r3 , [ r7 ] sub sp , sp , num cmp r0 , num str r3 , [ sp , num ] beq hexvar mov r8 , r5 mov r4 , r5 b hexvar ldrb r3 , [ r4 ] mov r4 , r6 strb r3 , [ r5 , - num ] ldrb r0 , [ r4 ] cmp r0 , num beq hexvar cmp r0 , hexvar add r5 , r5 , num add r6 , r4 , num bne hexvar mov r2 , sp mov r1 , num mov r0 , r6 bl hexvar cmp r0 , num bne hexvar ldr r3 , [ sp ] add r4 , r4 , num strb r3 , [ r5 , - num ] ldrb r0 , [ r4 ] cmp r0 , num bne hexvar sub r0 , r5 , r8 mov r3 , num strb r3 , [ r5 ] ldr r2 , [ sp , num ] ldr r3 , [ r7 ] cmp r2 , r3 bne hexvar add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , pc } blne hexvar andeq r0 , r0 , r0
beqz a0 , hexvar lui gp , hexvar addiu sp , sp , - hexvar sw s1 , hexvar ( sp ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw s1 , ( a0 )
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] str r3 , [ sp ] ldr r3 , [ sp , num ] cmp r3 , num bne hexvar ldr r3 , [ sp ] ldr r3 , [ r3 ] ldr r3 , [ r3 , num ] str r3 , [ sp , num ] ldr r3 , [ sp ] ldr r3 , [ r3 ] ldr r3 , [ r3 ] and r3 , r3 , hexvar mov r2 , r3 ldr r1 , [ sp , num ] mov r0 , num bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 ] ldr r2 , [ r3 , num ] ldr r3 , [ sp , hexvar ] str r2 , [ r3 , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] orr r2 , r3 , num ldr r3 , [ sp , hexvar ] str r2 , [ r3 ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , num b hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc } andeq r0 , r0 , r4 andeq r0 , r0 , r0
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar ldr ip , [ sp , hexvar ] ldr lr , [ sp , hexvar ] adds ip , ip , num movne ip , num cmp lr , num moveq ip , num cmp ip , num movne sl , num ldr r8 , [ pc , hexvar ] mov r4 , r0 ldr ip , [ r8 ] mov r6 , r1 mov r5 , r2 mov fp , r3 str ip , [ sp , hexvar ] strne sl , [ sp , hexvar ] beq hexvar cmp r5 , num bne hexvar mov sb , r5 mov r7 , r5 add r6 , sp , hexvar strb r5 , [ r6 , - hexvar ] ! mov r0 , r6 bl hexvar cmp fp , num moveq r3 , hexvar movne r3 , hexvar ldr r2 , [ sp , hexvar ] mov r1 , num add r0 , r6 , r0 str r2 , [ sp , num ] str r3 , [ sp ] mvn r2 , num ldr r3 , [ pc , hexvar ] bl hexvar mov r0 , hexvar bl hexvar mov r5 , r0 mov r0 , r6 bl hexvar mov r6 , num ldr r3 , [ r4 , hexvar ] ldr r2 , [ sp , hexvar ] str r0 , [ r5 , num ] str r2 , [ r5 , hexvar ] str r3 , [ r5 ] str r5 , [ r4 , hexvar ] mov r0 , num str r7 , [ r5 , num ] str sb , [ r5 , hexvar ] str r6 , [ r5 , hexvar ] str r6 , [ r5 , hexvar ] str r6 , [ r5 , hexvar ] str r6 , [ r5 , hexvar ] bl hexvar ldr r3 , [ r4 , hexvar ] str r0 , [ r5 , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r2 , r6 strb r6 , [ r3 ] bne hexvar ldr r3 , [ sp , hexvar ] cmp r3 , num movne r3 , num moveq r0 , num movne r0 , r3 ldrne r2 , [ r4 , hexvar ] strne r3 , [ r2 , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r8 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ecx , hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , num jmp hexvar mov edx , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ ebp - hexvar ] add eax , edx movzx ebx , byte ptr [ ecx + eax - hexvar ] movzx eax , bl mov edx , num add dword ptr [ ebp - hexvar ] , eax adc dword ptr [ ebp - hexvar ] , edx add dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp + hexvar ] jb hexvar push num push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] push dword ptr [ ebp + num ] call hexvar add esp , hexvar nop mov ebx , dword ptr [ ebp - num ] leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) lui v0 , hexvar addiu a1 , v0 , hexvar lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) bnez v0 , hexvar nop lw v0 , hexvar ( fp ) lw a1 , hexvar ( fp ) move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) b hexvar nop lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push rbp push rbx push rax mov rbx , rdi mov eax , dword ptr [ rip ] test eax , eax jne hexvar mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al push rsp add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al rol dword ptr [ rip ] , cl rol dword ptr [ rip ] , cl add esp , dword ptr [ rdx + num ] lea eax , [ rax ] add byte ptr [ rax ] , al add byte ptr [ rdx + num ] , cl add byte ptr [ rdx + rdi * num ] , dh mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al rol dword ptr [ rip ] , cl rol dword ptr [ rip ] , cl and byte ptr [ rdx + num ] , ah lea eax , [ rax ] add byte ptr [ rax ] , al add byte ptr [ rdx + num ] , cl add byte ptr [ rdx * num + hexvar ] , dh add byte ptr [ rax ] , al mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al jb hexvar add byte ptr [ rax ] , al add byte ptr [ rax ] , al xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al and al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al test byte ptr [ rip ] , hexvar
push rax mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar mov esi , hexvar call hexvar mov qword ptr [ rip + hexvar ] , num mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rip + hexvar ] , num pop rax ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , edi mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ecx ] sub esp , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ecx ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - num ] pop esi pop edi pop ebp ret
mov esi , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ ebx + hexvar ] test esi , esi mov edi , dword ptr [ eax ] je hexvar lea esi , [ esi ] sub esp , num push edi push dword ptr [ esi ] call hexvar add esp , hexvar test eax , eax je hexvar mov esi , dword ptr [ esi + num ] test esi , esi jne hexvar sub esp , hexvar push hexvar call hexvar mov edx , dword ptr [ ebx + hexvar ] mov dword ptr [ eax ] , edi add esp , hexvar mov dword ptr [ eax + num ] , num mov dword ptr [ ebx + hexvar ] , eax mov dword ptr [ eax + num ] , edx jmp hexvar nop
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] push dword ptr [ esi + hexvar ] call hexvar mov edx , eax add esp , hexvar xor eax , eax cmp edx , hexvar jne hexvar mov eax , dword ptr [ esi + hexvar ] sub esp , num mov eax , dword ptr [ eax + num ] push num push dword ptr [ eax + num ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ ebx + hexvar ] push dword ptr [ eax + num ] call hexvar add esp , hexvar add esp , num pop ebx pop esi ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] add ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] jmp hexvar test eax , eax je hexvar call hexvar cmp dword ptr [ eax ] , hexvar jne hexvar test edi , edi js hexvar mov eax , hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp + num ] shr eax , hexvar movzx eax , al test eax , eax jne hexvar mov eax , dword ptr [ ebp + num ] cmp eax , dword ptr [ ebp - hexvar ] setge al movzx eax , al test eax , eax je hexvar call hexvar mov eax , dword ptr [ ebp + num ] mov edx , dword ptr [ ebx + eax * num - hexvar ] lea eax , [ ebx - hexvar ] add eax , edx sub esp , hexvar push eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax sub esp , hexvar push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar add eax , num mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp + hexvar ] , num setne al movzx eax , al test eax , eax je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp + hexvar ] seta al movzx eax , al test eax , eax je hexvar mov eax , dword ptr [ ebp + hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax mov edx , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ ebp - hexvar ] add eax , edx mov byte ptr [ eax ] , num sub esp , num push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] push dword ptr [ ebp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - num ] leave ret
str fp , [ sp , - num ] ! add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] ldr r3 , [ fp , - num ] cmp r3 , num beq hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 ] lsl r3 , r3 , num ldr r2 , [ fp , - num ] add r3 , r2 , r3 ldr r3 , [ r3 ] cmp r3 , num bne hexvar ldr r3 , [ fp , - hexvar ] mov r2 , num str r2 , [ r3 ] mov r3 , num b hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 ] lsl r3 , r3 , num ldr r2 , [ fp , - num ] add r3 , r2 , r3 ldr r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] str r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 ] add r2 , r3 , num ldr r3 , [ fp , - hexvar ] str r2 , [ r3 ] mov r3 , num mov r0 , r3 add sp , fp , num pop { fp } bx lr
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) beqz v0 , hexvar nop lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop move a1 , zero lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] mov r2 , hexvar ldr r1 , [ pc , hexvar ] ldr r0 , [ sp ] bl hexvar mov r2 , r0 ldr r3 , [ sp , num ] str r2 , [ r3 , num ] ldr r3 , [ sp , num ] ldr r3 , [ r3 , num ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , num ] ldr r2 , [ sp ] str r2 , [ r3 , num ] ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 ] mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu a3 , zero , hexvar sw s0 , hexvar ( sp ) lui s0 , hexvar sw s2 , hexvar ( sp ) move s2 , a1 sw s1 , hexvar ( sp ) addiu a2 , s0 , - hexvar sw gp , hexvar ( sp ) move s1 , a0 sw ra , hexvar ( sp ) addiu a0 , zero , num lw t9 , - hexvar ( gp ) jalr t9 addiu a1 , zero , hexvar lw a0 , ( s1 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rip + hexvar ] jmp rdx mov rax , qword ptr [ rbp - hexvar ] mov rcx , rax add rcx , - num mov qword ptr [ rbp - hexvar ] , rcx test rax , rax setne dl movzx esi , dl mov eax , esi mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] movzx edi , byte ptr [ rax ] call hexvar mov rsi , qword ptr [ rbp - num ] mov edi , eax call hexvar mov rsi , qword ptr [ rbp - hexvar ] add rsi , num mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rip + hexvar ] mov dword ptr [ rbp - hexvar ] , eax jmp rsi add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar cmp dword ptr [ num ] , num jne hexvar mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al movabs rdi , num mov dword ptr [ rip ] , num mov dword ptr [ rip ] , num add dword ptr [ rax ] , eax add byte ptr [ rax ] , al add byte ptr [ rax - hexvar ] , cl add byte ptr [ rax ] , al add byte ptr [ rax ] , al add byte ptr [ rax ] , al add byte ptr [ rax ] , al mov dword ptr [ rbp - num ] , eax call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov dword ptr [ esp + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ esp + num ] , eax jmp hexvar mov eax , dword ptr [ esp + num ] sub esp , num push num push dword ptr [ esp + hexvar ] push eax call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , dword ptr [ esp + num ] mov dword ptr [ esp + hexvar ] , eax jmp hexvar mov eax , dword ptr [ esp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ esp + num ] mov eax , dword ptr [ eax + hexvar ] test eax , eax jne hexvar mov eax , dword ptr [ esp + num ] sub esp , num push num push dword ptr [ esp + hexvar ] push eax call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , dword ptr [ esp + num ] mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , esp add esi , - hexvar mov esp , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edi mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ebx mov ecx , dword ptr [ ecx ] sub esp , hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edi , dword ptr [ edx + num ] sub esp , hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , hexvar call hexvar add esp , hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui a0 , hexvar addiu a0 , a0 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
lui v0 , hexvar lw a0 , hexvar ( v0 ) beqz a0 , hexvar lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw ra , hexvar ( sp ) addiu v0 , v0 , hexvar jr ra addiu sp , sp , hexvar jr ra addiu v0 , zero , hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar nop leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) lw a3 , hexvar ( sp ) lw a2 , hexvar ( sp ) lui v0 , hexvar addiu a1 , v0 , - hexvar lw a0 , - hexvar ( gp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax lea eax , [ ebp - hexvar ] push eax push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar test al , al je hexvar sub esp , hexvar lea eax , [ ebp - hexvar ] push eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] sub esp , num push eax push dword ptr [ ebp - hexvar ] lea eax , [ ebp - hexvar ] push eax call hexvar add esp , hexvar test al , al je hexvar mov eax , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov eax , num jmp hexvar mov eax , num mov ecx , dword ptr [ ebp - hexvar ] xor ecx , dword ptr gs : [ hexvar ] je hexvar call hexvar mov ebx , dword ptr [ ebp - num ] leave ret
sub esp , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov byte ptr [ esp + hexvar ] , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] lea eax , [ esp + hexvar ] push eax push - num push num push num mov edx , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar ret
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] push esi call hexvar add esp , hexvar push eax push esi push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx pop esi ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r6 , r0 mov r4 , r1 bl hexvar subs r7 , r0 , num bne hexvar ldr r5 , [ r6 , hexvar ] cmp r4 , num rsblt r4 , r4 , num blt hexvar asr r7 , r4 , num add r7 , r7 , num cmp r4 , hexvar andle r4 , r4 , hexvar mov r8 , r4 sub r3 , r4 , num cmp r4 , num cmpne r3 , num bhi hexvar ldr r1 , [ r5 , hexvar ] cmp r1 , num beq hexvar ldr r3 , [ r5 , hexvar ] cmp r4 , r3 beq hexvar ldr r3 , [ r6 , hexvar ] ldr r0 , [ r6 , hexvar ] blx r3 mov r3 , num str r3 , [ r5 , hexvar ] str r7 , [ r5 , hexvar ] str r8 , [ r5 , hexvar ] mov r0 , r6 bl hexvar pop { r4 , r5 , r6 , r7 , r8 , pc }
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov edi , num call hexvar mov ebx , eax cmp eax , - num jne hexvar mov edi , num call hexvar mov ebx , eax cmp eax , - num je hexvar lea rax , [ rsp + hexvar ] mov qword ptr [ rsp ] , rax mov esi , num mov edx , num mov r8d , num mov edi , ebx mov ecx , hexvar xor r9d , r9d call hexvar mov ebp , eax test eax , eax jne hexvar lea r15 , [ rsp + hexvar ] mov edi , num mov esi , hexvar mov ecx , hexvar mov r8d , num mov rdx , r15 xor r9d , r9d call hexvar test eax , eax je hexvar lea rdi , [ rsp + hexvar ] call hexvar mov ebp , num jmp hexvar mov ebp , num jmp hexvar lea rsi , [ rsp + hexvar ] lea rcx , [ rsp + hexvar ] mov edi , num mov edx , hexvar call hexvar mov ebp , eax test eax , eax je hexvar lea rdi , [ rsp + hexvar ] call hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbx mov rcx , rdi cmp ecx , hexvar ja hexvar mov ebx , hexvar mov eax , ecx jmp qword ptr [ rax * num + hexvar ] mov ebx , hexvar mov rax , rbx pop rbx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 move s2 , a1 move s3 , a2 addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) beqz s2 , hexvar move s0 , v0 move a0 , s2 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) beqz s1 , hexvar sw v0 , num ( s0 )
sub esp , num push num lea eax , [ ebx - hexvar ] push eax push num call hexvar add esp , hexvar sub esp , num push eax lea eax , [ ebx - hexvar ] push eax push num call hexvar add esp , hexvar cmp dword ptr [ esp + hexvar ] , num jne hexvar sub esp , num push num push esi mov eax , dword ptr [ esp + hexvar ] call dword ptr [ eax ] mov esi , eax add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] cmp eax , num ja hexvar mov ecx , ebx add ecx , dword ptr [ ebx + eax * num - hexvar ] jmp ecx
push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r0 mov r7 , r2 ldr r3 , [ r0 , num ] ldr r6 , [ r3 , hexvar ] ldr r3 , [ r1 , hexvar ] ldr r0 , [ r1 , hexvar ] add r2 , r0 , num str r2 , [ r1 , hexvar ] ldr r2 , [ r6 , hexvar ] ldrb r2 , [ r2 , num ] mla r4 , r2 , r0 , r3 add r2 , r4 , r2 ldr r1 , [ r1 , hexvar ] add r3 , r3 , r1 cmp r2 , r3 bhi hexvar ldr r3 , [ r6 , hexvar ] ldr r3 , [ r3 , hexvar ] mov r2 , r4 mov r1 , r7 mov r0 , r5 blx r3 pop { r4 , r5 , r6 , r7 , r8 , pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) move s0 , a2 sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) beqz a3 , hexvar sw gp , hexvar ( sp ) addiu t0 , zero , num bne a3 , t0 , hexvar lw ra , hexvar ( sp ) lw v0 , hexvar ( a2 )
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ ebp + num ] movsx ecx , byte ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov byte ptr [ ebp - num ] , al call hexvar test al , num mov al , num mov byte ptr [ ebp - num ] , al jne hexvar movsx eax , byte ptr [ ebp + num ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar cmp eax , num setne dl mov byte ptr [ ebp - num ] , dl mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
addiu sp , sp , - num sw fp , num ( sp ) move fp , sp sw a0 , num ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 ) beqz v0 , hexvar nop lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 ) lw v1 , hexvar ( v0 )
push { r4 , r5 , lr } ldr r5 , [ pc , hexvar ] ldrb r4 , [ r0 ] ldr r3 , [ r5 ] sub sp , sp , hexvar cmp r4 , num str r3 , [ sp , num ] beq hexvar cmp r4 , hexvar bne hexvar ldrb r3 , [ r0 , num ] cmp r3 , hexvar bne hexvar mov ip , r0 mov r4 , num b hexvar cmp lr , hexvar bne hexvar add ip , ip , num ldrb lr , [ ip , num ] cmp lr , hexvar bne hexvar ldrb lr , [ ip , num ] add r4 , r4 , num cmp lr , num bne hexvar mov r0 , r4 bl hexvar ldr r2 , [ sp , num ] ldr r3 , [ r5 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , pc }
addiu sp , sp , - hexvar lui gp , hexvar addiu v0 , zero , - num sw s3 , hexvar ( sp ) lui s3 , hexvar sw s2 , hexvar ( sp ) move s2 , a0 addiu gp , gp , - hexvar sw s1 , hexvar ( sp ) sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw v0 , ( s2 )
push { r4 , r5 , r6 , r7 , lr } sub sp , sp , hexvar cmp r0 , num beq hexvar sub r3 , r1 , num ldr r2 , [ r0 , num ] cmp r3 , r2 blo hexvar cmp r1 , num bne hexvar ldr r0 , [ pc , hexvar ] bl hexvar mov r4 , r0 mov r0 , r4 add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc }
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr sl , [ r1 , hexvar ] sub sp , sp , hexvar ldr r3 , [ sl , hexvar ] cmp r3 , num beq hexvar mov r0 , num add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push num call hexvar add esp , hexvar test eax , eax je hexvar sub esp , num push eax push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , num add esp , num pop ebx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s1 , hexvar ( sp ) lw s1 , - hexvar ( gp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a1 sw ra , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s1 ) lw s4 , hexvar ( sp ) lw s5 , hexvar ( sp ) sw v0 , hexvar ( sp ) beqz a2 , hexvar lw t9 , - hexvar ( gp ) move s6 , a0 lw a0 , hexvar ( a1 )
test rdi , rdi je hexvar push rbx mov rbx , rdi mov rdi , qword ptr [ rdi + num ] test rdi , rdi je hexvar call hexvar mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar call hexvar mov rdi , qword ptr [ rbx ] test rdi , rdi je hexvar call hexvar mov rdi , rbx pop rbx jmp hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , num je hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , rcx xor edx , edx div qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] cmp rcx , rax je hexvar call hexvar mov dword ptr [ rax ] , hexvar mov dword ptr [ rbp - num ] , num jmp hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , esp add eax , - hexvar mov esp , eax mov byte ptr [ ebp - num ] , num sub esp , hexvar lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , hexvar mov dword ptr [ ebp - num ] , eax call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] cmp dword ptr [ eax ] , num jl hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar cmp eax , num setne dl mov byte ptr [ ebp - num ] , dl mov al , byte ptr [ ebp - num ] and al , num mov byte ptr [ ebp - num ] , al mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov al , byte ptr [ ebp - num ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al mov esp , ebp pop ebp ret
push rbp push r15 push r14 push r12 push rbx mov r14 , r8 mov r15d , ecx mov r12d , edx mov ebp , esi mov ebx , edi cmp qword ptr [ rip + hexvar ] , num jne hexvar mov edi , hexvar call hexvar mov qword ptr [ rip + hexvar ] , rax mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov dword ptr [ rax ] , ebx mov dword ptr [ rax + num ] , ebp mov dword ptr [ rax + num ] , r12d mov dword ptr [ rax + hexvar ] , r15d mov qword ptr [ rax + hexvar ] , r14 mov rdi , qword ptr [ rip + hexvar ] mov rsi , rax call hexvar mov eax , num jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rbx pop r12 pop r14 pop r15 pop rbp ret
sub rsp , hexvar mov rcx , rsi mov rdx , rdi xorps xmm0 , xmm0 movups xmmword ptr [ rsp + num ] , xmm0 mov dword ptr [ rsp ] , num mov edi , hexvar mov esi , hexvar xor r8d , r8d xor r9d , r9d call hexvar add rsp , hexvar ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dl , al mov byte ptr [ esp + hexvar ] , dl add esp , hexvar ret
push { r4 , r5 , r6 , r7 , r8 , sb , lr } mov r4 , r2 mov r5 , r3 sub sp , sp , hexvar ldr r7 , [ pc , hexvar ] sub sp , sp , hexvar orrs r3 , r4 , r5 add r2 , sp , hexvar ldr r3 , [ r7 ] add r2 , r2 , num str r3 , [ r2 ] add r3 , sp , hexvar add r3 , r3 , hexvar ldr sb , [ r3 ] movne r8 , r0 movne r6 , r1 bne hexvar b hexvar cmn r0 , num beq hexvar ldm sb , { ip , lr } mov r3 , num adds ip , ip , r0 adc lr , lr , r3 cmp r3 , r5 cmpeq r0 , r4 stm sb , { ip , lr } bhi hexvar subs r4 , r4 , r0 sbc r5 , r5 , r3 orrs r3 , r4 , r5 beq hexvar mov r2 , hexvar add r1 , sp , num mov r0 , r6 bl hexvar cmp r0 , num bne hexvar mvn r0 , num b hexvar subs r1 , r0 , r4 beq hexvar add r3 , sp , num add r0 , r3 , r4 bl hexvar mov r0 , num add r3 , sp , hexvar add r3 , r3 , num ldr r2 , [ r3 ] ldr r3 , [ r7 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc } vstmiagt fp , { s9 , s10 , s11 , s12 , s13 , s14 , s15 , s16 , s17 , s18 , s19 , s20 , s21 , s22 , s23 , s24 , s25 , s26 , s27 , s28 , s29 , s30 , s31 } andeq r0 , r0 , r0
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num cmp dword ptr [ esp ] , num je hexvar lea eax , [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + num ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num je hexvar cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , dword ptr [ esp + hexvar ] jmp hexvar mov eax , dword ptr [ esp + hexvar ] sub esp , num push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] sub esp , num lea edx , [ ebx - hexvar ] push edx push eax call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] je hexvar call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx ] mov dword ptr [ ebp - num ] , edx mov edx , dword ptr [ ebp - num ] mov esi , dword ptr [ ebp + hexvar ] add edx , dword ptr [ esi ] add edx , - num mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov cl , byte ptr [ eax ] mov dl , cl add dl , num mov byte ptr [ eax ] , dl movsx eax , cl cmp eax , hexvar jge hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax add ecx , - num mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ eax ] , hexvar mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] jae hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ eax ] mov edx , ecx add edx , - num mov dword ptr [ eax ] , edx mov byte ptr [ ecx - num ] , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax ] add ecx , num mov dword ptr [ eax ] , ecx add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov dword ptr [ rbp - num ] , esi mov eax , dword ptr [ rip + hexvar ] cmp eax , num jne hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar call hexvar jmp hexvar mov edx , dword ptr [ rbp - num ] mov eax , dword ptr [ rbp - num ] mov esi , edx mov edi , eax call hexvar nop leave ret
push ebx call hexvar add ebx , hexvar sub esp , num mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ edx + hexvar ] test eax , eax je hexvar lea eax , [ ebx - hexvar ] sub esp , num push num push num push eax lea eax , [ ebx - hexvar ] push edx push eax lea eax , [ ebx + hexvar ] push eax call hexvar add esp , hexvar add esp , num pop ebx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] test rdi , rdi setne al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num ] jmp rdi mov rax , qword ptr [ rip ] jmp rax movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov ecx , hexvar sub rax , rcx sete dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rip ] jmp rax movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] test ecx , ecx setne dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num ] jmp rax mov rax , qword ptr [ rbp - num ] add rax , num mov esi , num mov edx , num mov r8d , num xor ecx , ecx mov dil , cl mov ecx , hexvar mov r9d , hexvar mov byte ptr [ rbp - hexvar ] , dil mov edi , ecx mov rcx , r9 mov r9 , rax mov al , byte ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rip ] mov dword ptr [ rbp - hexvar ] , eax jmp rcx mov rdi , qword ptr [ rbp - num ] movabs rsi , num mov al , num call hexvar mov rsi , qword ptr [ rbp - num ] mov dword ptr [ rsi + hexvar ] , num mov rsi , qword ptr [ rbp - num ] mov dword ptr [ rsi + hexvar ] , num mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar xor eax , eax mov cl , al cmp dword ptr [ ebp - num ] , num mov byte ptr [ ebp - num ] , cl je hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - num ] , eax cmp eax , num mov cl , num mov byte ptr [ ebp - hexvar ] , cl jne hexvar test byte ptr [ hexvar ] , num mov al , num mov byte ptr [ ebp - hexvar ] , al jne hexvar mov al , byte ptr [ hexvar ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] xor al , hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] test al , num jne hexvar add esp , hexvar pop ebp ret
cmp r1 , num bxeq lr push { r4 , r5 , lr } mov r3 , num mov r5 , hexvar add ip , r0 , num sub lr , r1 , num ldrb r2 , [ r0 , r3 ] cmp r2 , num beq hexvar cmp r2 , hexvar bne hexvar cmp lr , r3 add r3 , r3 , num beq hexvar ldrb r2 , [ r0 , r3 ] cmp r2 , hexvar beq hexvar cmp r2 , hexvar strbeq r5 , [ ip , - num ] moveq r4 , ip beq hexvar mov r0 , num pop { r4 , r5 , pc }
mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar push rax call hexvar add eax , num add rsp , num ret
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ hexvar ] mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar call hexvar jmp hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar cmp eax , num setne cl mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar mov dword ptr [ esp ] , num call hexvar jmp hexvar add esp , hexvar pop ebp ret
push esi sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov dl , byte ptr [ esp + hexvar ] mov esi , esp mov dword ptr [ esi + num ] , eax mov dword ptr [ esi + num ] , ecx movzx eax , dl and eax , num mov dword ptr [ esi ] , eax call hexvar add esp , hexvar pop esi ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 movlo r3 , r2 movhs r3 , r3 mov r2 , r3 ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] cmp r3 , num bne hexvar ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 bhs hexvar mvn r3 , num str r3 , [ fp , - num ] b hexvar ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 bls hexvar mov r3 , num str r3 , [ fp , - num ] ldr r3 , [ fp , - num ] mov r0 , r3 sub sp , fp , num pop { fp , pc }
cmn r0 , num beq hexvar ldr r3 , [ pc , hexvar ] add r3 , r3 , hexvar ldr r2 , [ r3 , num ] cmp r2 , num beq hexvar cmp r2 , r0 bne hexvar ldr r3 , [ pc , hexvar ] str r0 , [ r3 ] bx lr mov r0 , num bx lr andeq r3 , ip , r0 , lsr num andeq r7 , sp , ip , ror num
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) move s4 , a1 sw s3 , hexvar ( sp ) move s3 , a0 sw s2 , hexvar ( sp ) move s2 , a3 sw s1 , hexvar ( sp ) move s1 , a2 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw s6 , hexvar ( sp ) lw v0 , ( s0 ) lw s5 , hexvar ( sp ) sw v0 , hexvar ( sp ) jalr t9 nop bgtz v0 , hexvar lw gp , hexvar ( sp ) beqz v0 , hexvar nop or v0 , v0 , v1 beqz v0 , hexvar lui a1 , hexvar lui v0 , hexvar addiu v1 , zero , num sw v1 , - hexvar ( v0 ) lw v1 , hexvar ( sp ) lw v0 , ( s0 ) bne v1 , v0 , hexvar lw ra , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar beqz v1 , hexvar or v0 , v0 , v1 lw t9 , - hexvar ( gp ) move a1 , s1 jalr t9 move a0 , s3 lw gp , hexvar ( sp ) beqz v0 , hexvar move s1 , v0 lui v0 , hexvar lw v0 , - hexvar ( v0 ) sltiu v1 , v0 , hexvar beqz v1 , hexvar addiu v1 , zero , num sllv v1 , v1 , v0 andi a0 , v1 , hexvar bnez a0 , hexvar addiu a1 , zero , num ext v1 , v1 , hexvar , num bnez v1 , hexvar lui v1 , hexvar lui v0 , hexvar addiu v1 , zero , num lw v0 , - hexvar ( v0 ) beq v0 , v1 , hexvar addiu v1 , zero , num beq v0 , v1 , hexvar lui v1 , hexvar lw t9 , - hexvar ( gp )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , ecx add edx , - hexvar sub edx , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jb hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , - hexvar sub eax , num mov dword ptr [ ebp - hexvar ] , eax jb hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , - hexvar sub eax , num mov dword ptr [ ebp - hexvar ] , eax ja hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push r15 push r14 mov r15d , edi push r13 push r12 mov r14 , rsi push rbp push rbx mov r13d , edx mov r12d , ecx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rbp , rsp nop dword ptr [ rax + rax ] mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar lea rsi , [ rip + hexvar ] xor edi , edi mov rdx , rbp call hexvar mov ebx , dword ptr [ rip + hexvar ] mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar sub eax , num mov dword ptr [ rip + hexvar ] , eax xor edx , edx mov rsi , rbp mov edi , num call hexvar test ebx , ebx jne hexvar cmp dword ptr [ rip + hexvar ] , num je hexvar call hexvar jmp hexvar nop dword ptr [ rax ] call hexvar cmp dword ptr [ rip + hexvar ] , num je hexvar call hexvar mov edi , ebx call hexvar jmp hexvar nop mov ecx , r12d mov edx , r13d mov rsi , r14 mov edi , r15d call hexvar test eax , eax mov ebx , eax jns hexvar call hexvar cmp dword ptr [ rax ] , num je hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov eax , ebx jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov qword ptr [ rsp ] , r9 mov r15 , r8 mov r12 , rcx mov r14 , rdx mov r13 , rsi mov rbp , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax mov esi , hexvar xor edx , edx mov rcx , r14 call hexvar mov rdi , rbp mov rsi , r13 mov rdx , rbx mov rcx , r12 mov r8 , r15 mov r9 , qword ptr [ rsp ] call hexvar mov rbp , rax mov rdi , rbx call hexvar mov rax , rbp jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar xor eax , eax add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push edi push esi push ebx mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov edi , dword ptr [ esi + num ] mov eax , dword ptr [ edi + num ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar add esp , hexvar sub esp , hexvar push edi call hexvar add esp , hexvar mov dword ptr [ esi + num ] , num xor eax , eax pop ebx pop esi pop edi ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov edi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea ecx , [ hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov bl , num and bl , num movzx eax , bl add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , esi shl edx , cl mov esi , dword ptr [ ebp + num ] mov edi , hexvar sub edi , dword ptr [ ebp + hexvar ] mov ecx , edi shr esi , cl or edx , esi mov dword ptr [ ebp - hexvar ] , eax mov eax , edx add esp , num pop esi pop edi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] mov r3 , num str r3 , [ sp ] mov r3 , num mov r2 , num ldr r1 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
mov eax , dword ptr [ rdi + hexvar ] mov r9d , dword ptr [ rsi + hexvar ] movups xmm0 , xmmword ptr [ rdi ] mov r8d , dword ptr [ rdi + hexvar ] mov rdx , qword ptr [ rsi ] mov qword ptr [ rdi ] , rdx mov edx , dword ptr [ rsi + num ] mov dword ptr [ rdi + num ] , edx mov edx , dword ptr [ rsi + hexvar ] mov dword ptr [ rdi + hexvar ] , edx mov edx , dword ptr [ rsi + hexvar ] mov dword ptr [ rdi + hexvar ] , edx movups xmmword ptr [ rsi ] , xmm0 mov dword ptr [ rsi + hexvar ] , r8d mov edx , eax and edx , num mov ecx , r9d and ecx , num or ecx , edx mov dword ptr [ rdi + hexvar ] , ecx and r9d , num and eax , num or eax , r9d mov dword ptr [ rsi + hexvar ] , eax ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] mov r3 , num str r3 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r1 , [ sp ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r3 , num b hexvar mov r0 , r0 b hexvar mov r0 , r0 b hexvar mov r0 , r0 ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
test rsi , rsi je hexvar push rbx mov rbx , rsi mov edx , num mov esi , hexvar call hexvar test rax , rax je hexvar mov qword ptr [ rax + hexvar ] , rbx pop rbx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sltiu v0 , v0 , hexvar bnez v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( sp ) lw v0 , ( v0 )
push rbp mov rbp , rsp mov eax , edi mov byte ptr [ rbp - num ] , al movzx eax , byte ptr [ rbp - num ] shr al , num movzx eax , al cdqe lea rdx , [ rax * num ] lea rax , [ rip + hexvar ] mov edx , dword ptr [ rdx + rax ] movzx eax , byte ptr [ rbp - num ] movzx eax , al and eax , hexvar mov ecx , eax shr edx , cl mov eax , edx and eax , num test eax , eax setne al pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rsi , qword ptr [ rbp - hexvar ] test byte ptr [ rsi ] , num je hexvar jmp hexvar jmp hexvar jmp hexvar cmp dword ptr [ rbp - hexvar ] , num jne hexvar mov rdi , qword ptr [ rbp - num ] call hexvar cmp eax , num je hexvar mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov qword ptr [ rbp - hexvar ] , rax mov dword ptr [ rbp - hexvar ] , edx mov rsi , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , rsi mov rcx , rdx mov rdx , rcx mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] lea rdx , [ rbp - hexvar ] lea rsi , [ rip - hexvar ] mov rdi , rax call hexvar nop leave ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , hexvar mov dword ptr [ ebp - num ] , eax call hexvar add esp , hexvar pop ebp ret
push esi push ebx xor eax , eax call hexvar add ebx , hexvar sub esp , num mov esi , dword ptr [ esp + hexvar ] test esi , esi je hexvar sub esp , hexvar push esi call hexvar mov dword ptr [ esp ] , eax call hexvar add esp , hexvar cmp eax , hexvar jne hexvar mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar mov ecx , dword ptr [ esi + hexvar ] test ecx , ecx je hexvar mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar mov edx , dword ptr [ esi + hexvar ] test edx , edx jne hexvar mov ebx , dword ptr [ esp + hexvar ] test ebx , ebx je hexvar mov ecx , dword ptr [ esp + hexvar ] mov dword ptr [ ecx ] , eax mov ecx , dword ptr [ esp + hexvar ] test ecx , ecx je hexvar mov eax , dword ptr [ esi + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ edx ] , eax mov edx , dword ptr [ esp + hexvar ] mov eax , num test edx , edx je hexvar mov edx , dword ptr [ esi + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov dword ptr [ ecx ] , edx jmp hexvar nop lea esi , [ esi ] lea eax , [ ebx - hexvar ] sub esp , hexvar push hexvar push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar xor eax , eax add esp , num pop ebx pop esi ret
push rax mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar xorps xmm0 , xmm0 movups xmmword ptr [ rax + hexvar ] , xmm0 movups xmmword ptr [ rax ] , xmm0 mov dword ptr [ rax + hexvar ] , num pop rcx ret
push { fp , lr } add fp , sp , num sub sp , sp , num str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] ldrb r3 , [ r3 , num ] cmp r3 , num bne hexvar ldr r3 , [ fp , - num ] ldrb r3 , [ r3 , num ] and r3 , r3 , num and r3 , r3 , hexvar cmp r3 , num bne hexvar ldr r3 , [ fp , - num ] ldr r3 , [ r3 ] mov r0 , r3 bl hexvar b hexvar ldr r3 , [ fp , - num ] ldrb r3 , [ r3 , num ] cmp r3 , num bne hexvar ldr r3 , [ fp , - num ] ldrb r3 , [ r3 , num ] and r3 , r3 , num and r3 , r3 , hexvar cmp r3 , num bne hexvar ldr r3 , [ fp , - num ] ldr r3 , [ r3 ] mov r0 , r3 bl hexvar mov r0 , r0 sub sp , fp , num pop { fp , pc }
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov rbx , rcx mov r14 , rdx mov r13 , rsi mov r15 , rdi mov rdi , rcx call hexvar mov rdi , rbx call hexvar xor r12d , r12d test rax , rax je hexvar mov rbp , rax mov rdi , rax mov rsi , r13 call hexvar test rax , rax je hexvar mov rdi , r15 mov rsi , rbp mov rdx , r14 call hexvar mov r12d , eax mov rdi , rbx call hexvar mov eax , r12d add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ hexvar ] movsx eax , byte ptr [ rdi ] cmp eax , hexvar jl hexvar mov rax , qword ptr [ hexvar ] movsx ecx , byte ptr [ rax ] cmp ecx , hexvar jg hexvar jmp hexvar xor eax , eax mov cl , al mov rdx , qword ptr [ hexvar ] movsx eax , byte ptr [ rdx ] cmp eax , hexvar mov byte ptr [ rbp - hexvar ] , cl jl hexvar mov rax , qword ptr [ hexvar ] movsx ecx , byte ptr [ rax ] cmp ecx , hexvar setle dl mov byte ptr [ rbp - hexvar ] , dl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ hexvar ] add rax , num mov qword ptr [ hexvar ] , rax jmp hexvar mov rax , qword ptr [ hexvar ] mov cl , byte ptr [ rax ] mov rax , qword ptr [ rbp - num ] mov byte ptr [ rax ] , cl mov rax , qword ptr [ hexvar ] mov byte ptr [ rax ] , num jmp hexvar lea rdi , [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - num ] mov byte ptr [ rdi ] , al mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
sub rsp , num test rdx , rdx lea rax , [ rip + hexvar ] cmove rdx , rax mov rcx , rdx mov rdx , rsi mov rsi , rdi mov edi , num call hexvar add rsp , num ret
push ebp push edi mov ebp , ecx push esi push ebx mov edi , edx call hexvar add ebx , hexvar sub esp , hexvar mov ecx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , edx xor edx , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , ecx push esi call hexvar add esp , hexvar cmp eax , hexvar jg hexvar lea eax , [ esp + hexvar ] call hexvar test eax , eax jne hexvar sub esp , num push num push dword ptr [ esp + hexvar ] push esi push ebp push edi push dword ptr [ esp + hexvar ] call dword ptr [ ebx + hexvar ] add esp , hexvar test eax , eax jne hexvar mov eax , dword ptr [ esp + hexvar ] call hexvar mov edx , eax mov eax , num test edx , edx je hexvar mov eax , hexvar mov ecx , hexvar mov edx , hexvar call hexvar xor eax , eax jmp hexvar lea esi , [ esi ] mov eax , hexvar mov ecx , hexvar mov edx , hexvar call hexvar mov eax , dword ptr [ esp + hexvar ] call hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push esi push ebp push edi push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov edi , dword ptr [ esp + hexvar ] xor edi , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp push rbx sub rsp , hexvar mov rsi , rdi mov rdi , rsp call hexvar test eax , eax je hexvar mov ebp , eax call hexvar test rax , rax je hexvar mov rbx , rax mov rsi , rsp mov rdi , rax mov edx , ebp call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar xor ebx , ebx mov rax , rbx add rsp , hexvar pop rbx pop rbp ret
push r14 push rbx push rax mov ebx , esi mov r14 , rdi mov rdi , qword ptr [ rip + hexvar ] call hexvar movsxd rdx , ebx mov edi , eax mov rsi , r14 add rsp , num pop rbx pop r14 jmp hexvar nop dword ptr [ rax ]
push ebp push edi push esi push ebx sub esp , hexvar mov edx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] movzx eax , byte ptr [ eax + hexvar ] and eax , hexvar cmp al , hexvar je hexvar mov ebp , dword ptr [ edx + hexvar ] mov ebx , dword ptr [ edx + hexvar ] mov eax , ebx or eax , ebp jne hexvar mov ebp , dword ptr [ edx + hexvar ] mov ebx , dword ptr [ edx + hexvar ] sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar cmp ebx , edi jb hexvar ja hexvar cmp ebp , esi jb hexvar mov edx , num add esi , eax adc edi , edx mov eax , num cmp edi , ebx jb hexvar ja hexvar cmp esi , ebp jbe hexvar mov eax , num jmp hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add eax , hexvar mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov ecx , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , ecx xor ecx , ecx sub esp , num push dword ptr [ ebp + hexvar ] push dword ptr [ ebp + hexvar ] push dword ptr [ ebp - hexvar ] mov ebx , eax call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , num jmp hexvar cmp dword ptr [ ebp + hexvar ] , num je hexvar sub esp , num lea eax , [ ebp - hexvar ] push eax push dword ptr [ ebp + hexvar ] push dword ptr [ ebp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] test eax , eax je hexvar mov eax , num jmp hexvar mov eax , dword ptr [ ebp + hexvar ] cmp eax , num je hexvar cmp eax , num jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ eax + hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ eax + hexvar ] , num nop mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , hexvar push dword ptr [ ebp - hexvar ] call eax add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] xor ecx , dword ptr gs : [ hexvar ] je hexvar call hexvar mov ebx , dword ptr [ ebp - num ] leave ret
push ebp mov ebp , esp sub esp , hexvar mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ hexvar ] mov eax , hexvar mov ecx , hexvar cmovb ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + ecx * num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov dword ptr [ hexvar ] , num mov byte ptr [ hexvar ] , num mov byte ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ ebp - hexvar ] add ecx , num mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx lea edx , [ hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ esp ] , hexvar lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov dword ptr [ esp ] , num lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov dword ptr [ esp ] , num lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov dword ptr [ esp ] , num lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov dword ptr [ esp ] , hexvar lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
push r12 push rbp mov r12 , rdi push rbx mov rbp , qword ptr [ rip + hexvar ] mov rbx , qword ptr [ rip + hexvar ] cmp rbp , rbx jne hexvar jmp hexvar nop dword ptr [ rax ] cmp rbp , rbx je hexvar mov rsi , qword ptr [ rbx + num ] mov rdi , r12 call qword ptr [ rbx ] test al , num mov rbx , qword ptr [ rbx + hexvar ] jne hexvar cmp eax , num mov edx , num je hexvar test al , hexvar jne hexvar mov rbp , qword ptr [ rip + hexvar ] test rbp , rbp mov rbx , rbp jne hexvar jmp hexvar nop dword ptr [ rax ] test al , num je hexvar mov rsi , qword ptr [ rbx + num ] mov rdi , r12 call qword ptr [ rbx ] mov rbx , qword ptr [ rbx + hexvar ] test rbx , rbx jne hexvar cmp eax , num mov edx , eax je hexvar pop rbx mov eax , edx pop rbp pop r12 ret
mov eax , dword ptr [ rip ] test eax , eax jne hexvar mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al push rsp add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al jno hexvar add byte ptr [ rax ] , al add byte ptr [ rax ] , al xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al pop rbp add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al mov cl , num add byte ptr [ rax ] , al add byte ptr [ rax ] , al xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al mov edi , num add byte ptr [ rsi * num + hexvar ] , dh add byte ptr [ rax ] , al mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al and al , hexvar mov ebp , esp push r14 push rbx mov dword ptr [ rip ] , num mov dword ptr [ rip ] , num add dword ptr [ rax ] , eax add byte ptr [ rax ] , al add esi , - hexvar mov rsp , r14 mov rbx , rsp add rbx , - hexvar mov rsp , rbx mov rdi , rbx call hexvar mov esi , num mov edx , num mov rdi , rbx call hexvar mov rdi , rbx mov rsi , r14 call hexvar mov esi , hexvar mov edx , num mov ecx , hexvar mov r8d , num mov rdi , r14 xor r9d , r9d call hexvar mov ecx , eax mov eax , num test ecx , ecx jne hexvar mov rdi , rbx call hexvar mov esi , num mov edx , hexvar mov rdi , rbx call hexvar mov rdi , rbx mov rsi , r14 call hexvar mov esi , hexvar mov edx , num mov ecx , hexvar mov r8d , num mov rdi , r14 mov r9d , num call hexvar xor ecx , ecx test eax , eax setne cl lea eax , [ rcx + rcx * num ] lea rsp , [ rbp - hexvar ] pop rbx pop r14 pop rbp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rbp - hexvar ] cmp qword ptr [ rsi + rdi * num ] , num je hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] sub qword ptr [ rax ] , num lea rax , [ rax + num ] jb hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + rcx * num ] , num jne hexvar jmp hexvar jmp hexvar jmp hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , rax add rcx , num mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] add rax , - num mov qword ptr [ rbp - hexvar ] , rax cmp rax , num jne hexvar jmp hexvar jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + rcx * num ] , num jmp hexvar mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + rcx * num ] , num jmp hexvar pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v1 , hexvar ( a0 )
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s4 , hexvar ( sp ) lw s4 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a0 sw gp , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s2 , hexvar ( sp ) lw v0 , ( s4 ) lw s6 , num ( a0 )
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push rbx mov esi , hexvar mov rbx , rdi mov edx , num xor edi , edi call hexvar mov rsi , rbx mov rdi , rax call hexvar nop dword ptr [ rax + rax ]
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) beqz a1 , hexvar lw s1 , hexvar ( a0 )
push esi push ebx call hexvar add ebx , hexvar sub esp , num mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar add esp , hexvar mov eax , dword ptr [ esi + num ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar add esp , hexvar sub esp , hexvar push esi call hexvar add esp , hexvar pop ebx pop esi ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] lea edi , [ ebx - hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax push edi call hexvar add esp , hexvar test eax , eax je hexvar test ebp , ebp mov esi , eax mov eax , hexvar cmovle ebp , eax sub esp , num push ebp push dword ptr [ esi + num ] call hexvar add esp , hexvar test eax , eax je hexvar mov edx , dword ptr [ esp + hexvar ] mov eax , num test edx , edx cmovne eax , dword ptr [ esp + hexvar ] sub esp , num mov dword ptr [ esp + hexvar ] , eax push dword ptr [ esp + hexvar ] push num push dword ptr [ esi ] call hexvar add esp , hexvar test eax , eax jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar sub esp , num push edi push esi call hexvar add esp , hexvar mov edx , dword ptr [ esp + hexvar ] xor esi , esi test edx , edx je hexvar sub esp , hexvar push edx call hexvar add esp , hexvar mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] mov eax , esi jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
mov rax , rdx test esi , esi jne hexvar ret sub rsp , num mov ecx , esi mov rsi , rdi mov edi , ecx call hexvar add rsp , num ret
push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbx , rsi mov r14 , rcx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax test rdx , rdx je hexvar mov r12 , rdi mov rbp , rdx mov rdi , qword ptr [ rsi + hexvar ] mov r8d , num mov ecx , num mov edx , num mov rsi , rbp call hexvar mov r13 , rax test rax , rax je hexvar movzx eax , byte ptr [ rax + hexvar ] sub eax , num cmp al , num jbe hexvar cmp qword ptr [ rbx + hexvar ] , num je hexvar movzx edx , byte ptr [ r13 + hexvar ] sub edx , num mov eax , num cmp dl , num jbe hexvar mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
addiu sp , sp , - hexvar lui gp , hexvar sw s6 , hexvar ( sp ) lui s6 , hexvar sw s5 , hexvar ( sp ) lui s5 , hexvar addiu gp , gp , hexvar sw s7 , hexvar ( sp ) sw s0 , hexvar ( sp ) addiu s6 , s6 , - hexvar move s0 , zero sw s4 , hexvar ( sp ) addiu s5 , s5 , hexvar sw s3 , hexvar ( sp ) lui s7 , hexvar sw s1 , hexvar ( sp ) sw ra , hexvar ( sp ) move s3 , a1 sw s2 , hexvar ( sp ) move s1 , a2 sw gp , hexvar ( sp ) move s4 , a3 lw t9 , - hexvar ( gp ) jalr t9 move a0 , s3 move a1 , s0 lw gp , hexvar ( sp ) slt v0 , s0 , v0 move a0 , s3 addiu s0 , s0 , num beqz v0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop move a2 , s4 lw gp , hexvar ( sp ) move a3 , s6 move a1 , s5 move a0 , s1 lw t9 , - hexvar ( gp ) jalr t9 move s2 , v0 move a0 , s1 lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw a1 , ( s2 )
push { fp , lr } umull fp , ip , r0 , r1 adds r3 , ip , num movne r3 , num cmp fp , num blt hexvar cmp r3 , num bne hexvar bl hexvar cmp r0 , num popne { fp , pc }
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r6 , num mov ip , num sub sp , sp , hexvar ldrb fp , [ sp , hexvar ] ldr r5 , [ pc , hexvar ] ldr r8 , [ pc , hexvar ] ldr r7 , [ pc , hexvar ] cmp fp , r6 ldr lr , [ r5 ] ldr r4 , [ pc , hexvar ] mov sb , r2 mov sl , r3 movne r2 , r8 moveq r2 , r7 str r6 , [ sp ] ldr r3 , [ pc , hexvar ] ldr r7 , [ r4 ] str lr , [ sp , hexvar ] ldr fp , [ sp , hexvar ] str ip , [ r4 ] ldr r8 , [ sp , hexvar ] bl hexvar cmn r0 , num beq hexvar cmp r0 , hexvar beq hexvar cmp r0 , hexvar bne hexvar ldr r3 , [ pc , hexvar ] add ip , sp , hexvar ldr r0 , [ r3 ] mov r2 , sl mov r3 , fp mov r1 , sb str ip , [ sp ] str ip , [ sp , num ] bl hexvar mov r0 , r6 bl hexvar ldr r3 , [ pc , hexvar ] ldr r0 , [ r3 ] blx r8 ldr r2 , [ sp , hexvar ] ldr r3 , [ r5 ] str r7 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax jmp hexvar cmp dword ptr [ rbp - hexvar ] , hexvar jne hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , hexvar je hexvar mov rdx , qword ptr [ rbp - num ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rdx mov edi , eax call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov byte ptr [ rip + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar jmp hexvar cmp dword ptr [ rbp - hexvar ] , - num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , hexvar jne hexvar nop leave ret
push rbp push rbx mov rbp , rdi sub rsp , num cmp qword ptr [ rip + hexvar ] , num je hexvar mov rbx , qword ptr [ rip + hexvar ] movsxd rax , dword ptr [ rbx + num ] cmp eax , hexvar lea edx , [ rax + num ] jg hexvar mov dword ptr [ rbx + num ] , edx mov qword ptr [ rbx + rax * num + hexvar ] , rbp xor eax , eax add rsp , num pop rbx pop rbp ret
push { r4 , r5 , r6 , lr } mov r5 , r0 ldr r6 , [ pc , hexvar ] ldr r4 , [ pc , hexvar ] ldr r3 , [ r4 , hexvar ] mov r1 , r5 mov r0 , r4 blx r3 cmp r0 , num bne hexvar ldr r4 , [ r4 , hexvar ] cmp r4 , num bne hexvar ldr r3 , [ r6 , num ] ! cmp r3 , num movne r4 , r3 bne hexvar mov r0 , r4 pop { r4 , r5 , r6 , pc }
movzx edx , byte ptr [ rdi ] shl rdx , num movzx eax , byte ptr [ rdi + num ] or rax , rdx shl rax , num mov rdx , rax movzx eax , byte ptr [ rdi + num ] or rax , rdx shl rax , num movzx edx , byte ptr [ rdi + num ] or rdx , rax mov rax , rdx shl rax , num movzx edx , byte ptr [ rdi + num ] or rdx , rax shl rdx , num movzx eax , byte ptr [ rdi + num ] or rax , rdx shl rax , num mov rdx , rax movzx eax , byte ptr [ rdi + num ] or rax , rdx shl rax , num movzx edx , byte ptr [ rdi + num ] or rax , rdx ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rdi , hexvar call hexvar mov dword ptr [ rbp - num ] , eax movabs rdi , hexvar call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
test eax , eax je hexvar lea eax , [ ebx - hexvar ] push eax lea eax , [ ebx - hexvar ] push hexvar push eax lea eax , [ ebx - hexvar ] push eax call hexvar lea eax , [ ebx - hexvar ] push eax lea eax , [ ebx - hexvar ] push hexvar push eax lea eax , [ ebx - hexvar ] push eax call hexvar lea esi , [ esi ] lea edi , [ edi ]
ldr ip , [ r0 , num ] push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr lr , [ ip , num ] cmp lr , num beq hexvar mov r4 , num mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] test edx , edx setne bl movzx edx , bl mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jmp edx mov eax , dword ptr [ ebp + num ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp + num ] test eax , eax setne bl movzx eax , bl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp + hexvar ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebx pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov qword ptr [ rsp ] , r9 mov r15 , r8 mov r12 , rcx mov r14 , rdx mov r13 , rsi mov rbp , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax mov esi , hexvar xor edx , edx mov rcx , r14 call hexvar sub rsp , num mov rdi , rbp mov rsi , r13 mov rdx , rbx mov rcx , r12 mov r8 , r15 mov r9 , qword ptr [ rsp + num ] push qword ptr [ rsp + hexvar ] push qword ptr [ rsp + hexvar ] mov eax , dword ptr [ rsp + hexvar ] push rax call hexvar add rsp , hexvar mov ebp , eax mov rdi , rbx call hexvar mov eax , ebp jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar xor eax , eax add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp push rbx push rax mov rax , rsi mov rbx , qword ptr [ rdi + hexvar ] mov esi , dword ptr [ rdi + hexvar ] shl esi , num mov rdi , rax mov rdx , rbx test ecx , ecx je hexvar call hexvar jmp hexvar call hexvar mov ebp , eax lea rdi , [ rbx + hexvar ] call hexvar movups xmm0 , xmmword ptr [ rbx + hexvar ] movups xmm1 , xmmword ptr [ rbx + hexvar ] movups xmm2 , xmmword ptr [ rbx + hexvar ] movups xmm3 , xmmword ptr [ rbx + hexvar ] movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm1 movups xmmword ptr [ rbx + hexvar ] , xmm2 movups xmmword ptr [ rbx + hexvar ] , xmm3 movups xmm4 , xmmword ptr [ rbx + hexvar ] movups xmmword ptr [ rbx + hexvar ] , xmm4 movups xmm5 , xmmword ptr [ rbx + hexvar ] movups xmmword ptr [ rbx + hexvar ] , xmm5 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm1 movups xmmword ptr [ rbx + hexvar ] , xmm2 movups xmmword ptr [ rbx + hexvar ] , xmm3 movups xmmword ptr [ rbx + hexvar ] , xmm4 movups xmmword ptr [ rbx + hexvar ] , xmm5 mov qword ptr [ rbx + hexvar ] , - num not ebp shr ebp , hexvar mov eax , ebp add rsp , num pop rbx pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) beqz a2 , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lbu v0 , - hexvar ( v0 ) beqz v0 , hexvar lw ra , hexvar ( sp ) move a2 , a1 move a1 , s0 lw s0 , hexvar ( sp ) move a0 , zero j hexvar addiu sp , sp , hexvar lui a0 , hexvar lw ra , hexvar ( sp ) move a2 , a1 move a1 , s0 lw s0 , hexvar ( sp ) addiu a0 , a0 , hexvar j hexvar addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) bal hexvar sw a1 , hexvar ( sp ) lw a1 , hexvar ( sp ) move a0 , v0 lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) move a2 , a1 move a1 , s0 lw s0 , hexvar ( sp ) j hexvar addiu sp , sp , hexvar
subs ip , r0 , num push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r1 beq hexvar mov r4 , r2 mov r6 , ip bl hexvar subs r7 , r0 , num beq hexvar mov r0 , r5 mov r1 , r4 bl hexvar cmp r0 , num beq hexvar mov r0 , r6 mov r1 , r4 bl hexvar cmp r0 , num beq hexvar cmp r7 , num bne hexvar mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , pc }
push { r4 , lr } ldr r4 , [ pc , hexvar ] ldr r3 , [ r4 , hexvar ] cmp r3 , num popne { r4 , pc } ldr r3 , [ r4 , hexvar ] tst r3 , hexvar bne hexvar ldr r3 , [ r4 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] pop { r4 , pc }
push { r4 , r5 , r6 , lr } mov r4 , r0 mov r5 , num ldr r0 , [ r0 , hexvar ] bl hexvar str r5 , [ r4 , hexvar ] ldr r0 , [ r4 , num ] bl hexvar str r5 , [ r4 , num ] pop { r4 , r5 , r6 , pc }
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , num ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , num ] str r2 , [ r3 , num ] ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] mov r1 , hexvar mov r0 , num bl hexvar ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] ldr r1 , [ sp , hexvar ] mov r0 , r3 bl hexvar mov r3 , r0 cmp r3 , num beq hexvar ldr r0 , [ sp , hexvar ] bl hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num str r3 , [ sp , hexvar ] b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] ldr r1 , [ sp , hexvar ] mov r0 , r3 bl hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] mov r1 , hexvar mov r0 , hexvar bl hexvar ldr r3 , [ sp , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp push rbx mov rcx , qword ptr [ rdi ] mov rax , qword ptr [ rdi + num ] movzx r8d , cx shr rcx , hexvar movzx edx , ax shr rax , hexvar mov r11d , num mov r9d , num mov r10 , rsi jmp hexvar xor r11d , r11d cmp r9d , num sete r11b mov ebx , eax and ebx , hexvar add r8d , dword ptr [ rsi + rbx * num ] mov ebx , r8d and ebx , hexvar add ecx , dword ptr [ rsi + rbx * num ] mov ebx , ecx and ebx , hexvar add edx , dword ptr [ rsi + rbx * num ] add r11d , num mov ebx , edx and ebx , hexvar add eax , dword ptr [ rsi + rbx * num ] nop word ptr [ rax + rax ] mov ebx , eax not ebx and ebx , ecx mov ebp , eax and ebp , edx add ebp , r8d add ebp , ebx add ebp , dword ptr [ r10 ] movzx ebx , bp mov ebp , ebx shr ebp , hexvar lea r8d , [ rbp + rbx * num ] mov ebx , r8d not ebx and ebx , edx mov ebp , r8d and ebp , eax add ecx , dword ptr [ r10 + num ] add ecx , ebp add ecx , ebx movzx ecx , cx mov ebx , ecx shr ebx , hexvar lea ecx , [ rbx + rcx * num ] mov ebx , ecx not ebx and ebx , eax mov ebp , ecx and ebp , r8d add edx , dword ptr [ r10 + num ] add edx , ebp add edx , ebx movzx edx , dx mov ebx , edx shr ebx , hexvar lea edx , [ rbx + rdx * num ] mov ebx , edx not ebx and ebx , r8d mov ebp , edx and ebp , ecx add eax , dword ptr [ r10 + hexvar ] add r10 , hexvar add eax , ebp add eax , ebx movzx eax , ax mov ebx , eax shl ebx , num shr eax , hexvar or eax , ebx add r11d , - num jne hexvar add r9d , - num jne hexvar movzx esi , r8w shl ecx , hexvar or ecx , esi mov qword ptr [ rdi ] , rcx shl eax , hexvar movzx ecx , dx or ecx , eax mov qword ptr [ rdi + num ] , rcx pop rbx pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar ldr ip , [ sp , hexvar ] str ip , [ sp , num ] str r3 , [ sp , num ] mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , num ] bl hexvar add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , esi mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ ebp + num ] mov edi , dword ptr [ edi + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar cmp eax , num je hexvar mov dword ptr [ ebp - hexvar ] , num jmp hexvar mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ hexvar ] and eax , hexvar cmp eax , num je hexvar cmp dword ptr [ hexvar ] , num jl hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ hexvar ] , hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar add esp , num pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] ldr r3 , [ sp , num ] str r3 , [ sp , num ] ldr r3 , [ sp ] str r3 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , num ] bl hexvar mov r0 , r0 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar call hexvar cmp dword ptr [ eax ] , hexvar mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar call hexvar mov dword ptr [ eax ] , hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar call hexvar xor ecx , ecx mov eax , dword ptr [ eax ] cmp eax , num mov eax , hexvar cmove eax , ecx add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx sub esp , num call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar mov edx , eax mov eax , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ eax ] push dword ptr [ ebp + num ] push dword ptr [ ebp + hexvar ] push edx push eax call hexvar add esp , hexvar nop mov ebx , dword ptr [ ebp - num ] leave ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r15 , rdi xor edi , edi call hexvar mov qword ptr [ rsp + hexvar ] , rax lea rdi , [ rsp + hexvar ] xorps xmm0 , xmm0 mov esi , num call hexvar call hexvar call hexvar mov dword ptr [ rax ] , num mov r13 , qword ptr [ r15 + hexvar ] test r13 , r13 jne hexvar mov rax , qword ptr [ r15 + hexvar ] mov r13 , qword ptr [ rax + hexvar ] add dword ptr [ r15 + hexvar ] , num mov rdi , r15 call hexvar test eax , hexvar je hexvar mov rdi , r15 call hexvar test eax , hexvar je hexvar mov rdi , r15 call hexvar cmp dword ptr [ r15 + hexvar ] , num je hexvar mov dword ptr [ r15 + hexvar ] , num add dword ptr [ r15 + hexvar ] , num mov r12d , hexvar jmp hexvar mov dword ptr [ r15 + hexvar ] , r14d mov rdi , r15 mov esi , hexvar mov edx , num call r13
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - num ] bl hexvar mov r3 , r0 mov r0 , r3 sub sp , fp , num pop { fp , pc }
mov r1 , num push { r4 , lr } mov r0 , r1 bl hexvar subs r4 , r0 , num beq hexvar mov r0 , r4 pop { r4 , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi cmp esi , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jne hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar xor ecx , ecx mov dword ptr [ ebp - hexvar ] , eax cmp ecx , dword ptr [ ebp - hexvar ] jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi call hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rdi mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax jmp hexvar mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] cmp rax , num setne cl mov byte ptr [ rsp + hexvar ] , cl mov al , byte ptr [ rsp + hexvar ] test al , num jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar call hexvar jmp hexvar mov rax , qword ptr [ rsp + hexvar ] movsxd rax , dword ptr [ rax + hexvar ] imul rax , rax , hexvar movabs rcx , num add rcx , rax mov rax , qword ptr [ rcx + hexvar ] mov rdi , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax mov qword ptr [ rsp + num ] , rdi mov rdi , qword ptr [ rsp + num ] mov rax , qword ptr [ rsp + hexvar ] call rax mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp ] , rax mov rax , qword ptr [ rsp ] movsxd rcx , dword ptr [ rax + hexvar ] imul rcx , rcx , hexvar movabs rdx , num add rdx , rcx mov rcx , qword ptr [ rdx + hexvar ] mov rdx , qword ptr [ rsp + hexvar ] add rdx , hexvar mov rdi , rdx call rcx add rsp , hexvar ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add eax , hexvar mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + num ] mov dword ptr [ ebp - hexvar ] , edx sub esp , num push hexvar push num push dword ptr [ ebp + hexvar ] mov ebx , eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + num ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx + hexvar ] , eax mov dword ptr [ ecx + hexvar ] , edx mov eax , num mov ebx , dword ptr [ ebp - num ] leave ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov edi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea ecx , [ hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov bl , num and bl , num movzx eax , bl add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax jne hexvar mov eax , num mov edx , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , num lea edx , [ ebp - hexvar ] push edx push dword ptr [ ebp - hexvar ] call eax add esp , hexvar test eax , eax je hexvar mov eax , num mov edx , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] xor ecx , dword ptr gs : [ hexvar ] je hexvar call hexvar leave ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov edi , dword ptr [ ebp + hexvar ] cmp esi , dword ptr [ edi + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jne hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + hexvar ] lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , eax call hexvar cmp eax , num setg bl and bl , num movzx eax , bl add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx call hexvar and al , num mov byte ptr [ ebp - num ] , al test byte ptr [ ebp - num ] , num je hexvar test byte ptr [ ebp - num ] , num jne hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar test byte ptr [ ebp - num ] , num jne hexvar test byte ptr [ ebp - num ] , num je hexvar mov dword ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui a2 , hexvar addiu a2 , a2 , hexvar lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rax , qword ptr [ rax + rcx * num ] mov edx , dword ptr [ rax + hexvar ] cmp edx , dword ptr [ rbp - hexvar ] je hexvar mov eax , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rdx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rcx + rdx * num ] mov dword ptr [ rcx + hexvar ] , eax mov rdi , qword ptr [ rbp - num ] mov eax , dword ptr [ rbp - hexvar ] mov esi , eax mov eax , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov edi , eax call hexvar mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , num mov rdx , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] cmp dword ptr [ edx + num ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov byte ptr [ ebp - num ] , al add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , hexvar cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - hexvar ] , eax jne hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num jne hexvar mov dword ptr [ ebp - num ] , hexvar cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] jae hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov dword ptr [ ebp + num ] , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] jae hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s4 , a0 move s0 , a1 ext v0 , a2 , hexvar , num bnez v0 , hexvar move s1 , a2 lui s3 , hexvar addiu s3 , s3 , - hexvar move a2 , s1 move a1 , s0 move a0 , s4 move t9 , s3 jalr t9 nop lw gp , hexvar ( sp ) move a0 , v0 ext v1 , s1 , hexvar , num bnez v1 , hexvar sltiu v0 , v0 , num lb v1 , ( s0 ) beqz v1 , hexvar lw ra , hexvar ( sp ) beqz a0 , hexvar addiu s0 , s0 , num addiu s2 , zero , hexvar b hexvar move s5 , zero b hexvar lw s3 , - hexvar ( gp ) lb v0 , ( s0 ) beq v0 , s2 , hexvar move a2 , s1 move a1 , s0 move a0 , s4 move t9 , s3 jalr t9 nop lw gp , hexvar ( sp ) lb v1 , ( s0 ) beqz v1 , hexvar sltiu v0 , v0 , num beqz v0 , hexvar addiu s0 , s0 , num lw ra , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar addiu v0 , zero , num lb v1 , ( s0 ) b hexvar move v0 , s5 beq v1 , s2 , hexvar nop lb v1 , ( s0 ) bnez v1 , hexvar addiu s0 , s0 , num b hexvar move v0 , zero
push r14 push rbx push rax cmp qword ptr [ rip + hexvar ] , num je hexvar xor r14d , r14d xor ebx , ebx nop word ptr [ rax + rax ] mov eax , dword ptr [ rbx * num + hexvar ] cmp eax , num je hexvar cmp eax , num jne hexvar mov edi , dword ptr [ rbx * num + hexvar ] call qword ptr [ rip + hexvar ] test eax , eax jne hexvar mov qword ptr [ rbx * num + hexvar ] , num add rbx , num cmp rbx , hexvar jb hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] add r14d , num add rbx , num cmp rbx , hexvar jb hexvar test r14d , r14d je hexvar mov edi , dword ptr [ rip + hexvar ] test edi , edi jne hexvar call hexvar mov edi , eax mov dword ptr [ rip + hexvar ] , eax mov ecx , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov edi , dword ptr [ rip + hexvar ] test edi , edi jne hexvar call hexvar mov edi , eax mov dword ptr [ rip + hexvar ] , eax mov ecx , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar call qword ptr [ rip + hexvar ] test eax , eax je hexvar mov edi , dword ptr [ rip + hexvar ] test edi , edi jne hexvar call hexvar mov edi , eax mov dword ptr [ rip + hexvar ] , eax mov ecx , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov edi , dword ptr [ rip + hexvar ] test edi , edi jne hexvar call hexvar mov edi , eax mov dword ptr [ rip + hexvar ] , eax mov ecx , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax add rsp , num pop rbx pop r14 ret
push { r4 , r5 , r6 , r7 , r8 , lr } sub sp , sp , hexvar mov r7 , r0 mov r6 , r1 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , num ] add r3 , sp , num str r3 , [ sp ] mov r3 , hexvar ldr r2 , [ pc , hexvar ] mov r1 , num bl hexvar cmp r0 , num beq hexvar ldr r4 , [ sp , num ] mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , r4 bl hexvar cmp r0 , num movne r5 , num bne hexvar add r0 , r4 , num str r0 , [ sp , num ] bl hexvar subs r4 , r0 , num beq hexvar mov r1 , hexvar mov r0 , r4 bl hexvar subs r8 , r0 , num beq hexvar mov r0 , r4 bl hexvar subs r5 , r0 , num beq hexvar sub r3 , r8 , r4 mov r2 , num strb r2 , [ r5 , r3 ] cmp r6 , r2 beq hexvar add r0 , r8 , num bl hexvar mov r8 , r0 str r0 , [ r6 ] cmp r0 , num beq hexvar mov r0 , r4 bl hexvar mov r0 , r5 ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp sub esp , hexvar call hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - num ] sub eax , hexvar setne cl movzx edx , cl mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp edx mov eax , dword ptr [ ebp - num ] inc eax mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax xor eax , eax mov ecx , dword ptr [ ebp - num ] lea edx , [ ebp - hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
push rbp push rbx sub rsp , num mov rbx , rdi mov rbp , rcx mov ecx , num call hexvar test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num je hexvar add rsp , num pop rbx pop rbp ret
push r13 push r12 push rbp push rbx sub rsp , num mov rbx , rdi mov r13d , esi mov rbp , rdx mov r12 , rcx mov rsi , rdi mov edi , hexvar call hexvar test r13b , r13b je hexvar cmp r12 , num jne hexvar mov rcx , rbp mov edx , hexvar mov esi , num mov rdi , rbx mov al , num call hexvar jmp hexvar lea r8 , [ rbp + r12 - num ] mov rcx , rbp mov edx , hexvar mov esi , num mov rdi , rbx mov al , num call hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret
push { fp , lr } add fp , sp , num sub sp , sp , num str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] ldr r2 , [ pc , hexvar ] ldr r1 , [ fp , - num ] ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 sub sp , fp , num pop { fp , pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s4 , hexvar ( sp ) lw s4 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lw v0 , ( s4 ) sw v0 , hexvar ( sp ) bal hexvar nop beqz v0 , hexvar lw gp , hexvar ( sp ) lui s3 , hexvar lui s2 , hexvar addiu s1 , sp , hexvar addiu s3 , s3 , hexvar addiu s2 , s2 , - hexvar move s0 , v0 lw t9 , hexvar ( s0 )
push rbp push r14 push rbx sub rsp , hexvar mov ebp , edx mov rbx , rsi mov rax , qword ptr [ rdi + hexvar ] mov qword ptr [ rsp + num ] , rax mov ecx , hexvar mov r14d , hexvar jmp hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , rbx mov edx , ebp call hexvar mov ecx , hexvar nop word ptr [ rax + rax ] cmp ecx , hexvar jg hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar nop word ptr [ rax + rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar cmp qword ptr [ rsp + num ] , num mov ecx , hexvar cmove ecx , r14d jmp hexvar mov ecx , hexvar xor eax , eax jmp hexvar add rsp , hexvar pop rbx pop r14 pop rbp ret
mov eax , num nop word ptr cs : [ rax + rax ] nop cmp dword ptr [ rax * num ] , edi je hexvar cmp dword ptr [ rax * num ] , edi je hexvar lea rcx , [ rax + num ] add rax , num cmp rax , hexvar mov rax , rcx jb hexvar mov eax , hexvar ret
push ebx sub esp , num call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar sub dword ptr [ esp + hexvar ] , num cmp dword ptr [ esp + hexvar ] , num jle hexvar mov eax , dword ptr [ esp + hexvar ] add eax , num mov eax , dword ptr [ eax ] mov edx , dword ptr [ esp + hexvar ] add edx , num push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push edx call hexvar add esp , hexvar sub dword ptr [ esp + hexvar ] , num cmp dword ptr [ esp + hexvar ] , num jle hexvar mov eax , dword ptr [ esp + hexvar ] add eax , num mov eax , dword ptr [ eax ] mov edx , dword ptr [ esp + hexvar ] add edx , num push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push edx call hexvar add esp , hexvar sub dword ptr [ esp + hexvar ] , num cmp dword ptr [ esp + hexvar ] , num jle hexvar mov eax , dword ptr [ esp + hexvar ] add eax , hexvar mov eax , dword ptr [ eax ] mov edx , dword ptr [ esp + hexvar ] add edx , hexvar push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push edx call hexvar add esp , hexvar sub dword ptr [ esp + hexvar ] , num cmp dword ptr [ esp + hexvar ] , num jle hexvar mov eax , dword ptr [ esp + hexvar ] add eax , hexvar mov eax , dword ptr [ eax ] mov edx , dword ptr [ esp + hexvar ] add edx , hexvar push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push edx call hexvar add esp , hexvar add dword ptr [ esp + hexvar ] , hexvar add dword ptr [ esp + hexvar ] , hexvar jmp hexvar nop jmp hexvar nop jmp hexvar nop jmp hexvar nop add esp , num pop ebx ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] mov r3 , num str r3 , [ fp , - num ] b hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 ] ldr r2 , [ pc , hexvar ] cmp r3 , r2 bne hexvar ldr r3 , [ fp , - num ] orr r3 , r3 , num str r3 , [ fp , - num ] b hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 ] ldr r2 , [ pc , hexvar ] cmp r3 , r2 bne hexvar ldr r3 , [ fp , - num ] orr r3 , r3 , num str r3 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , hexvar ] str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar ldr r3 , [ fp , - num ] and r3 , r3 , num cmp r3 , num beq hexvar ldr r3 , [ fp , - num ] and r3 , r3 , num cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] ldrb r3 , [ r3 , num ] eor r3 , r3 , num and r3 , r3 , hexvar cmp r3 , num beq hexvar ldr r0 , [ pc , hexvar ] bl hexvar mov r3 , r0 mov r2 , r3 mov r1 , num mov r0 , num bl hexvar mov r0 , r0 sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] cmp ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax jbe hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ hexvar ] , eax add esp , hexvar pop ebp ret
push r13 push r12 mov r12 , rdx push rbp push rbx mov rbp , rdi mov rbx , rsi sub rsp , num cmp qword ptr [ rbp + hexvar ] , rdx mov r13 , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] jae hexvar lea rsi , [ rdx + hexvar ] movabs rax , hexvar cmp rsi , rax mov qword ptr [ rbp + hexvar ] , rsi ja hexvar shl rsi , num call hexvar test rax , rax mov rdi , rax je hexvar mov qword ptr [ rbp + hexvar ] , rax test rbx , rbx je hexvar mov rdx , rdi nop dword ptr [ rax ] add rdx , num mov qword ptr [ rdx - num ] , rbx mov rbx , qword ptr [ rbx + hexvar ] test rbx , rbx jne hexvar mov rcx , r13 mov edx , num mov rsi , r12 call hexvar mov r8 , qword ptr [ rbp + hexvar ] mov rcx , r12 sub rcx , num mov rax , qword ptr [ r8 ] je hexvar mov rdi , rax mov rdx , r8 jmp hexvar nop dword ptr [ rax ] mov rdi , qword ptr [ rdx ] mov rsi , qword ptr [ rdx + num ] add rdx , num sub rcx , num mov qword ptr [ rdi + hexvar ] , rsi jne hexvar mov rdx , qword ptr [ r8 + r12 * num - num ] mov qword ptr [ rdx + hexvar ] , num add rsp , num pop rbx pop rbp pop r12 pop r13 ret
beqz a1 , hexvar nop addiu sp , sp , - hexvar sw s4 , hexvar ( sp ) move s4 , a1 sw s3 , hexvar ( sp ) move s3 , a3 sw s2 , hexvar ( sp ) move s2 , a0 sw s1 , hexvar ( sp ) move s1 , zero sw s0 , hexvar ( sp ) move s0 , a2 b hexvar sw ra , hexvar ( sp ) beq s4 , s1 , hexvar addiu v0 , zero , num lw v0 , ( s2 )
addiu v0 , zero , num beq a0 , v0 , hexvar addiu v0 , zero , - num sltiu v0 , a0 , num bnez v0 , hexvar addiu v0 , zero , num sltiu v0 , a0 , num beqz v0 , hexvar nop lui v0 , hexvar slt a1 , a1 , v0 beqz a1 , hexvar nop sll v0 , a2 , num addu a2 , v0 , a2 jr ra sll v0 , a2 , num bne a0 , v0 , hexvar nop jr ra addiu v0 , zero , hexvar addiu a2 , a2 , num and a2 , a2 , v0 jr ra sll v0 , a2 , num j hexvar move a1 , a2 jr ra sll v0 , a2 , num
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s3 , a0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) srl s4 , a2 , num addiu v0 , s4 , num sw v0 , hexvar ( sp ) blez s4 , hexvar addiu a3 , a2 , hexvar move v0 , a1 addiu v1 , zero , - num and v1 , a2 , v1 addu v1 , a0 , v1 lwl a1 , ( v0 ) lwr a1 , num ( v0 ) sw a1 , hexvar ( sp ) sw a1 , ( a0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx cmp dword ptr [ ebp + num ] , num setne dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp eax , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - hexvar ] sub ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ecx + hexvar ] jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - hexvar ] cmp ecx , dword ptr [ eax + hexvar ] sete dl and dl , num movzx eax , dl mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
ldrb r3 , [ r0 ] cmp r3 , hexvar bne hexvar mov r0 , num bx lr add r2 , r0 , num ldrb r3 , [ r0 , num ] cmp r3 , num cmpne r3 , hexvar beq hexvar mov r0 , r2 ldrb r3 , [ r0 ] cmp r3 , num cmpne r3 , hexvar beq hexvar ldrb r3 , [ r0 , num ] ! cmp r3 , num cmpne r3 , hexvar bne hexvar ldrb r3 , [ r0 ] cmp r3 , hexvar bne hexvar ldrb r3 , [ r0 , num ] ! cmp r3 , hexvar beq hexvar ldrb r3 , [ r0 ] cmp r3 , num beq hexvar cmp r3 , hexvar bne hexvar ldrb r3 , [ r0 , num ] cmp r3 , hexvar beq hexvar add r0 , r0 , num b hexvar mov r0 , num bx lr mov r0 , num bx lr
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] cmp byte ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jne hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num call hexvar add eax , dword ptr [ ebp + num ] mov dword ptr [ ebp + num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp + num ] , eax jmp hexvar add esp , hexvar pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] add r3 , sp , num mov r2 , r3 ldr r1 , [ sp ] ldr r0 , [ sp , num ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r3 , num bne hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] add r2 , r3 , num ldr r3 , [ sp , num ] str r2 , [ r3 , hexvar ] mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] add r2 , r3 , num ldr r3 , [ sp , num ] str r2 , [ r3 , hexvar ] ldr r3 , [ sp , hexvar ] mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { pc } bvs hexvar andeq r0 , r0 , r0
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a3 , hexvar ( sp ) lw a2 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) jal hexvar nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rsi ] mov rsi , qword ptr [ rsi + hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdi ] mov rdi , qword ptr [ rdi + hexvar ] sub rsi , rdi setb al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rsi jmp rdi mov eax , hexvar mov rcx , qword ptr [ rip + hexvar ] mov dword ptr [ rbp - hexvar ] , eax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx ] mov rcx , qword ptr [ rcx + hexvar ] sub rax , rcx setb dl movzx esi , dl mov rcx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov dword ptr [ rbp - hexvar ] , esi jmp rcx mov eax , dword ptr [ rbp - hexvar ] pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , num cmp eax , dword ptr [ ebp - num ] mov eax , hexvar mov ecx , hexvar cmovb ecx , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] sub ecx , num movsx eax , byte ptr [ eax + ecx ] cmp eax , hexvar sete dl mov dword ptr [ ebp - hexvar ] , hexvar and dl , num mov byte ptr [ ebp - hexvar ] , dl jmp hexvar test byte ptr [ ebp - hexvar ] , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , - num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) beqz v0 , hexvar nop lw v0 , hexvar ( sp ) sw zero , ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar addiu a0 , v0 , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push { r4 , r5 , r6 , lr } mov r1 , r0 mov r4 , r0 sub sp , sp , num mov r2 , num mov r0 , num bl hexvar cmp r4 , r0 mov r5 , r0 beq hexvar mov r1 , r4 bl hexvar cmp r0 , num beq hexvar mov r0 , r5 add sp , sp , num pop { r4 , r5 , r6 , pc }
push r12 push rbp mov edx , num push rbx mov esi , hexvar mov rbx , rdi add rdi , hexvar xor ebp , ebp sub rsp , hexvar mov rcx , qword ptr [ rdi - hexvar ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar cmp rax , num je hexvar mov rdx , qword ptr [ rsp + hexvar ] xor rdx , qword ptr fs : [ hexvar ] mov eax , ebp jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar cmp eax , num jne hexvar call hexvar mov dword ptr [ eax ] , hexvar call hexvar xor ecx , ecx mov eax , dword ptr [ eax ] cmp eax , num mov eax , hexvar cmove eax , ecx add esp , hexvar pop ebp ret
push { r4 , lr } ldr r3 , [ r0 , hexvar ] mov r4 , r1 ldr r1 , [ r3 , hexvar ] sub sp , sp , num cmp r1 , num beq hexvar ldr r1 , [ r4 , hexvar ] ldr ip , [ r1 , hexvar ] cmp ip , num beq hexvar mov r0 , r3 ldr r2 , [ r3 , hexvar ] add sp , sp , num pop { r4 , lr } bx r2 mov r3 , r0 mov r0 , r4 mov r4 , r3 cmp r2 , num str r2 , [ sp , num ] beq hexvar ldr r0 , [ r4 , hexvar ] add sp , sp , num pop { r4 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] cmp qword ptr [ rbp - hexvar ] , rax je hexvar mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rax + hexvar ] cmp eax , num je hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax + hexvar ] and eax , num test al , al je hexvar mov qword ptr [ rbp - hexvar ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar cmp eax , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] movzx eax , byte ptr [ rax + hexvar ] and eax , hexvar test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ] movzx edx , byte ptr [ rdx + num ] movzx ecx , dl mov edx , num div rcx
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax ] call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi ] , rax mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + num ] call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + num ] , rax mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , hexvar ] mov r3 , hexvar str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] lsr r3 , r3 , num str r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r2 , r3 bhs hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] and r3 , r3 , hexvar cmp r3 , num bne hexvar ldr r3 , [ sp , hexvar ] lsl r2 , r3 , num b hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] mov ip , r3 ldr r3 , [ sp , hexvar ] add r3 , r3 , hexvar ldr r1 , [ sp , hexvar ] add r1 , r1 , hexvar ldr r0 , [ sp , hexvar ] ldr r0 , [ r0 , num ] str r0 , [ sp , num ] str r1 , [ sp , num ] str r3 , [ sp ] mov r3 , ip ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] sub r3 , r2 , r3 str r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r3 , r2 , r3 str r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r3 , r2 , r3 str r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r2 , r3 bhs hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r2 , r3 bhs hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp push r15 push r14 push r13 push r12 push rbx push rax test rsi , rsi je hexvar mov r14 , rcx test rcx , rcx je hexvar mov r12 , r8 test r8 , r8 je hexvar mov r15 , rdx mov r13 , rsi mov ebx , edi call hexvar mov ebp , eax test eax , eax jne hexvar movsxd rax , ebx imul rbx , rax , hexvar mov rax , qword ptr [ rbx ] cmp qword ptr [ r12 ] , rax jae hexvar mov qword ptr [ r12 ] , rax mov ebp , num jmp hexvar mov edi , hexvar call hexvar test rax , rax je hexvar mov qword ptr [ rsp ] , rax mov rdi , rax call qword ptr [ rbx ] mov ebp , eax test eax , eax jne hexvar mov rdi , qword ptr [ rsp ] mov rsi , r13 mov rdx , r15 call qword ptr [ rbx ] mov ebp , eax test eax , eax jne hexvar lea r15 , [ rbx ] mov rdi , qword ptr [ rsp ] mov rsi , r14 call qword ptr [ rbx ] mov ebp , eax mov rax , qword ptr [ r15 ] mov qword ptr [ r12 ] , rax mov rdi , qword ptr [ rsp ] call hexvar jmp hexvar mov ebp , hexvar mov eax , ebp add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esi mov dword ptr [ ebp - hexvar ] , edx cdq mov esi , hexvar idiv esi mov edi , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ edi + eax * num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , ebx cdq idiv esi mov dword ptr [ ebp - hexvar ] , ecx mov ecx , edx mov edx , dword ptr [ ebp - hexvar ] shr edx , cl and edx , num cmp edx , num setne cl and cl , num movzx edx , cl mov eax , edx add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar add esp , num pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rdi , hexvar movabs rsi , hexvar movabs rdx , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] xor ecx , num mov dword ptr [ rax + hexvar ] , ecx mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] or ecx , hexvar mov dword ptr [ rax + hexvar ] , ecx mov rdi , qword ptr [ rbp - num ] call hexvar mov edx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rdx add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov byte ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov byte ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar mov r4 , r0 str r1 , [ sp , num ] mov sb , r2 mov fp , r3 ldr r5 , [ sp , hexvar ] ldr sl , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r3 , [ r0 , num ] ldr r7 , [ r3 , hexvar ] ldr r0 , [ r2 , hexvar ] bl hexvar subs r6 , r0 , num moveq r0 , num beq hexvar mov r3 , num str r3 , [ sp ] add r3 , sb , hexvar ldm r3 , { r2 , r3 } mov r0 , r4 bl hexvar cmp r0 , num beq hexvar mov r0 , r6 bl hexvar mov r0 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , num cmp qword ptr [ rbp - num ] , hexvar jge hexvar mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax * num ] , num jne hexvar call hexvar mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rcx * num ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov qword ptr [ rbp - num ] , rax jmp hexvar mov rdi , qword ptr [ num ] call hexvar cmp qword ptr [ num ] , num je hexvar mov rdi , qword ptr [ num ] call hexvar mov qword ptr [ num ] , rax cmp qword ptr [ num ] , num je hexvar mov rdi , qword ptr [ num ] call hexvar mov qword ptr [ num ] , rax mov rdi , qword ptr [ num ] call hexvar mov qword ptr [ rbp - num ] , num cmp qword ptr [ rbp - num ] , hexvar jge hexvar mov rax , qword ptr [ rbp - num ] shl rax , num movabs rcx , num add rcx , rax mov rdi , rcx call hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov qword ptr [ rbp - num ] , rax jmp hexvar add rsp , hexvar pop rbp ret
sub rsp , hexvar movzx eax , byte ptr [ rdi ] shl rax , num movzx ecx , byte ptr [ rdi + num ] add rax , rcx add rax , hexvar mov qword ptr [ rsp + hexvar ] , rax mov rdi , rsp mov esi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov rcx , rax xor eax , eax cmp dword ptr [ rcx ] , num cmovne rax , rcx add rsp , hexvar ret
push esi push ebx mov ecx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esp + hexvar ] mov eax , hexvar cmp esi , ebx jb hexvar seta al movzx eax , al cmp ecx , edx je hexvar cmp dword ptr [ ecx + hexvar ] , esi jb hexvar mov esi , dword ptr [ ecx + hexvar ] test esi , esi cmovne ecx , esi cmp dword ptr [ edx + hexvar ] , ebx jb hexvar mov ebx , dword ptr [ edx + hexvar ] test ebx , ebx cmovne edx , ebx cmp ecx , edx jb hexvar mov edx , num cmova eax , edx pop ebx pop esi ret
push rbp mov rbp , rsp sub rsp , hexvar lea rax , [ rbp - hexvar ] mov dword ptr [ rbp - num ] , edi mov byte ptr [ rbp - hexvar ] , num mov edi , dword ptr [ rbp - num ] mov rsi , rax mov edx , hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rsi , rax mov edx , hexvar call hexvar lea rdi , [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax call hexvar add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax je hexvar cmp dword ptr [ ebp + num ] , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar cmp eax , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp movss dword ptr [ rbp - num ] , xmm0 mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar xor eax , eax movq xmm0 , qword ptr [ rbp - hexvar ] movaps xmm1 , xmmword ptr [ rip + hexvar ] punpckldq xmm0 , xmm1 movapd xmm2 , xmmword ptr [ rip + hexvar ] subpd xmm0 , xmm2 movaps xmm3 , xmm0 unpckhpd xmm3 , xmm3 addpd xmm3 , xmm0 movss xmm0 , dword ptr [ rbp - num ] cvtss2sd xmm0 , xmm0 movaps xmm4 , xmm3 mulsd xmm4 , xmm0 movsd xmm0 , qword ptr [ rip + hexvar ] divsd xmm4 , xmm0 movsd xmm5 , qword ptr [ rip + hexvar ] addsd xmm4 , xmm5 movsd xmm5 , qword ptr [ rip + hexvar ] movaps xmm6 , xmm4 subsd xmm6 , xmm5 cvttsd2si rcx , xmm6 movabs rdx , hexvar xor rcx , rdx cvttsd2si rdx , xmm4 ucomisd xmm4 , xmm5 cmovb rcx , rdx movq xmm4 , rcx punpckldq xmm4 , xmm1 subpd xmm4 , xmm2 movaps xmm1 , xmm4 unpckhpd xmm1 , xmm1 addpd xmm1 , xmm4 mulsd xmm1 , xmm0 divsd xmm1 , xmm3 cvtsd2ss xmm0 , xmm1 movss dword ptr [ rbp - hexvar ] , xmm0 movss xmm0 , dword ptr [ rbp - num ] movss xmm1 , dword ptr [ rbp - hexvar ] ucomiss xmm0 , xmm1 setnp sil sete dil test dil , sil mov r8d , num cmovne eax , r8d mov dword ptr [ rbp - num ] , eax mov eax , dword ptr [ rbp - num ] pop rbp ret
mov qword ptr [ rip + hexvar ] , num cmp edi , hexvar je hexvar cmp edi , hexvar ja hexvar cmp edi , num je hexvar cmp edi , hexvar je hexvar cmp edi , num jne hexvar lea rax , [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rax mov dword ptr [ rip + hexvar ] , hexvar lea rax , [ rip - hexvar ] mov qword ptr [ rip + hexvar ] , rax ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] mov r1 , num ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbx sub rsp , hexvar mov rbx , rdi mov rdi , rsp mov esi , hexvar call hexvar cmp rbx , hexvar jb hexvar add rbx , - hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp mov dword ptr [ eax + hexvar ] , ebx mov dword ptr [ eax + hexvar ] , esi mov dword ptr [ eax + num ] , edx mov dword ptr [ eax + num ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov dword ptr [ ebp - hexvar ] , edi call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jge hexvar call hexvar cmp dword ptr [ ebp - hexvar ] , num setne al and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp push num lea edi , [ esp + hexvar ] push edi push esi call hexvar add esi , dword ptr [ esp + hexvar ] call hexvar push ebp push num push edi push esi call hexvar add esi , dword ptr [ esp + hexvar ] add esp , hexvar mov edi , esi call hexvar lea esi , [ edi + num ] cmp esi , ebp ja hexvar jb hexvar cmp edi , ebp jae hexvar mov eax , ebp sub eax , edi lea edx , [ eax - num ] cmp edx , num ja hexvar sub esp , num push eax push edi mov eax , dword ptr [ esp + hexvar ] call dword ptr [ eax ] movzx edx , ax add esp , hexvar lea edi , [ esi + edx ] cmp edi , ebp ja hexvar and eax , hexvar mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , eax sub esp , num mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax ] push hexvar call hexvar pop eax pop edx push dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov eax , esi mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp + hexvar ] , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov esi , eax mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax ] push hexvar call hexvar add esp , hexvar test esi , esi je hexvar mov esi , dword ptr [ esp + hexvar ] test esi , esi jne hexvar lea eax , [ ebx - hexvar ] sub esp , num push num push eax push num call hexvar pop edx pop ecx push eax push num call hexvar add esp , hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax ] push hexvar call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] jmp hexvar lea esi , [ esi ]
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , hexvar add ecx , num sub ecx , hexvar mov dword ptr [ ebp - num ] , eax mov eax , ecx cdq mov ecx , num idiv ecx shl eax , num add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - num ] , ecx mov byte ptr [ ebp - num ] , num jmp hexvar cmp dword ptr [ ebp + num ] , hexvar sete al mov dword ptr [ ebp - num ] , hexvar and al , num mov byte ptr [ ebp - num ] , al jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rdi , qword ptr [ rbp - num ] cmp qword ptr [ rdi + hexvar ] , hexvar jae hexvar jmp hexvar cmp dword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] add rax , hexvar prefetcht2 byte ptr [ rax ] jmp hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] add rax , hexvar prefetcht2 byte ptr [ rax ] pop rbp ret
sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov edi , hexvar call hexvar pxor xmm2 , xmm2 cvtsi2sd xmm2 , rax movsd qword ptr [ rsp + num ] , xmm2 mov edi , hexvar call hexvar movsd xmm2 , qword ptr [ rsp + num ] ucomisd xmm2 , qword ptr [ rip + hexvar ] jb hexvar pxor xmm0 , xmm0 cvtsi2sd xmm0 , rax ucomisd xmm0 , qword ptr [ rip + hexvar ] jb hexvar mulsd xmm0 , xmm2 mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu a0 , a0 , hexvar lw ra , hexvar ( sp ) sltu v0 , zero , v0 jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] mov r3 , num str r3 , [ sp , hexvar ] b hexvar ldr r2 , [ sp , num ] ldr r3 , [ sp , hexvar ] add r3 , r2 , r3 ldrb r3 , [ r3 ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r2 , [ sp , num ] ldr r3 , [ sp , hexvar ] add r3 , r2 , r3 ldrb r3 , [ r3 ] mov r2 , r3 ldr r3 , [ sp , hexvar ] add r3 , r3 , r2 str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r3 , r3 , num str r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp ] cmp r2 , r3 blo hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sp ] cmp r2 , r3 moveq r3 , num movne r3 , num and r3 , r3 , hexvar mov r0 , r3 add sp , sp , hexvar bx lr
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , esp mov dword ptr [ edi ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push esi sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , eax mov dword ptr [ esi ] , ecx call hexvar add esp , hexvar pop esi ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r14 , r9 mov r12 , r8 mov ebp , ecx mov r15d , edx mov rbx , rdi mov rdi , rsi call hexvar test rax , rax je hexvar mov r13 , rax cmp ebp , - num jne hexvar test r12 , r12 jne hexvar test r15d , r15d je hexvar mov rdi , rbx mov rsi , r13 call hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebp , ebp jmp hexvar test r14 , r14 mov qword ptr [ rsp + hexvar ] , rbx je hexvar mov ebx , dword ptr [ rsp + hexvar ] mov qword ptr [ rsp + num ] , r13 mov dword ptr [ rsp ] , num mov edi , ebp mov rsi , r12 mov rdx , r14 mov ecx , ebx xor r8d , r8d xor r9d , r9d call hexvar mov r12 , rax lea rax , [ rsp + hexvar ] cmp rax , r14 je hexvar mov rdi , r13 call hexvar test r15d , r15d je hexvar mov rdi , qword ptr [ rsp + hexvar ] mov rsi , r12 call hexvar jmp hexvar xorps xmm0 , xmm0 movups xmmword ptr [ rsp + num ] , xmm0 mov dword ptr [ rsp ] , num mov edi , hexvar mov esi , hexvar mov rdx , rbx mov rcx , r13 xor r8d , r8d xor r9d , r9d call hexvar mov ebp , eax mov rdi , r13 call hexvar jmp hexvar mov rcx , qword ptr [ rsp + hexvar ] mov rax , qword ptr [ rsp + hexvar ] lea rdi , [ rsp + hexvar ] mov esi , hexvar mov edx , num test rax , rax je hexvar call rax mov ebx , eax test eax , eax jle hexvar mov qword ptr [ rsp + num ] , r13 mov dword ptr [ rsp ] , num lea rdx , [ rsp + hexvar ] mov edi , ebp mov rsi , r12 mov ecx , ebx xor r8d , r8d xor r9d , r9d call hexvar mov r12 , rax movsxd rsi , ebx lea rdi , [ rsp + hexvar ] call hexvar mov rdi , r13 call hexvar test r15d , r15d jne hexvar xorps xmm0 , xmm0 movups xmmword ptr [ rsp + num ] , xmm0 mov dword ptr [ rsp ] , num mov edi , hexvar mov esi , hexvar mov rdx , qword ptr [ rsp + hexvar ] mov rcx , r12 xor r8d , r8d xor r9d , r9d call hexvar mov ebp , eax mov rdi , r12 call hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov edx , dword ptr [ esi + hexvar ] test edx , edx jne hexvar mov edi , dword ptr [ esi + hexvar ] lea eax , [ edi + num ] mov dword ptr [ esi + hexvar ] , eax mov dword ptr [ esi + hexvar ] , edi sub esp , num push edi push edi lea eax , [ ebx - hexvar ] push eax push hexvar push num lea ebp , [ esp + hexvar ] push ebp call hexvar add esp , hexvar push num push num mov ecx , edi mov edx , ebp mov eax , esi call hexvar add esp , hexvar mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbx call hexvar mov rbx , rax mov rdi , rax call hexvar cmp eax , - num je hexvar mov edi , eax call hexvar mov rax , rbx pop rbx ret
push rbp mov rbp , rsp sub rsp , hexvar cmp dword ptr [ hexvar ] , num jne hexvar mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al movabs rdi , hexvar mov dword ptr [ rip + hexvar ] , num call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
mov eax , dword ptr [ rip ] test eax , eax jne hexvar movaps xmm0 , xmmword ptr [ rip ] xorps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rip ] , xmm0 movaps xmmword ptr [ rip ] , xmm0 add byte ptr [ rsi ] , bh add byte ptr [ rax ] , al add byte ptr [ rax ] , al test dword ptr [ rax + hexvar ] , ebp jmp hexvar add byte ptr [ rdi + rbp * num ] , dh mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al test dword ptr [ rax ] , ebp add eax , num xorps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rip ] , xmm0 movaps xmmword ptr [ rip ] , xmm0 xorps xmm0 , xmmword ptr [ rip ] sub dword ptr [ rip + hexvar ] , eax jmp hexvar add byte ptr [ rbx + hexvar ] , al mov dword ptr [ rdi ] , num xor eax , eax ret
push r15 push r14 push r13 push r12 mov r13 , rsi push rbp push rbx movsxd rbp , ecx mov rbx , r8 sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax test rbp , rbp mov qword ptr [ rsp + hexvar ] , rdi mov qword ptr [ rsp + num ] , rdx mov qword ptr [ rsp + hexvar ] , num jle hexvar lea r12 , [ rip + hexvar ] xor r15d , r15d nop dword ptr [ rax ] mov r14 , qword ptr [ rbx ] mov rsi , r12 add r15 , num mov rdi , qword ptr [ r14 ] call hexvar cmp r15 , rbp mov qword ptr [ r14 ] , rax jne hexvar mov rdi , qword ptr [ rbx + num ] mov rsi , r13 call hexvar test rax , rax mov rbp , rax je hexvar mov rdi , qword ptr [ rbx + num ] mov rsi , r13 lea r12 , [ rsp + hexvar ] call hexvar mov rdi , qword ptr [ rbx + num ] mov rsi , r13 mov qword ptr [ rsp + hexvar ] , rax call hexvar sub rsp , num mov r9d , eax mov r8 , r13 mov rdx , qword ptr [ rsp + hexvar ] xor eax , eax mov esi , num mov rdi , r12 push rdx push qword ptr [ rsp + hexvar ] lea rdx , [ rip + hexvar ] push rbp mov rcx , qword ptr [ rsp + hexvar ] call hexvar add rsp , hexvar test eax , eax jns hexvar mov rdi , rbp call hexvar mov rdi , qword ptr [ rsp + hexvar ] call hexvar call hexvar mov rdi , qword ptr [ rbx + num ] mov esi , dword ptr [ rax ] call hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
mov eax , dword ptr [ rdi ] cmp eax , num je hexvar cmp eax , num jne hexvar mov rdi , qword ptr [ rdi + num ] jmp hexvar mov rdi , qword ptr [ rdi + num ] jmp hexvar ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] or edi , hexvar mov dword ptr [ ebp - hexvar ] , edi mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jge hexvar mov dword ptr [ ebp - hexvar ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx ] , eax jmp hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ esp ] , num mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar nop word ptr cs : [ eax + eax ] nop
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , num jmp hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rcx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] leave ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , esi mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp - num ] cmp eax , ecx mov eax , hexvar mov ecx , hexvar cmovle ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar addiu a0 , v0 , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] movsd xmm0 , qword ptr [ esi ] movsd qword ptr [ ebp - hexvar ] , xmm0 mov esi , dword ptr [ ebp + hexvar ] movsd xmm0 , qword ptr [ esi ] movsd qword ptr [ ebp - hexvar ] , xmm0 mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] sub esi , ebx sbb edi , eax mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov eax , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - hexvar ] sub eax , edi sbb esi , ebx setl bl movzx edi , bl mov ebx , dword ptr [ ebp - hexvar ] shr ebx , hexvar and bl , num movzx ebx , bl cmp edi , ebx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , esi je hexvar mov dword ptr [ esp ] , hexvar call hexvar movsd xmm0 , qword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp + num ] movsd qword ptr [ eax ] , xmm0 add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push edi push esi push ebx mov ecx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov edx , dword ptr [ ecx + hexvar ] mov edi , dword ptr [ esi + hexvar ] cmp edx , num sete al cmp edx , num sete dl or eax , edx cmp edi , num je hexvar cmp edi , num je hexvar mov edx , dword ptr [ esi + hexvar ] and edx , hexvar test al , al je hexvar cmp edx , hexvar je hexvar pop ebx mov eax , num pop esi pop edi ret
push rbp mov rbp , rsp mov eax , dword ptr [ hexvar ] mov dword ptr [ rbp - num ] , eax mov rcx , qword ptr [ hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ hexvar ] jae hexvar mov rax , qword ptr [ rbp - hexvar ] movsx ecx , byte ptr [ rax ] cmp ecx , num je hexvar mov rax , qword ptr [ rbp - hexvar ] movzx ecx , byte ptr [ rax ] mov eax , ecx movzx ecx , byte ptr [ rax + hexvar ] mov dword ptr [ rbp - hexvar ] , ecx jmp hexvar mov eax , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov cl , al mov byte ptr [ rbp - hexvar ] , cl movsxd rdx , dword ptr [ rbp - num ] cmp word ptr [ rdx * num + hexvar ] , num je hexvar mov eax , dword ptr [ rbp - num ] mov dword ptr [ hexvar ] , eax mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ hexvar ] , rcx jmp hexvar movsxd rax , dword ptr [ rbp - num ] movsx ecx , word ptr [ rax * num + hexvar ] movzx edx , byte ptr [ rbp - hexvar ] add ecx , edx movsxd rax , ecx movsx ecx , word ptr [ rax * num + hexvar ] cmp ecx , dword ptr [ rbp - num ] je hexvar movsxd rax , dword ptr [ rbp - num ] movsx ecx , word ptr [ rax * num + hexvar ] mov dword ptr [ rbp - num ] , ecx cmp dword ptr [ rbp - num ] , hexvar jl hexvar movzx eax , byte ptr [ rbp - hexvar ] mov ecx , eax mov dl , byte ptr [ rcx + hexvar ] mov byte ptr [ rbp - hexvar ] , dl jmp hexvar movsxd rax , dword ptr [ rbp - num ] movsx ecx , word ptr [ rax * num + hexvar ] movzx edx , byte ptr [ rbp - hexvar ] add ecx , hexvar add ecx , edx sub ecx , hexvar movsxd rax , ecx movsx ecx , word ptr [ rax * num + hexvar ] mov dword ptr [ rbp - num ] , ecx mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov eax , dword ptr [ rbp - num ] pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw a0 , hexvar ( a0 ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
addiu sp , sp , - num sw fp , num ( sp ) move fp , sp sw a0 , num ( fp ) move v0 , zero move sp , fp lw fp , num ( sp ) addiu sp , sp , num jr ra nop
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s3 , a0 move s2 , a2 lui v0 , hexvar lw v0 , hexvar ( v0 ) beqz v0 , hexvar move s1 , a3 or v0 , s2 , s1 beqz v0 , hexvar lui s5 , hexvar move s6 , zero b hexvar lui s4 , hexvar addiu a1 , zero , num lui v0 , hexvar lw a0 , hexvar ( v0 ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar lui v1 , hexvar b hexvar sw v0 , hexvar ( v1 ) lui v0 , hexvar addiu v0 , v0 , hexvar sw v0 , hexvar ( v1 ) lui v0 , hexvar addiu v1 , zero , hexvar b hexvar sw v1 , hexvar ( v0 ) move s0 , s1 move a2 , s0 lw a1 , hexvar ( s4 ) move a0 , s3 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) bne v0 , s0 , hexvar subu s0 , s1 , s0 sltu v0 , s1 , s0 subu v0 , s2 , v0 move s1 , s0 or s0 , v0 , s0 beqz s0 , hexvar move s2 , v0 lw v0 , hexvar ( s5 ) bltz s2 , hexvar move s0 , v0 bne s6 , s2 , hexvar move a2 , s0 sltu v0 , s1 , v0 beqz v0 , hexvar lw a1 , hexvar ( s4 ) b hexvar move s0 , s1 b hexvar addiu v0 , zero , num b hexvar addiu v0 , zero , num move v0 , zero lw ra , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov cl , num mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , cl je hexvar cmp dword ptr [ ebp + num ] , hexvar mov al , num mov byte ptr [ ebp - num ] , al je hexvar cmp dword ptr [ ebp + num ] , hexvar mov al , num mov byte ptr [ ebp - num ] , al je hexvar cmp dword ptr [ ebp + num ] , hexvar sete al mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , edx mov dword ptr [ ebp - num ] , ecx add esp , num pop ebp ret
push rbp push rbx mov rbp , rsi mov rbx , rdi sub rsp , hexvar mov ecx , dword ptr [ rdi + hexvar ] mov esi , dword ptr [ rdi + hexvar ] mov rax , qword ptr [ rdi + hexvar ] cmp ecx , esi jb hexvar add esi , hexvar mov dword ptr [ rsp + hexvar ] , edx mov dword ptr [ rdi + hexvar ] , esi shl rsi , num mov rdi , rax call hexvar mov ecx , dword ptr [ rbx + hexvar ] mov edx , dword ptr [ rsp + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov edi , ecx add ecx , num shl rdi , num add rax , rdi mov qword ptr [ rax ] , rbp mov dword ptr [ rax + num ] , edx mov eax , num mov dword ptr [ rbx + hexvar ] , ecx add rsp , hexvar pop rbx pop rbp ret
sub esp , hexvar mov edx , dword ptr [ esp + hexvar ] jmp hexvar mov edx , eax mov eax , dword ptr [ edx + hexvar ] test eax , eax je hexvar cmp byte ptr [ eax + hexvar ] , num jns hexvar mov eax , dword ptr [ edx + hexvar ] test eax , eax je hexvar sub esp , hexvar push edx call dword ptr [ eax + hexvar ] add esp , hexvar add esp , hexvar ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx + hexvar ] push eax call hexvar add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s2 , a1 lui v0 , hexvar lw a1 , - hexvar ( v0 ) beqz a1 , hexvar move s1 , a0 lui v0 , hexvar lw v1 , - hexvar ( v0 ) lui v0 , hexvar ori v0 , v0 , hexvar addu v0 , a1 , v0 sll v0 , v0 , num addu v0 , v1 , v0 lw s0 , ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rsi + hexvar ] sub eax , hexvar seta cl movzx edx , cl mov esi , edx mov rsi , qword ptr [ rsi * num + hexvar ] mov dword ptr [ rbp - hexvar ] , eax jmp rsi mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax + hexvar ] sub ecx , hexvar setb dl movzx esi , dl mov eax , esi mov rax , qword ptr [ rax * num + hexvar ] mov dword ptr [ rbp - hexvar ] , ecx jmp rax mov edi , hexvar mov esi , hexvar call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rsi mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rsi call hexvar xor ecx , ecx mov dl , cl mov ecx , hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov byte ptr [ rbp - hexvar ] , dl mov edx , eax mov al , byte ptr [ rbp - hexvar ] call hexvar mov edi , hexvar call hexvar mov dword ptr [ rbp - num ] , num mov rsi , qword ptr [ rip + hexvar ] jmp rsi mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar addiu a0 , zero , num sw s0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s1 , hexvar ( sp ) addiu s1 , sp , hexvar sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) move a1 , s1 lw v0 , ( s0 ) sw v0 , hexvar ( sp ) jalr t9 nop bnez v0 , hexvar lw gp , hexvar ( sp ) lui v0 , hexvar lw v1 , hexvar ( sp ) lw a1 , hexvar ( sp ) lui a3 , hexvar addiu v0 , v0 , hexvar sra a0 , v1 , hexvar mult v1 , v0 sra a2 , a1 , hexvar ori a3 , a3 , hexvar mfhi v0 sra v0 , v0 , hexvar subu v0 , v0 , a0 sra t0 , v0 , hexvar addu a0 , a1 , v0 addu a2 , a2 , t0 sltu a1 , a0 , a1 addu a2 , a1 , a2 mul a1 , v0 , a3 multu a0 , a3 mflo t1 mfhi t0 mul v0 , a2 , a3 subu v1 , v1 , a1 lw a1 , hexvar ( sp ) addu t0 , v0 , t0 sra v0 , v1 , hexvar addu v1 , t1 , v1 addu a0 , t0 , v0 sltu v0 , v1 , t1 addu v0 , v0 , a0 lw a0 , ( s0 ) bne a1 , a0 , hexvar lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) bal hexvar move a0 , s1 lui v0 , hexvar lw v1 , hexvar ( sp ) lui a3 , hexvar addiu v0 , v0 , hexvar lw a1 , hexvar ( sp ) lw gp , hexvar ( sp ) ori a3 , a3 , hexvar mult v1 , v0 sra a0 , v1 , hexvar sra a2 , a1 , hexvar b hexvar mfhi v0 lw t9 , - hexvar ( gp )
push r15 push r14 push r12 push rbx push rax mov r15 , rsi mov r12 , rdi mov rbx , qword ptr [ rdi + hexvar ] xor r14d , r14d mov rdi , rsi xor esi , esi call hexvar mov esi , hexvar mov rdi , rbx mov edx , eax xor eax , eax call hexvar test eax , eax jle hexvar mov rsi , qword ptr [ r12 + hexvar ] mov edi , hexvar mov rdx , r15 call hexvar test eax , eax jle hexvar mov dword ptr [ r12 ] , hexvar mov rdi , qword ptr [ r12 + hexvar ] mov esi , num xor edx , edx xor ecx , ecx call hexvar mov qword ptr [ r12 + hexvar ] , rax mov r14d , num mov eax , r14d add rsp , num pop rbx pop r12 pop r14 pop r15 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] xor edx , edx call hexvar test eax , eax setne r9b movzx eax , r9b mov ecx , eax mov rcx , qword ptr [ rcx * num + hexvar ] jmp rcx mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov rdx , qword ptr [ rbp - hexvar ] sub rax , rdx setne cl movzx r8d , cl mov edx , r8d mov rdx , qword ptr [ rdx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rdx mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push r15 push r14 push r12 push rbx sub rsp , hexvar mov r12 , rdx mov r15 , rsi mov r14 , rdi test rdi , rdi je hexvar mov rbx , qword ptr [ r14 ] test rbx , rbx jne hexvar mov edi , num call hexvar test rax , rax je hexvar mov rbx , rax mov dword ptr [ rax + num ] , num mov rax , qword ptr [ r15 ] mov qword ptr [ rsp + num ] , rax lea rdi , [ rsp + num ] mov rsi , rsp lea rdx , [ rsp + hexvar ] lea rcx , [ rsp + hexvar ] mov r8 , r12 call hexvar test al , al js hexvar mov edx , hexvar cmp dword ptr [ rsp + hexvar ] , num jne hexvar mov edi , dword ptr [ rsp ] add edi , num mov esi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov r12 , rax mov dword ptr [ rbx + num ] , num mov rax , qword ptr [ rsp ] test rax , rax je hexvar mov rsi , qword ptr [ rsp + num ] cmp rax , num je hexvar mov cl , byte ptr [ rsi ] test cl , cl jne hexvar add rsi , num mov qword ptr [ rsp + num ] , rsi add rax , - num mov qword ptr [ rsp ] , rax movsxd rdx , eax mov rdi , r12 call hexvar mov rax , qword ptr [ rsp ] add qword ptr [ rsp + num ] , rax mov rdi , qword ptr [ rbx + num ] test rdi , rdi je hexvar call hexvar mov rax , qword ptr [ rsp ] mov qword ptr [ rbx + num ] , r12 mov dword ptr [ rbx ] , eax test r14 , r14 je hexvar mov qword ptr [ r14 ] , rbx mov rax , qword ptr [ rsp + num ] mov qword ptr [ r15 ] , rax jmp hexvar mov edx , hexvar jmp hexvar mov edx , hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov r8d , hexvar call hexvar test r14 , r14 je hexvar cmp qword ptr [ r14 ] , rbx je hexvar mov rdi , rbx call hexvar xor ebx , ebx mov rax , rbx add rsp , hexvar pop rbx pop r12 pop r14 pop r15 ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar sub esp , num push dword ptr [ esp + hexvar ] push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num je hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ hexvar ] mov eax , dword ptr [ eax ] sub esp , hexvar lea esi , [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar call hexvar mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ hexvar ] mov eax , dword ptr [ eax ] sub esp , hexvar lea esi , [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar call hexvar jmp hexvar nop word ptr cs : [ eax + eax ] nop
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 move s1 , a1 addiu a3 , zero , hexvar lui a2 , hexvar addiu a2 , a2 , hexvar addiu a1 , zero , hexvar addiu a0 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz s0 , hexvar addiu a3 , zero , hexvar lw a0 , ( s0 ) beqz a0 , hexvar move a2 , s1 lui a1 , hexvar addiu a1 , a1 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) addiu a3 , zero , hexvar lui a2 , hexvar addiu a2 , a2 , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push r15 push r14 mov r15 , rcx push r13 push r12 mov r14 , rsi push rbp push rbx mov r13 , rdx mov rbx , rdi mov r12d , r8d sub rsp , hexvar mov eax , dword ptr [ rsp + hexvar ] mov dword ptr [ rsp + hexvar ] , eax mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax cmp byte ptr [ rdi ] , hexvar je hexvar cmp dword ptr [ rsi ] , num je hexvar test r13 , r13 je hexvar mov rcx , r15 mov rdx , r13 mov rsi , r14 mov rdi , rbx mov qword ptr [ rsp + num ] , r9 call hexvar test rax , rax mov rbp , rax js hexvar mov r9 , qword ptr [ rsp + num ] add rbp , rbx cmp dword ptr [ rsp + hexvar ] , - num mov eax , dword ptr [ rsp + hexvar ] mov esi , r12d mov qword ptr [ rsp + num ] , r9 sete cl cmp dword ptr [ rsp + hexvar ] , - num sete dl and eax , hexvar and esi , hexvar or eax , esi and cl , dl mov byte ptr [ rsp + hexvar ] , cl jne hexvar mov eax , r12d mov rdi , rbp and eax , hexvar mov esi , eax mov dword ptr [ rsp + hexvar ] , eax call hexvar test eax , eax mov r9 , qword ptr [ rsp + num ] jne hexvar mov rsi , r15 mov rdi , rbx call r9
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov esi , esp mov dword ptr [ esi + num ] , eax mov dword ptr [ esi + num ] , edx mov dword ptr [ esi ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop esi pop ebp ret
push ebp push edi push esi push ebx xor esi , esi call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push num call hexvar mov dword ptr [ esp + hexvar ] , eax add esp , hexvar test eax , eax jne hexvar jmp hexvar sub esp , num push esi push dword ptr [ edi + num ] call hexvar mov ebp , eax pop eax pop edx push dword ptr [ esp + hexvar ] push dword ptr [ ebp ] call hexvar add esp , hexvar test eax , eax je hexvar add esi , num sub esp , hexvar push dword ptr [ edi + num ] call hexvar add esp , hexvar cmp esi , eax jl hexvar xor esi , esi sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar add esp , hexvar mov eax , esi pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , num mov al , byte ptr [ ebp + num ] movsx ecx , byte ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov byte ptr [ ebp - num ] , al call hexvar xor ecx , ecx movzx edx , al movsx edx , byte ptr [ edx + hexvar ] cmp ecx , edx setle al and al , num movzx eax , al add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , num call hexvar add eax , hexvar sub esp , num push dword ptr [ ebp + hexvar ] lea eax , [ eax - hexvar ] push eax push dword ptr [ ebp + num ] call hexvar add esp , hexvar leave ret
push ebp mov ebp , esp sub esp , num lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , num pop ebp ret
push r12 push rbp push rbx mov rbp , rdi mov r12 , rsi mov rax , qword ptr [ rsi + num ] mov rdi , rsi call qword ptr [ rax + hexvar ] mov rbx , rax mov rax , qword ptr [ rbp + num ] mov qword ptr [ rbx + num ] , rax mov rax , qword ptr [ rbp + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov eax , dword ptr [ rbp + hexvar ] mov dword ptr [ rbx + hexvar ] , eax mov rsi , qword ptr [ rbp + hexvar ] test rsi , rsi je hexvar mov rdi , r12 call hexvar test rax , rax je hexvar mov qword ptr [ rbx + hexvar ] , rax mov rax , rbx pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ ebp + num ] movsx ecx , byte ptr [ ebp + num ] add ecx , - hexvar mov edx , ecx sub edx , hexvar mov byte ptr [ ebp - num ] , al mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx ja hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov byte ptr [ ebp - num ] , hexvar jmp hexvar mov byte ptr [ ebp - num ] , hexvar jmp hexvar mov byte ptr [ ebp - num ] , hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar movsx eax , byte ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push num push num push num push num push num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push eax push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar lea eax , [ hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , num call hexvar xor ecx , ecx mov dword ptr [ ebp - num ] , eax cmp ecx , dword ptr [ ebp - num ] jg hexvar xor eax , eax mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar jmp hexvar add esp , hexvar pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] push dword ptr [ eax + hexvar ] call hexvar add esp , hexvar pop ebx ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov rax , rsp add rax , - hexvar mov rsp , rax mov ecx , dword ptr [ rbp - num ] mov dword ptr [ rax ] , ecx mov edx , dword ptr [ rax ] mov dword ptr [ hexvar ] , edx cmp dword ptr [ hexvar ] , hexvar setae sil mov byte ptr [ rbp - num ] , sil mov al , byte ptr [ rbp - num ] test al , num jne hexvar jmp hexvar movabs rdi , hexvar mov esi , hexvar movabs rdx , hexvar call hexvar mov rsp , rbp pop rbp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , num mov esi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov edx , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , edi mov edi , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , edi xor edi , edi test ebp , ebp sete cl test eax , eax sete al or cl , al jne hexvar test esi , esi je hexvar mov eax , num test byte ptr [ esi + hexvar ] , hexvar jne hexvar test edx , edx je hexvar test byte ptr [ esi + hexvar ] , num je hexvar movzx edx , byte ptr [ esi + hexvar ] mov eax , num test dl , dl jne hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push ebp push dword ptr [ esi + hexvar ] call hexvar add esp , hexvar test eax , eax setne al movzx eax , al jmp hexvar sub esp , num lea eax , [ ebx ] push eax push esi call hexvar lea edx , [ esp + hexvar ] mov ecx , hexvar mov edi , edx mov eax , num cld rep stosd dword ptr es : [ edi ] , eax add esp , hexvar jmp hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push edx mov ecx , dword ptr [ esp + hexvar ] mov edx , ebp mov eax , esi call hexvar add esp , hexvar jmp hexvar mov eax , num mov ebx , dword ptr [ esp + hexvar ] xor ebx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx lea ecx , [ ebp - num ] mov dword ptr [ esp + num ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar test al , num jne hexvar call hexvar cmp dword ptr [ eax ] , hexvar jne hexvar movsd xmm0 , qword ptr [ ebp - num ] xorps xmm1 , xmm1 ucomisd xmm0 , xmm1 jb hexvar mov eax , dword ptr [ ebp - hexvar ] movsx eax , byte ptr [ eax ] cmp eax , num je hexvar mov eax , dword ptr [ ebp - hexvar ] movsx eax , byte ptr [ eax + num ] cmp eax , num jne hexvar mov eax , dword ptr [ ebp - hexvar ] lea ecx , [ ebp - num ] mov dword ptr [ esp ] , ecx movsx eax , byte ptr [ eax ] mov dword ptr [ esp + num ] , eax call hexvar test al , num jne hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ esp ] , hexvar call hexvar movsd xmm0 , qword ptr [ ebp - num ] movsd qword ptr [ ebp - hexvar ] , xmm0 fld qword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
mov eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax cmp byte ptr [ edx ] , hexvar je hexvar mov eax , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ edi + esi * num ] , eax add esi , num jmp hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw zero , hexvar ( sp ) sb zero , hexvar ( sp ) sb zero , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push rbx sub rsp , hexvar mov rbx , rdi mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov edx , hexvar mov edi , num mov esi , num mov ecx , hexvar call hexvar cmp qword ptr [ rip + hexvar ] , num jne hexvar mov qword ptr [ rip + hexvar ] , hexvar mov edx , hexvar mov edi , hexvar mov esi , num mov ecx , hexvar call hexvar mov rax , qword ptr [ rip + hexvar ] and ebx , hexvar mov qword ptr [ rsp ] , rbx mov rdi , rsp call qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rax + num ] add rsp , hexvar pop rbx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) addiu v0 , v0 , hexvar move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) addiu v0 , v0 , hexvar move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) addiu v0 , v0 , hexvar move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov r15 , rdi mov rbx , qword ptr [ rdi + hexvar ] mov rax , rbx add rax , qword ptr [ rdi + hexvar ] mov qword ptr [ rsp + num ] , rax mov esi , num call hexvar lea r13 , [ rip + hexvar ] jmp hexvar mov edx , num lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rbx , rax jmp hexvar mov rsi , qword ptr [ rip + hexvar ] mov edi , hexvar call hexvar mov rbx , qword ptr [ rbx + hexvar ] test rbx , rbx je hexvar mov rdi , qword ptr [ rbx + num ] call hexvar mov rbp , rax mov rdi , qword ptr [ rbx ] call hexvar mov rcx , rbp mov rdx , rax mov rsi , r13 mov edi , num mov eax , num call hexvar cmp qword ptr [ rbx + num ] , hexvar jne hexvar mov rdx , qword ptr [ rbx + hexvar ] lea rsi , [ rip + hexvar ] mov edi , num mov eax , num call hexvar jmp hexvar mov r12 , qword ptr [ r12 + hexvar ] test r12 , r12 je hexvar cmp dword ptr [ r12 + hexvar ] , num je hexvar mov edx , num lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rbx , rax mov rdi , qword ptr [ r12 + num ] call hexvar mov r8 , rbx mov rcx , rax mov rdx , qword ptr [ r12 ] lea rsi , [ rip + hexvar ] mov edi , num mov eax , num call hexvar mov rbx , qword ptr [ r12 + hexvar ] test rbx , rbx jne hexvar jmp hexvar mov rbx , r14 test r14 , r14 je hexvar call hexvar mov rsi , qword ptr [ rsp + num ] mov rdi , rbx call hexvar mov r14 , rax cmp qword ptr [ rip + hexvar ] , num je hexvar sub rbx , qword ptr [ r15 + hexvar ] mov edx , num lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rdx , rbx mov rsi , rax mov edi , num mov eax , num call hexvar mov r12 , qword ptr [ rip + hexvar ] test r12 , r12 jne hexvar jmp hexvar mov edi , hexvar call hexvar mov eax , num add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , eax call hexvar test eax , eax jle hexvar mov edi , eax mov ebp , dword ptr [ esi + hexvar ] mov eax , dword ptr [ esi + num ] sub eax , ebp cmp edi , eax jg hexvar lea eax , [ ebp + edi ] mov dword ptr [ esi + hexvar ] , eax test byte ptr [ esi + num ] , num je hexvar cmp byte ptr [ eax ] , hexvar je hexvar cmp edi , num jle hexvar sub esp , num push num lea eax , [ ebx - hexvar ] push eax push ebp call hexvar add esp , hexvar test eax , eax jne hexvar movzx eax , byte ptr [ ebp + num ] cmp al , hexvar sete cl cmp al , hexvar sete dl or cl , dl jne hexvar cmp al , hexvar jne hexvar cmp byte ptr [ ebp + num ] , hexvar je hexvar mov ecx , edi mov edx , ebp mov eax , esi call hexvar mov dword ptr [ esi + hexvar ] , eax add esp , hexvar pop ebx pop esi pop edi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) lui s1 , hexvar sw s2 , hexvar ( sp ) move s2 , a2 sw s3 , hexvar ( sp ) addiu a2 , s1 , hexvar sw gp , hexvar ( sp ) move s3 , a1 sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) move a0 , v0 addiu a1 , a1 , hexvar jalr t9 move s0 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) move a0 , s0 jalr t9 addiu a1 , a1 , hexvar bnez v0 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu v0 , zero , num lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) addiu a1 , zero , num bal hexvar move a0 , s2 addiu v0 , zero , num lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw v0 , - hexvar ( gp ) addiu s1 , s1 , hexvar lui a2 , hexvar lw t9 , - hexvar ( gp ) sw s1 , hexvar ( sp ) addiu a1 , zero , num addiu a2 , a2 , hexvar lw a0 , ( v0 ) jalr t9 move a3 , s3 move v0 , zero lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ edx + hexvar ] mov edi , dword ptr [ edx + hexvar ] mov dword ptr [ esp + hexvar ] , edi or edi , esi mov dword ptr [ esp + num ] , esi jne hexvar mov dword ptr [ ecx ] , num xor esi , esi add esp , hexvar pop ebx mov eax , esi pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) move s3 , a2 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) jal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move fp , v0 move s1 , zero lui s5 , hexvar addiu s5 , s5 , hexvar lui v0 , hexvar addiu s7 , v0 , hexvar b hexvar addiu s6 , fp , num move a1 , s7 move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) bnez v0 , hexvar addiu v0 , zero , hexvar lb v0 , num ( s0 ) beqz v0 , hexvar addiu v0 , zero , hexvar move s4 , s6 addiu s0 , s0 , num sw s0 , hexvar ( sp ) lw v0 , num ( s2 )
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , num mov r13 , rdi mov rbx , rsi mov rbp , rdx mov r12 , qword ptr [ rdx + hexvar ] test r12 , r12 je hexvar mov r14d , hexvar sub r14 , r12 cmp r14 , rsi cmova r14 , rsi lea r15 , [ rdx + hexvar ] lea rdi , [ r15 + r12 ] mov rdx , r14 mov rsi , r13 call hexvar mov rsi , r14 add rsi , qword ptr [ rbp + hexvar ] mov qword ptr [ rbp + hexvar ] , rsi cmp rsi , hexvar jbe hexvar and rsi , hexvar mov rdx , rbp mov rdi , r15 call hexvar mov rdx , qword ptr [ rbp + hexvar ] and edx , hexvar mov qword ptr [ rbp + hexvar ] , rdx lea rsi , [ r12 + r14 ] and rsi , hexvar lea rsi , [ r15 + rsi ] mov rdi , r15 call hexvar add r13 , r14 sub rbx , r14 cmp rbx , hexvar jbe hexvar mov r12 , rbx and r12 , hexvar mov rdx , rbp mov rsi , r12 mov rdi , r13 call hexvar add r13 , r12 and ebx , hexvar test rbx , rbx je hexvar mov r12 , qword ptr [ rbp + hexvar ] lea r14 , [ rbp + hexvar ] lea rdi , [ r14 + r12 ] mov rdx , rbx mov rsi , r13 call hexvar add rbx , r12 cmp rbx , hexvar jbe hexvar mov rdx , rbp mov esi , hexvar mov rdi , r14 call hexvar add rbx , - hexvar lea rsi , [ rbp + hexvar ] mov rdx , rbx mov rdi , r14 call hexvar mov qword ptr [ rbp + hexvar ] , rbx add rsp , num pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar add esp , num pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s1 , a0 lw v0 , hexvar ( a0 )
push r13 push r12 push rbp push rbx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rbx , qword ptr [ rdi + hexvar ] test byte ptr [ rbx + hexvar ] , num je hexvar mov rbp , rdi mov r13d , esi mov r12 , qword ptr [ rbx + hexvar ] test r12 , r12 jne hexvar mov r8d , hexvar mov ecx , hexvar mov edx , hexvar mov esi , num mov edi , hexvar call hexvar mov r12 , rax mov qword ptr [ rbx + hexvar ] , rax test rax , rax je hexvar mov rax , qword ptr [ rbp + hexvar ] mov qword ptr [ rsp ] , rax mov rsi , rsp mov rdi , r12 call hexvar test rax , rax je hexvar mov rax , qword ptr [ rax + num ] jmp hexvar test r13d , r13d js hexvar lea rsi , [ rsp + hexvar ] mov edi , r13d call hexvar test eax , eax jne hexvar test r12 , r12 je hexvar mov edi , hexvar call hexvar mov rbx , rax test rax , rax je hexvar mov rax , qword ptr [ rbp + hexvar ] mov qword ptr [ rbx ] , rax mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rbx + num ] , rax mov rsi , rbx mov rdi , r12 call hexvar test rax , rax je hexvar cmp rbx , rax je hexvar call hexvar mov rdi , rbx call hexvar mov rax , qword ptr [ rsp + hexvar ] jmp hexvar mov eax , num jmp hexvar mov eax , num jmp hexvar mov eax , num mov rdx , qword ptr [ rsp + hexvar ] xor rdx , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r4 , [ r1 , hexvar ] ldr r2 , [ r4 , hexvar ] clz r3 , r4 lsr r3 , r3 , num cmp r2 , num orrne r3 , r3 , num cmp r3 , num beq hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a1 sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) beqz a0 , hexvar sw gp , hexvar ( sp ) lui s2 , hexvar lw t9 , - hexvar ( s2 ) beqz t9 , hexvar move s1 , a0 jalr t9 move a1 , zero lui v0 , hexvar lw t9 , hexvar ( v0 ) jalr t9 move a0 , s1 lw t9 , - hexvar ( s2 ) beqz t9 , hexvar addiu a1 , zero , num jalr t9 move a0 , zero blez s0 , hexvar lui s2 , hexvar lui v0 , hexvar lui s1 , hexvar lw t9 , - hexvar ( s2 ) beqz t9 , hexvar sw zero , hexvar ( v0 ) lui v0 , hexvar sw zero , hexvar ( sp ) addiu a3 , zero , hexvar addiu a2 , s1 , - hexvar move a0 , zero sw zero , hexvar ( v0 ) jalr t9 move a1 , s0 lui v0 , hexvar addiu a2 , zero , hexvar addiu a1 , s1 , - hexvar lw t9 , hexvar ( v0 ) jalr t9 move a0 , s0 lw t9 , - hexvar ( s2 ) beqz t9 , hexvar lw gp , hexvar ( sp ) addiu v1 , zero , num sw v0 , hexvar ( sp ) addiu a3 , zero , hexvar addiu a2 , s1 , - hexvar sw v1 , hexvar ( sp ) move a0 , v0 jalr t9 move a1 , s0 lw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) beqz v0 , hexvar slti s0 , s0 , hexvar bnez s0 , hexvar lw v1 , - hexvar ( gp ) lbu v1 , ( v1 ) sb v1 , ( v0 ) lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw ra , hexvar ( sp ) move v0 , zero lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ hexvar ] and esi , hexvar cmp esi , num setne bl xor bl , hexvar xor bl , hexvar and bl , num movzx ebx , bl mov esi , dword ptr [ ebp + hexvar ] mov bh , byte ptr [ esi + hexvar ] and bl , num shl bl , num and bh , hexvar or bh , bl mov byte ptr [ esi + hexvar ] , bh mov esi , dword ptr [ ebp + hexvar ] mov bl , byte ptr [ esi + hexvar ] and bl , hexvar or bl , hexvar mov byte ptr [ esi + hexvar ] , bl mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov dword ptr [ ebp - hexvar ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] lea ecx , [ hexvar ] add ecx , dword ptr [ eax * num + hexvar ] mov dword ptr [ esp ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r13 , rcx mov rbx , rdx mov r12 , rsi mov rbp , rdi mov rax , rcx shr rax , hexvar je hexvar movabs rax , hexvar lea rcx , [ rbp + hexvar ] mov qword ptr [ rsp + hexvar ] , rcx lea rcx , [ rbp + hexvar ] mov qword ptr [ rsp + num ] , rcx lea r14 , [ rax + num ] movabs r15 , hexvar mov qword ptr [ rsp ] , r13 nop word ptr cs : [ rax + rax ] nop movabs rax , hexvar add r13 , rax mov rcx , qword ptr [ rbp + hexvar ] mov rdi , rbx mov rsi , r12 mov rdx , r14 mov r8 , qword ptr [ rsp + hexvar ] mov r9 , qword ptr [ rsp + num ] call hexvar add rbx , r15 add r12 , r15 movabs rax , hexvar cmp r13 , rax ja hexvar mov r13 , qword ptr [ rsp ] movabs rax , hexvar and r13 , rax test r13 , r13 je hexvar mov rcx , qword ptr [ rbp + hexvar ] lea r8 , [ rbp + hexvar ] add rbp , hexvar mov rdi , rbx mov rsi , r12 mov rdx , r13 mov r9 , rbp call hexvar mov eax , num add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] ldr r3 , [ sp , num ] ldr r3 , [ r3 ] cmp r3 , num beq hexvar cmp r3 , num beq hexvar cmp r3 , num bne hexvar ldr r1 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 b hexvar ldr r1 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 b hexvar mov r2 , num ldr r1 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 b hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push r15 push r14 push r13 push r12 mov r12 , rdi push rbp push rbx sub rsp , hexvar call hexvar mov rbp , rax mov r13d , dword ptr [ rax ] mov eax , dword ptr [ rip + hexvar ] mov rbx , qword ptr [ rip + hexvar ] test eax , eax jg hexvar lea rax , [ rip + hexvar ] cmp rbx , rax je hexvar mov rdi , rbx mov esi , hexvar call hexvar mov rbx , rax mov qword ptr [ rip + hexvar ] , rax movsxd rdi , dword ptr [ rip + hexvar ] mov edx , num xor esi , esi sub edx , edi shl rdi , num movsxd rdx , edx add rdi , rbx shl rdx , num call hexvar mov dword ptr [ rip + hexvar ] , num mov eax , dword ptr [ rip + hexvar ] mov r11 , qword ptr [ rbx ] lea r15 , [ rip + hexvar ] mov r14 , qword ptr [ rbx + num ] sub rsp , num mov r8d , dword ptr [ rip + hexvar ] mov rcx , - num mov rdx , r12 or eax , num mov rsi , r11 mov dword ptr [ rsp + hexvar ] , eax push qword ptr [ rip + hexvar ] mov r9d , eax push qword ptr [ rip + hexvar ] push r15 mov rdi , r14 mov qword ptr [ rsp + hexvar ] , r11 call hexvar add rsp , hexvar mov r11 , qword ptr [ rsp ] cmp r11 , rax ja hexvar lea rsi , [ rax + num ] lea rax , [ rip + hexvar ] cmp r14 , rax mov qword ptr [ rbx ] , rsi je hexvar mov rdi , r14 mov qword ptr [ rsp ] , rsi call hexvar mov rsi , qword ptr [ rsp ] mov rdi , rsi mov qword ptr [ rsp ] , rsi call hexvar sub rsp , num mov qword ptr [ rbx + num ] , rax mov r8d , dword ptr [ rip + hexvar ] push qword ptr [ rip + hexvar ] push qword ptr [ rip + hexvar ] mov rcx , - num push r15 mov r9d , dword ptr [ rsp + hexvar ] mov rdx , r12 mov rsi , qword ptr [ rsp + hexvar ] mov rdi , rax mov r14 , rax call hexvar add rsp , hexvar mov dword ptr [ rbp ] , r13d add rsp , hexvar mov rax , r14 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
ldrb r3 , [ r0 , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ r0 , hexvar ] ldr r1 , [ r0 , hexvar ] ldr r2 , [ r0 , r3 , lsl num ] str r1 , [ r0 , r3 , lsl num ] ldr r1 , [ r0 , hexvar ] cmp r3 , r1 moveq r3 , num addne r3 , r3 , num andne r3 , r3 , num strbeq r3 , [ r0 , hexvar ] strne r3 , [ r0 , hexvar ] mov r0 , r2 bx lr push { r4 , lr } bl hexvar
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + hexvar ] mov dword ptr [ hexvar ] , ecx mov ecx , dword ptr [ hexvar ] cmp ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax jge hexvar mov eax , dword ptr [ hexvar ] sub eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ hexvar ] , num test byte ptr [ hexvar ] , num je hexvar call hexvar mov eax , dword ptr [ ebp + num ] test byte ptr [ eax + hexvar ] , num je hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar add esp , num pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] lea esi , [ ebp - hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar sub esp , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar sub esp , num lea eax , [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar cmp eax , num je hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] lea edx , [ hexvar ] cmp dword ptr [ ecx ] , edx mov dword ptr [ ebp - num ] , eax je hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx jne hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax + hexvar ] , num add esp , num pop ebp ret
push rbp push r15 push r14 push rbx push rax mov r14 , rsi mov r15 , rdi mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar xor ebp , ebp test rax , rax je hexvar mov rbx , rax xorps xmm0 , xmm0 movups xmmword ptr [ rax ] , xmm0 mov qword ptr [ r15 + hexvar ] , rax mov r14 , qword ptr [ r14 + hexvar ] mov rdi , qword ptr [ r14 ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx ] , rax test rax , rax je hexvar mov rax , qword ptr [ r14 + num ] mov qword ptr [ rbx + num ] , rax mov ebp , num mov eax , ebp add rsp , num pop rbx pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar call hexvar nop word ptr [ eax + eax ]
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v1 , hexvar ( sp ) sw v1 , ( v0 ) lw v0 , hexvar ( sp ) sw zero , num ( v0 ) lw v0 , hexvar ( sp ) sw zero , num ( v0 ) lw v0 , hexvar ( sp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( sp ) addiu v1 , zero , num sw v1 , hexvar ( v0 ) lw v0 , hexvar ( sp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( sp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( sp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( sp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( sp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( sp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( sp ) addiu v1 , zero , num sw v1 , hexvar ( v0 ) lw v0 , hexvar ( sp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( sp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( sp ) addiu v0 , v0 , hexvar move a2 , v0 lw a1 , hexvar ( sp ) move a0 , zero lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push ebp mov ebp , esp push ebx push edi push esi sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov cx , word ptr [ ebp + num ] movzx edx , word ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov word ptr [ ebp - hexvar ] , cx mov ecx , esi sar edx , cl movzx esi , word ptr [ ebp + num ] mov edi , hexvar sub edi , dword ptr [ ebp + hexvar ] mov ecx , edi shl esi , cl or edx , esi and edx , hexvar mov bx , dx movzx edx , bx mov dword ptr [ ebp - hexvar ] , eax mov eax , edx add esp , num pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov esi , num mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov esi , num mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] cmp rdx , rax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rbp - num ] lea rsi , [ rdx + num ] mov rdx , qword ptr [ rbp - hexvar ] lea rcx , [ rdx + num ] mov rdx , rax mov rdi , rcx call hexvar test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , num mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov eax , dword ptr [ rbp - hexvar ] leave ret
push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax test esi , esi je hexvar mov edx , dword ptr [ esi ] test edx , edx je hexvar mov edi , dword ptr [ ebx + hexvar ] test edi , edi je hexvar mov eax , dword ptr [ edi ] test eax , eax je hexvar sub esp , num push - num push eax push dword ptr [ edx + hexvar ] call hexvar add esp , hexvar cmp eax , - num je hexvar sub esp , num push eax mov eax , dword ptr [ esi ] push dword ptr [ eax + hexvar ] call hexvar mov esi , eax mov eax , dword ptr [ eax + num ] add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ esi + num ] test eax , eax je hexvar cmp dword ptr [ eax ] , hexvar jne hexvar mov eax , dword ptr [ eax + num ] mov edx , dword ptr [ eax + num ] mov dword ptr [ esp + num ] , edx push dword ptr [ ebx + hexvar ] push dword ptr [ eax ] lea eax , [ esp + hexvar ] push eax push num call hexvar add esp , hexvar mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi ret
push ebp push edi xor edi , edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ edx + hexvar ] test esi , esi je hexvar mov edi , dword ptr [ esi + hexvar ] test ecx , ecx jne hexvar mov dword ptr [ eax ] , num cmp byte ptr [ edx ] , num ja hexvar mov ebp , ecx mov ecx , eax movzx eax , byte ptr [ edx ] mov esi , edx mov edx , dword ptr [ ebx + eax * num - hexvar ] add edx , ebx jmp edx sub esp , num push esi push - num push ecx call hexvar add esp , hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi movzx edi , byte ptr [ rip + hexvar ] mov eax , edi mov edi , eax and edi , num mov eax , edi mov rax , qword ptr [ rax * num + hexvar ] jmp rax xor eax , eax mov ecx , eax mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx jmp rdx mov edi , dword ptr [ rbp - num ] call hexvar mov rcx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rbp - num ] mov esi , ecx mov rdi , rax call hexvar add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ esi + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar cmp eax , num sete bl and bl , num movzx eax , bl add esp , hexvar pop esi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] cmp dword ptr [ edx + hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx je hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] movzx eax , byte ptr [ rsi + hexvar ] mov esi , eax mov eax , esi and eax , num mov esi , eax mov rsi , qword ptr [ rsi * num + hexvar ] jmp rsi mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call rcx mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rbp - hexvar ] call rax mov rax , qword ptr [ rip + hexvar ] jmp rax add rsp , hexvar pop rbp ret
push r14 push rbx push rax test rsi , rsi je hexvar mov r14 , rsi mov rbx , rdi add rbx , hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , qword ptr [ rbx ] mov rsi , r14 add rsp , num pop rbx pop r14 jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax add rsp , num pop rbx pop r14 ret
beqz a0 , hexvar nop beqz a1 , hexvar nop beqz a2 , hexvar nop sw zero , num ( a0 )
push { r4 , r5 , lr } sub sp , sp , hexvar mov r4 , r1 mov r5 , r2 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ r2 ] mov r1 , num bl hexvar cmp r0 , num beq hexvar ldr r1 , [ pc , hexvar ] bl hexvar subs r2 , r0 , num beq hexvar mov r3 , hexvar str r3 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] add r0 , sp , hexvar blx r2 cmp r0 , num movne r0 , num bne hexvar mov r3 , num str r3 , [ r5 ] ldrb r3 , [ r4 , hexvar ] bic r3 , r3 , hexvar orr r3 , r3 , hexvar strb r3 , [ r4 , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r3 , num moveq r0 , num beq hexvar mov r3 , num str r3 , [ sp , num ] str r4 , [ sp , hexvar ] add r1 , sp , num mov r0 , r4 bl hexvar cmp r0 , num beq hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] add r1 , sp , num add r0 , sp , num blx r3 ldr r3 , [ sp , num ] cmp r3 , num beq hexvar ldrb r3 , [ r4 , hexvar ] bic r3 , r3 , hexvar orr r3 , r3 , hexvar strb r3 , [ r4 , hexvar ] mov r0 , num b hexvar bl hexvar mov r1 , r0 ldr r0 , [ pc , hexvar ] bl hexvar mov r0 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov bl , byte ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] and bl , num mov byte ptr [ ebp - hexvar ] , bl mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp mov dword ptr [ eax ] , ebx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi call hexvar movzx ecx , al mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx mov eax , dword ptr [ hexvar ] jmp eax lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar xor eax , eax mov ecx , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , ecx mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , num mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov bl , byte ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] and bl , num mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx movzx ecx , bl mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ esp + hexvar ] , num lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ esp + hexvar ] , eax call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] cmp eax , num jne hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ hexvar ] , eax jmp hexvar add esp , hexvar pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] str r3 , [ sp ] ldr r3 , [ sp , num ] ldr r1 , [ r3 ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] ldr r2 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bgt hexvar mov r3 , num b hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc } andeq r0 , r0 , r0 ldrshls r0 , [ r1 , - hexvar ]
push esi push ebx call hexvar add ebx , hexvar sub esp , num mov esi , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ esi ] test edx , edx je hexvar sub esp , num push eax push edx call hexvar add esp , hexvar test eax , eax sete al movzx edx , al lea edx , [ esi + edx * num ] mov dword ptr [ ebx + hexvar ] , edx add esp , num pop ebx pop esi ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , edi mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ecx mov ebx , dword ptr [ edx ] mov ebx , dword ptr [ ebx + hexvar ] mov ecx , dword ptr [ edx ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ edx ] mov dl , byte ptr [ edx + hexvar ] mov eax , dword ptr [ eax ] and dl , num sub esp , hexvar mov dword ptr [ esp ] , ebx mov dword ptr [ esp + num ] , ecx movzx ecx , dl mov dword ptr [ esp + num ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov al , num and al , num movzx eax , al lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax + hexvar ] and eax , num test al , al je hexvar mov edi , num call hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , num lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax jns hexvar mov edi , num call hexvar mov eax , num jmp hexvar mov dword ptr [ rbp - hexvar ] , hexvar mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] cmp dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ ebp - hexvar ] call eax mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ edx ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call eax mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov edx , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , num sete cl and cl , num movzx eax , cl add esp , hexvar pop esi pop ebp ret
and r3 , r0 , hexvar cmp r3 , hexvar moveq r3 , hexvar beq hexvar cmp r3 , hexvar moveq r3 , hexvar beq hexvar cmp r3 , hexvar moveq r3 , hexvar beq hexvar cmp r3 , hexvar moveq r3 , hexvar beq hexvar cmp r3 , hexvar moveq r3 , hexvar beq hexvar cmp r3 , hexvar moveq r3 , hexvar movne r3 , hexvar strb r3 , [ r1 ] and r3 , r0 , hexvar cmp r3 , num movne r3 , hexvar moveq r3 , hexvar strb r3 , [ r1 , num ] and r3 , r0 , hexvar cmp r3 , num movne r3 , hexvar moveq r3 , hexvar strb r3 , [ r1 , num ] and r3 , r0 , hexvar cmp r3 , num movne ip , hexvar moveq ip , hexvar strb ip , [ r1 , num ] and r3 , r0 , hexvar cmp r3 , num movne r3 , hexvar moveq r3 , hexvar strb r3 , [ r1 , num ] and r3 , r0 , hexvar cmp r3 , num movne r3 , hexvar moveq r3 , hexvar strb r3 , [ r1 , num ] and r3 , r0 , num cmp r3 , num movne r2 , hexvar moveq r2 , hexvar strb r2 , [ r1 , num ] and r3 , r0 , num cmp r3 , num movne r3 , hexvar moveq r3 , hexvar strb r3 , [ r1 , num ] and r3 , r0 , num cmp r3 , num movne r3 , hexvar moveq r3 , hexvar strb r3 , [ r1 , num ] and r3 , r0 , num cmp r3 , num movne r3 , hexvar moveq r3 , hexvar strb r3 , [ r1 , num ] tst r0 , hexvar beq hexvar cmp ip , hexvar movne ip , hexvar moveq ip , hexvar strb ip , [ r1 , num ] tst r0 , hexvar beq hexvar cmp r2 , hexvar movne r2 , hexvar moveq r2 , hexvar strb r2 , [ r1 , num ] tst r0 , hexvar bxeq lr cmp r3 , hexvar movne r3 , hexvar moveq r3 , hexvar strb r3 , [ r1 , num ] bx lr
push esi push ebx mov edx , dword ptr [ esp + hexvar ] mov eax , num cmp dword ptr [ edx + num ] , num je hexvar lea eax , [ edx + hexvar ] mov ebx , num mov dword ptr [ edx + hexvar ] , num mov dword ptr [ edx + hexvar ] , num lea ecx , [ edx + hexvar ] and ecx , hexvar sub eax , ecx add eax , hexvar and eax , hexvar mov esi , num mov dword ptr [ ecx + esi ] , ebx add esi , num cmp esi , eax jb hexvar lea eax , [ edx + hexvar ] mov ebx , num mov dword ptr [ edx + hexvar ] , num mov dword ptr [ edx + hexvar ] , num lea ecx , [ edx + hexvar ] and ecx , hexvar sub eax , ecx add eax , hexvar and eax , hexvar mov esi , num mov dword ptr [ ecx + esi ] , ebx add esi , num cmp esi , eax jb hexvar mov dword ptr [ edx ] , num mov dword ptr [ edx + num ] , num mov dword ptr [ edx + hexvar ] , num mov eax , num pop ebx pop esi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - hexvar ] , eax je hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] jbe hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx + hexvar ] jae hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr r6 , [ pc , hexvar ] ldr r7 , [ pc , hexvar ] ldr r3 , [ r6 , hexvar ] ldr r2 , [ r7 ] sub sp , sp , hexvar cmp r3 , num mov r8 , r0 str r2 , [ sp , hexvar ] beq hexvar ldr r0 , [ pc , hexvar ] bl hexvar cmp r0 , num ldr r5 , [ pc , hexvar ] mov r2 , num movne r5 , r0 mov r1 , r8 ldr r0 , [ pc , hexvar ] bl hexvar subs r4 , r0 , num bne hexvar ldrb r3 , [ r6 , hexvar ] cmp r3 , num bne hexvar add r0 , sp , hexvar bl hexvar subs r4 , r0 , num bne hexvar bl hexvar subs r8 , r0 , num beq hexvar cmn r8 , num beq hexvar ldr r0 , [ sp , hexvar ] bl hexvar cmp r0 , num bne hexvar ldr r3 , [ r6 , hexvar ] ldr r2 , [ r6 , hexvar ] str r8 , [ r6 , hexvar ] cmp r3 , r2 ldr r0 , [ r6 , hexvar ] beq hexvar ldr r1 , [ sp , hexvar ] add r2 , r3 , num str r1 , [ r0 , r3 , lsl num ] ldr sb , [ sp , hexvar ] str r2 , [ r6 , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r7 ] mov r0 , sb cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] ldr r3 , [ sp , num ] cmp r3 , num blt hexvar ldr r3 , [ sp , num ] cmp r3 , num ble hexvar mov r3 , num b hexvar ldr r2 , [ pc , hexvar ] ldr r3 , [ sp , num ] ldr r3 , [ r2 , r3 , lsl num ] mov r0 , r3 bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ sp ] str r3 , [ sp , hexvar ] ldr r2 , [ pc , hexvar ] ldr r3 , [ sp , num ] ldr r3 , [ r2 , r3 , lsl num ] cmp r3 , num beq hexvar ldr r2 , [ pc , hexvar ] ldr r3 , [ sp , num ] ldr r3 , [ r2 , r3 , lsl num ] mov r0 , r3 bl hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r1 , r0 ldr r2 , [ pc , hexvar ] ldr r3 , [ sp , num ] str r1 , [ r2 , r3 , lsl num ] mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) beqz v0 , hexvar nop lw v0 , hexvar ( fp ) lb v0 , ( v0 ) bnez v0 , hexvar nop addiu v0 , zero , num b hexvar nop lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) addiu v0 , zero , num sw v0 , hexvar ( sp ) lui v0 , hexvar addiu a3 , v0 , hexvar lui v0 , hexvar addiu a2 , v0 , - hexvar lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) move v1 , v0 lui v0 , hexvar sll v1 , v1 , num addiu v0 , v0 , hexvar addu v0 , v1 , v0 lw v0 , ( v0 ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push r12 push rbp mov r12 , rdx push rbx mov rbp , rdi call hexvar mov rdi , qword ptr [ r12 + hexvar ] movsxd rbx , eax xor r8d , r8d xor ecx , ecx mov rdx , rbx mov rsi , rbp call hexvar cmp rbx , rax sete al pop rbx pop rbp pop r12 ret
lui v0 , hexvar lbu v0 , hexvar ( v0 ) bnez v0 , hexvar lui v0 , hexvar lbu v0 , hexvar ( v0 ) beqz v0 , hexvar lui v0 , hexvar beqz a0 , hexvar lui v0 , hexvar lui v0 , hexvar lw v1 , hexvar ( v0 ) lui v0 , hexvar sw v1 , - hexvar ( v0 ) jr ra nop lui v0 , hexvar lw v1 , - hexvar ( v0 ) lui v0 , hexvar jr ra sw v1 , - hexvar ( v0 ) lbu v1 , hexvar ( v0 ) lui v0 , hexvar beqz v1 , hexvar lw v0 , - hexvar ( v0 ) beqz a0 , hexvar lui v1 , hexvar lui v1 , hexvar lw v1 , hexvar ( v1 ) bne v1 , v0 , hexvar nop lui v1 , hexvar lw a0 , - hexvar ( v1 ) bne a0 , v0 , hexvar addiu a0 , zero , num movn a0 , zero , v0 jr ra sw a0 , - hexvar ( v1 ) lui v1 , hexvar jr ra sw v0 , - hexvar ( v1 )
test rdi , rdi je hexvar movzx eax , byte ptr [ rdi + hexvar ] test al , al je hexvar jmp hexvar cmp byte ptr [ rdi + hexvar ] , num jne hexvar mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi jne hexvar mov eax , num ret
push rbp mov rbp , rsp push r15 push r14 push r12 push rbx mov r15 , rcx mov r14 , rdx mov r12 , rdi mov eax , dword ptr [ rip ] test eax , eax jne hexvar mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al jae hexvar add byte ptr [ rax ] , al add byte ptr [ rax ] , al xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al popfq add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al mov byte ptr [ rip ] , hexvar mov byte ptr [ rip ] , hexvar xor al , hexvar add eax , num mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , num mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi + hexvar ] add rsi , - num mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rip + hexvar ] jmp rsi mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] sub rax , rcx setle dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] add rax , rcx mov rcx , rax shr rcx , hexvar add rax , rcx sar rax , num mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rcx , qword ptr [ rbp - hexvar ] shl rcx , num add rax , rcx mov rsi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] test eax , eax sets dl movzx eax , dl mov ecx , eax mov rcx , qword ptr [ rcx * num + hexvar ] jmp rcx mov rax , qword ptr [ rbp - hexvar ] add rax , - num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov eax , dword ptr [ rbp - hexvar ] test eax , eax setg cl movzx eax , cl mov edx , eax mov rdx , qword ptr [ rdx * num + hexvar ] jmp rdx mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov byte ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov byte ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov al , byte ptr [ rbp - num ] and al , num movzx eax , al add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , lr } mov r6 , r0 mov r5 , r1 mov r4 , r2 bl hexvar cmp r0 , num bne hexvar cmp r5 , num ldrne r3 , [ r6 , hexvar ] ldrne r3 , [ r3 , hexvar ] strne r3 , [ r5 ] cmp r4 , num ldrne r3 , [ r6 , hexvar ] addne r3 , r3 , hexvar ldrne r3 , [ r3 , hexvar ] strne r3 , [ r4 ] pop { r4 , r5 , r6 , pc }
mov rax , qword ptr [ rdi ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rsi ] mov rcx , qword ptr [ rcx + hexvar ] mov rdx , rax sub rdx , rcx xor esi , esi test rdx , rdx setg sil xor edx , edx cmp rax , rcx lea eax , [ rsi + rsi - num ] cmove eax , edx ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , edx mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] lea eax , [ ebx + hexvar ] mov ecx , dword ptr [ eax ] cmp ecx , dword ptr [ ebx + hexvar ] je hexvar lea edx , [ ebx + hexvar ] lea ebp , [ ebx + hexvar ] mov eax , dword ptr [ edx ] shl eax , num add eax , dword ptr [ ebp ] mov ecx , dword ptr [ esp ] mov ebx , dword ptr [ esp + num ] mov dword ptr [ eax ] , ecx mov dword ptr [ eax + num ] , ebx mov eax , dword ptr [ edx ] mov ebx , eax shl ebx , num mov ecx , ebx add ecx , dword ptr [ ebp ] mov dword ptr [ ecx + num ] , esi mov dword ptr [ ecx + hexvar ] , edi add eax , num mov dword ptr [ edx ] , eax add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] lea ebx , [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , ebx mov dword ptr [ ebp - hexvar ] , eax lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , ebx call hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx lea eax , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
sub rsp , num cmp byte ptr [ rip + hexvar ] , num je hexvar add qword ptr [ rip + hexvar ] , num cmp dword ptr [ rip + hexvar ] , num je hexvar add rsp , num jmp hexvar nop dword ptr [ rax + rax ] mov r9d , dword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] test r9b , num je hexvar or dword ptr [ rip + hexvar ] , hexvar add edx , num test sil , num je hexvar cmp edi , num je hexvar cmp edi , num je hexvar cmp edi , hexvar ja hexvar lea r8 , [ rip + hexvar ] mov ecx , edi movsxd rax , dword ptr [ r8 + rcx * num ] add rax , r8 jmp rax nop dword ptr [ rax + rax ] cmp edx , num mov rcx , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rip + hexvar ] jle hexvar mov eax , hexvar mov dword ptr [ rcx ] , hexvar add rcx , num mov word ptr [ rcx - num ] , ax mov qword ptr [ rip + hexvar ] , rcx add rsp , num ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - num ] mov rdi , rdx call rax jmp hexvar mov rax , qword ptr [ rbp - num ] movzx eax , byte ptr [ rax + hexvar ] and eax , hexvar test al , al jne hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar test eax , eax jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] movzx eax , byte ptr [ rax + hexvar ] and eax , hexvar cmp al , hexvar jne hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] jmp hexvar mov eax , num leave ret
lui v0 , hexvar addiu a0 , v0 , hexvar lw v1 , hexvar ( a0 ) beqz v1 , hexvar nop jr ra nop lui v1 , hexvar lbu v1 , hexvar ( v1 ) bnez v1 , hexvar nop lui a1 , hexvar lw v1 , hexvar ( a0 ) lw a2 , hexvar ( a1 ) beq a2 , v1 , hexvar nop lw v0 , hexvar ( v0 ) bnez v0 , hexvar nop lui gp , hexvar addiu gp , gp , - hexvar lw t9 , - hexvar ( gp ) b hexvar addiu a1 , a1 , hexvar
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , num mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push rbp mov rbp , rsp mov dword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - num ] , rax mov dword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov eax , dword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rip + hexvar ] sub eax , ecx setb dl movzx ecx , dl mov esi , ecx mov rsi , qword ptr [ rsi * num + hexvar ] mov dword ptr [ rbp - hexvar ] , eax jmp rsi mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] test ecx , ecx sete dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] sub ecx , num sete dl movzx esi , dl mov eax , esi mov rax , qword ptr [ rax * num + hexvar ] mov dword ptr [ rbp - hexvar ] , ecx jmp rax movzx eax , byte ptr [ rip + hexvar ] mov ecx , eax mov eax , ecx and eax , num mov ecx , eax mov rcx , qword ptr [ rcx * num + hexvar ] jmp rcx mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] test ecx , ecx setg dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] test ecx , ecx setg dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov eax , dword ptr [ rbp - hexvar ] add eax , num mov dword ptr [ rbp - hexvar ] , eax mov rcx , qword ptr [ rip + hexvar ] jmp rcx mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - num ] , rax mov ecx , dword ptr [ rbp - hexvar ] add ecx , num mov dword ptr [ rbp - hexvar ] , ecx mov rax , qword ptr [ rip + hexvar ] jmp rax mov eax , dword ptr [ rbp - hexvar ] pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax test rdx , rdx je hexvar mov rbx , rdx mov r15 , rsi mov r14 , rdi lea eax , [ rdx * num ] mov ecx , dword ptr [ rdi + hexvar ] add eax , dword ptr [ rdi + hexvar ] jae hexvar add ecx , num mov dword ptr [ r14 + hexvar ] , ecx mov rdx , rbx shr rdx , hexvar add edx , ecx mov dword ptr [ r14 + hexvar ] , edx mov dword ptr [ r14 + hexvar ] , eax mov ebp , dword ptr [ r14 + hexvar ] test rbp , rbp je hexvar lea rax , [ rbx + rbp ] or rax , rbx lea rdi , [ r14 + rbp ] add rdi , hexvar cmp rax , hexvar jb hexvar lea r12 , [ r14 + hexvar ] mov r13d , hexvar sub r13 , rbp neg rbp mov rsi , r15 mov rdx , r13 call hexvar mov edx , num mov rdi , r14 mov rsi , r12 call hexvar add r15 , rbp add r15 , hexvar sub rbx , r13 xorps xmm0 , xmm0 movups xmmword ptr [ r12 + hexvar ] , xmm0 movups xmmword ptr [ r12 + hexvar ] , xmm0 movups xmmword ptr [ r12 + hexvar ] , xmm0 movups xmmword ptr [ r12 ] , xmm0 mov dword ptr [ r12 + hexvar ] , num mov rdx , rbx shr rdx , num je hexvar mov rdi , r14 mov rsi , r15 call hexvar mov rax , rbx and rax , hexvar add r15 , rax sub rbx , rax test rbx , rbx je hexvar mov dword ptr [ r14 + hexvar ] , ebx add r14 , hexvar mov rdi , r14 mov rsi , r15 mov rdx , rbx call hexvar jmp hexvar mov rsi , r15 mov rdx , rbx call hexvar add dword ptr [ r14 + hexvar ] , ebx mov eax , num add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp push rbx mov rbx , rdx mov rbp , rsi lea rsi , [ rip + hexvar ] mov rcx , rdi sub rsp , num mov edx , dword ptr [ rip + hexvar ] mov edi , num xor eax , eax call hexvar mov edi , dword ptr [ rip + hexvar ] mov rsi , rbp call hexvar lea rsi , [ rip + hexvar ] mov edi , num xor eax , eax call hexvar mov edi , dword ptr [ rip + hexvar ] mov rsi , rbx call hexvar add rsp , num mov edi , hexvar pop rbx pop rbp jmp hexvar nop word ptr [ rax + rax ]
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] xor edx , edx mov cl , dl mov byte ptr [ rbp - hexvar ] , cl jmp rax mov rsi , qword ptr [ rbp - hexvar ] mov edi , hexvar call hexvar test eax , eax sete cl mov rsi , qword ptr [ rip + hexvar ] mov byte ptr [ rbp - hexvar ] , cl jmp rsi mov al , byte ptr [ rbp - hexvar ] and al , num mov byte ptr [ rbp - hexvar ] , al mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov al , byte ptr [ rbp - hexvar ] and al , num movzx eax , al add rsp , hexvar pop rbp ret
push rbp push rbx push rax mov rbx , rdi mov dword ptr [ rsp + num ] , hexvar mov rcx , qword ptr [ rdi + hexvar ] test rcx , rcx je hexvar mov rax , qword ptr [ rcx + hexvar ] test rax , rax jne hexvar mov rcx , qword ptr [ rbx + hexvar ] test rcx , rcx je hexvar mov rax , qword ptr [ rcx + hexvar ] test rax , rax je hexvar mov rdx , qword ptr [ rcx + hexvar ] lea rsi , [ rsp + num ] mov rdi , rbx call rax cmp eax , num je hexvar cmp eax , num je hexvar mov ebp , num cmp eax , num jne hexvar mov edx , dword ptr [ rsp + num ] mov rdi , rbx mov esi , num call hexvar mov ebp , hexvar jmp hexvar mov dword ptr [ rbx + hexvar ] , num mov ebp , num jmp hexvar mov edx , dword ptr [ rsp + num ] mov ebp , num mov rdi , rbx mov esi , num call hexvar mov eax , ebp add rsp , num pop rbx pop rbp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jge hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , num mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] and eax , hexvar cmp eax , num je hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi call hexvar and al , num mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
push ebx sub esp , num call hexvar add eax , hexvar sub esp , num lea edx , [ eax - hexvar ] push edx push dword ptr [ esp + hexvar ] mov ebx , eax call hexvar add esp , hexvar nop add esp , num pop ebx ret
push ebx mov ebx , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + num ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , ebx mov ebx , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , ecx xor ecx , ecx mov dword ptr [ esp + hexvar ] , ebx mov ebx , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , ebx mov ebx , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , ebx pop ebx jmp hexvar jmp hexvar nop nop nop nop nop nop nop nop nop nop nop nop nop
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov cl , byte ptr [ eax ] sub cl , hexvar sete dl movzx eax , dl mov eax , dword ptr [ eax * num + hexvar ] mov byte ptr [ ebp - num ] , cl jmp eax mov eax , dword ptr [ ebp - num ] inc eax mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov ecx , eax inc ecx mov dword ptr [ ebp + num ] , ecx mov dl , byte ptr [ eax ] test dl , dl setne dl movzx eax , dl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push { r4 , lr } sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] ldr r3 , [ sp ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , num ] ldr r3 , [ r3 , num ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] ldr r4 , [ r3 , num ] ldr r3 , [ sp , num ] ldr r1 , [ r3 , num ] ldr r3 , [ sp , num ] ldr r2 , [ r3 , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] mov r0 , num blx r4 b hexvar ldr r3 , [ sp , hexvar ] ldr r4 , [ r3 , num ] ldr r3 , [ sp , num ] ldr r0 , [ r3 , hexvar ] ldr r3 , [ sp , num ] ldr r1 , [ r3 , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] mov r2 , num blx r4 mov r0 , r0 add sp , sp , hexvar pop { r4 , pc }
push { r4 , r5 , lr } ldr r4 , [ pc , hexvar ] ldrb r5 , [ r0 ] ldr lr , [ r4 ] cmp r5 , hexvar movne r1 , r0 addeq r1 , r0 , num mov r0 , num b hexvar cmp lr , r2 bne hexvar mov r1 , r3 mov r3 , r1 ldrb r2 , [ r3 ] , num sub ip , r2 , hexvar cmp ip , num bhi hexvar orr r0 , r0 , ip b hexvar ldr ip , [ r4 , num ] cmp ip , r2 beq hexvar cmp r0 , num popeq { r4 , r5 , pc } ldr r3 , [ pc , hexvar ] cmp r5 , hexvar ldrb r0 , [ r3 , r2 ] rsbeq r0 , r0 , num pop { r4 , r5 , pc }
push r15 push r14 push r12 push rbx push rax test rdi , rdi je hexvar mov r12 , rsi test rsi , rsi je hexvar mov r15 , rdi mov ecx , dword ptr [ rdi + hexvar ] mov eax , hexvar cmp ecx , hexvar ja hexvar mov r14 , rdx test ecx , ecx jne hexvar cmp r14 , hexvar jb hexvar mov rbx , r14 nop word ptr cs : [ rax + rax ] nop mov rax , qword ptr [ r12 ] xor qword ptr [ r15 + hexvar ] , rax mov rax , qword ptr [ r12 + num ] xor qword ptr [ r15 + hexvar ] , rax mov rdi , r15 call hexvar add r12 , hexvar add rbx , - hexvar cmp rbx , hexvar ja hexvar and r14d , hexvar test r14 , r14 je hexvar mov eax , dword ptr [ r15 + hexvar ] xor ebx , ebx nop movzx ecx , byte ptr [ r12 + rbx ] lea edx , [ rax + num ] mov dword ptr [ r15 + hexvar ] , edx cdqe xor byte ptr [ r15 + rax + hexvar ] , cl mov eax , dword ptr [ r15 + hexvar ] cmp eax , hexvar jne hexvar mov rdi , r15 call hexvar mov dword ptr [ r15 + hexvar ] , num xor eax , eax add rbx , num cmp r14 , rbx jne hexvar xor eax , eax add rsp , num pop rbx pop r12 pop r14 pop r15 ret
push ebp mov ebp , esp call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] lea edx , [ eax - num ] mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax + hexvar ] , edx nop pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] test rsi , rsi setne al movzx ecx , al mov esi , ecx mov rsi , qword ptr [ rsi * num + hexvar ] jmp rsi mov rax , qword ptr [ rip + hexvar ] jmp rax movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov ecx , hexvar sub rax , rcx sete dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rip + hexvar ] jmp rax movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] test ecx , ecx setne dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] add rax , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar xor ecx , ecx mov dil , cl mov ecx , hexvar mov r9d , hexvar mov byte ptr [ rbp - hexvar ] , dil mov edi , ecx mov rcx , r9 mov r9 , rax mov al , byte ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rip + hexvar ] mov dword ptr [ rbp - hexvar ] , eax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rcx + hexvar ] , rax add rsp , hexvar pop rbp ret
test rsi , rsi je hexvar movsxd rcx , dword ptr [ rdx ] mov eax , num cmp qword ptr [ rsi + rcx * num ] , num je hexvar push rbp push rbx sub rsp , num mov rbx , rdx mov rbp , rsi mov esi , hexvar call hexvar mov byte ptr [ rax + hexvar ] , num mov byte ptr [ rax + hexvar ] , num movsxd rdx , dword ptr [ rbx ] mov rdx , qword ptr [ rbp + rdx * num ] mov qword ptr [ rax + hexvar ] , rdx add dword ptr [ rbx ] , num mov eax , num jmp hexvar mov eax , num ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov byte ptr [ hexvar ] , num mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a1 , hexvar ( fp ) sw a0 , hexvar ( fp ) addiu v0 , zero , num sb v0 , hexvar ( fp ) lui v0 , hexvar lw a1 , - hexvar ( v0 ) lw a0 , - hexvar ( v0 ) move v0 , a0 or v0 , v0 , a1 beqz v0 , hexvar nop lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move a2 , v0 move a1 , zero move a0 , zero lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) sb zero , hexvar ( fp ) lui a0 , hexvar lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v1 , - hexvar ( a0 ) sw v0 , - hexvar ( a0 ) lbu v0 , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar mov rbx , qword ptr [ rax ] test rbx , rbx je hexvar lea r14 , [ rbx + hexvar ] mov r12 , rsp mov rbp , rsi mov r13 , rdi mov edx , hexvar mov rsi , r12 mov rdi , r14 call hexvar cmp r14 , qword ptr [ rsp ] mov qword ptr [ rbp + hexvar ] , rax je hexvar lea r14 , [ rbx + hexvar ] mov edx , hexvar mov rsi , r12 mov rdi , r14 call hexvar cmp r14 , qword ptr [ rsp ] mov dword ptr [ rbp + hexvar ] , eax je hexvar lea r14 , [ rbx + hexvar ] mov edx , hexvar mov rsi , r12 mov rdi , r14 call hexvar cmp r14 , qword ptr [ rsp ] mov dword ptr [ rbp + hexvar ] , eax je hexvar add rbx , hexvar mov edx , num mov rsi , r12 mov rdi , rbx call hexvar cmp rbx , qword ptr [ rsp ] mov dword ptr [ rbp + hexvar ] , eax je hexvar mov rax , qword ptr [ r13 + hexvar ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rbp + hexvar ] , rax xor eax , eax mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) addiu a2 , zero , hexvar lui v0 , hexvar addiu a1 , v0 , hexvar addiu a0 , zero , num lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( sp ) addiu v1 , zero , - num sw v1 , ( v0 ) lw v0 , hexvar ( sp ) addiu v1 , zero , - num sw v1 , num ( v0 ) lw v0 , hexvar ( sp ) lw v1 , hexvar ( sp ) sw v1 , hexvar ( v0 )
push ebp push edi mov ebp , ecx push esi push ebx mov edi , eax call hexvar add ebx , hexvar sub esp , hexvar push num push num push edx push eax call hexvar add esp , hexvar test eax , eax je hexvar sub esp , num mov esi , eax push num push edi call hexvar add esp , hexvar test eax , eax je hexvar mov edx , dword ptr [ esi + hexvar ] mov dword ptr [ eax + num ] , ebp mov dword ptr [ eax ] , edx mov dword ptr [ esi + hexvar ] , eax add esp , hexvar pop ebx mov eax , num pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num setne al mov byte ptr [ rbp - num ] , al mov al , byte ptr [ rbp - num ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov eax , hexvar mov rcx , qword ptr [ rbp - hexvar ] cmp rcx , rax jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax + hexvar ] mov dword ptr [ rbp - hexvar ] , ecx mov eax , dword ptr [ rbp - hexvar ] cmp eax , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , qword ptr [ rbp - hexvar ] mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , ecx mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov byte ptr [ rax ] , num mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rcx mov rdi , rax call hexvar leave ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - num ] , eax je hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax call hexvar cmp dword ptr [ eax ] , num jne hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , eax call hexvar call hexvar nop word ptr cs : [ eax + eax ] nop dword ptr [ eax + eax ]
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar move v0 , a1 addiu a0 , v0 , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) move a1 , zero lw t9 , - hexvar ( gp ) jalr t9 sw zero , hexvar ( v0 )
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov ebp , dword ptr [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax cmp dword ptr [ ebp + hexvar ] , hexvar je hexvar sub esp , num push hexvar push ebp call hexvar add esp , hexvar mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rdi mov byte ptr [ rbp - hexvar ] , num mov rdi , qword ptr [ rip + hexvar ] jmp rdi mov rax , qword ptr [ rbp - hexvar ] mov cl , byte ptr [ rax ] sub cl , hexvar sete dl movzx esi , dl mov eax , esi mov rax , qword ptr [ rax * num + hexvar ] mov byte ptr [ rbp - hexvar ] , cl jmp rax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov cl , byte ptr [ rax ] test cl , cl setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov cl , byte ptr [ rax ] sub cl , hexvar sete dl movzx esi , dl mov eax , esi mov rax , qword ptr [ rax * num + hexvar ] mov byte ptr [ rbp - hexvar ] , cl jmp rax mov byte ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax movzx eax , byte ptr [ rbp - hexvar ] mov ecx , eax mov eax , ecx and eax , num mov ecx , eax mov rcx , qword ptr [ rcx * num + hexvar ] jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov byte ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , hexvar mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) sw a3 , hexvar ( sp ) addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , - hexvar jal hexvar nop lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push r12 push rbp mov r12 , rdi push rbx mov rbx , rsi mov rbp , rdx sub rsp , hexvar mov rdi , rsp mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar test rbx , rbx je hexvar movsxd rdx , dword ptr [ rbp ] mov rbx , qword ptr [ rbx + rdx * num ] mov rax , rdx test rbx , rbx je hexvar add eax , num mov rsi , rsp mov rdi , rbx mov dword ptr [ rbp ] , eax call qword ptr [ rip + hexvar ] test eax , eax jne hexvar mov rsi , rbx mov rdi , r12 call hexvar mov rcx , qword ptr [ rip + hexvar ] mov dword ptr [ rax + hexvar ] , num mov rsi , rax mov rax , qword ptr [ rsp + hexvar ] mov rdx , qword ptr [ rsp + hexvar ] pxor xmm0 , xmm0 mov dword ptr [ rsi + hexvar ] , num pxor xmm2 , xmm2 movss xmm1 , dword ptr [ rip + hexvar ] sub rcx , rax mov qword ptr [ rsi + hexvar ] , rax mov qword ptr [ rsi + hexvar ] , rdx mov rax , rcx movabs rdx , hexvar sar rcx , hexvar imul rdx movsd xmm3 , qword ptr [ rip + hexvar ] sar rdx , hexvar sub rdx , rcx cvtsi2ss xmm0 , edx cvtss2sd xmm2 , xmm0 ucomisd xmm3 , xmm2 jbe hexvar movss dword ptr [ rsi + hexvar ] , xmm1 mov eax , num mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , num call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] sub esp , hexvar push dword ptr [ ebp + hexvar ] call eax add esp , hexvar sub esp , num push eax push dword ptr [ ebp + hexvar ] push dword ptr [ ebp + num ] call hexvar add esp , hexvar nop leave ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] lea ecx , [ hexvar ] mov dword ptr [ eax + num ] , ecx mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp eax , num je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx call hexvar mov byte ptr [ ebp - hexvar ] , al mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - num ] add edx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , ecx call hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esi ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + num ] , num mov dword ptr [ edx + num ] , num mov edx , dword ptr [ ebp + hexvar ] mov byte ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + hexvar ] mov byte ptr [ edx + hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx test al , num mov edx , num cmovne ecx , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + hexvar ] , ecx add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push edi push esi push ebx call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] mov eax , num test esi , esi je hexvar mov edi , dword ptr [ esi + hexvar ] mov eax , dword ptr [ edi ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar add esp , hexvar cmp dword ptr [ esi + hexvar ] , num je hexvar cmp dword ptr [ esi + hexvar ] , num je hexvar mov eax , dword ptr [ edi ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar add esp , hexvar mov dword ptr [ esi + hexvar ] , num mov dword ptr [ esi + hexvar ] , num mov edx , dword ptr [ esi + hexvar ] mov eax , num test edx , edx je hexvar sub esp , hexvar push edx call hexvar add esp , hexvar mov eax , num pop ebx pop esi pop edi ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax test edi , edi je hexvar mov ebp , dword ptr [ esp + hexvar ] test ebp , ebp je hexvar mov ecx , dword ptr [ esp + hexvar ] test ecx , ecx jne hexvar mov eax , dword ptr [ esi + hexvar ] mov ebp , dword ptr [ eax + hexvar ] test ebp , ebp je hexvar mov edx , num mov eax , esi call hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push edi push esi call hexvar add esp , hexvar test eax , eax jne hexvar xor eax , eax mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx xor esi , esi call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] and eax , hexvar cmp eax , hexvar je hexvar add esp , hexvar mov eax , esi pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx sete dl mov byte ptr [ rbp - num ] , dl mov al , byte ptr [ rbp - num ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num setne cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] add rdi , num mov qword ptr [ rax + hexvar ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) beq v1 , v0 , hexvar nop lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) beqz v0 , hexvar nop lw v0 , hexvar ( fp ) b hexvar nop lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move s0 , v0 lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) addu v0 , s0 , v0 addiu v0 , v0 , num move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) lw a3 , hexvar ( fp ) lw a2 , hexvar ( fp ) lui v0 , hexvar addiu a1 , v0 , hexvar lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw v0 , hexvar ( fp ) b hexvar nop lw v0 , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) lw s0 , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
addiu sp , sp , - num sw fp , num ( sp ) move fp , sp sw a0 , num ( fp ) lui v0 , hexvar lw v1 , hexvar ( v0 ) lui v0 , hexvar lw v0 , hexvar ( v0 ) bne v1 , v0 , hexvar nop lui v0 , hexvar lw v1 , hexvar ( v0 ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) addu v1 , v1 , v0 lui v0 , hexvar lw v0 , - hexvar ( v0 ) slt v0 , v0 , v1 bnez v0 , hexvar nop lw v1 , num ( fp ) addiu v0 , zero , hexvar beq v1 , v0 , hexvar nop lw v1 , num ( fp ) addiu v0 , zero , - num beq v1 , v0 , hexvar nop addiu v0 , zero , num b hexvar nop move v0 , zero andi v0 , v0 , num andi v0 , v0 , hexvar move sp , fp lw fp , num ( sp ) addiu sp , sp , num jr ra nop
push r14 push rbx push rax mov r14 , rsi mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] call hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov rax , qword ptr [ rbx + hexvar ] add rax , hexvar jmp hexvar mov rax , qword ptr [ rbx + hexvar ] add rax , hexvar mov rbx , qword ptr [ rax ] mov rdi , r14 call hexvar test eax , eax je hexvar mov qword ptr [ rbx + hexvar ] , r14 mov eax , num add rsp , num pop rbx pop r14 ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) lb v1 , ( s1 ) addiu v1 , v1 , - hexvar sltiu v1 , v1 , hexvar beqz v1 , hexvar lw gp , hexvar ( sp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) move a0 , s1 addiu a1 , a1 , - hexvar jalr t9 move s0 , v0 xor v0 , v0 , s0 sltiu v0 , v0 , num lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar move v0 , zero
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov ebp , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] push num lea eax , [ esp + hexvar ] push eax call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , dword ptr [ esp + num ] mov dword ptr [ edi ] , eax mov eax , dword ptr [ esp + num ] mov dword ptr [ esi ] , eax mov eax , num mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp mov dword ptr [ eax + num ] , ebx mov dword ptr [ eax ] , edi mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + num ] , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , ecx mov dword ptr [ esi ] , eax call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , lr } ldr r4 , [ sp , num ] sub r1 , r4 , num cmp r1 , num ldrls pc , [ pc , r1 , lsl num ] b hexvar andeq lr , r6 , r0 , lsr num andeq lr , r6 , r8 , lsl fp andeq lr , r6 , r0 , lsl fp andeq lr , r6 , r8 , lsl num andeq lr , r6 , r8 , lsr num andeq lr , r6 , r8 , lsr num andeq lr , r6 , r8 , lsr num andeq lr , r6 , ip , ror num lsr lr , r3 , hexvar lsr ip , r3 , hexvar lsr r1 , r3 , num strb r3 , [ r0 , num ] strb lr , [ r0 , num ] strb ip , [ r0 , num ] strb r1 , [ r0 , num ] lsr r3 , r2 , hexvar strb r3 , [ r0 , num ] lsr r3 , r2 , hexvar strb r3 , [ r0 , num ] lsr r3 , r2 , num strb r3 , [ r0 , num ] strb r2 , [ r0 ] pop { r4 , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar beqz a1 , hexvar sw gp , hexvar ( sp ) move s2 , a1 addiu v0 , zero , hexvar beq a2 , v0 , hexvar move s1 , a0 move s0 , zero b hexvar addiu s3 , zero , hexvar addiu s0 , s0 , num lw v0 , num ( s1 )
push rbp push rbx sub rsp , hexvar mov rdi , qword ptr [ rsi + hexvar ] mov rax , qword ptr [ rsi + hexvar ] sub rdi , qword ptr [ rsi + hexvar ] sub rax , qword ptr [ rsi + hexvar ] mov rbx , rax jns hexvar add rbx , hexvar sub rdi , num mov eax , dword ptr [ rdx + hexvar ] cmp eax , num je hexvar jb hexvar cmp eax , num jne hexvar mov rsi , qword ptr [ rdx + hexvar ] mov qword ptr [ rsp + num ] , rdx call hexvar mov rdx , qword ptr [ rsp + num ] mov rax , rbx pxor xmm1 , xmm1 sub rax , qword ptr [ rdx + hexvar ] cvtsi2sd xmm1 , rax xor eax , eax mulsd xmm1 , qword ptr [ rip + hexvar ] addsd xmm1 , xmm0 ucomisd xmm1 , qword ptr [ rip + hexvar ] jbe hexvar movsd xmm0 , qword ptr [ rip + hexvar ] ucomisd xmm0 , xmm1 setae al add rsp , hexvar pop rbx pop rbp ret
push esi push ebx mov esi , eax call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ eax + num ] call hexvar pop eax push dword ptr [ esi + hexvar ] call hexvar add esp , hexvar cmp byte ptr [ esi + hexvar ] , num je hexvar sub esp , hexvar push dword ptr [ esi + num ] call hexvar add esp , hexvar add esp , num pop ebx pop esi ret
push rbp mov rbp , rsp push r15 push r14 push r13 push r12 push rbx push rax mov r14 , r8 mov r15d , esi mov rsi , rdi mov eax , dword ptr [ rip ] test eax , eax jne hexvar mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al rol dword ptr [ rip ] , cl rol dword ptr [ rip ] , cl
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , esp lea esi , [ ebp - hexvar ] mov dword ptr [ edx + hexvar ] , esi mov dword ptr [ edx ] , ecx mov dword ptr [ edx + hexvar ] , hexvar mov dword ptr [ edx + num ] , num mov dword ptr [ edx + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , eax test eax , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] xor edx , edx mov esi , hexvar sub esi , eax sbb edx , ecx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edx jb hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar xor eax , eax mov ecx , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , ecx mov byte ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov dword ptr [ hexvar ] , hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) beqz v0 , hexvar nop lw v0 , hexvar ( sp ) addiu v1 , v0 , hexvar addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui v0 , hexvar addiu a3 , v0 , hexvar addiu a2 , zero , hexvar addiu a1 , zero , - num move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) bgtz v0 , hexvar nop lw v0 , hexvar ( sp ) lw v0 , num ( v0 )
xor ecx , ecx mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov eax , hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil jne hexvar mov eax , edx imul rax , rax , hexvar cmp qword ptr [ rax ] , num sbb ecx , ecx or ecx , edx mov eax , ecx ret
sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax lea rcx , [ rsp + num ] lea r8 , [ rsp + hexvar ] call hexvar mov r8 , qword ptr [ rsp + hexvar ] mov rcx , qword ptr [ rsp + num ] cmp r8 , rcx jle hexvar lea rdx , [ rip + hexvar ] mov esi , num mov rdi , qword ptr [ rip + hexvar ] mov eax , num call hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r7 , r3 ldr r3 , [ r3 ] cmp r3 , num beq hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] cmp ecx , hexvar mov dword ptr [ ebp - num ] , eax jge hexvar mov eax , dword ptr [ hexvar ] add eax , num mov dword ptr [ hexvar ] , eax mov dword ptr [ hexvar ] , num add esp , num pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) move s2 , a2 sw s1 , hexvar ( sp ) move s1 , a0 sw ra , hexvar ( sp ) move a0 , a1 sw s0 , hexvar ( sp ) b hexvar sw gp , hexvar ( sp ) jalr t9 nop lw gp , hexvar ( sp ) lw v0 , ( s1 )
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu a0 , zero , hexvar lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw v0 , - hexvar ( gp ) lui a3 , hexvar lui a2 , hexvar lw t9 , - hexvar ( gp ) addiu a3 , a3 , - hexvar addiu a2 , a2 , - hexvar sw v0 , hexvar ( sp ) move a1 , zero bal hexvar addiu a0 , zero , hexvar lw gp , hexvar ( sp ) beqz v0 , hexvar sw v0 , ( s0 ) sw s1 , num ( s0 ) sw zero , num ( s0 ) lw ra , hexvar ( sp ) move v0 , s0 lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) move a0 , s0 jalr t9 move s0 , zero b hexvar lw ra , hexvar ( sp )
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + num ] mov ebx , dword ptr [ eax + num ] mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + num ] mov eax , dword ptr [ eax + num ] cmp ebx , edx ja hexvar cmp ebx , edx jb hexvar cmp ecx , eax jae hexvar mov eax , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + num ] mov ebx , dword ptr [ eax + num ] mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + num ] mov eax , dword ptr [ eax + num ] cmp ebx , edx jb hexvar cmp ebx , edx ja hexvar cmp ecx , eax jbe hexvar mov eax , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov ebx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] cmp ebx , edx ja hexvar cmp ebx , edx jb hexvar cmp ecx , eax jae hexvar mov eax , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov ebx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] cmp ebx , edx jb hexvar cmp ebx , edx ja hexvar cmp ecx , eax jbe hexvar mov eax , num jmp hexvar mov eax , num add esp , hexvar pop ebx pop ebp ret
test rdi , rdi je hexvar mov word ptr [ rdi + hexvar ] , num jmp hexvar push rax mov edi , num mov esi , num mov edx , hexvar call hexvar nop dword ptr [ rax + rax ]
push esi sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , eax mov dword ptr [ esi ] , ecx call hexvar add esp , hexvar pop esi ret
push { r4 , r5 , r6 , r7 , r8 , lr } subs r4 , r0 , num mov r2 , num mov r5 , r1 beq hexvar ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar mov r3 , r4 mov r2 , r0 mov r1 , num mov r0 , r5 bl hexvar bl hexvar ldr r3 , [ r0 ] mov r7 , r0 cmp r3 , num beq hexvar mov r4 , r0 ldr r6 , [ pc , hexvar ] mov r2 , r6 mov r1 , num mov r0 , r5 bl hexvar ldr r3 , [ r4 , num ] ! cmp r3 , num bne hexvar mov r1 , r5 mov r0 , hexvar bl hexvar mov r0 , r7 pop { r4 , r5 , r6 , r7 , r8 , lr } b hexvar ldr r1 , [ pc , hexvar ] bl hexvar mov r1 , num mov r2 , r0 mov r0 , r5 bl hexvar b hexvar andeq r8 , sb , r0 , lsr num ldrdeq r8 , sb , [ sb ] , -r4 andeq r8 , sb , ip , lsl num
push { r4 , r5 , r6 , r7 , lr } sub sp , sp , hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , num ] mov r3 , num str r3 , [ sp ] ldr r1 , [ r0 , hexvar ] ldrb r3 , [ r1 ] cmp r3 , hexvar movne r2 , num moveq r2 , num cmp r3 , num moveq r2 , num cmp r3 , hexvar orreq r2 , r2 , num cmp r2 , num bne hexvar mov r4 , r0 mov r5 , sp mov r7 , num mov r6 , hexvar b hexvar mov r0 , r4 bl hexvar cmp r0 , num beq hexvar mov r3 , r7 mov r2 , r0 mov r1 , r6 mov r0 , r4 bl hexvar str r0 , [ r5 ] cmp r0 , num beq hexvar add r5 , r0 , hexvar ldr r1 , [ r4 , hexvar ] ldrb r3 , [ r1 ] cmp r3 , hexvar movne r2 , num moveq r2 , num cmp r3 , num moveq r2 , num cmp r3 , hexvar orreq r2 , r2 , num cmp r2 , num bne hexvar cmp r3 , hexvar cmpne r3 , hexvar bne hexvar ldrb r3 , [ r1 , num ] cmp r3 , hexvar bne hexvar ldr r0 , [ sp ] cmp r0 , num beq hexvar ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc }
push rbp push rbx push rax mov ebx , esi mov dword ptr [ rdi + hexvar ] , esi mov rax , qword ptr [ rdi + num ] mov qword ptr [ rsp ] , rax mov eax , hexvar mov ebp , hexvar jmp hexvar cmp qword ptr [ rsp ] , num mov eax , hexvar cmove eax , ebp nop dword ptr [ rax ] cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar mov rdi , qword ptr [ rsp ] mov esi , ebx call hexvar mov eax , hexvar jmp hexvar add rsp , num pop rbx pop rbp ret
mov rax , qword ptr [ rdi + hexvar ] shl word ptr [ rax + hexvar ] , num add rax , hexvar mov qword ptr [ rsp - num ] , rax mov rax , qword ptr [ rsp - num ] movzx eax , word ptr [ rax ] mov dword ptr [ rsp - hexvar ] , eax mov ecx , hexvar mov eax , hexvar jmp hexvar mov ecx , dword ptr [ rsp - hexvar ] cmp ecx , hexvar mov ecx , hexvar cmovg ecx , eax cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar mov rcx , qword ptr [ rsp - num ] mov word ptr [ rcx ] , hexvar mov ecx , hexvar jmp hexvar jmp hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar xor ecx , ecx mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] cmp eax , - num mov eax , num cmove eax , ecx add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp mov dword ptr [ rbp - num ] , edi jmp hexvar mov eax , dword ptr [ rbp - num ] and eax , num shl eax , num mov ecx , num sub ecx , eax mov eax , ecx pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r3 , [ sp ] cmp r3 , num bne hexvar mov r1 , num ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 b hexvar add r3 , sp , num ldr r1 , [ sp ] mov r0 , r3 bl hexvar add r3 , sp , num mov r1 , r3 ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push r15 push r14 push r13 push r12 push rbp push rbx mov rbx , rdi mov rdi , rsi mov esi , hexvar mov rbp , rdx sub rsp , hexvar call hexvar mov byte ptr [ rax + hexvar ] , num mov byte ptr [ rax + hexvar ] , num mov r12 , rax mov rax , qword ptr [ rbx ] mov qword ptr [ r12 + hexvar ] , rax mov rax , qword ptr [ rbx + num ] mov qword ptr [ r12 + hexvar ] , rax mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ r12 + hexvar ] , rax mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ r12 + hexvar ] , rax mov rax , qword ptr [ rbx + hexvar ] mov byte ptr [ r12 + hexvar ] , num mov byte ptr [ r12 + hexvar ] , num mov dword ptr [ r12 + hexvar ] , num mov qword ptr [ r12 + hexvar ] , num mov qword ptr [ r12 + hexvar ] , rax movzx eax , byte ptr [ rbp ] test al , al je hexvar lea r13 , [ r12 + hexvar ] mov r15 , rbp jmp hexvar nop dword ptr [ rax ] cmp al , hexvar je hexvar mov r10 , r15 add r15 , num movzx eax , byte ptr [ r10 + num ] test al , al je hexvar cmp al , hexvar jne hexvar movsx ebx , byte ptr [ r15 + num ] cmp bl , hexvar je hexvar test bl , bl je hexvar lea eax , [ rbx - hexvar ] cmp al , num ja hexvar movsx edx , byte ptr [ r15 + num ] lea eax , [ rbx - hexvar ] lea ecx , [ rdx - hexvar ] cmp cl , num ja hexvar lea eax , [ rdx + rax * num - hexvar ] movsx edx , byte ptr [ r15 + num ] lea ecx , [ rdx - hexvar ] cmp cl , num ja hexvar lea eax , [ rdx + rax * num - hexvar ] mov r14d , num mov ebx , num mov byte ptr [ r15 ] , al mov rdx , r15 mov rsi , rbp mov rdi , r13 sub rdx , rbp mov rcx , r12 lea rbp , [ r15 + r14 ] add edx , num call hexvar lea r10 , [ r15 + rbx ] mov r13 , rax movzx eax , byte ptr [ r10 + num ] lea r15 , [ r10 + num ] test al , al jne hexvar cmp rbp , r15 jb hexvar add rsp , hexvar mov eax , num pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
orrs ip , r0 , r1 bne hexvar cmp r3 , num cmpeq r2 , num push { r4 , r5 } mov r4 , r2 mov r5 , r3 bls hexvar add r3 , pc , hexvar ldm r3 , { r2 , r3 } cmp r5 , r3 cmpeq r4 , r2 movls r0 , num bhi hexvar pop { r4 , r5 } bx lr b hexvar mov r0 , num pop { r4 , r5 } bx lr mov r0 , r4 mov r1 , r5 pop { r4 , r5 } b hexvar mov r0 , r0 cmneq sp , r8 , ror sp andeq r0 , r0 , r0
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] test esi , esi sete bl movzx esi , bl mov esi , dword ptr [ esi * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jmp esi mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + hexvar ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp + hexvar ] mov ecx , esp mov dword ptr [ ecx + num ] , eax lea eax , [ ebp + num ] mov dword ptr [ ecx ] , eax call hexvar movzx ecx , al mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , esp mov dword ptr [ edx + hexvar ] , ecx lea ecx , [ ebp - hexvar ] mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax mov dword ptr [ edx + hexvar ] , hexvar mov dword ptr [ edx + num ] , hexvar call hexvar test eax , eax sete byte ptr [ ebp - num ] mov eax , dword ptr [ hexvar ] jmp eax mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop ebx pop ebp ret
push { r4 , lr } mov r4 , r0 ldr r2 , [ r0 , num ] ldr r3 , [ r2 , num ] cmp r3 , num beq hexvar ldr r1 , [ r2 ] blx r3 mov r3 , num str r3 , [ r4 , num ] pop { r4 , pc }
push { r4 , r5 , r6 , r7 , r8 , lr } mov lr , num ldr ip , [ pc , hexvar ] sub sp , sp , hexvar ldr r8 , [ pc , hexvar ] add r4 , sp , hexvar ldr r3 , [ ip , num ] strb r2 , [ r4 , - num ] ! ldr r5 , [ ip ] ldr r2 , [ r8 ] cmp r3 , hexvar mov r6 , r0 mov r7 , r1 sub r5 , r4 , r5 str r2 , [ sp , hexvar ] strb lr , [ sp , hexvar ] beq hexvar cmp r3 , hexvar beq hexvar cmp r3 , num beq hexvar cmp r5 , r4 movlo r0 , r4 movlo r3 , hexvar bhs hexvar strb r3 , [ r0 , - num ] ! cmp r5 , r0 bne hexvar mov r4 , r5 ldr r3 , [ pc , hexvar ] mov r0 , r4 ldr r1 , [ r3 ] bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r8 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc }
push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar test rsi , rsi je hexvar test rdx , rdx je hexvar cmp qword ptr [ rdi + hexvar ] , num mov rbx , rdx mov r14 , rsi mov rbp , rdi mov edx , num lea rsi , [ rip + hexvar ] je hexvar cmp dword ptr [ rbx ] , hexvar jne hexvar mov rax , qword ptr [ rbx + hexvar ] mov rsi , r14 mov r12 , rbx mov rax , qword ptr [ rax ] mov rdi , qword ptr [ rax + num ] call hexvar test eax , eax jne hexvar add rsp , hexvar mov rax , r12 pop rbx pop rbp pop r12 pop r13 pop r14 ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx ] mov dword ptr [ ebp - num ] , edx mov edx , dword ptr [ ebp - num ] and edx , hexvar cmp edx , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar xor eax , eax mov ecx , dword ptr [ ebp + num ] add ecx , num mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar cmp eax , num sete bl and bl , num movzx eax , bl mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar and al , num movzx ecx , al mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp eax , num setne cl and cl , num movzx eax , cl add esp , hexvar pop ebx pop ebp ret
cmp r0 , r1 beq hexvar sub r2 , r0 , num sub r1 , r1 , num b hexvar cmp r0 , r3 bne hexvar ldrb r0 , [ r2 , num ] ! sub r3 , r0 , hexvar cmp r3 , hexvar ldrb r3 , [ r1 , num ] ! addls r0 , r0 , hexvar sub ip , r3 , hexvar cmp ip , hexvar and r0 , r0 , hexvar addls r3 , r3 , hexvar cmp r0 , num and r3 , r3 , hexvar bne hexvar sub r0 , r0 , r3 bx lr mov r0 , num bx lr
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw t9 , hexvar ( a0 )
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r5 , r0 mov r7 , r1 ldr r6 , [ r0 , num ] ldr r4 , [ r0 , hexvar ] ldr r0 , [ r0 , hexvar ] ldr ip , [ r6 ] mov r3 , num mov r1 , r3 adds r8 , r2 , r4 adc sb , r1 , r0 mov r1 , num cmp sb , r1 cmpeq r8 , ip movls r4 , r2 bls hexvar cmp ip , r4 subhs r4 , ip , r4 movlo r4 , num mov r0 , hexvar bl hexvar ldr r1 , [ r6 , num ] ldr r3 , [ r5 , hexvar ] mov r2 , r4 add r1 , r1 , r3 mov r0 , r7 bl hexvar mov r0 , r4 mov r1 , num pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push rbx mov rbx , rdi lea rsi , [ rip + hexvar ] call hexvar mov edx , num test eax , eax je hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx call hexvar mov edx , num test eax , eax je hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx call hexvar mov edx , hexvar test eax , eax je hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx call hexvar mov edx , hexvar test eax , eax je hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx call hexvar mov edx , hexvar test eax , eax je hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx call hexvar mov edx , hexvar test eax , eax je hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx call hexvar mov edx , eax test eax , eax jne hexvar mov eax , edx pop rbx ret
test rdi , rdi push rbx mov rbx , rdi je hexvar call hexvar test eax , eax je hexvar test dword ptr [ rbx ] , hexvar jne hexvar mov rdi , rbx pop rbx jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbx mov edx , num xor esi , esi call hexvar mov rdi , rbx pop rbx jmp hexvar
push { r4 , r5 , r6 , r7 , r8 , sb , lr } mov r6 , r0 ldr r7 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r7 ] mov r4 , r1 str r3 , [ sp , hexvar ] mov r8 , r2 bl hexvar ldrb r3 , [ r6 ] cmp r3 , hexvar beq hexvar ands r5 , r4 , hexvar beq hexvar mov sb , num mov r2 , r0 add r3 , sp , num mov r0 , r6 mov r1 , r4 bl hexvar ldr r0 , [ sp , hexvar ] lsl r0 , r0 , num bl hexvar mov r6 , r0 ldr r0 , [ sp , hexvar ] str r6 , [ sp , hexvar ] lsl r0 , r0 , num bl hexvar cmp r6 , num cmpne r0 , num mov r5 , r0 str r0 , [ sp , hexvar ] beq hexvar cmp sb , num add r0 , sp , num beq hexvar bl hexvar tst r4 , num mov r5 , r0 ldr r0 , [ sp , hexvar ] beq hexvar ldr r3 , [ sp , hexvar ] ldrb r3 , [ r3 ] cmp r3 , num beq hexvar bl hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r5 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ r7 ] mov r0 , r5 cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc } andeq r0 , r0 , r1 , ror num andeq r0 , r0 , r0
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ebp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar mov eax , dword ptr [ ebp + hexvar ] movsx eax , byte ptr [ eax ] cmp eax , num jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar lea eax , [ hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , esi call hexvar mov eax , dword ptr [ eax * num + hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push ebp push edi push esi push ebx mov esi , hexvar call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] lea edx , [ edi + num ] mov eax , edx mul esi shr edx , num lea esi , [ edx * num ] lea ebp , [ esi + num ] cmp edi , ebp jbe hexvar mov eax , dword ptr [ esp + hexvar ] xor ebp , ebp mov dword ptr [ eax ] , num add esp , hexvar mov eax , ebp pop ebx pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar lui gp , hexvar addiu gp , gp , - hexvar sw s2 , hexvar ( sp ) sw s0 , hexvar ( sp ) sltu s2 , a3 , a1 move s0 , a1 sw s1 , hexvar ( sp ) move a1 , a2 sw ra , hexvar ( sp ) move a2 , a3 sw gp , hexvar ( sp ) movz a2 , s0 , s2 lw t9 , - hexvar ( gp ) jalr t9 move s1 , a3 bnez v0 , hexvar sltu s0 , s0 , s1 addiu v0 , zero , - num movz v0 , s2 , s0 lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lbu v0 , hexvar ( a0 ) beqz v0 , hexvar lui v1 , hexvar addiu a1 , sp , hexvar addiu a0 , a0 , hexvar lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lui v0 , hexvar lbu v0 , - hexvar ( v0 ) bnez v0 , hexvar addiu v1 , zero , num sb zero , hexvar ( sp ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) addiu v1 , zero , num beq v0 , v1 , hexvar nop beqz v0 , hexvar addiu v1 , zero , num bne v0 , v1 , hexvar lw t9 , - hexvar ( gp ) lw v0 , hexvar ( s1 )
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dl , al mov byte ptr [ esp + hexvar ] , dl add esp , hexvar ret
push rbp push rbx mov rbp , rdi mov rdi , rsi mov rbx , rsi sub rsp , num call hexvar cmp rax , num jne hexvar movzx ecx , byte ptr [ rbx ] mov rdx , rcx and ecx , hexvar shr rdx , num shl rax , cl and edx , hexvar or qword ptr [ rbp + rdx ] , rax add rsp , num xor eax , eax pop rbx pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar beqz a0 , hexvar sw gp , hexvar ( sp ) move s0 , a2 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) xor v0 , v0 , s0 sltiu v0 , v0 , num lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar addiu v0 , zero , num
push ebp mov ebp , esp sub esp , hexvar fld xword ptr [ ebp + num ] xor eax , eax fstp xword ptr [ ebp - hexvar ] lea ecx , [ ebp - hexvar ] fld xword ptr [ ebp - hexvar ] mov edx , esp fstp xword ptr [ edx + hexvar ] mov dword ptr [ edx ] , ecx mov dword ptr [ edx + hexvar ] , num mov dword ptr [ edx + num ] , num mov dword ptr [ edx + num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar xor eax , eax add rsp , hexvar pop rbp ret
mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , eax shl eax , num add eax , dword ptr [ ebp - hexvar ] fld qword ptr [ eax + num ] mov eax , dword ptr [ ebp - hexvar ] cmp eax , num je hexvar cmp eax , num jb hexvar cmp eax , num jne hexvar sub esp , num lea eax , [ ebp - hexvar ] push eax lea esp , [ esp - num ] fstp qword ptr [ esp ] push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] push - num push num push esi mov eax , dword ptr [ ebp - hexvar ] add eax , dword ptr [ ebp - hexvar ] push eax call hexvar add esp , hexvar jmp hexvar lea eax , [ ebp - hexvar ] push eax lea esp , [ esp - num ] fstp qword ptr [ esp ] push dword ptr [ ebp - hexvar ] push - num push num push esi mov eax , dword ptr [ ebp - hexvar ] add eax , dword ptr [ ebp - hexvar ] push eax call hexvar add esp , hexvar jmp hexvar sub esp , hexvar lea eax , [ ebp - hexvar ] push eax lea esp , [ esp - num ] fstp qword ptr [ esp ] push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] push - num push num push esi mov eax , dword ptr [ ebp - hexvar ] add eax , dword ptr [ ebp - hexvar ] push eax call hexvar add esp , hexvar jmp hexvar fstp st ( num ) call hexvar
push { r4 , r5 , r6 , r7 , r8 , lr } add r5 , r0 , hexvar ldm r5 , { r4 , r5 } ldr r7 , [ r0 , hexvar ] mov r6 , r1 mov r0 , r7 mov r1 , r4 bl hexvar mov r3 , num add r0 , r0 , num bic r0 , r0 , num add r2 , r0 , num cmp r5 , r3 cmpeq r4 , r2 blo hexvar ldr r3 , [ pc , hexvar ] add r0 , r7 , r0 ldr r3 , [ r3 ] mov r1 , num blx r3 str r0 , [ r6 ] mov r0 , r7 pop { r4 , r5 , r6 , r7 , r8 , pc }
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push rbp push rbx sub rsp , num mov rbx , rdi mov rbp , rsi test rsi , rsi je hexvar mov rax , qword ptr [ rdx + hexvar ] test rax , rax je hexvar mov ecx , dword ptr [ rsi ] add rax , rcx cmp rcx , qword ptr [ rdx + hexvar ] jae hexvar mov qword ptr [ rbx ] , rax mov rax , qword ptr [ rbp + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rbp + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov rax , rbx add rsp , num pop rbx pop rbp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movzx eax , al mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , num movzx eax , byte ptr [ rax ] movzx eax , al shl rax , num or qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , num movzx eax , byte ptr [ rax ] movzx eax , al shl rax , hexvar or qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , num movzx eax , byte ptr [ rax ] movzx eax , al shl rax , hexvar or qword ptr [ rbp - num ] , rax mov eax , hexvar xor rax , qword ptr [ rbp - num ] add rax , - hexvar pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov ebp , esi mov rbx , rdi movabs rax , hexvar mov qword ptr [ rsp + hexvar ] , rax mov byte ptr [ rsp + hexvar ] , num cmp esi , num jl hexvar lea r12 , [ rsp + hexvar ] lea r13 , [ rsp + hexvar ] lea r14 , [ rsp + hexvar ] mov r15 , rsp nop lea rdi , [ rsp + num ] lea rsi , [ rsp + hexvar ] mov rdx , r12 mov rcx , r13 mov r8 , r14 mov r9 , r15 call qword ptr [ rip + hexvar ] cmp qword ptr [ rsp + num ] , num jne hexvar add ebp , - num mov rax , qword ptr [ rsp ] mov qword ptr [ rbx ] , rax add rbx , num cmp ebp , num jg hexvar mov r14d , num test ebp , ebp je hexvar xor r14d , r14d lea rdi , [ rsp + num ] lea rsi , [ rsp + hexvar ] lea r8 , [ rsp + hexvar ] mov r9 , rsp xor edx , edx xor ecx , ecx call qword ptr [ rip + hexvar ] cmp qword ptr [ rsp + num ] , num jne hexvar movsxd rdx , ebp mov rsi , rsp mov rdi , rbx call hexvar mov r14d , num jmp hexvar xor r14d , r14d mov eax , r14d add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , lr } mov r4 , r0 ldr ip , [ pc , hexvar ] sub sp , sp , hexvar ldr r0 , [ ip ] mov r6 , r2 cmp r0 , r4 mov r7 , r3 beq hexvar ldr r3 , [ r4 , hexvar ] tst r3 , hexvar bne hexvar ldr r3 , [ r4 , hexvar ] cmp r3 , num beq hexvar ldrb r3 , [ r3 , hexvar ] tst r3 , num beq hexvar ldr r5 , [ r4 , num ] cmp r5 , num beq hexvar ldr r3 , [ r4 , hexvar ] ldr r2 , [ r4 , hexvar ] cmp r0 , num str r2 , [ r3 , hexvar ] ldr r2 , [ r4 , hexvar ] str r4 , [ ip ] str r3 , [ r2 , hexvar ] ldrne r3 , [ r0 , hexvar ] strne r0 , [ r4 , hexvar ] strne r3 , [ r4 , hexvar ] strne r4 , [ r3 , hexvar ] ldrne r3 , [ r4 , hexvar ] streq r4 , [ r4 , hexvar ] streq r4 , [ r4 , hexvar ] strne r4 , [ r3 , hexvar ] mov r0 , r1 mov r3 , r5 mov r2 , r6 mov r1 , num bl hexvar mov sb , num cmp r0 , r6 sbcs r3 , sb , r7 mov r8 , r0 blt hexvar mov r0 , r8 mov r1 , sb add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov bl , byte ptr [ eax ] mov cl , bl mov edi , edx shl edi , cl mov cl , bl mov eax , esi shld eax , edx , cl xor ecx , ecx test bl , hexvar cmovne eax , edi cmovne edi , ecx mov bh , hexvar sub bh , bl mov dword ptr [ ebp - hexvar ] , ecx mov cl , bh mov dword ptr [ ebp - hexvar ] , eax mov eax , esi shr eax , cl mov cl , bh shrd edx , esi , cl test bh , hexvar cmovne edx , eax mov esi , dword ptr [ ebp - hexvar ] cmovne eax , esi or edi , edx mov edx , dword ptr [ ebp - hexvar ] or edx , eax mov eax , edi lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - num sw fp , num ( sp ) move fp , sp sw a0 , num ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v1 , num ( fp ) sw v1 , ( v0 ) lw v1 , num ( fp ) lw v0 , hexvar ( fp ) addu v1 , v1 , v0 lw v0 , hexvar ( fp ) sw v1 , num ( v0 ) lw v0 , hexvar ( fp ) lw v1 , hexvar ( fp ) sw v1 , num ( v0 ) lw v0 , hexvar ( fp ) lw v1 , num ( fp ) sw v1 , hexvar ( v0 ) lw v0 , hexvar ( fp ) sll v0 , v0 , num move v1 , v0 lw v0 , hexvar ( fp ) sw v1 , hexvar ( v0 ) lw v0 , hexvar ( fp ) sw zero , hexvar ( v0 ) lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v1 , hexvar ( v0 ) lw v0 , hexvar ( fp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( fp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( fp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( fp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( fp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( fp ) sw zero , hexvar ( v0 ) nop move sp , fp lw fp , num ( sp ) addiu sp , sp , num jr ra nop
push edi push esi push ebx call hexvar add ebx , hexvar sub esp , num lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar sub esp , num mov esi , eax push dword ptr [ esp + hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar mov dword ptr [ esp ] , esi mov edi , eax call hexvar add esp , hexvar mov eax , edi pop ebx pop esi pop edi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , edx call hexvar mov dword ptr [ ebp - num ] , eax call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp + hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + hexvar ] sub ecx , eax mov dword ptr [ ebp + hexvar ] , ecx cmp dword ptr [ ebp + hexvar ] , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar cmp eax , num je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar xor eax , eax mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + num ] mov dword ptr [ esp ] , ecx call eax jmp hexvar add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] movsd xmm0 , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbx sub rsp , hexvar mov rbx , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov dword ptr [ rsp ] , hexvar mov dword ptr [ rsp + num ] , hexvar lea rax , [ rsp + hexvar ] mov qword ptr [ rsp + num ] , rax lea rax , [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax lea rsi , [ rip + hexvar ] mov edi , num mov eax , num call hexvar mov rcx , rsp mov rdx , rbx mov esi , num mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edi , hexvar call hexvar mov eax , num mov rdx , qword ptr [ rsp + hexvar ] xor rdx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov eax , dword ptr [ rip + hexvar ] cmp eax , num jne hexvar mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rbp - num ] , eax mov eax , dword ptr [ rip + hexvar ] and eax , num test eax , eax je hexvar mov eax , dword ptr [ rip + hexvar ] or eax , hexvar mov dword ptr [ rip + hexvar ] , eax mov eax , dword ptr [ rip + hexvar ] and eax , num test eax , eax je hexvar add dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rbp - num ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar jmp hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar cmp dword ptr [ rbp - hexvar ] , num je hexvar cmp dword ptr [ rbp - hexvar ] , num jne hexvar mov eax , dword ptr [ rip + hexvar ] and eax , hexvar test eax , eax je hexvar mov eax , hexvar jmp hexvar mov eax , hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rip + hexvar ] and eax , hexvar mov edx , eax mov eax , dword ptr [ rip + hexvar ] or eax , edx mov dword ptr [ rip + hexvar ] , eax mov edx , dword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov esi , edx mov edi , eax call hexvar nop leave ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , num pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) sltiu v0 , v0 , num andi v0 , v0 , hexvar sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) beqz v0 , hexvar nop lw v0 , - hexvar ( gp ) lw v1 , ( v0 ) addiu v0 , fp , hexvar move a2 , v1 addiu a1 , zero , hexvar move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) bnez v0 , hexvar nop nop b hexvar nop addiu v0 , fp , hexvar addiu a2 , zero , hexvar move a1 , zero move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) lui a0 , hexvar sw v1 , - hexvar ( a0 ) sw v0 , - hexvar ( a0 ) b hexvar nop lui v0 , hexvar lw v0 , - hexvar ( v0 ) blez v0 , hexvar nop lui v0 , hexvar lw v0 , - hexvar ( v0 ) addiu v1 , v0 , - num lui v0 , hexvar sw v1 , - hexvar ( v0 ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) addiu a0 , v0 , num lui v1 , hexvar sw a0 , - hexvar ( v1 ) lw v0 , ( v0 ) addiu a2 , zero , hexvar move a1 , zero move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) lui a0 , hexvar sw v1 , - hexvar ( a0 ) sw v0 , - hexvar ( a0 ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) move v1 , v0 addiu v0 , zero , num bne v1 , v0 , hexvar nop lw v0 , hexvar ( fp ) lw v0 , num ( v0 )
push rbp push rbx push rax test rdi , rdi je hexvar mov rbx , rdi mov edx , hexvar mov edi , num mov esi , hexvar mov ecx , hexvar call hexvar mov eax , dword ptr [ rbx + hexvar ] mov ebp , num test eax , eax je hexvar add dword ptr [ rbx + hexvar ] , num add eax , num mov dword ptr [ rbx + hexvar ] , eax mov edx , hexvar mov edi , hexvar mov esi , hexvar mov ecx , hexvar call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebp , ebp mov eax , ebp add rsp , num pop rbx pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push dword ptr [ ebx + hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar jmp hexvar mov eax , hexvar add esp , hexvar pop esi pop ebp ret
push { r0 , r1 , r2 , r3 } push { fp , lr } add fp , sp , num sub sp , sp , hexvar ldr r3 , [ fp , num ] str r3 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - num ] add r3 , fp , num str r3 , [ fp , - hexvar ] sub r3 , fp , hexvar ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] mov r0 , r3 bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bge hexvar bl hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r3 , num ble hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] sub r3 , r2 , r3 ldr r2 , [ fp , - hexvar ] cmp r2 , r3 ble hexvar mov r0 , hexvar bl hexvar ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] b hexvar mov r0 , hexvar bl hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] add r3 , r3 , num ldr r2 , [ pc , hexvar ] str r3 , [ r2 ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] mov r1 , r3 mov r0 , r2 bl hexvar ldr r3 , [ fp , - hexvar ] mov r0 , r3 bl hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] add r3 , r2 , r3 ldr r2 , [ pc , hexvar ] str r3 , [ r2 ] mov r0 , r0 ldr r3 , [ pc , hexvar ] ldr r2 , [ fp , - num ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar sub sp , fp , num pop { fp , lr } add sp , sp , hexvar bx lr andeq r0 , r3 , r8 , lsl num muleq r3 , r0 , r1 andeq r1 , r3 , ip , lsl num andeq r1 , r3 , r4 , lsl num
push ebx sub esp , num call hexvar add ebx , hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar jmp hexvar mov eax , num add esp , num pop ebx ret
ldr r3 , [ pc , hexvar ] add r1 , r3 , r0 ldrb r2 , [ r1 , hexvar ] cmp r2 , num beq hexvar add r3 , r3 , r0 , lsl num add r1 , r3 , hexvar ldm r1 , { r0 , r1 } bx lr push { r4 , lr } mov r4 , r0 mov ip , num sub sp , sp , num add r4 , r3 , r4 , lsl num add r2 , r3 , r0 , lsl num ldr r0 , [ r2 , hexvar ] ldm r4 , { r2 , r3 } str ip , [ sp ] strb ip , [ r1 , hexvar ] bl hexvar str r0 , [ r4 , hexvar ] str r1 , [ r4 , hexvar ] add sp , sp , num pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov byte ptr [ ebp - hexvar ] , al mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi xor eax , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , esp add esi , - hexvar mov esp , esi mov edi , esp add edi , - hexvar mov esp , edi mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esi ] , ebx mov bl , byte ptr [ ebp - hexvar ] and bl , num mov byte ptr [ edi ] , bl mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ edx ] mov bl , byte ptr [ edi ] test bl , num mov edi , num mov ebx , num cmovne ebx , edi mov esi , dword ptr [ esi ] sub esp , hexvar mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + hexvar ] , ebx mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
lea rax , [ rdi + hexvar ] mov qword ptr [ rsp - num ] , rax mov rax , qword ptr [ rsp - num ] mov eax , dword ptr [ rax ] mov dword ptr [ rsp - hexvar ] , eax mov ecx , hexvar mov eax , hexvar jmp hexvar mov ecx , dword ptr [ rsp - hexvar ] cmp ecx , hexvar mov ecx , hexvar cmove ecx , eax nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar mov rcx , qword ptr [ rdi + hexvar ] mov rcx , qword ptr [ rcx + num ] mov dword ptr [ rcx ] , num mov rcx , qword ptr [ rsp - num ] mov dword ptr [ rcx ] , hexvar mov qword ptr [ rdi + hexvar ] , num mov ecx , hexvar jmp hexvar mov esi , hexvar jmp hexvar nop dword ptr [ rax ]
push ebx sub esp , hexvar call hexvar add ebx , hexvar call hexvar sub esp , hexvar push eax call hexvar add esp , hexvar mov dword ptr [ esp + num ] , eax cmp dword ptr [ esp + num ] , num jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push num push hexvar push num call hexvar add esp , hexvar mov eax , num jmp hexvar push dword ptr [ esp + hexvar ] push num push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar cmp dword ptr [ hexvar ] , num je hexvar jmp hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] shl ecx , num add ecx , num sub ecx , num add eax , ecx mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar lea eax , [ ebp - hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , num mov ecx , esp mov dword ptr [ ecx ] , hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ hexvar ] xor edi , edi mov ebx , esp mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebx + num ] , eax mov dword ptr [ ebx + num ] , edi mov dword ptr [ ebx ] , esi mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebx + hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar xor ecx , ecx mov edx , esp mov dword ptr [ edx + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ edx + hexvar ] , eax mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ edx + hexvar ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ edx + num ] , edi mov dword ptr [ edx + num ] , num mov dword ptr [ edx ] , num mov dword ptr [ ebp - hexvar ] , ecx call hexvar sub esp , hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ hexvar ] , eax add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , num push dword ptr [ ebx + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] movabs rsi , num mov edx , num call hexvar add rsp , hexvar pop rbp ret
push ebx sub esp , hexvar call hexvar add eax , hexvar mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , edx mov ebx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , ebx xor ebx , ebx mov edx , dword ptr [ esp + hexvar ] mov byte ptr [ esp + hexvar ] , dl mov edx , dword ptr [ esp + hexvar ] lea ecx , [ edx + hexvar ] sub esp , hexvar push num lea edx , [ esp + hexvar ] push edx push num push hexvar push ecx mov ebx , eax call hexvar add esp , hexvar test eax , eax je hexvar mov eax , num jmp hexvar mov eax , num mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] je hexvar call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] lea edi , [ ebp - hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , hexvar call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } sub sp , sp , hexvar mov r5 , r2 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r3 , [ r0 , hexvar ] ldr r2 , [ r3 , hexvar ] cmp r2 , num movne r0 , num beq hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc }
ldr r3 , [ r1 , hexvar ] cmp r3 , num bxeq lr push { r4 , r5 , r6 , r7 , r8 , lr } mov r4 , r1 mov r5 , r0 mov r6 , r2 bl hexvar subs r3 , r0 , num blt hexvar popeq { r4 , r5 , r6 , r7 , r8 , pc } bl hexvar mov r3 , r6 mov r2 , r0 mov r7 , r0 mov r1 , r4 mov r0 , r5 bl hexvar cmp r0 , num blt hexvar beq hexvar ldr r2 , [ pc , hexvar ] sub r3 , r7 , num ldr ip , [ r2 , hexvar ] ldr lr , [ r2 , hexvar ] ldr r4 , [ r2 , hexvar ] add r0 , r3 , r0 , lsl num ldr r2 , [ r3 , num ] ! ldr r2 , [ r2 ] cmp r2 , num beq hexvar ldr r2 , [ r2 ] cmp r2 , num beq hexvar cmp r2 , ip beq hexvar cmp r2 , lr beq hexvar cmp r2 , r4 ldrne r1 , [ r2 , hexvar ] orrne r1 , r1 , hexvar strne r1 , [ r2 , hexvar ] cmp r0 , r3 bne hexvar mov r0 , r7 pop { r4 , r5 , r6 , r7 , r8 , lr } b hexvar cmn r3 , num bne hexvar bl hexvar cmp r0 , num popeq { r4 , r5 , r6 , r7 , r8 , pc } ldr r0 , [ r5 ] bl hexvar ldr r0 , [ r5 ] bl hexvar andseq r5 , r1 , r8 , asr sl
push rbx sub rsp , hexvar mov rbx , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov qword ptr [ rsp ] , num mov qword ptr [ rsp + num ] , num mov qword ptr [ rsp + hexvar ] , num mov dword ptr [ rsp + hexvar ] , num mov rcx , rsp lea rdx , [ rip - hexvar ] call hexvar test eax , eax je hexvar mov eax , num cmp dword ptr [ rsp + hexvar ] , num jne hexvar mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rbx ] , rax mov rax , qword ptr [ rsp ] mov rbx , qword ptr [ rsp + hexvar ] xor rbx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] add esi , hexvar lea edi , [ ebp - hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar sub esp , num mov eax , dword ptr [ ebp + num ] add eax , hexvar lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar sub esp , num mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ edx ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call eax mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push rbx mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar mov qword ptr [ rbx + num ] , rax test rax , rax je hexvar mov qword ptr [ rax ] , num mov rax , qword ptr [ rbx + num ] mov qword ptr [ rax + num ] , num mov rax , qword ptr [ rbx + num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbx + num ] mov qword ptr [ rax + hexvar ] , num mov qword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx ] , num movabs rax , hexvar mov qword ptr [ rbx + hexvar ] , rax mov rax , rbx pop rbx ret
push { r4 , lr } mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r3 , [ pc , hexvar ] mov r4 , r0 ldr r3 , [ r3 ] mov r1 , num ldr r2 , [ r3 , - num ] mov r0 , num bl hexvar mov r2 , r4 mov r3 , r0 mov r1 , num mov r0 , num bl hexvar andeq r5 , r2 , r8 , asr sl andeq r8 , r3 , r4 , lsl num
push rbp push r15 push r14 push r12 push rbx mov ebp , edx mov rbx , rsi mov r14 , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov r12 , rax mov edx , num mov rdi , rax mov esi , hexvar mov rcx , rbx call hexvar test rax , rax jle hexvar cmp ebp , num je hexvar cmp ebp , num jne hexvar mov rdi , r12 xor esi , esi call hexvar mov r15 , rax mov edx , hexvar test r15 , r15 je hexvar add r14 , hexvar mov rdi , r14 call hexvar test eax , eax je hexvar mov rdi , qword ptr [ r14 ] mov rsi , r15 call hexvar mov ebp , eax jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar xor ebp , ebp jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , num mov r8d , hexvar jmp hexvar mov rdx , qword ptr [ r14 + hexvar ] mov rcx , qword ptr [ r14 + hexvar ] mov rdi , r12 xor esi , esi call hexvar mov r15 , rax mov edx , num test r15 , r15 jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebp , ebp jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebp , ebp mov rdi , r15 call hexvar mov rdi , r12 call hexvar mov eax , ebp pop rbx pop r12 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx xor eax , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , esp add esi , - hexvar mov esp , esi mov edi , esp add edi , - hexvar mov esp , edi mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esi ] , ebx mov esi , dword ptr [ esi ] mov dword ptr [ edi ] , esi mov esi , dword ptr [ edi ] mov edx , dword ptr [ edx ] mov edx , dword ptr [ edx + hexvar ] sub esp , hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar cmp eax , num setne al mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi call hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar xor eax , eax mov cl , al cmp dword ptr [ ebp - num ] , num mov byte ptr [ ebp - hexvar ] , cl jge hexvar call hexvar cmp dword ptr [ eax ] , num sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
push ebp push edi push esi push ebx mov esi , edx call hexvar add edi , hexvar sub esp , hexvar mov dword ptr [ esp + hexvar ] , edi mov edi , eax mov dword ptr [ esp + hexvar ] , edx mov ecx , dword ptr [ edi + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ ecx + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ ecx + hexvar ] mov ecx , dword ptr [ ecx + hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ esp ] , eax mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , ecx mov ecx , dword ptr [ edi + num ] movzx eax , byte ptr [ esi + num ] mov ecx , dword ptr [ ecx + hexvar ] mov byte ptr [ esp + num ] , al mov ecx , dword ptr [ ecx + hexvar ] test ecx , ecx je hexvar sub esp , hexvar lea eax , [ esp + hexvar ] push eax lea eax , [ esp + hexvar ] push eax lea eax , [ esp + hexvar ] push eax push esi push edi call ecx add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , edx mov edx , dword ptr [ esp + num ] mov eax , dword ptr [ esp ] mov ebx , edx or ebx , eax jne hexvar mov eax , num jmp hexvar nop lea esi , [ esi ]
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov edx , dword ptr [ hexvar ] mov esi , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , eax call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push ebx sub esp , num call hexvar add eax , hexvar sub esp , hexvar lea edx , [ eax - hexvar ] push edx mov ebx , eax call hexvar add esp , hexvar add esp , num pop ebx ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , edi mov ebx , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ecx ] mov dword ptr [ ebp - hexvar ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx sub esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , hexvar call hexvar lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movss dword ptr [ rbp - hexvar ] , xmm0 mov rdi , qword ptr [ rbp - num ] test rdi , rdi setne al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov rax , qword ptr [ rip + hexvar ] jmp rax movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov ecx , hexvar sub rax , rcx sete dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rip + hexvar ] jmp rax movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] test ecx , ecx setne dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] add rax , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar xor ecx , ecx mov dil , cl mov ecx , hexvar mov r9d , hexvar mov byte ptr [ rbp - hexvar ] , dil mov edi , ecx mov rcx , r9 mov r9 , rax mov al , byte ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rip + hexvar ] mov dword ptr [ rbp - hexvar ] , eax jmp rcx movss xmm0 , dword ptr [ rbp - hexvar ] cvtss2sd xmm0 , xmm0 mov rax , qword ptr [ rbp - num ] movsd qword ptr [ rax + hexvar ] , xmm0 add rsp , hexvar pop rbp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push esi push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ ebx + hexvar ] mov esi , dword ptr [ esp + hexvar ] test eax , eax je hexvar sub esp , num push num push esi call eax add esp , hexvar sub esp , hexvar push esi call dword ptr [ ebx + hexvar ] mov eax , dword ptr [ ebx + hexvar ] add esp , hexvar test eax , eax je hexvar sub esp , num push num push num call eax add esp , hexvar add esp , num pop ebx pop esi ret
push rbp mov rbp , rsp mov dword ptr [ rbp - num ] , edi mov edi , dword ptr [ rbp - num ] shl edi , num mov eax , dword ptr [ rbp - num ] shr eax , hexvar and eax , hexvar or edi , eax mov eax , edi pop rbp ret
push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edx , dword ptr [ eax + num ] test edx , edx je hexvar add esp , hexvar pop ebx pop esi pop edi jmp hexvar sub esp , hexvar push dword ptr [ ebx + hexvar ] mov esi , eax call hexvar add esp , hexvar test eax , eax mov dword ptr [ esi + num ] , eax je hexvar sub esp , hexvar mov edi , dword ptr [ eax + num ] mov dword ptr [ eax ] , num push hexvar call hexvar mov dword ptr [ edi ] , eax mov eax , dword ptr [ esi + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ eax + num ] , num pop eax push dword ptr [ esi ] call hexvar mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ esi ] , eax mov eax , dword ptr [ esi + num ] add esp , hexvar add esp , hexvar pop ebx pop esi pop edi ret
push esi push ebx call hexvar add ebx , hexvar sub esp , num lea eax , [ ebx - hexvar ] mov esi , dword ptr [ esp + hexvar ] push hexvar push eax push hexvar call hexvar mov edx , eax add esp , hexvar xor eax , eax test edx , edx je hexvar lea eax , [ edx + hexvar ] mov dword ptr [ edx ] , hexvar mov dword ptr [ edx + num ] , hexvar mov dword ptr [ edx + num ] , num mov dword ptr [ edx + hexvar ] , num mov dword ptr [ esi + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esi + hexvar ] , edx mov dword ptr [ esi + hexvar ] , num mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ edx ] , ecx mov ecx , dword ptr [ eax + num ] mov dword ptr [ edx + num ] , ecx mov ecx , dword ptr [ eax + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx + hexvar ] , eax mov eax , num add esp , num pop ebx pop esi ret
test rcx , rcx mov eax , hexvar mov r8d , hexvar cmove r8d , eax test rdx , rdx mov eax , hexvar mov r9d , hexvar cmove r9d , eax test rsi , rsi mov eax , hexvar mov r10d , hexvar cmove r10d , eax mov eax , hexvar jmp hexvar mov eax , r10d cmp eax , hexvar jle hexvar cmp eax , hexvar jg hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov rax , qword ptr [ rdi + hexvar ] mov qword ptr [ rcx ] , rax mov eax , hexvar jmp hexvar nop word ptr [ rax + rax ] cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar nop word ptr [ rax + rax ] cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov eax , r9d jmp hexvar mov rax , qword ptr [ rdi + hexvar ] mov qword ptr [ rsi ] , rax mov eax , hexvar jmp hexvar mov eax , r8d jmp hexvar mov rax , qword ptr [ rdi + hexvar ] mov qword ptr [ rdx ] , rax mov eax , hexvar jmp hexvar ret
push r14 push rbx push rax mov r14 , rdi mov esi , hexvar mov edx , hexvar mov ecx , hexvar call hexvar mov rbx , rax test rax , rax je hexvar mov rax , rbx add rsp , num pop rbx pop r14 ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] test eax , eax je hexvar mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] ucomisd xmm0 , qword ptr [ rip + hexvar ] jp hexvar ucomisd xmm0 , qword ptr [ rip + hexvar ] jne hexvar mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax + num ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax + hexvar ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax + hexvar ] , xmm0 jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rax + hexvar ] movsd xmm0 , qword ptr [ rip + hexvar ] mulsd xmm0 , xmm1 movsd qword ptr [ rbp - num ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] mulsd xmm0 , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] mulsd xmm0 , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax + num ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] mulsd xmm0 , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax + hexvar ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax + hexvar ] , xmm0 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rdx + num ] mov rdx , qword ptr [ rdx + hexvar ] mov rdi , qword ptr [ rbp - hexvar ] call rdx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx ] , rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] add rdx , num mov rdi , rdx call rax mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx + num ] , rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] add rdx , hexvar mov rdi , rdx call rax mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx + hexvar ] , rax add rsp , hexvar pop rbp ret
sub rsp , num mov rcx , rdx mov rax , rsi mul rcx seto dl movzx edx , dl test rax , rax mov eax , num cmovns rax , rdx test al , al jne hexvar imul rsi , rcx call hexvar add rsp , num ret
sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rdi mov qword ptr [ rsp + hexvar ] , rsi mov rsi , qword ptr [ rip ] jmp rsi mov rax , qword ptr [ rsp + hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num ] jmp rax movabs rdi , num movabs rsi , num mov edx , hexvar call hexvar mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rsp + hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num ] jmp rax movabs rdi , num movabs rsi , num mov edx , hexvar call hexvar mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rsp + hexvar ] mov rax , qword ptr [ rax + hexvar ] sub rax , hexvar seta cl movzx edx , cl mov esi , edx mov rsi , qword ptr [ rsi * num ] mov qword ptr [ rsp + num ] , rax jmp rsi mov dword ptr [ rsp + hexvar ] , hexvar mov rax , qword ptr [ rip ] jmp rax mov rdi , qword ptr [ rsp + hexvar ] lea rsi , [ rsp + hexvar ] call hexvar mov rsi , qword ptr [ rsp + hexvar ] movups xmm0 , xmmword ptr [ rsp + hexvar ] movups xmmword ptr [ rsi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rsp + hexvar ] movups xmmword ptr [ rsi ] , xmm0 mov dword ptr [ rsp + hexvar ] , num mov rsi , qword ptr [ rip ] mov dword ptr [ rsp + num ] , eax jmp rsi mov eax , dword ptr [ rsp + hexvar ] add rsp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , num mov qword ptr [ rbp - hexvar ] , num mov qword ptr [ rbp - hexvar ] , num mov rsi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rsi ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] sub rax , rcx setb dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] not rax mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] add rsi , rax adc rdi , num mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] add rsi , rax adc rdi , num mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , eax mov eax , ecx add rsp , hexvar pop rbp ret
push rbp push r14 push rbx mov r14 , rdi mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar mov rsi , r14 call hexvar cmp eax , - num je hexvar mov ebp , eax mov rdi , qword ptr [ rip + hexvar ] mov esi , eax call hexvar mov rbx , rax test rax , rax je hexvar mov qword ptr [ rbx ] , num xorps xmm0 , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 mov qword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx + hexvar ] , hexvar mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar mov esi , hexvar call hexvar mov qword ptr [ rbx + hexvar ] , num mov rdi , rbx call hexvar mov rdi , qword ptr [ rip + hexvar ] mov esi , ebp call hexvar jmp hexvar mov edi , hexvar call hexvar mov qword ptr [ rip + hexvar ] , rax test rax , rax je hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , r14 call hexvar mov ecx , eax xor eax , eax test ecx , ecx setne al pop rbx pop r14 pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar lui a1 , hexvar sw s0 , hexvar ( sp ) move s0 , a0 lui a0 , hexvar sw s1 , hexvar ( sp ) sw ra , hexvar ( sp ) addiu a1 , a1 , hexvar sw gp , hexvar ( sp ) addiu a0 , a0 , hexvar lw t9 , - hexvar ( gp ) lbu s1 , hexvar ( a2 ) jalr t9 addiu a2 , zero , num move a1 , s0 lw gp , hexvar ( sp ) move a2 , s1 lw t9 , - hexvar ( gp ) jalr t9 move a0 , v0 lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu a0 , zero , hexvar move v0 , zero lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
mov eax , dword ptr [ esi ] xor edi , edi test eax , eax jne hexvar lea esi , [ esi ] sub esp , hexvar push hexvar call hexvar mov edx , eax mov dword ptr [ esi ] , eax mov dword ptr [ esi + num ] , eax lea eax , [ eax + hexvar ] add esp , hexvar mov dword ptr [ esi + num ] , eax jmp hexvar nop
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) bnez v0 , hexvar nop lui v0 , hexvar addiu a1 , v0 , hexvar move a0 , zero lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lui v0 , hexvar addiu a1 , v0 , hexvar move a0 , zero lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp push rbx push rax test esi , esi jg hexvar mov ebp , esi mov rbx , rdi call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , hexvar jne hexvar cmp dword ptr [ rbx + hexvar ] , num je hexvar mov rdi , rbx add rsp , num pop rbx pop rbp jmp hexvar mov rdi , rbx call hexvar mov rdi , rax mov esi , num call hexvar jmp hexvar mov rdi , qword ptr [ rip + hexvar ] mov esi , hexvar mov edx , hexvar mov ecx , hexvar xor eax , eax call hexvar mov ebp , num mov eax , ebp add rsp , num pop rbx pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
add r3 , r2 , hexvar push { r4 , r5 , r6 , r7 , r8 , lr } mov r6 , r0 bic r0 , r3 , num mov r5 , r2 mov r7 , r1 bl hexvar subs r4 , r0 , num beq hexvar mov r1 , r7 mov r2 , r5 add r0 , r4 , hexvar bl hexvar mov r3 , num mov r2 , num ldr r1 , [ r6 , hexvar ] add r0 , r4 , r5 strb r3 , [ r0 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] strh r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r5 , [ r4 , hexvar ] str r6 , [ r4 , hexvar ] str r1 , [ r4 , hexvar ] strh r2 , [ r4 , hexvar ] mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , pc }
mov edx , dword ptr [ esp + num ] mov eax , dword ptr [ esp + num ] mov ecx , dword ptr [ edx ] mov dword ptr [ eax ] , ecx mov ecx , dword ptr [ edx + num ] mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + num ] , ecx mov ecx , dword ptr [ edx + num ] mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , ecx movzx ecx , byte ptr [ edx + hexvar ] mov byte ptr [ eax + num ] , cl movzx ecx , byte ptr [ edx + hexvar ] mov byte ptr [ eax + num ] , cl movzx edx , word ptr [ edx + hexvar ] mov word ptr [ eax + num ] , dx ret
sub rsp , hexvar mov r9d , ecx mov qword ptr [ rsp + hexvar ] , rsi mov dword ptr [ rsp ] , num lea rsi , [ rsp + hexvar ] xor ecx , ecx xor r8d , r8d call hexvar add rsp , hexvar ret
sub esp , num push dword ptr [ esp + hexvar ] lea eax , [ esp + hexvar ] push eax lea eax , [ esp + hexvar ] push eax mov edi , dword ptr [ esp + hexvar ] mov ecx , edi mov edx , ebp mov ebp , dword ptr [ esp + hexvar ] mov eax , ebp call hexvar add esp , hexvar test eax , eax je hexvar mov esi , num test edi , edi je hexvar sub esp , num push eax push edi push ebp call hexvar add esp , hexvar test eax , eax je hexvar mov edx , dword ptr [ esp + hexvar ] test edx , edx je hexvar mov dword ptr [ edx ] , eax jmp hexvar
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r14 , r8 mov r15d , ecx mov r12 , rdx mov ebp , esi mov rbx , rdi mov rax , qword ptr [ rdi + num ] mov qword ptr [ rsp + num ] , rax mov ecx , hexvar mov r13d , hexvar jmp hexvar mov rax , qword ptr [ rsp + hexvar ] mov rdi , rbx mov esi , ebp mov rdx , r12 mov ecx , r15d mov r8 , r14 call rax mov ecx , hexvar nop dword ptr [ rax ] cmp ecx , hexvar jle hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov ecx , hexvar xor eax , eax jmp hexvar mov rcx , qword ptr [ rsp + num ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rsp + hexvar ] , rcx cmp qword ptr [ rsp + hexvar ] , num mov ecx , hexvar cmove ecx , r13d jmp hexvar cmp qword ptr [ rsp + num ] , num mov ecx , hexvar cmove ecx , r13d jmp hexvar add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
addiu sp , sp , - hexvar move v0 , a1 move a1 , zero sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) jal hexvar move a0 , v0 beqz v0 , hexvar lw ra , hexvar ( sp ) lw a0 , hexvar ( v0 ) beqz a0 , hexvar lui t9 , hexvar lw v0 , ( s0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax lea ecx , [ ebp - num ] mov dword ptr [ esp + num ] , ecx call hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , hexvar call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] setb cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov cl , byte ptr [ eax ] mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] movsx ecx , al mov dword ptr [ esp ] , ecx call hexvar movzx ecx , al lea edx , [ hexvar ] add edx , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov al , byte ptr [ hexvar ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov byte ptr [ hexvar ] , num mov byte ptr [ hexvar ] , num mov byte ptr [ hexvar ] , num jmp hexvar lea eax , [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar movzx eax , byte ptr [ hexvar ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , esp mov dword ptr [ eax + num ] , num mov dword ptr [ eax + num ] , hexvar mov dword ptr [ eax ] , hexvar call hexvar test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , esp mov dword ptr [ eax + num ] , num mov dword ptr [ eax + num ] , hexvar mov dword ptr [ eax ] , hexvar call hexvar test eax , eax sete cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , esp mov dword ptr [ eax + num ] , hexvar mov dword ptr [ eax + num ] , hexvar mov dword ptr [ eax ] , hexvar call hexvar test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , esp mov dword ptr [ eax ] , hexvar call hexvar mov ecx , esp mov dword ptr [ ecx + num ] , eax mov dword ptr [ ecx + num ] , num mov dword ptr [ ecx ] , num call hexvar mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov byte ptr [ hexvar ] , num mov eax , dword ptr [ hexvar ] jmp eax mov al , byte ptr [ hexvar ] and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ hexvar ] jmp ecx mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , esp mov dword ptr [ edx + num ] , eax mov dword ptr [ edx ] , ecx call hexvar mov ah , al mov byte ptr [ esp + hexvar ] , ah add esp , hexvar ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , esi shr edx , cl mov esi , dword ptr [ ebp + num ] mov edi , hexvar sub edi , dword ptr [ ebp + hexvar ] mov ecx , edi shl esi , cl or edx , esi mov dword ptr [ ebp - hexvar ] , eax mov eax , edx add esp , num pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar lui gp , hexvar sw s3 , hexvar ( sp ) subu s3 , a3 , a2 addiu gp , gp , hexvar sw s2 , hexvar ( sp ) move s2 , a2 sw s1 , hexvar ( sp ) sll a2 , s3 , num sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) move s1 , a3 sw gp , hexvar ( sp ) addiu a3 , a2 , hexvar lw t9 , - hexvar ( gp ) move s0 , a1 jalr t9 sltu a2 , a3 , a2 beqz v0 , hexvar addiu a0 , zero , num sll a1 , s2 , num sw zero , ( v0 ) sltu v1 , s2 , s1 sw a0 , num ( v0 ) beqz v1 , hexvar addu a1 , s0 , a1 addiu a0 , v0 , hexvar move v1 , s2 lw a2 , ( a1 )
push ebp mov ebp , esp sub esp , hexvar mov eax , esp mov dword ptr [ eax ] , num call hexvar test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ esp ] , num mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , hexvar mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar nop lui a0 , hexvar addiu v1 , zero , num sb zero , hexvar ( v0 ) addiu a1 , v0 , hexvar sb zero , hexvar ( v0 ) addiu a0 , a0 , - hexvar sb v1 , hexvar ( v0 ) jal hexvar sb v1 , hexvar ( v0 ) addiu v0 , zero , num lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s3 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a0 lw s3 , - hexvar ( gp ) lw a0 , ( a0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a0 move a0 , a1 move a3 , zero move a2 , zero addiu a1 , zero , num jal hexvar nop beqz v0 , hexvar move a0 , v0 sw s0 , num ( v0 )
push { r4 , r5 , r6 , lr } mov r6 , r0 mov r5 , r1 bl hexvar subs r4 , r0 , num beq hexvar mov r0 , r6 bl hexvar str r0 , [ r4 ] cmp r5 , num ldrne r3 , [ r5 , num ] strne r3 , [ r4 , num ] ldrb r3 , [ r4 , hexvar ] bic r3 , r3 , hexvar strb r3 , [ r4 , hexvar ] mov r1 , num mov r0 , r4 bl hexvar mov r0 , r4 pop { r4 , r5 , r6 , pc }
push rbp push r15 push r14 push rbx sub rsp , hexvar mov r14 , rdi lea rax , [ rsp + num ] mov qword ptr [ rsp + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rsp + hexvar ] , rax mov eax , hexvar mov ebx , hexvar mov ebp , hexvar jmp hexvar cmp qword ptr [ rsp + hexvar ] , num mov eax , hexvar cmove eax , ebp nop word ptr [ rax + rax ] cmp eax , hexvar jle hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov edx , hexvar mov edi , num mov esi , num mov ecx , hexvar call hexvar cmp qword ptr [ rip + hexvar ] , num mov eax , hexvar cmove eax , ebx jmp hexvar mov edx , hexvar mov edi , hexvar mov esi , num mov ecx , hexvar call hexvar mov eax , hexvar jmp hexvar mov qword ptr [ rip + hexvar ] , hexvar mov eax , hexvar jmp hexvar mov rax , qword ptr [ rip + hexvar ] xor edi , edi call qword ptr [ rax + hexvar ] mov qword ptr [ rsp + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + num ] , rax mov eax , hexvar mov ebp , hexvar lea r15 , [ rsp + num ] jmp hexvar mov edx , hexvar mov edi , num mov esi , num mov ecx , hexvar call hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , r14 call hexvar mov rbx , rax mov edx , hexvar mov edi , num mov esi , num mov ecx , hexvar call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , r15 call qword ptr [ rax + hexvar ] mov eax , hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] cmp eax , hexvar jg hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar nop word ptr [ rax + rax ] cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov eax , hexvar xor ebx , ebx jmp hexvar cmp qword ptr [ rsp + hexvar ] , num mov eax , hexvar cmove eax , ebp jmp hexvar mov rax , qword ptr [ rsp + hexvar ] mov rax , rbx add rsp , hexvar pop rbx pop r14 pop r15 pop rbp ret
beqz a2 , hexvar nop addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw s0 , hexvar ( a2 )
push rbp mov rbp , rsp xor eax , eax xchg rbx , rsi cpuid xchg rbx , rsi mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , esi mov dword ptr [ rbp - hexvar ] , ecx mov dword ptr [ rbp - hexvar ] , edx cmp dword ptr [ rbp - hexvar ] , num jae hexvar mov byte ptr [ rbp - num ] , num jmp hexvar mov eax , num xor ecx , ecx xchg rbx , rsi cpuid xchg rbx , rsi mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , esi mov dword ptr [ rbp - hexvar ] , ecx mov dword ptr [ rbp - hexvar ] , edx mov eax , dword ptr [ rbp - hexvar ] and eax , hexvar cmp eax , num setne dil and dil , num mov byte ptr [ rbp - num ] , dil mov al , byte ptr [ rbp - num ] and al , num movzx eax , al pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] ldr r3 , [ sp , num ] ldr r2 , [ sp , num ] mov r1 , hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - num ] ldr r3 , [ fp , - num ] cmp r3 , num movne r3 , num moveq r3 , num and r3 , r3 , hexvar cmp r3 , num beq hexvar ldr r0 , [ fp , - num ] bl hexvar ldr r3 , [ fp , - hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] mov r2 , num str r2 , [ r3 , num ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 bl hexvar ldr r3 , [ fp , - hexvar ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 bl hexvar ldr r3 , [ fp , - hexvar ] mov r2 , num str r2 , [ r3 , hexvar ] mov r0 , r0 sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbx mov rbx , rdi sub rsp , hexvar movsxd rcx , dword ptr [ rsi ] cmp ecx , hexvar je hexvar mov rax , qword ptr [ rdi ] lea edi , [ rcx + num ] shl rcx , num mov dword ptr [ rsi ] , edi add rax , rcx mov qword ptr [ rax + num ] , num mov qword ptr [ rax + hexvar ] , num lea rcx , [ rax + hexvar ] mov qword ptr [ rax + hexvar ] , num mov rsi , qword ptr [ rdx ] add rax , num mov rdi , qword ptr [ rdx + num ] mov qword ptr [ rax + hexvar ] , rsi mov qword ptr [ rax + hexvar ] , rdi and byte ptr [ rcx + hexvar ] , hexvar mov qword ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , - num add rsp , hexvar pop rbx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov cl , byte ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] and cl , num mov byte ptr [ ebp - num ] , cl test byte ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi je hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push r13 push r12 push rbp push rbx sub rsp , hexvar mov qword ptr [ rsp + num ] , rdi mov rbp , rcx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rax , rcx sub rax , rdi cmp rax , num jle hexvar mov r12 , rdx lea rax , [ rdi + num ] mov qword ptr [ rsp + num ] , rax movzx r8d , byte ptr [ rdi ] lea ebx , [ rsi + rsi ] and ebx , hexvar mov esi , r8d shr sil , num or ebx , esi and r8d , hexvar mov r13d , r8d lea rdi , [ rsp + num ] mov rsi , rcx call hexvar mov rbp , rax mov qword ptr [ rip + hexvar ] , rax mov dword ptr [ r12 ] , num mov byte ptr [ rsp + hexvar ] , num lea rsi , [ rip + hexvar ] test bl , num jne hexvar test bl , num jne hexvar test bl , num jne hexvar test bl , num jne hexvar lea rbx , [ rsp + hexvar ] mov r8d , r13d and r8d , hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar mov esi , num mov rdi , rbx mov eax , num call hexvar lea rcx , [ rsp + hexvar ] mov r9 , rbp mov r8 , rbx lea rdx , [ rip + hexvar ] lea rsi , [ rip + hexvar ] mov edi , num mov eax , num call hexvar mov rax , qword ptr [ rsp + num ] mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + hexvar ] and edx , hexvar shl edx , hexvar or edx , hexvar mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + num ] mov bl , byte ptr [ edx + hexvar ] and bl , num shr bl , num movzx edx , bl mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jmp edx mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , ecx mov dword ptr [ esi ] , eax call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebx pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax test rdi , rdi je hexvar mov r14 , rsi test rsi , rsi je hexvar mov r15 , rdi mov r12d , dword ptr [ rdi + hexvar ] mov eax , hexvar cmp r12d , hexvar ja hexvar mov rbx , rdx mov rcx , qword ptr [ r15 ] not rcx mov eax , hexvar cmp rcx , rdx jb hexvar xor eax , eax test rbx , rbx je hexvar lea r13 , [ r15 + hexvar ] cmp rbx , hexvar jae hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop mov r12d , dword ptr [ r15 + hexvar ] cmp rbx , hexvar jb hexvar test r12d , r12d jne hexvar mov rdi , r15 mov rsi , r14 call hexvar add qword ptr [ r15 ] , hexvar add r14 , hexvar add rbx , - hexvar test rbx , rbx jne hexvar jmp hexvar mov ebp , hexvar sub ebp , r12d cmp rbx , rbp cmovb rbp , rbx mov edi , r12d add rdi , r13 mov rsi , r14 mov rdx , rbp call hexvar lea eax , [ r12 + rbp ] mov dword ptr [ r15 + hexvar ] , eax add r14 , rbp sub rbx , rbp cmp eax , hexvar jne hexvar mov rdi , r15 mov rsi , r13 call hexvar add qword ptr [ r15 ] , hexvar mov dword ptr [ r15 + hexvar ] , num test rbx , rbx jne hexvar xor eax , eax add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + num ] mov rax , qword ptr [ rbp - num ] mov rsi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] call hexvar movsxd rax , dword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , hexvar ja hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] add rcx , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rcx mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rsi + hexvar ] , num add rsp , hexvar pop rbp ret
xor eax , eax mov rdx , qword ptr [ rsi ] cmp qword ptr [ rdi ] , rdx je hexvar ret nop dword ptr [ rax ] mov rax , qword ptr [ rsi + num ] cmp qword ptr [ rdi + num ] , rax sete al ret
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax lea eax , [ ebx - hexvar ] push esi push dword ptr [ esp + hexvar ] push eax push num lea eax , [ esp + hexvar ] push eax call hexvar add esp , hexvar test eax , eax mov eax , esi cmovns eax , dword ptr [ esp + num ] mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi ret
push rax mov rdi , qword ptr [ rdi + hexvar ] mov esi , hexvar call hexvar test rax , rax je hexvar cmp dword ptr [ rax ] , hexvar jne hexvar mov rax , qword ptr [ rax + num ] mov rdi , qword ptr [ rax + num ] mov esi , dword ptr [ rax ] pop rax jmp hexvar xor eax , eax pop rcx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) addiu a2 , zero , hexvar lui a1 , hexvar addiu a1 , a1 , - hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s0 , v0 addiu a2 , zero , hexvar move a1 , zero move a0 , v0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz s0 , hexvar addiu v0 , zero , - num sw zero , ( s0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] movsd xmm0 , qword ptr [ eax + hexvar ] movsd qword ptr [ ebp - hexvar ] , xmm0 mov eax , dword ptr [ ebp + hexvar ] movsd xmm0 , qword ptr [ eax ] movsd qword ptr [ ebp - hexvar ] , xmm0 mov eax , dword ptr [ ebp + num ] lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar cmp eax , num setne dl xor dl , hexvar xor dl , hexvar and dl , num mov byte ptr [ ebp - num ] , dl mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
cmp qword ptr [ rdi + hexvar ] , num je hexvar mov rdx , rdi mov edi , hexvar mov esi , hexvar mov ecx , hexvar mov r8d , num xor r9d , r9d jmp hexvar mov eax , num ret
push rbp mov rbp , rsp sub rsp , hexvar cmp dword ptr [ hexvar ] , num jne hexvar mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , num mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , num mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al movabs rdi , hexvar mov dword ptr [ rip + hexvar ] , num call hexvar movabs rdi , hexvar mov dword ptr [ rbp - num ] , eax call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
push rbp push rbx sub rsp , num mov rbp , rdi mov edi , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rbp call hexvar mov qword ptr [ rbx ] , rax test rax , rax je hexvar mov r8d , hexvar mov ecx , hexvar mov edx , hexvar mov esi , num mov edi , hexvar call hexvar mov qword ptr [ rbx + num ] , rax test rax , rax jne hexvar mov rdi , qword ptr [ rbx ] call hexvar mov rdi , rbx call hexvar mov eax , num jmp hexvar mov rdi , rbx call hexvar mov eax , num jmp hexvar mov eax , num jmp hexvar mov rax , rbx add rsp , num pop rbx pop rbp ret
push esi push ebx call hexvar add ebx , hexvar sub esp , num mov esi , dword ptr [ esp + hexvar ] test esi , esi je hexvar lea eax , [ ebx - hexvar ] sub esp , num push eax push dword ptr [ esi + num ] call hexvar lea eax , [ esi + hexvar ] add esp , hexvar push eax push esi push hexvar call hexvar mov dword ptr [ esp ] , esi call hexvar add esp , hexvar add esp , num pop ebx pop esi ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r15 , rdx mov r14 , rsi call hexvar test rax , rax je hexvar mov rbx , rax mov qword ptr [ r15 ] , num mov edx , hexvar mov edi , num mov esi , num mov ecx , hexvar call hexvar mov rdi , qword ptr [ rbx + num ] call hexvar mov r12d , eax test eax , eax jle hexvar lea edi , [ r12 * num ] mov esi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov r13 , rax mov qword ptr [ rsp ] , r14 mov r14d , r12d xor ebp , ebp nop word ptr [ rax + rax ] mov rdi , qword ptr [ rbx + num ] mov esi , ebp call hexvar mov qword ptr [ r13 + rbp * num ] , rax add rbp , num cmp r14 , rbp jne hexvar mov r14 , qword ptr [ rsp ] jmp hexvar xor ebx , ebx jmp hexvar xor r13d , r13d mov edx , hexvar mov edi , num mov esi , num mov ecx , hexvar call hexvar test r12d , r12d jle hexvar test r13 , r13 jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx jmp hexvar test r12d , r12d jle hexvar mov ebp , r12d xor ebx , ebx nop dword ptr [ rax ] mov rax , qword ptr [ r13 + rbx * num ] test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num je hexvar mov rdi , qword ptr [ r15 ] test rdi , rdi je hexvar call hexvar cdqe cmp rbx , rax jge hexvar mov rdi , qword ptr [ r15 ] mov esi , ebx call hexvar mov rsi , rax jmp hexvar nop word ptr cs : [ rax + rax ] nop xor esi , esi mov rax , qword ptr [ r13 + rbx * num ] mov r8 , qword ptr [ rax ] mov r9 , qword ptr [ rax + num ] mov rdi , r14 mov rdx , r15 mov ecx , ebx call qword ptr [ rax + hexvar ] add rbx , num cmp rbp , rbx jne hexvar mov ebx , num test r13 , r13 je hexvar mov rdi , r13 call hexvar mov eax , ebx add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) addiu gp , gp , hexvar sw s2 , hexvar ( sp ) move s2 , a1 sw s1 , hexvar ( sp ) sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw gp , hexvar ( sp ) lw s0 , ( a0 )
cmp r0 , num beq hexvar ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar ldr ip , [ r3 ] cmp r0 , ip beq hexvar mvn r0 , num bx lr ldr ip , [ r3 , num ] str lr , [ sp , - num ] ! cmp ip , hexvar cmpne ip , hexvar movne r0 , num moveq r0 , num cmp ip , hexvar moveq r0 , num andne r0 , r0 , num cmp ip , hexvar moveq r0 , num andne r0 , r0 , num cmp ip , hexvar moveq r0 , num andne r0 , r0 , num ldr lr , [ pc , hexvar ] cmp ip , lr moveq r0 , num andne r0 , r0 , num sub ip , ip , hexvar bics ip , ip , hexvar moveq r0 , num cmp r0 , num bne hexvar cmp r1 , num ldrne r0 , [ r3 , hexvar ] strne r0 , [ r1 ] cmp r2 , num beq hexvar add r3 , r3 , hexvar ldr r3 , [ r3 , hexvar ] mov r0 , num str r3 , [ r2 ] pop { pc } strtvs r1 , [ r5 ] , hexvar andeq r0 , r0 , r0
push rbp push rbx sub rsp , num mov ebp , edi mov ebx , esi cmp byte ptr [ rip + hexvar ] , num je hexvar mov rax , qword ptr [ rip + hexvar ] movzx eax , byte ptr [ rax - num ] cmp al , hexvar je hexvar cmp al , hexvar ja hexvar cmp al , hexvar jne hexvar mov edi , hexvar call hexvar lea rdi , [ rip + hexvar ] call hexvar mov esi , ebx mov edi , ebp call hexvar add rsp , num pop rbx pop rbp ret
push rbx test rdi , rdi je hexvar mov rbx , rdi movsxd rdx , dword ptr [ rdi ] test rdx , rdx jle hexvar mov rdi , qword ptr [ rbx + num ] shl rdx , num xor esi , esi call hexvar mov dword ptr [ rbx ] , num pop rbx ret
push r15 push r14 lea rax , [ rip + hexvar ] push r13 push r12 mov r12 , rdx push rbp push rbx mov rbx , rcx mov r14 , rdi mov r15 , rsi sub rsp , hexvar test rcx , rcx cmove rbx , rax xor ebp , ebp call hexvar test r12 , r12 mov r13 , rax mov eax , dword ptr [ rax ] sete bpl or ebp , dword ptr [ rbx + num ] lea r10 , [ rbx + num ] sub rsp , num mov r8d , dword ptr [ rbx ] mov rcx , r15 mov dword ptr [ rsp + hexvar ] , eax push qword ptr [ rbx + hexvar ] mov rdx , r14 push qword ptr [ rbx + hexvar ] push r10 xor esi , esi mov r9d , ebp xor edi , edi mov qword ptr [ rsp + hexvar ] , r10 call hexvar lea rsi , [ rax + num ] mov qword ptr [ rsp + hexvar ] , rax add rsp , hexvar mov rdi , rsi mov qword ptr [ rsp + hexvar ] , rsi call hexvar mov qword ptr [ rsp + hexvar ] , rax sub rsp , num push qword ptr [ rbx + hexvar ] push qword ptr [ rbx + hexvar ] mov r10 , qword ptr [ rsp + hexvar ] mov r9d , ebp mov r8d , dword ptr [ rbx ] mov rcx , r15 mov rdx , r14 mov rdi , rax push r10 mov rsi , qword ptr [ rsp + hexvar ] call hexvar mov eax , dword ptr [ rsp + hexvar ] add rsp , hexvar test r12 , r12 mov dword ptr [ r13 ] , eax je hexvar mov r11 , qword ptr [ rsp + hexvar ] mov qword ptr [ r12 ] , r11 mov rax , qword ptr [ rsp + hexvar ] add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , num lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar lea eax , [ hexvar ] add eax , num mov dword ptr [ esp ] , eax call hexvar add esp , num pop ebp ret
cmp rdi , rsi je hexvar test rdx , rdx jne hexvar jmp hexvar nop dword ptr [ rax ] test al , al je hexvar add rdi , num add rsi , num cmp al , cl jne hexvar movzx eax , byte ptr [ rdi ] mov ecx , eax lea r8d , [ rax + hexvar ] sub ecx , hexvar cmp cl , hexvar movzx ecx , byte ptr [ rsi ] cmovb eax , r8d mov r8d , ecx lea r10d , [ rcx + hexvar ] sub r8d , hexvar cmp r8b , hexvar cmovb ecx , r10d sub rdx , num jne hexvar movzx ecx , cl movzx eax , al sub eax , ecx ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jae hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx ecx , word ptr [ rax ] sub ecx , hexvar setne dl movzx esi , dl cmp esi , num mov dword ptr [ rbp - hexvar ] , ecx jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] pop rbp ret
push rbx mov esi , num mov rbx , rdi call hexvar test rbx , rbx je hexvar test rax , rax je hexvar pop rbx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar sw s0 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) move s0 , v0 lw v0 , num ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax ] call hexvar mov rax , qword ptr [ rbp - num ] movabs rdi , hexvar mov qword ptr [ rax + hexvar ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push esi push ebx sub esp , hexvar call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] shrd eax , edx , hexvar shr edx , hexvar mov ecx , eax mov ebx , edx mov edx , ecx mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax ] , dl mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] shrd eax , edx , hexvar shr edx , hexvar mov ebx , eax mov esi , edx mov ecx , dword ptr [ ebp - hexvar ] add ecx , num mov eax , ebx mov byte ptr [ ecx ] , al mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] shrd eax , edx , num shr edx , num mov ebx , eax mov esi , edx mov ecx , dword ptr [ ebp - hexvar ] add ecx , num mov eax , ebx mov byte ptr [ ecx ] , al mov eax , dword ptr [ ebp - hexvar ] add eax , num mov edx , dword ptr [ ebp - hexvar ] mov byte ptr [ eax ] , dl nop add esp , hexvar pop ebx pop esi pop ebp ret
push edi push esi push ebx call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esi ] test eax , eax je hexvar cmp eax , num jne hexvar sub esp , num push - num push - num push edi call hexvar mov eax , dword ptr [ edi + hexvar ] add esp , hexvar test eax , eax je hexvar sub esp , num push eax push dword ptr [ esi + num ] call hexvar add esp , hexvar pop ebx pop esi pop edi ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar mov esp , ebp pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v1 , hexvar ( fp ) lui v0 , hexvar ori v0 , v0 , hexvar beq v1 , v0 , hexvar nop lw v0 , hexvar ( fp ) addiu v0 , v0 , num sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) sw zero , hexvar ( fp ) addiu v0 , zero , - num sw v0 , hexvar ( fp ) addiu v0 , fp , hexvar move a3 , v0 lui v0 , hexvar addiu a2 , v0 , hexvar lw a1 , hexvar ( fp ) move a0 , zero jal hexvar nop lw gp , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v1 , - hexvar ( gp ) lw a0 , hexvar ( fp ) lw v1 , ( v1 ) beq a0 , v1 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi cmp esi , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jge hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , hexvar mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax lea eax , [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov edi , esp mov dword ptr [ edi + hexvar ] , esi mov dword ptr [ edi + num ] , edx mov dword ptr [ edi + num ] , ecx mov dword ptr [ edi ] , eax call hexvar add esp , hexvar pop esi pop edi pop ebp ret
mov r8 , rcx mov rcx , rdx test rsi , rsi je hexvar xorps xmm0 , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi ] , xmm0 mov qword ptr [ rdi + hexvar ] , num xor edx , edx xor r9d , r9d jmp hexvar xor esi , esi xor edx , edx xor r9d , r9d jmp hexvar nop dword ptr [ rax ]
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num jne hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov esi , hexvar mov rdi , rax call hexvar leave ret
cmp r2 , num cmpne r0 , num beq hexvar push { r4 , lr } mov lr , r0 mov r4 , r2 cmp r1 , num beq hexvar sub lr , r0 , num mov ip , num mov r0 , ip b hexvar cmn ip , hexvar bhi hexvar cmp r3 , hexvar movls r2 , num movhi r2 , num cmn ip , hexvar movne r2 , num cmp r2 , num bne hexvar add ip , r3 , ip , lsl num add r0 , r0 , num cmp r1 , r0 beq hexvar ldrb r2 , [ lr , num ] ! sub r3 , r2 , hexvar and r3 , r3 , hexvar cmp r3 , num bls hexvar sub r3 , r2 , hexvar cmp r3 , num subls r3 , r2 , hexvar andls r3 , r3 , hexvar bls hexvar sub r3 , r2 , hexvar cmp r3 , num subls r3 , r2 , hexvar andls r3 , r3 , hexvar bls hexvar cmp r0 , num strne ip , [ r4 ] pop { r4 , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , ( v0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add eax , - hexvar mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov al , byte ptr [ ebp - num ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al mov esp , ebp pop ebp ret
push rbp mov rbp , rsp push r15 push r14 push r12 push rbx mov r14 , rdx mov r15 , rsi mov r12 , rdi mov eax , dword ptr [ rip ] test eax , eax jne hexvar movaps xmm0 , xmmword ptr [ rip ] xorps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rip ] , xmm0 movaps xmmword ptr [ rip ] , xmm0 add byte ptr [ rsi ] , bh add byte ptr [ rax ] , al add byte ptr [ rax ] , al test dword ptr [ rax + hexvar ] , ebp test dword ptr [ rbp ] , ecx xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al retf
push r15 push r14 push r13 push r12 mov r12d , num push rbp push rbx sub rsp , num cmp qword ptr [ rdi + hexvar ] , - num je hexvar movzx eax , byte ptr [ rdi + hexvar ] mov rbp , rsi mov rbx , rdi mov r13 , qword ptr [ rdi + num ] shr al , num and eax , num cmp al , num jbe hexvar mov esi , hexvar mov rdi , r13 call hexvar test rax , rax je hexvar sub rax , r13 lea rdi , [ rax + num ] mov r15 , rax call hexvar test rax , rax mov r14 , rax je hexvar mov rdx , r15 mov rsi , r13 mov rdi , rax call hexvar mov rdi , r14 mov byte ptr [ r14 + r15 ] , num call hexvar mov rdx , qword ptr [ rbp ] mov rdi , r14 lea rcx , [ rdx + num ] mov qword ptr [ rbp ] , rcx mov qword ptr [ rdx ] , rax mov qword ptr [ rbx + hexvar ] , rax call hexvar add rsp , num mov eax , r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - num ] imul rdx , rax , hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , rdx pop rbp ret
push rbp push rbx sub rsp , num mov rbp , qword ptr [ rip + hexvar ] test rbp , rbp jne hexvar jmp hexvar nop dword ptr [ rax ] call hexvar mov qword ptr [ rbx ] , num call hexvar mov rax , qword ptr [ rip + hexvar ] lea rbx , [ rbp + rax * num ] mov rdi , qword ptr [ rbx ] test rdi , rdi jne hexvar mov rdi , rbp call hexvar mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num xor eax , eax mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov dword ptr [ rip + hexvar ] , num mov dword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num add rsp , num pop rbx pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw a0 , ( a0 )
push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ eax + hexvar ] call hexvar add esp , hexvar pop ebx ret
lui gp , hexvar addiu gp , gp , hexvar lw v0 , ( a0 ) lb a2 , ( v0 ) andi v0 , a2 , hexvar sll v1 , v0 , num lw v0 , - hexvar ( gp ) addu v0 , v0 , v1 lhu v0 , ( v0 ) andi v0 , v0 , num beqz v0 , hexvar addiu a2 , a2 , - hexvar sw a2 , ( a1 )
push edi push esi push ebx call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] test esi , esi je hexvar mov edx , dword ptr [ esi ] mov edi , num mov eax , esi cmp edx , num je hexvar cmp edx , hexvar je hexvar cmp edx , hexvar je hexvar cmp edx , hexvar je hexvar cmp edx , hexvar je hexvar cmp edx , hexvar je hexvar cmp edx , hexvar jne hexvar mov edi , num test esi , esi je hexvar mov eax , edi pop ebx pop esi pop edi ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , hexvar call hexvar cmp rax , num je hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov edi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , hexvar call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] movabs rsi , hexvar call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov r8d , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - num ] , r8d mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] movabs rsi , num call hexvar mov ecx , num mov dword ptr [ rbp - hexvar ] , eax mov eax , ecx add rsp , hexvar pop rbp ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s4 , hexvar ( sp ) move s4 , a2 sw s1 , hexvar ( sp ) move s1 , a0 sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) beqz a1 , hexvar lw a0 , num ( a0 )
push { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r6 , r2 mov r2 , r1 ldr r4 , [ sp , hexvar ] ldr r1 , [ r6 ] add ip , r4 , num bic ip , ip , num add fp , ip , hexvar mov sl , r0 add r1 , fp , r1 mov r0 , r2 mov sb , r3 bl hexvar subs r7 , r0 , num beq hexvar mov r8 , num ldr r5 , [ r6 ] ldr r2 , [ sl , num ] add r3 , fp , r5 add r5 , r7 , r5 str r3 , [ r6 ] mov r1 , r5 ldr r3 , [ r2 , hexvar ] mov r0 , num blx r3 ldr r3 , [ sl , num ] add r1 , r5 , num ldr r3 , [ r3 , hexvar ] mov r0 , r4 blx r3 ldr r3 , [ sl , num ] add r1 , r5 , num ldr r3 , [ r3 , hexvar ] ldr r0 , [ pc , hexvar ] blx r3 add r6 , r5 , hexvar mov r2 , num ldr r1 , [ pc , hexvar ] add r0 , r5 , hexvar bl hexvar mov r1 , sb mov r0 , r6 strb r8 , [ r5 , hexvar ] strb r8 , [ r5 , hexvar ] mov r2 , r4 bl hexvar tst r4 , num add r0 , r6 , r4 beq hexvar mov r1 , r8 mov r2 , r0 strb r1 , [ r2 ] , num add r3 , r2 , r4 sub r3 , r3 , r0 tst r3 , num bne hexvar mov r0 , r7 pop { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbx , rdi mov r12 , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax mov rax , qword ptr [ rdi + num ] mov r13 , qword ptr [ rax + hexvar ] mov rdi , rsi call hexvar lea rbp , [ rsp + num ] lea rdi , [ rax + num ] mov rsi , rbp call r13
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ edi ] mov edi , dword ptr [ edi + num ] xor edx , edi xor esi , ebx or esi , edx sete dl and dl , num movzx edi , dl mov dword ptr [ ebp - hexvar ] , eax mov eax , edi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp push rbx sub rsp , hexvar mov rbx , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rax , qword ptr [ rsi + hexvar ] mov qword ptr [ rsp ] , rax mov rax , qword ptr [ rsi + hexvar ] mov qword ptr [ rsp + num ] , rax mov rsi , rsp call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp ret
cmp r2 , num beq hexvar ldrb ip , [ r0 ] ldrb r3 , [ r1 ] cmp r3 , num beq hexvar str lr , [ sp , - num ] ! mov lr , r0 add r2 , r0 , r2 sub r2 , r2 , num b hexvar clz r0 , ip lsr r0 , r0 , num pop { pc }
push ebp mov ebp , esp sub esp , hexvar call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] movzx eax , byte ptr [ eax + hexvar ] cmp al , hexvar jne hexvar mov eax , hexvar jmp hexvar mov eax , hexvar mov byte ptr [ ebp - num ] , al mov eax , dword ptr [ ebp + hexvar ] movzx eax , byte ptr [ eax ] cmp byte ptr [ ebp - num ] , al sete al movzx eax , al leave ret
push rax test rdi , rdi je hexvar test rdx , rdx je hexvar pop rax jmp hexvar mov edi , num mov esi , num mov edx , hexvar call hexvar mov edi , num mov esi , num mov edx , hexvar call hexvar nop dword ptr [ rax ]
push edi push esi push ebx mov edx , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov eax , dword ptr [ ecx + hexvar ] cmp dword ptr [ edx + hexvar ] , eax jg hexvar mov eax , num jl hexvar mov eax , dword ptr [ ecx + hexvar ] sub eax , dword ptr [ edx + hexvar ] jne hexvar mov edi , dword ptr [ ecx ] mov esi , dword ptr [ edx ] call hexvar sub esp , num mov dword ptr [ eax ] , num push edi push esi call hexvar add esp , hexvar pop ebx pop esi pop edi ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move v0 , zero move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop nop
push rbp mov rbp , rsp sub rsp , hexvar lea rdx , [ rip + hexvar ] lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] lea rdx , [ rip - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] lea rdx , [ rip + hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] xor eax , num mov edx , eax mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] or eax , hexvar mov edx , eax mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov eax , hexvar leave ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + hexvar ] and edx , hexvar cmp edx , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] and eax , num cmp eax , num mov cl , num mov byte ptr [ ebp - hexvar ] , cl je hexvar xor eax , eax mov cl , al mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] and eax , hexvar cmp eax , num mov byte ptr [ ebp - hexvar ] , cl je hexvar xor eax , eax mov cl , al mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov edx , hexvar xor edx , num mov esi , eax xor esi , edx and esi , eax cmp esi , num mov byte ptr [ ebp - hexvar ] , cl je hexvar mov eax , dword ptr [ ebp + hexvar ] cmp dword ptr [ eax + hexvar ] , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push edi push esi push ebx mov edi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] sub esp , num lea eax , [ ebx - hexvar ] push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push dword ptr [ edi + hexvar ] push eax push esi call hexvar add esp , hexvar pop ebx pop esi pop edi ret
push ebp mov ebp , esp sub esp , num mov al , byte ptr [ ebp + num ] mov byte ptr [ ebp - num ] , al mov eax , esp add eax , - hexvar mov esp , eax mov cl , byte ptr [ ebp - num ] and cl , num mov byte ptr [ eax ] , cl mov cl , byte ptr [ eax ] and cl , num mov byte ptr [ hexvar ] , cl mov esp , ebp pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jae hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar mov edx , num call hexvar cmp eax , num je hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar mov edx , num call hexvar cmp eax , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) addiu v0 , zero , num beq a1 , v0 , hexvar move s0 , a1 addiu v0 , zero , hexvar beq a1 , v0 , hexvar addiu a3 , zero , hexvar addiu a3 , zero , hexvar lui a2 , hexvar addiu a2 , a2 , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar jal hexvar nop lw gp , hexvar ( sp ) b hexvar move v0 , zero move s1 , a3 addiu a3 , zero , hexvar lui a2 , hexvar addiu a2 , a2 , hexvar addiu a1 , zero , hexvar addiu a0 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lui v0 , hexvar lw a0 , hexvar ( v0 ) beqz a0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lui v0 , hexvar sw zero , hexvar ( v0 ) addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar addiu a1 , zero , num addiu a0 , s1 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) slti v0 , v0 , num bnez v0 , hexvar lui v0 , hexvar sw s1 , hexvar ( v0 ) addiu a3 , zero , hexvar lui a2 , hexvar addiu a2 , a2 , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move v0 , s0 lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu a3 , zero , hexvar lui a2 , hexvar addiu a2 , a2 , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar jal hexvar nop lw gp , hexvar ( sp ) b hexvar addiu a3 , zero , hexvar lui s0 , hexvar addiu a2 , s0 , hexvar addiu a1 , zero , hexvar addiu a0 , zero , num lw t9 , - hexvar ( gp )
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax push edi push num lea ebp , [ esp + hexvar ] push ebp push esi call hexvar mov ecx , eax sub eax , num add esi , dword ptr [ esp + hexvar ] add esp , hexvar cmp eax , hexvar ja hexvar mov edx , dword ptr [ ebx + eax * num - hexvar ] add edx , ebx jmp edx lea esi , [ esi ]
push rbp push rbx sub rsp , num mov eax , dword ptr [ rdx + hexvar ] test eax , eax jne hexvar mov rbx , qword ptr [ rsi + hexvar ] mov rbp , qword ptr [ rdx + hexvar ] mov rdi , qword ptr [ rsi + hexvar ] mov rsi , qword ptr [ rdx + hexvar ] cmp rbx , rbp jne hexvar xor eax , eax cmp rdi , rsi je hexvar call hexvar pxor xmm1 , xmm1 sub rbx , rbp cvtsi2sd xmm1 , rbx mulsd xmm1 , qword ptr [ rip + hexvar ] addsd xmm1 , xmm0 pxor xmm0 , xmm0 ucomisd xmm0 , xmm1 setbe al add rsp , num pop rbx pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num jne hexvar call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar test rdi , rdi je hexvar mov rbp , rsi test rsi , rsi je hexvar mov r15 , rcx test rcx , rcx je hexvar mov r14 , r8 test r8 , r8 je hexvar mov r13 , rdx mov r12 , rdi mov edi , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov rsi , qword ptr [ r14 ] lea rdi , [ rsp + num ] mov rdx , rbp mov rcx , r13 call hexvar mov ebp , eax test eax , eax jne hexvar mov esi , num mov rdi , r12 call hexvar test rax , rax je hexvar mov r12 , rax mov qword ptr [ rsp ] , r15 lea r13 , [ rsp + num ] nop word ptr cs : [ rax + rax ] nop mov esi , num mov edx , hexvar mov rdi , rbx mov rcx , r12 call hexvar mov r15 , rax mov rdi , r13 mov rsi , rbx mov rdx , rax call hexvar test eax , eax jne hexvar cmp r15 , hexvar je hexvar mov rdi , r12 call hexvar mov ebp , num test eax , eax jne hexvar lea rdi , [ rsp + num ] mov rsi , qword ptr [ rsp ] mov rdx , r14 call hexvar mov ebp , eax jmp hexvar mov ebp , hexvar jmp hexvar mov ebp , hexvar jmp hexvar mov ebp , eax mov rdi , r12 call hexvar mov esi , hexvar mov rdi , rbx call hexvar mov rdi , rbx call hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi ] mov rdi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdi ] sub rsi , rdi sete al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] xor ecx , ecx mov al , cl mov qword ptr [ rbp - hexvar ] , rsi mov byte ptr [ rbp - hexvar ] , al jmp rdi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + num ] sub rax , rcx sete dl mov rcx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov byte ptr [ rbp - hexvar ] , dl jmp rcx mov al , byte ptr [ rbp - hexvar ] xor ecx , ecx test al , num mov edx , num cmovne ecx , edx cmp ecx , num setne al and al , num movzx eax , al pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lui v0 , hexvar addiu a3 , v0 , hexvar lw a2 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , num pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r4 , r2 ldr r3 , [ r2 ] str r1 , [ r3 ] ldr r3 , [ r1 , hexvar ] tst r3 , num bne hexvar ldr r2 , [ r2 , num ] mov r3 , num str r3 , [ r2 ] ldr r2 , [ r4 , num ] str r3 , [ r2 ] ldr r3 , [ r4 ] add r3 , r3 , num str r3 , [ r4 ] ldr r3 , [ r4 , num ] add r3 , r3 , num str r3 , [ r4 , num ] ldr r3 , [ r4 , num ] add r3 , r3 , num str r3 , [ r4 , num ] pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rax + hexvar ] cmp eax , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rax + hexvar ] cmp eax , hexvar jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] jmp hexvar mov eax , num mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] lea rsi , [ rip - hexvar ] mov rdi , rax call hexvar mov eax , num leave ret
push { r4 , r5 , r6 , r7 , r8 , sb , lr } ldr r7 , [ pc , hexvar ] mov r5 , r0 ldr r0 , [ r0 , num ] ldr r3 , [ r7 ] sub sp , sp , hexvar cmp r0 , num str r3 , [ sp , hexvar ] beq hexvar ldm r0 , { r3 , r6 } str r3 , [ r5 , num ] mov r8 , r1 mov sb , r2 bl hexvar cmp r6 , num moveq r0 , r6 beq hexvar ldr r3 , [ r5 , num ] cmp r3 , num beq hexvar mov r4 , num ldr r1 , [ r5 ] mov r0 , hexvar bl hexvar ldr r3 , [ r5 , num ] add r4 , r4 , num cmp r4 , r3 blo hexvar add r4 , sp , hexvar ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , num str sb , [ sp ] mov r0 , r4 bl hexvar ldr r0 , [ r5 ] mov r3 , r6 ldr r2 , [ pc , hexvar ] mov r1 , num str r4 , [ sp , num ] str r8 , [ sp ] bl hexvar mov r0 , r6 bl hexvar mov r0 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ r7 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc }
push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ edx + hexvar ] add eax , hexvar push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push edx call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , num mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp byte ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] movsx eax , byte ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] shl ecx , num mov edx , dword ptr [ ebp - hexvar ] shr edx , hexvar mov esi , ecx xor esi , hexvar mov edi , edx xor edi , hexvar mov ebx , hexvar xor ebx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , esi and eax , hexvar and ecx , ebx mov dword ptr [ ebp - hexvar ] , eax mov eax , edi and eax , hexvar and edx , ebx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] or eax , ecx mov ecx , dword ptr [ ebp - hexvar ] or ecx , edx xor eax , ecx or esi , edi xor esi , hexvar or ebx , hexvar and esi , ebx or eax , esi mov ecx , dword ptr [ ebp - hexvar ] add ecx , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] xor edx , edx div dword ptr [ ebp + hexvar ]
cmp r0 , num bhi hexvar cmp r0 , num beq hexvar cmp r0 , num beq hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] cmp r0 , num moveq r0 , r3 movne r0 , r2 bx lr ldr r0 , [ pc , hexvar ] bx lr ldr r0 , [ pc , hexvar ] bx lr ldr r0 , [ pc , hexvar ] bx lr andeq r5 , fp , r8 , ror num andeq r5 , fp , r0 , lsl ip andeq r8 , fp , ip , lsr num andeq r8 , fp , r4 , lsr pc andeq r8 , fp , r4 , lsr num
push r14 push rbx push rax test rdi , rdi je hexvar mov rbx , rdi mov rax , qword ptr [ rdi ] test rax , rax je hexvar mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov r10 , qword ptr [ rbx + num ] test r10 , r10 je hexvar mov r9d , num mov rdi , rbx mov esi , num xor edx , edx mov ecx , hexvar xor r8d , r8d mov r14 , r10 call r10
push rbp push r15 push r14 push rbx push rax mov r14 , rdx mov rbx , rsi mov edx , hexvar call hexvar mov r15d , num test rax , rax je hexvar mov rbp , rax mov esi , hexvar mov rdi , rax call hexvar test eax , eax je hexvar mov esi , hexvar mov rdi , rbp call hexvar test eax , eax je hexvar mov rdi , qword ptr [ rip + hexvar ] xor r15d , r15d mov esi , hexvar mov ecx , hexvar mov rdx , rbx xor eax , eax call hexvar jmp hexvar mov rdi , r14 mov esi , num call hexvar mov eax , r15d add rsp , num pop rbx pop r14 pop r15 pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] mov r2 , num mov r1 , hexvar ldr r0 , [ sp , hexvar ] bl hexvar ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { pc }
push { r4 , fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] bl hexvar mov r3 , r0 ldr r4 , [ r3 ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar ldr r0 , [ pc , hexvar ] bl hexvar mov r3 , r0 b hexvar ldr r3 , [ fp , - hexvar ] str r3 , [ sp ] ldr r3 , [ fp , - hexvar ] ldr r2 , [ pc , hexvar ] mov r1 , r4 mov r0 , num bl hexvar mov r0 , num bl hexvar andeq pc , r2 , r4 , lsl num andeq pc , r2 , r4 , lsl r5
push ebp push edi push esi push ebx xor ebx , ebx call hexvar add eax , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov ebp , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esi + hexvar ] test edi , edi je hexvar lea esi , [ esi ] lea edi , [ edi ] sub esp , num add ebx , num push ebp push edi push esi call dword ptr [ esp + hexvar ] mov edi , dword ptr [ edi + hexvar ] add esp , hexvar test edi , edi jne hexvar cmp dword ptr [ esi + hexvar ] , ebx jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , num mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] sub eax , num seta cl movzx edx , cl mov edx , dword ptr [ edx * num + hexvar ] xor ebx , ebx mov cl , bl mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , cl jmp edx mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dl , byte ptr [ eax + ecx - num ] sub dl , hexvar sete dh mov eax , dword ptr [ hexvar ] mov byte ptr [ ebp - hexvar ] , dl mov byte ptr [ ebp - hexvar ] , dh jmp eax mov al , byte ptr [ ebp - hexvar ] movzx ecx , al and ecx , num mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] dec eax mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebx pop ebp ret
ldr r2 , [ r0 , num ] ldr r3 , [ r1 , num ] cmp r2 , r3 beq hexvar mov r0 , num bx lr sub r3 , r2 , hexvar sub r2 , r2 , num cmn r2 , num lsl r3 , r3 , num bhi hexvar str lr , [ sp , - num ] ! b hexvar sub r2 , r2 , num cmn r2 , num bhi hexvar ldr lr , [ r0 , num ] ldr ip , [ r1 , num ] ldr lr , [ lr , r3 ] ldr ip , [ ip , r3 ] sub r3 , r3 , num cmp lr , ip beq hexvar mov r0 , num pop { pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - num ] , eax call hexvar mov byte ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar jmp hexvar call hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar jmp hexvar add esp , hexvar pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s0 ) sw v0 , hexvar ( sp ) beqz a1 , hexvar move v0 , zero lw v0 , ( a2 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rax mov edx , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - num ] , eax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov byte ptr [ ebp - num ] , num mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar cmp eax , num je hexvar mov eax , dword ptr [ ebp - num ] mov ecx , esp mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + num ] , hexvar call hexvar cmp eax , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw zero , hexvar ( fp ) lw v0 , hexvar ( fp ) addiu v0 , v0 , num sw v0 , hexvar ( fp ) lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) addu v0 , v1 , v0 lb v0 , ( v0 ) beqz v0 , hexvar nop lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) addu v0 , v1 , v0 lb v0 , ( v0 ) move a1 , v0 lui v0 , hexvar addiu a0 , v0 , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) bnez v0 , hexvar nop b hexvar nop lw v0 , hexvar ( fp ) addiu v0 , v0 , num sw v0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw v1 , ( v0 ) lw a0 , hexvar ( fp ) lw v0 , hexvar ( fp ) addu v0 , a0 , v0 lb v0 , ( v0 ) andi v0 , v0 , hexvar sll v0 , v0 , num addu v0 , v1 , v0 lhu v0 , ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) sw zero , hexvar ( sp ) lw v0 , hexvar ( sp ) addiu v0 , v0 , hexvar lw a1 , hexvar ( sp ) move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar nop lw v0 , hexvar ( sp ) addiu v1 , v0 , hexvar lw v0 , hexvar ( sp ) addiu v0 , v0 , hexvar addiu a2 , zero , num move a1 , v0 move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) addiu v0 , v0 , - num sw v0 , hexvar ( sp ) lw v1 , hexvar ( sp ) addiu v0 , zero , num beq v1 , v0 , hexvar nop lw v1 , hexvar ( sp ) addiu v0 , zero , num beq v1 , v0 , hexvar nop addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui v0 , hexvar addiu a3 , v0 , - hexvar addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) b hexvar nop lw v0 , hexvar ( sp ) addiu v1 , v0 , hexvar lw v0 , hexvar ( sp ) addiu v0 , v0 , hexvar move a2 , v0 lw a1 , hexvar ( sp ) move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar nop lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push ebp push edi push esi push ebx call hexvar add eax , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ esi + hexvar ] mov dword ptr [ esp + hexvar ] , edx mov edx , num mov ecx , dword ptr [ eax + num ] movzx eax , byte ptr [ eax + hexvar ] mov dword ptr [ esp + hexvar ] , ecx shr al , num and eax , num mov byte ptr [ esp + hexvar ] , al mov eax , esi call hexvar mov ecx , dword ptr [ esi + hexvar ] mov dword ptr [ esp + hexvar ] , eax test ecx , ecx je hexvar lea eax , [ esi + hexvar ] mov ebx , dword ptr [ esi + hexvar ] mov dword ptr [ esi + num ] , eax mov eax , dword ptr [ esi + hexvar ] lea edx , [ ebx + num ] mov dword ptr [ esi + hexvar ] , edx mov edx , dword ptr [ eax + num ] mov dword ptr [ esi + hexvar ] , eax cmp edx , hexvar ja hexvar lea ecx , [ edx + num ] mov dword ptr [ eax + num ] , ecx mov byte ptr [ eax + edx + num ] , hexvar xor ebp , ebp mov edx , ebx mov eax , esi mov ecx , ebp call hexvar test eax , eax jne hexvar xor eax , eax add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , num jne hexvar jmp hexvar mov rdi , qword ptr [ hexvar ] mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , hexvar mov rdx , rax mov al , num call hexvar cmp qword ptr [ rbp - hexvar ] , num mov qword ptr [ rbp - hexvar ] , rax je hexvar mov rdi , qword ptr [ hexvar ] mov rdx , qword ptr [ rbp - hexvar ] movabs rsi , hexvar mov al , num call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ hexvar ] movabs rsi , hexvar mov al , num call hexvar mov rdi , qword ptr [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi xor edx , edx mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rsi , rsp add rsi , - hexvar mov rsp , rsi mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdi mov r8 , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , r8 mov rdi , qword ptr [ rax ] mov rax , qword ptr [ rcx ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , rax movabs rcx , hexvar movabs r8 , hexvar mov r9 , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsp , rbp pop rbp ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , ecx mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r13 , rcx mov r12 , rdx mov r15 , rsi mov r14 , rdi test rcx , rcx je hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax mov rsi , r15 mov rdx , r12 mov rcx , r13 call hexvar test eax , eax je hexvar mov rdi , r14 mov rsi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar jmp hexvar lea rsi , [ rsp + hexvar ] mov rdi , r12 call hexvar test eax , eax jle hexvar mov edi , dword ptr [ rsp + hexvar ] call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov r13 , rax call hexvar test rax , rax jne hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx mov rax , rbx add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] movzx ecx , byte ptr [ hexvar ] and ecx , num mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov eax , esp mov dword ptr [ eax ] , hexvar call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov byte ptr [ hexvar ] , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , hexvar ( sp ) bnez v0 , hexvar nop addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui v0 , hexvar addiu a3 , v0 , hexvar addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) move v0 , zero b hexvar nop lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) beqz v0 , hexvar nop lw v0 , hexvar ( sp ) andi v1 , v0 , hexvar lw v0 , hexvar ( sp ) sh v1 , ( v0 )
addiu v0 , zero , num beq a0 , v0 , hexvar lui v0 , hexvar sltiu v0 , a0 , num beqz v0 , hexvar addiu v0 , zero , num beq a0 , v0 , hexvar lui v0 , hexvar sltiu v0 , a0 , num beqz v0 , hexvar nop beqz a0 , hexvar lui v0 , hexvar addiu v0 , zero , num bne a0 , v0 , hexvar nop lui v0 , hexvar addiu v0 , v0 , - hexvar jr ra nop addiu v0 , zero , num beq a0 , v0 , hexvar lui v0 , hexvar addiu v0 , zero , num bne a0 , v0 , hexvar nop lui v0 , hexvar jr ra addiu v0 , v0 , - hexvar lui v0 , hexvar ori v0 , v0 , hexvar beq a0 , v0 , hexvar lui v0 , hexvar lui v0 , hexvar ori v0 , v0 , hexvar sltu v0 , a0 , v0 beqz v0 , hexvar lui v0 , hexvar addiu v0 , zero , num beq a0 , v0 , hexvar lui v0 , hexvar addiu v0 , zero , num bne a0 , v0 , hexvar nop lui v0 , hexvar jr ra addiu v0 , v0 , - hexvar ori v0 , v0 , hexvar beq a0 , v0 , hexvar lui v0 , hexvar lui v0 , hexvar ori v0 , v0 , hexvar bne a0 , v0 , hexvar nop lui v0 , hexvar jr ra addiu v0 , v0 , - hexvar jr ra addiu v0 , v0 , - hexvar jr ra addiu v0 , v0 , - hexvar jr ra addiu v0 , v0 , - hexvar jr ra addiu v0 , v0 , - hexvar jr ra addiu v0 , v0 , - hexvar jr ra addiu v0 , v0 , - hexvar jr ra move v0 , zero jr ra addiu v0 , v0 , hexvar
push r15 push r14 push rbx mov r14 , rdi call hexvar mov r15 , rax call hexvar mov rbx , rax mov rdi , r14 call hexvar mov rdi , rax mov rsi , r15 xor edx , edx call hexvar nop dword ptr [ rax ] mov rdi , rbx mov rsi , r15 call hexvar test eax , eax je hexvar cmp dword ptr [ rbx + num ] , num je hexvar mov rdi , r14 mov rsi , rbx call hexvar mov rdi , rbx call hexvar mov rdi , r15 call hexvar mov rdi , r14 pop rbx pop r14 pop r15 jmp hexvar mov edx , hexvar mov edi , hexvar mov esi , hexvar mov ecx , hexvar call hexvar mov rdi , rbx call hexvar mov rdi , r15 call hexvar xor eax , eax pop rbx pop r14 pop r15 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , eax mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi call hexvar sub esp , num mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret num
push esi push ebx call hexvar add ebx , hexvar sub esp , num lea esi , [ ebx + hexvar ] cmp byte ptr [ esi + hexvar ] , num jne hexvar lea eax , [ ebx + hexvar ] sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ eax + hexvar ] push num call hexvar push eax lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push num call hexvar mov eax , dword ptr [ esi + hexvar ] add esp , hexvar test eax , eax jle hexvar mov byte ptr [ esi + hexvar ] , num add esp , num pop ebx pop esi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , esp add eax , - hexvar mov esp , eax mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - num ] , num sub esp , hexvar lea eax , [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar mov eax , dword ptr [ hexvar ] sub esp , hexvar mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , num lea eax , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] cmp eax , - num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub esp , hexvar mov dword ptr [ esp ] , eax call hexvar add esp , hexvar and al , num movzx ecx , al mov al , byte ptr [ ebp - num ] and al , num movzx edx , al and edx , ecx cmp edx , num setne al mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - num ] , al jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax sub esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar mov cl , byte ptr [ ebp - num ] mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al mov esp , ebp pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar call hexvar xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar cmp dword ptr [ hexvar ] , num jne hexvar xor eax , eax mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov dx , word ptr [ hexvar ] mov word ptr [ ebp - hexvar ] , dx mov dword ptr [ esp ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx lea esi , [ ebp - hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar cmp eax , num jge hexvar call hexvar xor ecx , ecx lea edx , [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar jmp hexvar add esp , hexvar pop esi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s2 , hexvar ( sp ) lw s2 , - hexvar ( gp ) sw s4 , hexvar ( sp ) move s4 , a0 sw s3 , hexvar ( sp ) sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , ( s2 ) lw s3 , hexvar ( sp ) sw v0 , hexvar ( sp ) beqz a3 , hexvar nop move s1 , a3 lui a0 , hexvar lw t9 , - hexvar ( gp ) move a1 , s1 addiu a0 , a0 , hexvar bal hexvar move s5 , zero lw s0 , hexvar ( s4 )
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esi + hexvar ] mov edi , dword ptr [ ecx + hexvar ] cmp edx , num sete al cmp edx , num sete dl or eax , edx cmp edi , num je hexvar cmp edi , num je hexvar mov edx , dword ptr [ ecx + hexvar ] and edx , hexvar test al , al je hexvar cmp edx , hexvar je hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr sl , [ r0 , hexvar ] sub sp , sp , hexvar cmp sl , num mov r4 , r0 beq hexvar add r1 , r0 , hexvar add r0 , r0 , num ldr r5 , [ r4 , hexvar ] mov r8 , sl add r4 , r4 , hexvar ldm r4 , { r3 , r4 } stm sp , { r3 , r4 } bl hexvar ldr sb , [ pc , hexvar ] ldr r7 , [ pc , hexvar ] ldr r6 , [ pc , hexvar ] cmp r8 , hexvar ldr r2 , [ sp ] ldr r1 , [ pc , hexvar ] mov r0 , num movlo r4 , r8 movhs r4 , hexvar mov sl , num bl hexvar b hexvar ldrb r2 , [ r5 , sl ] mov r1 , r6 mov r0 , num bl hexvar and r3 , sl , num cmp r3 , num add sl , sl , num beq hexvar cmp sl , hexvar beq hexvar cmp r4 , sl bgt hexvar mov r1 , r7 mov r0 , num bl hexvar and r3 , sl , num cmp r3 , num add sl , sl , num bne hexvar mov r0 , hexvar bl hexvar cmp sl , hexvar bne hexvar mov fp , num sub sl , r5 , num ldrb r0 , [ sl , num ] ! add fp , fp , num sub r3 , r0 , hexvar cmp r3 , hexvar movhi r0 , hexvar bl hexvar cmp r4 , fp bgt hexvar ldm sp , { r2 , r3 } adds r2 , r2 , r4 adc r3 , r3 , r4 , asr num ldr r1 , [ sb ] mov r0 , hexvar stm sp , { r2 , r3 } bl hexvar subs r8 , r8 , r4 add r5 , r5 , r4 bne hexvar ldr r1 , [ sb ] mov r0 , hexvar bl hexvar mov r0 , num add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } muleq r0 , ip , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rcx cmp qword ptr [ rax ] , num setne dl mov qword ptr [ rbp - hexvar ] , rax mov byte ptr [ rbp - hexvar ] , dl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] cmp dword ptr [ rcx + hexvar ] , num sete dl mov byte ptr [ rbp - hexvar ] , dl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov rcx , qword ptr [ rcx + hexvar ] mov rdi , rcx call hexvar mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov rcx , qword ptr [ rcx + hexvar ] mov rdx , qword ptr [ rax ] mov rsi , qword ptr [ rdx + hexvar ] mov rdi , rcx call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov qword ptr [ rcx + hexvar ] , num mov rcx , qword ptr [ rax ] mov qword ptr [ rcx + hexvar ] , num mov rcx , qword ptr [ rax ] mov qword ptr [ rcx + hexvar ] , num mov rcx , qword ptr [ rax ] mov dword ptr [ rcx + hexvar ] , num mov rsp , rbp pop rbp ret
push r12 push rbp push rbx mov rbx , rdi call hexvar test eax , eax jne hexvar mov ebp , eax mov rax , qword ptr [ rbx + hexvar ] mov r12d , dword ptr [ rax + num ] mov rsi , qword ptr [ rax + hexvar ] test rsi , rsi je hexvar mov rdi , qword ptr [ rbx + hexvar ] call qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rax + hexvar ] test rsi , rsi je hexvar mov rdi , qword ptr [ rbx + hexvar ] call qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rax + hexvar ] test rsi , rsi je hexvar mov rdi , qword ptr [ rbx + hexvar ] call qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rax + hexvar ] test rsi , rsi je hexvar mov rdi , qword ptr [ rbx + hexvar ] call qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rbx + hexvar ] call qword ptr [ rbx + hexvar ] mov qword ptr [ rbx + hexvar ] , num cmp r12d , hexvar mov eax , hexvar cmove ebp , eax mov eax , ebp pop rbx pop rbp pop r12 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 lw a0 , hexvar ( a0 ) beqz a0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw a0 , num ( s0 ) beqz a0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx ] mov esi , dword ptr [ ebp + hexvar ] xor edx , dword ptr [ esi ] mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + num ] mov edi , dword ptr [ ebp + hexvar ] xor esi , dword ptr [ edi + num ] or edx , esi mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + num ] mov edi , dword ptr [ ebp + hexvar ] xor esi , dword ptr [ edi + num ] or edx , esi mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + hexvar ] mov edi , dword ptr [ ebp + hexvar ] xor esi , dword ptr [ edi + hexvar ] or edx , esi mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + hexvar ] mov edi , dword ptr [ ebp + hexvar ] xor esi , dword ptr [ edi + hexvar ] or edx , esi mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + hexvar ] mov edi , dword ptr [ ebp + hexvar ] xor esi , dword ptr [ edi + hexvar ] or edx , esi mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ edi + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx ecx , al mov edx , dword ptr [ ebp - hexvar ] or edx , ecx cmp edx , num setne al xor al , hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
push ebx sub esp , num call hexvar add ebx , hexvar call hexvar call hexvar nop add esp , num pop ebx ret
push rbp push rbx sub rsp , hexvar mov ebx , edi mov rbp , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rdi , rsp call hexvar mov rcx , rsp mov rdx , - num mov rsi , rbp mov edi , ebx call hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret
push ebp mov ebp , esp push esi push ebx call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov eax , dword ptr [ eax + hexvar ] sub esp , hexvar push dword ptr [ ebp + num ] call eax add esp , hexvar test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov esi , dword ptr [ eax + hexvar ] sub esp , num push num push hexvar push dword ptr [ ebp + num ] call hexvar add esp , hexvar mov dword ptr [ esi + hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax setne al movzx eax , al lea esp , [ ebp - num ] pop ebx pop esi pop ebp ret
sub rsp , num test edi , edi js hexvar test edi , edi jle hexvar cmp edi , num jne hexvar mov esi , num lea rdi , [ rip + hexvar ] mov eax , num call hexvar mov dword ptr [ rip + hexvar ] , num mov eax , dword ptr [ rip + hexvar ] add rsp , num ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) lui s0 , hexvar sw s4 , hexvar ( sp ) move s4 , a3 sw s3 , hexvar ( sp ) addiu a3 , zero , hexvar sw s2 , hexvar ( sp ) move s3 , a0 sw s1 , hexvar ( sp ) move s2 , a2 sw ra , hexvar ( sp ) move s1 , a1 sw gp , hexvar ( sp ) addiu a2 , s0 , - hexvar lw t9 , - hexvar ( gp ) addiu a1 , zero , hexvar jalr t9 addiu a0 , zero , num move a3 , s4 lw gp , hexvar ( sp ) move a2 , s2 lw a0 , hexvar ( s3 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi call hexvar movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rcx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rcx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r3 , [ pc , hexvar ] mov r8 , r1 ldr r1 , [ r1 , hexvar ] ldr r2 , [ r0 , num ] ldr r3 , [ r3 ] sub sp , sp , hexvar cmp r1 , r0 mov sb , r0 ldr fp , [ r2 , hexvar ] str r3 , [ sp , hexvar ] beq hexvar ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar ldr r0 , [ r8 , hexvar ] ldr r3 , [ r0 , hexvar ] cmp r3 , num movne r0 , num beq hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , rsp add rdx , - hexvar mov rsp , rdx mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rsi mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov r8 , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , r8 mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , rdx call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax cmp qword ptr [ rcx ] , num sete r9b mov byte ptr [ rbp - hexvar ] , r9b mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar movsxd rdx , eax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rcx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi ] , rax mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar movsxd rdx , eax mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdx ] call hexvar mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsp , rbp pop rbp ret
push { r4 , r5 , r6 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , num mov r5 , r0 ldr r0 , [ r4 ] ldr r1 , [ r4 , num ] bl hexvar ldr r3 , [ r4 , num ] ldr r6 , [ r4 ] cmp r3 , num ldr r0 , [ r4 , num ] beq hexvar bl hexvar ldr r3 , [ r4 , num ] add r0 , r6 , r0 str r5 , [ sp ] mvn r2 , num mov r1 , num bl hexvar ldr r0 , [ r4 ] add sp , sp , num pop { r4 , r5 , r6 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx mov rax , qword ptr [ rbp - num ] mov edx , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] cmp edx , eax jb hexvar mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] lea edx , [ rax + hexvar ] mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] mov eax , eax shl rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] mov eax , eax shl rax , num add rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] mov eax , eax shl rax , num add rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx + num ] , eax mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] lea edx , [ rax + num ] mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , edx mov eax , num leave ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] ldr r0 , [ sp , num ] bl hexvar str r0 , [ sp , num ] ldr r3 , [ sp , num ] ldr r3 , [ r3 ] cmp r3 , num bne hexvar mov r3 , hexvar ldr r2 , [ pc , hexvar ] mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] mov r0 , hexvar bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , num ] add r3 , r3 , num mov r2 , hexvar mov r1 , r3 ldr r0 , [ sp , hexvar ] bl hexvar ldr r2 , [ sp , hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ sp ] bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push edi push esi xor eax , eax push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edx , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] test edx , edx je hexvar mov ecx , dword ptr [ edi ] mov esi , dword ptr [ edx + ecx * num ] test esi , esi je hexvar sub esp , num add ecx , num mov dword ptr [ edi ] , ecx push dword ptr [ ebx + hexvar ] push dword ptr [ esp + hexvar ] call hexvar mov byte ptr [ eax + hexvar ] , num mov byte ptr [ eax + hexvar ] , num mov edi , eax mov dword ptr [ eax + hexvar ] , esi pop eax lea eax , [ ebx - hexvar ] pop edx push eax push esi call hexvar fld dword ptr [ ebx - hexvar ] add esp , hexvar test eax , eax fstp dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] cmovne eax , dword ptr [ ebx - hexvar ] mov dword ptr [ edi + hexvar ] , eax mov eax , num add esp , hexvar pop ebx pop esi pop edi ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw a1 , hexvar ( sp ) addiu a3 , sp , hexvar addiu a2 , sp , hexvar addiu a1 , sp , hexvar move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) bnez v0 , hexvar lw a3 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v1 , - hexvar ( gp ) lw v1 , ( v1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu a2 , sp , hexvar addiu a1 , sp , hexvar move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) jal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar sw v0 , hexvar ( sp ) lw a2 , hexvar ( sp ) addiu a1 , sp , hexvar addiu a0 , sp , hexvar lw t9 , - hexvar ( gp )
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov rax , rsp add rax , - hexvar mov rsp , rax mov ecx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax ] , ecx mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax ] mov edx , ecx mov rsi , rdx sub rsi , hexvar mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rsi ja hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax * num + hexvar ] jmp rcx movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsp , rbp pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s5 , hexvar ( sp ) addiu s5 , zero , hexvar sw s4 , hexvar ( sp ) move s4 , a0 sw s3 , hexvar ( sp ) move s3 , a1 sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) move s1 , zero sw s0 , hexvar ( sp ) lui s0 , hexvar sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu s0 , s0 , - hexvar addiu v1 , zero , num lw gp , hexvar ( sp ) b hexvar move s2 , v0 addiu s1 , s1 , num lw t9 , - hexvar ( gp ) beq s1 , s5 , hexvar addiu s0 , s0 , hexvar jalr t9 lw a0 , ( s0 ) lw gp , hexvar ( sp ) move v1 , v0 bne s2 , v1 , hexvar move a2 , s2 lw v0 , num ( s0 ) lw t9 , - hexvar ( gp ) xor v0 , s3 , v0 andi v0 , v0 , num bnez v0 , hexvar move a1 , s4 jalr t9 lw a0 , ( s0 ) bnez v0 , hexvar lw gp , hexvar ( sp ) sll v0 , s1 , num lw ra , hexvar ( sp ) lui v1 , hexvar lw s5 , hexvar ( sp ) addu v0 , v0 , s1 lw s4 , hexvar ( sp ) addiu v1 , v1 , - hexvar lw s3 , hexvar ( sp ) sll v0 , v0 , num lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) addu v0 , v0 , v1 lw s0 , hexvar ( sp ) addiu sp , sp , hexvar jr ra lw v0 , ( v0 ) lw ra , hexvar ( sp ) move v0 , zero lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , edi mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ebx mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ edx ] mov edx , dword ptr [ edx + hexvar ] sub esp , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar add esp , hexvar xor al , hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] cmp dword ptr [ esp + hexvar ] , hexvar jbe hexvar mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] sub eax , hexvar mov edx , eax shr edx , hexvar mov dword ptr [ esp + hexvar ] , edx and eax , hexvar lea eax , [ esi + eax + hexvar ] mov dword ptr [ esp + num ] , eax mov edi , dword ptr [ esp + hexvar ] lea eax , [ ebp + hexvar ] mov dword ptr [ esp + num ] , eax sub esp , num push dword ptr [ ebp + num ] push dword ptr [ esp + hexvar ] push dword ptr [ ebp + hexvar ] push hexvar push esi push edi call hexvar add edi , hexvar add esi , hexvar add esp , hexvar cmp esi , dword ptr [ esp + num ] jne hexvar and dword ptr [ esp + hexvar ] , hexvar mov eax , dword ptr [ esp + hexvar ] add eax , num shl eax , hexvar add dword ptr [ esp + hexvar ] , eax add dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { r4 , r5 , r6 , lr } ldr r5 , [ pc , hexvar ] sub sp , sp , num ldr r3 , [ r5 ] subs r6 , r0 , num mov r4 , r1 str r3 , [ sp , num ] beq hexvar ldrb r3 , [ r6 ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] mov r1 , sp ldr r0 , [ r3 ] bl hexvar cmp r0 , num str r0 , [ r4 ] beq hexvar ldr r2 , [ sp , num ] ldr r1 , [ sp ] ldr r3 , [ r5 ] add r0 , r0 , r1 cmp r2 , r3 str r0 , [ r4 , num ] bne hexvar add sp , sp , num pop { r4 , r5 , r6 , pc }
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , edi mov edi , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] cmp eax , ecx mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar mov dword ptr [ hexvar ] , eax mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar movsd xmm0 , qword ptr [ ebp + num ] mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] shl ecx , num movsd qword ptr [ eax + ecx ] , xmm0 movsd xmm0 , qword ptr [ ebp + hexvar ] mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] shl ecx , num movsd qword ptr [ eax + ecx + num ] , xmm0 mov eax , dword ptr [ hexvar ] add eax , num mov dword ptr [ hexvar ] , eax add esp , hexvar pop esi pop edi pop ebp ret
beqz a0 , hexvar lui gp , hexvar addiu sp , sp , - hexvar sw s2 , hexvar ( sp ) move s2 , a0 sw s1 , hexvar ( sp ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw a0 , hexvar ( a0 )
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax + ecx * num ] , num je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ esp + hexvar ] , ebx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , num mov dword ptr [ ebp - num ] , num mov byte ptr [ ebp - num ] , num mov byte ptr [ ebp - num ] , num mov byte ptr [ ebp - num ] , num mov byte ptr [ ebp - num ] , num cmp dword ptr [ ebp - num ] , num sete al and al , num movzx eax , al add esp , num pop ebp ret
push { r4 , lr } cmp r0 , num ldrls pc , [ pc , r0 , lsl num ] b hexvar andeq r6 , r1 , r8 , lsr num andeq r6 , r1 , r4 , lsr r0 andeq r6 , r1 , r0 , asr num andeq r6 , r1 , ip , asr num andeq r6 , r1 , r8 , asr r0 andeq r6 , r1 , r4 , rrx andeq r6 , r1 , r0 , ror r0 andeq r6 , r1 , ip , ror r0 andeq r6 , r1 , r8 mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar pop { r4 , lr } mov r1 , r0 mov r0 , num b hexvar mov r2 , num ldr r1 , [ pc , hexvar ] b hexvar mov r2 , num ldr r1 , [ pc , hexvar ] b hexvar mov r2 , num ldr r1 , [ pc , hexvar ] b hexvar mov r2 , num ldr r1 , [ pc , hexvar ] b hexvar mov r2 , num ldr r1 , [ pc , hexvar ] b hexvar mov r2 , num ldr r1 , [ pc , hexvar ] b hexvar mov r2 , num ldr r1 , [ pc , hexvar ] b hexvar mov r2 , num ldr r1 , [ pc , hexvar ] b hexvar mov r2 , r0 pop { r4 , lr } ldr r1 , [ pc , hexvar ] mov r0 , num b hexvar andeq r3 , sl , r8 , asr num andeq r3 , sl , ip , lsr sl andeq r3 , sl , r0 , asr sl andeq r3 , sl , r0 , ror sl muleq sl , r0 , sl muleq sl , ip , sl ldrdeq r3 , r4 , [ sl ] , -r0 strdeq r3 , r4 , [ sl ] , -r4 andeq r3 , sl , ip , lsl fp andeq r3 , sl , r0 , ror num
push ebp mov ebp , esp sub esp , num mov al , byte ptr [ ebp + num ] mov byte ptr [ ebp - num ] , al call hexvar mov eax , dword ptr [ eax ] movzx ecx , byte ptr [ ebp + num ] movzx eax , word ptr [ eax + ecx * num ] and eax , num cmp eax , num mov dl , num mov byte ptr [ ebp - num ] , dl jne hexvar movzx eax , byte ptr [ ebp + num ] cmp eax , hexvar sete cl mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] mov byte ptr [ ebp - num ] , al jmp hexvar mov al , byte ptr [ ebp - num ] mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] cmp eax , num sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar movsd xmm0 , qword ptr [ ebp + num ] movsd qword ptr [ ebp - hexvar ] , xmm0 mov eax , dword ptr [ hexvar ] lea ecx , [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax xor eax , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , hexvar add esp , num pop ebp ret
str fp , [ sp , - num ] ! add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] mov r3 , num str r3 , [ fp , - num ] b hexvar ldr r1 , [ pc , hexvar ] ldr r2 , [ fp , - num ] mov r3 , r2 lsl r3 , r3 , num add r3 , r3 , r2 lsl r3 , r3 , num add r3 , r1 , r3 add r3 , r3 , num ldr r3 , [ r3 ] ldr r2 , [ fp , - hexvar ] cmp r2 , r3 bne hexvar ldr r1 , [ pc , hexvar ] ldr r2 , [ fp , - num ] mov r3 , r2 lsl r3 , r3 , num add r3 , r3 , r2 lsl r3 , r3 , num add r3 , r1 , r3 add r3 , r3 , num ldr r3 , [ r3 ] b hexvar ldr r3 , [ fp , - num ] add r3 , r3 , num str r3 , [ fp , - num ] ldr r1 , [ pc , hexvar ] ldr r2 , [ fp , - num ] mov r3 , r2 lsl r3 , r3 , num add r3 , r3 , r2 lsl r3 , r3 , num add r3 , r1 , r3 ldr r3 , [ r3 ] cmp r3 , num bne hexvar mov r3 , num mov r0 , r3 add sp , fp , num pop { fp } bx lr muleq r1 , r0 , pc
test byte ptr [ rdi + hexvar ] , num je hexvar cmp qword ptr [ rdi + hexvar ] , - num je hexvar mov rax , qword ptr [ rsi ] add rax , num mov qword ptr [ rsi ] , rax mov qword ptr [ rdi + hexvar ] , rax mov eax , num ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , edx mov eax , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar mov esp , ebp pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ hexvar ] cmp eax , num setne dl mov byte ptr [ ebp - num ] , dl mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ hexvar ] add eax , num mov dword ptr [ hexvar ] , eax jmp hexvar mov esp , ebp pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax test rdi , rdi je hexvar mov rbx , rsi test rsi , rsi je hexvar mov r14 , rdi mov r13 , qword ptr [ rdi + hexvar ] mov ebp , hexvar cmp r13 , hexvar ja hexvar mov r12 , rdx xor ebp , ebp test rdx , rdx je hexvar mov r15d , hexvar sub r15 , r13 cmp r15 , r12 jae hexvar mov qword ptr [ r14 + hexvar ] , num lea rbp , [ r14 + hexvar ] mov eax , r13d and eax , hexvar lea rdi , [ r14 + rax ] add rdi , hexvar mov rsi , rbx mov rdx , r15 call hexvar add qword ptr [ r14 + hexvar ] , hexvar jae hexvar add qword ptr [ r14 + hexvar ] , num mov rdi , r14 mov rsi , rbp call hexvar add rbx , r15 mov rax , r12 sub r12 , r15 cmp r12 , hexvar jb hexvar lea rbp , [ rax + r13 ] lea r15 , [ rax + r13 ] add r15 , - hexvar and r15 , hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] add qword ptr [ r14 + hexvar ] , hexvar jae hexvar add qword ptr [ r14 + hexvar ] , num mov rdi , r14 mov rsi , rbx call hexvar sub rbx , - hexvar add r12 , - hexvar cmp r12 , hexvar ja hexvar add rbp , - hexvar sub rbp , r15 mov r12 , rbp xor ebp , ebp mov rax , qword ptr [ r14 + hexvar ] lea rdi , [ r14 + rax ] add rdi , hexvar mov rsi , rbx mov rdx , r12 call hexvar add qword ptr [ r14 + hexvar ] , r12 mov eax , ebp add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rax , hexvar mov rdi , rax mov rsi , rax movabs rdx , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] movabs rdx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rdi , qword ptr [ rbp - num ] call hexvar mov edx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rdx add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] and al , num mov byte ptr [ ebp - num ] , al mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + hexvar ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp + hexvar ] jne hexvar cmp dword ptr [ ebp - hexvar ] , - hexvar je hexvar call hexvar jmp hexvar test byte ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp + num ] add eax , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar xor ecx , ecx mov dword ptr [ ebp - hexvar ] , eax cmp ecx , dword ptr [ ebp - hexvar ] jg hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] and eax , num cmp eax , num jne hexvar xor eax , eax cmp eax , dword ptr [ ebp - hexvar ] jg hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , eax add esp , hexvar pop esi pop ebp ret
push r14 push rbx push rax mov r14 , rsi mov rbx , rdi call hexvar test rax , rax je hexvar lea rdi , [ rbx + hexvar ] xor esi , esi call hexvar mov rdi , r14 call hexvar mov dword ptr [ rbx + hexvar ] , eax mov dword ptr [ rbx + hexvar ] , num mov eax , num add rsp , num pop rbx pop r14 ret
push ebp mov ebp , esp push ebx sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ecx + hexvar ] mov ecx , dword ptr [ ecx + hexvar ] or edx , ecx setne bl and bl , num movzx ecx , bl mov dword ptr [ ebp - num ] , eax mov eax , ecx mov dword ptr [ ebp - hexvar ] , edx add esp , num pop ebx pop ebp ret
push ebp push edi mov ebp , eax push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax test ebp , ebp mov dword ptr [ esp + num ] , hexvar je hexvar sub esp , hexvar push num call hexvar add esp , hexvar test eax , eax mov esi , eax je hexvar sub esp , num lea eax , [ esp + hexvar ] push eax push ebp push esi call hexvar add esp , hexvar test eax , eax jle hexvar lea edi , [ ebx + hexvar ] lea eax , [ ebx - hexvar ] sub esp , num push ebp push eax push dword ptr [ edi ] call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push eax push num push esi call hexvar add esp , hexvar test eax , eax je hexvar lea edx , [ ebx - hexvar ] sub esp , num push edx push eax call hexvar add esp , hexvar test eax , eax mov ebp , eax je hexvar sub esp , hexvar push eax call hexvar mov dword ptr [ esp ] , ebp call hexvar add esp , hexvar sub esp , num push esi push dword ptr [ edi ] call hexvar add esp , hexvar test eax , eax jne hexvar sub esp , hexvar push dword ptr [ edi ] call hexvar add esp , hexvar jmp hexvar nop lea esi , [ esi ] mov eax , dword ptr [ esp + num ] lea edi , [ ebx + hexvar ] test eax , eax mov edx , dword ptr [ edi ] jle hexvar push ebp push eax lea eax , [ ebx - hexvar ] push eax push edx call hexvar add esp , hexvar test esi , esi jne hexvar xor esi , esi mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] mov eax , esi jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov al , byte ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] cmp ecx , dword ptr [ hexvar ] mov byte ptr [ ebp - num ] , al jb hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ hexvar ] , eax mov al , byte ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ hexvar ] mov esi , edx add esi , hexvar add esi , num sub esi , hexvar mov dword ptr [ hexvar ] , esi mov byte ptr [ ecx + edx ] , al add esp , hexvar pop esi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) sw s1 , hexvar ( sp ) lui s1 , hexvar sw a3 , hexvar ( sp ) lw s0 , - hexvar ( gp ) lw v0 , hexvar ( s1 ) sw s3 , hexvar ( sp ) move s3 , a1 sw s2 , hexvar ( sp ) move s2 , a0 sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw v1 , ( s0 ) sw v1 , hexvar ( sp ) blez v0 , hexvar lw v0 , - hexvar ( gp ) lw a0 , ( v0 ) lw v1 , hexvar ( a0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lui v0 , hexvar lbu v0 , - hexvar ( v0 ) bnez v0 , hexvar lui s7 , hexvar lui s7 , hexvar addiu s7 , s7 , - hexvar addiu a1 , zero , num lw v0 , - hexvar ( gp ) lw a0 , ( v0 ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) addiu v0 , v0 , num srl v1 , v0 , hexvar sltu v1 , zero , v1 ext a1 , v0 , hexvar , num addiu a0 , zero , num movz a0 , v1 , a1 bnez a0 , hexvar sw a0 , hexvar ( sp ) sll s2 , v0 , num sw s2 , hexvar ( sp ) move a0 , s2 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) move s3 , v0 sw v0 , hexvar ( sp ) lw s1 , hexvar ( sp ) addiu v0 , s1 , - num sw v0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) lw v0 , ( s0 ) sw v0 , ( s3 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov dword ptr [ rbp - hexvar ] , r8d lea rax , [ rip + hexvar ] mov qword ptr [ rbp - num ] , rax mov r8 , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] sub rsp , num mov edi , dword ptr [ rbp - hexvar ] push rdi mov r9 , r8 mov r8d , hexvar mov rdi , rax call hexvar add rsp , hexvar leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) move s3 , a1 sw a2 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw fp , ( a1 )
lui a2 , hexvar lb v0 , ( a0 ) lui v1 , hexvar addiu a2 , a2 , - hexvar addiu t2 , zero , hexvar andi t1 , a1 , hexvar and t0 , a1 , v1 andi a1 , a1 , num andi v0 , v0 , hexvar sltiu v1 , v0 , hexvar beqz v1 , hexvar addiu a3 , a0 , num sll v0 , v0 , num addu v0 , a2 , v0 lw v0 , ( v0 ) jr v0 nop jr ra move v0 , zero beqz t0 , hexvar nop jr ra addiu v0 , zero , num lb v0 , num ( a0 ) b hexvar move a0 , a3 bnez t0 , hexvar nop bnez a1 , hexvar addiu v0 , a0 , num lb v1 , num ( a0 ) movn a3 , v0 , v1 move a0 , a3 b hexvar lb v0 , ( a3 ) beqz t1 , hexvar nop lb v0 , num ( a0 ) beq v0 , t2 , hexvar move a0 , a3 b hexvar andi v0 , v0 , hexvar
lea rcx , [ rsi + hexvar ] mov byte ptr [ rsi + hexvar ] , num movabs rsi , hexvar nop word ptr [ rax + rax ] mov rax , rdi sub rcx , num mul rsi shr rdx , num lea rax , [ rdx + rdx * num ] add rax , rax sub rdi , rax add edi , hexvar test rdx , rdx mov byte ptr [ rcx ] , dil mov rdi , rdx jne hexvar mov rax , rcx ret
push edi push esi push ebx mov edi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar test edi , edi je hexvar sub esp , hexvar push hexvar call hexvar add esp , hexvar test eax , eax mov esi , eax je hexvar sub esp , hexvar push edi call hexvar add esp , hexvar push eax push edi push esi call hexvar add esp , hexvar test eax , eax je hexvar mov eax , esi pop ebx pop esi pop edi ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 move s2 , a3 addiu v0 , zero , hexvar beq a1 , v0 , hexvar lw a0 , hexvar ( a0 )
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jne hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp + num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] add esp , num pop ebp ret
push rbp push rbx mov rbp , rsi lea rsi , [ rip + hexvar ] mov rbx , rdi sub rsp , num call hexvar test rax , rax je hexvar xor edx , edx mov esi , hexvar mov rdi , rbp call hexvar test eax , eax jne hexvar xor eax , eax add rsp , num pop rbx pop rbp ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ eax ] cmp dword ptr [ edx + hexvar ] , num sete bl mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num mov cl , num mov byte ptr [ ebp - hexvar ] , cl jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] cmp dword ptr [ ecx + hexvar ] , num sete dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al lea esp , [ ebp - num ] pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v1 , ( v0 )
push { r4 , r5 , r6 , r7 , r8 , sb , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r4 ] mov r6 , r0 mov r8 , r2 mov r0 , num add r2 , sp , num str r3 , [ sp , hexvar ] mov r5 , r1 bl hexvar cmp r0 , num bne hexvar ldr r3 , [ pc , hexvar ] ldr r1 , [ sp , hexvar ] ldr r2 , [ pc , hexvar ] and r3 , r3 , r1 cmp r3 , r2 bne hexvar ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar mov r1 , r5 mov r0 , r6 bl hexvar subs r7 , r0 , num bne hexvar cmp r8 , num bne hexvar mov r0 , r6 bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] mov r0 , r7 cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc }
push r12 push rbp push rbx mov eax , dword ptr [ rdi + num ] mov ebx , edx cmp eax , edx cmovbe ebx , eax test ebx , ebx jne hexvar mov eax , ebx pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rdi , num call hexvar mov dword ptr [ rbp - num ] , eax movabs rdi , num call hexvar mov dword ptr [ rbp - num ] , eax movabs rdi , num call hexvar movabs rdi , num mov dword ptr [ rbp - hexvar ] , eax call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov al , byte ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] cmp ecx , dword ptr [ hexvar ] mov byte ptr [ ebp - num ] , al jb hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ hexvar ] , eax mov al , byte ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ hexvar ] mov esi , edx add esi , num mov dword ptr [ hexvar ] , esi mov byte ptr [ ecx + edx ] , al add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) lui v0 , hexvar lbu v0 , hexvar ( v0 ) bnez v0 , hexvar nop lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) b hexvar nop move v0 , zero lw a1 , hexvar ( fp ) move a0 , v0 jal hexvar nop lw gp , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push r15 push r14 push r13 push r12 mov r13 , rsi push rbp push rbx mov r12 , rdi mov rbp , rdx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax test r8 , r8 je hexvar mov dword ptr [ r8 ] , num mov ebx , dword ptr [ rbp ] cmp ebx , hexvar ja hexvar lea rdi , [ rip + hexvar ] mov edx , ebx movsxd rax , dword ptr [ rdi + rdx * num ] add rax , rdi jmp rax nop dword ptr [ rax ] mov ecx , dword ptr [ rbp + hexvar ] mov rdx , qword ptr [ rbp + hexvar ] lea rsi , [ r13 + hexvar ] xor r8d , r8d mov rdi , r12 call hexvar mov rbx , rax mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov rax , rbx jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
sub rsp , num mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar mov byte ptr [ rax + hexvar ] , num mov byte ptr [ rax + hexvar ] , num mov dword ptr [ rax + hexvar ] , hexvar mov eax , num add rsp , num ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 addiu a2 , zero , hexvar lui a1 , hexvar addiu a1 , a1 , - hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 sw zero , ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rdi , qword ptr [ rbp - hexvar ] mov al , byte ptr [ rdi + hexvar ] mov byte ptr [ rbp - num ] , al mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov al , byte ptr [ rbp - num ] test al , num mov ecx , hexvar mov edx , hexvar cmovne edx , ecx mov dword ptr [ rbp - hexvar ] , edx jmp hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar xor eax , eax mov rcx , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rcx + hexvar ] and edx , num cmp eax , edx mov eax , hexvar mov edx , hexvar cmove edx , eax mov dword ptr [ rbp - hexvar ] , edx jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , dword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - num ] , eax mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , dword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - num ] , eax mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
test rsi , rsi je hexvar mov rax , rdi mov r8d , dword ptr [ rdx ] movsxd rcx , r8d lea r9 , [ rcx * num ] mov rdi , qword ptr [ rsi + rcx * num ] test rdi , rdi je hexvar cmp qword ptr [ rsi + r9 + num ] , num jne hexvar add r8d , num mov dword ptr [ rdx ] , r8d mov eax , num ret
test rdi , rdi je hexvar cmp rdi , num je hexvar mov eax , hexvar cmp rdi , num jne hexvar mov eax , hexvar jmp hexvar mov eax , hexvar jmp hexvar mov eax , hexvar mov rax , qword ptr [ rax + num ] ret
push rbx call hexvar test rax , rax mov rbx , rax je hexvar mov rax , rbx pop rbx ret
sub esp , num push hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , num mov eax , dword ptr [ esi + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp + hexvar ] , eax test eax , eax je hexvar lea eax , [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax jmp hexvar
push r15 push r14 push rbx xor eax , eax test rdx , rdx je hexvar mov rbx , qword ptr [ rdx ] test rbx , rbx je hexvar mov rcx , qword ptr [ rcx + hexvar ] test rcx , rcx je hexvar test byte ptr [ rcx + num ] , num je hexvar movsxd rcx , dword ptr [ rcx + hexvar ] add rbx , rcx je hexvar cmp dword ptr [ rbx + hexvar ] , num jne hexvar mov r15 , rsi mov r14 , rdi test rsi , rsi je hexvar mov rdi , qword ptr [ r15 ] mov rsi , qword ptr [ rbx ] mov rdx , qword ptr [ rbx + num ] call hexvar mov rax , qword ptr [ rbx + num ] add qword ptr [ r15 ] , rax mov eax , num test r14 , r14 je hexvar mov ecx , dword ptr [ rbx + num ] mov dword ptr [ r14 ] , ecx pop rbx pop r14 pop r15 ret
push edi push esi push ebx call hexvar add ebx , hexvar call hexvar sub esp , hexvar push eax call hexvar add esp , hexvar test eax , eax je hexvar mov esi , eax push dword ptr [ esp + hexvar ] push num push hexvar push eax call hexvar add esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push esi call hexvar mov edi , eax add esp , hexvar push esi call hexvar add esp , hexvar mov eax , edi pop ebx pop esi pop edi ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] cmp rdx , rax jbe hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] sub rdx , rax mov rax , rdx pop rbp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , hexvar mov cl , num mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , cl je hexvar cmp dword ptr [ ebp + num ] , num sete al mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , - hexvar sub ecx , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx ja hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] sub eax , hexvar add eax , hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] mov eax , num cmp dword ptr [ esi + hexvar ] , num je hexvar mov edx , dword ptr [ ebx + hexvar ] test edx , edx je hexvar mov ecx , dword ptr [ esi + hexvar ] test ecx , ecx je hexvar cmp edx , dword ptr [ ecx ] je hexvar mov eax , dword ptr [ ecx + num ] test eax , eax je hexvar cmp edx , dword ptr [ eax ] je hexvar mov ecx , eax jmp hexvar mov dword ptr [ ebx + hexvar ] , esi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a3 , hexvar ( sp ) lw a2 , hexvar ( sp ) lui v0 , hexvar addiu a1 , v0 , - hexvar lw a0 , - hexvar ( gp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
sub esp , hexvar call hexvar add eax , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax jne hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] mov eax , dword ptr [ eax + hexvar ] sub esp , hexvar push dword ptr [ esp + hexvar ] call eax add esp , hexvar add esp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar movsd xmm1 , qword ptr [ rip ] movsd qword ptr [ rbp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] movaps xmm2 , xmmword ptr [ rip ] pand xmm0 , xmm2 ucomisd xmm1 , xmm0 jbe hexvar movsd xmm0 , qword ptr [ rip ] call hexvar movsd qword ptr [ rbp - num ] , xmm0 jmp hexvar movsd xmm0 , qword ptr [ rbp - hexvar ] movaps xmm1 , xmmword ptr [ rip ] pand xmm0 , xmm1 call hexvar movsd qword ptr [ rbp - num ] , xmm0 movsd xmm0 , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] mov r0 , num bl hexvar mov r3 , r0 cmp r3 , num beq hexvar ldr r0 , [ sp , num ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] ldr r1 , [ sp , hexvar ] mov r0 , r3 bl hexvar b hexvar mov r0 , r0 add sp , sp , hexvar pop { pc }
mov ip , num push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr lr , [ sp , hexvar ] cmp r2 , num str ip , [ lr ] bne hexvar ldr r3 , [ r0 , num ] cmp r3 , num movgt r3 , num movle r3 , num mov r0 , r3 pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
test rdi , rdi mov r9d , hexvar mov ecx , hexvar cmove ecx , r9d mov esi , hexvar mov r8d , hexvar jmp hexvar mov esi , hexvar xor eax , eax nop word ptr cs : [ rax + rax ] mov edx , esi cmp esi , hexvar jle hexvar cmp edx , hexvar jg hexvar mov esi , ecx cmp edx , hexvar je hexvar mov esi , edx cmp edx , hexvar jne hexvar jmp hexvar nop dword ptr [ rax + rax ] cmp edx , hexvar jle hexvar cmp edx , hexvar je hexvar mov esi , edx cmp edx , hexvar jne hexvar mov rax , qword ptr [ rsp - hexvar ] mov esi , hexvar jmp hexvar nop word ptr cs : [ rax + rax ] cmp edx , hexvar je hexvar mov esi , edx cmp edx , hexvar jne hexvar mov rdx , qword ptr [ rdi + hexvar ] mov qword ptr [ rsp - hexvar ] , rdx cmp qword ptr [ rsp - hexvar ] , num mov esi , hexvar cmove esi , r8d jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] cmp edx , hexvar je hexvar mov esi , edx cmp edx , hexvar jne hexvar jmp hexvar mov rdx , qword ptr [ rsp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ] mov qword ptr [ rsp - num ] , rdx cmp qword ptr [ rsp - num ] , num mov esi , hexvar cmove esi , r9d jmp hexvar mov rax , qword ptr [ rsp - num ] mov esi , hexvar jmp hexvar mov rdx , qword ptr [ rdi + hexvar ] mov qword ptr [ rsp - hexvar ] , rdx cmp qword ptr [ rsp - hexvar ] , num mov esi , hexvar cmove esi , r9d jmp hexvar ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov qword ptr [ rsp + num ] , rsi mov r15 , rdi lea rbx , [ rsp + hexvar ] mov rdi , rbx call hexvar mov rdi , rbx call hexvar mov r12 , rax lea r13 , [ rsp + hexvar ] lea r14 , [ rsp + hexvar ] nop lea rdi , [ rsp + hexvar ] lea rsi , [ rsp + num ] lea rdx , [ rsp + hexvar ] mov rcx , rsp call hexvar test rax , rax je hexvar mov edx , hexvar mov rdi , rax mov rsi , r13 call hexvar mov r9 , qword ptr [ rsp + hexvar ] mov ebx , dword ptr [ rsp + num ] test byte ptr [ rsp ] , num mov ebp , hexvar je hexvar mov rbp , qword ptr [ rsp + hexvar ] mov esi , hexvar mov edx , hexvar mov rdi , r14 mov rcx , r12 mov r8 , r13 mov eax , num push rbp push rbx call hexvar add rsp , hexvar mov rdi , r14 call hexvar mov rdi , r14 mov rsi , rax mov rdx , qword ptr [ rsp + num ] call r15
push rbx mov rbx , rdi mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rdi , rbx pop rbx jmp rax mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar call rax mov qword ptr [ rbx ] , num mov qword ptr [ rbx + num ] , rax pop rbx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] cmp eax , dword ptr [ ebp + hexvar ] jne hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax + num ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx + num ] jae hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push rbp push r15 push r14 push rbx sub rsp , hexvar mov rbx , rsi mov r14 , rdi mov rdi , rsi mov esi , hexvar call hexvar test rax , rax je hexvar movabs rax , hexvar mov qword ptr [ rsp + hexvar ] , rax mov dword ptr [ rsp + hexvar ] , num xor ebp , ebp lea r8 , [ rsp + hexvar ] mov ecx , hexvar mov rdi , rbx mov esi , hexvar xor edx , edx call hexvar test eax , eax je hexvar movsxd rbx , dword ptr [ rsp + hexvar ] movsxd r15 , dword ptr [ rsp + hexvar ] cmp rbx , - num je hexvar cmp r15d , hexvar je hexvar mov eax , dword ptr [ rsp + hexvar ] cmp eax , num jg hexvar cmp eax , num je hexvar cmp eax , num jne hexvar test r15d , r15d jg hexvar jmp hexvar xor ebp , ebp lea rdx , [ rsp + hexvar ] lea rcx , [ rsp + hexvar ] lea r8 , [ rsp + hexvar ] lea r9 , [ rsp + hexvar ] mov esi , hexvar mov rdi , rbx xor eax , eax call hexvar cmp eax , num jne hexvar mov edx , dword ptr [ rsp + hexvar ] mov eax , dword ptr [ rsp + hexvar ] mov edi , eax or edi , edx mov ebx , dword ptr [ rsp + hexvar ] mov ecx , dword ptr [ rsp + hexvar ] mov esi , ebx or esi , ecx or esi , edi cmp esi , hexvar ja hexvar mov byte ptr [ r14 ] , dl mov byte ptr [ r14 + num ] , al mov byte ptr [ r14 + num ] , bl mov byte ptr [ r14 + num ] , cl mov ebp , num jmp hexvar cmp r15d , hexvar jne hexvar movups xmm0 , xmmword ptr [ rsp + hexvar ] movups xmmword ptr [ r14 ] , xmm0 mov ebp , hexvar mov eax , ebp add rsp , hexvar pop rbx pop r14 pop r15 pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar test rcx , rcx je hexvar mov rbx , rcx mov r14 , rdx mov r15 , rsi mov r12 , rdi mov rax , rcx shr rax , hexvar movabs r13 , hexvar cmove r13 , rcx lea rax , [ rdi + hexvar ] mov qword ptr [ rsp + hexvar ] , rax lea rbp , [ rdi + hexvar ] nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] mov rcx , qword ptr [ r12 + hexvar ] mov eax , dword ptr [ r12 + hexvar ] mov dword ptr [ rsp ] , eax mov rdi , r14 mov rsi , r15 mov rdx , rbx mov r8 , qword ptr [ rsp + hexvar ] mov r9 , rbp call hexvar sub rbx , r13 add r14 , r13 add r15 , r13 cmp rbx , r13 cmovb r13 , rbx test rbx , rbx jne hexvar mov eax , num add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp push r14 push rbx mov ebp , esi mov r14 , rdi call hexvar test rax , rax je hexvar mov rbx , rax mov dword ptr [ rax ] , ebp mov rax , qword ptr [ r14 + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , rbx mov rsi , r14 call rax test eax , eax je hexvar mov rax , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rax + num ] mov rdi , qword ptr [ rax + num ] mov esi , dword ptr [ rax ] xorps xmm0 , xmm0 call hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov rdi , rbx call hexvar xor ebx , ebx mov rax , rbx pop rbx pop r14 pop rbp ret
push ebp mov ebp , esp sub esp , num mov al , byte ptr [ hexvar ] and al , num shr al , num movzx ecx , al mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx mov eax , dword ptr [ hexvar ] not eax shr eax , hexvar mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ hexvar ] , hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax add esp , num pop ebp ret
addiu sp , sp , - hexvar lui gp , hexvar addiu v0 , zero , num lw v1 , hexvar ( sp ) addiu gp , gp , hexvar sw s0 , hexvar ( sp ) sw s5 , hexvar ( sp ) move s5 , a0 sw v1 , hexvar ( sp ) sw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) lw v1 , hexvar ( sp ) lw s1 , - hexvar ( gp ) sw fp , hexvar ( sp ) sw v1 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw a0 , hexvar ( s0 ) lw v1 , hexvar ( sp ) lw fp , hexvar ( sp ) lw a1 , ( s1 ) sw v1 , hexvar ( sp ) sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw gp , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v1 , hexvar ( a0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar mov r8d , hexvar movabs r9 , hexvar movabs r10 , hexvar mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov ecx , dword ptr [ rax + hexvar ] mov dword ptr [ rbp - num ] , ecx mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] add rdi , num mov rax , qword ptr [ rbp - num ] add rax , num imul rdi , rax shr rdi , num mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] add rdi , num imul rax , rdi pop rbp ret
push ebp mov ebp , esp push ebx sub esp , num call hexvar add eax , hexvar sub esp , hexvar mov edx , dword ptr [ eax + hexvar ] push edx lea edx , [ eax - hexvar ] push edx lea edx , [ eax - hexvar ] push edx push num push dword ptr [ ebp + num ] mov ebx , eax call hexvar add esp , hexvar mov ebx , dword ptr [ ebp - num ] leave ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + num ] , hexvar mov dword ptr [ eax ] , hexvar mov eax , dword ptr [ ebp + num ] add esp , num pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sdc1 f20 , hexvar ( sp ) sw s0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s1 , hexvar ( sp ) move s1 , a1 addiu a1 , sp , hexvar sw s2 , hexvar ( sp ) sw gp , hexvar ( sp ) move s2 , a0 sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) lw v0 , ( s0 ) sw v0 , hexvar ( sp ) jalr t9 nop lw v0 , hexvar ( sp ) mov.d f20 , f0 lb v0 , ( v0 ) bnez v0 , hexvar lw gp , hexvar ( sp ) beqz s1 , hexvar lw v0 , hexvar ( sp ) sw v0 , ( s1 ) lw v1 , hexvar ( sp ) mov.d f0 , f20 lw v0 , ( s0 ) bne v1 , v0 , hexvar lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) ldc1 f20 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop addiu a1 , sp , hexvar lw gp , hexvar ( sp ) move a0 , s2 move s3 , v0 lw t9 , - hexvar ( gp )
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r7 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r7 ] mov r5 , r0 ldr r0 , [ pc , hexvar ] mov r8 , r1 str r3 , [ sp , hexvar ] bl hexvar subs r6 , r0 , num moveq r0 , num beq hexvar mov r3 , num ldr r2 , [ pc , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r2 , [ sp ] ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] str r3 , [ sp , hexvar ] str r2 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r2 , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , hexvar ] str r3 , [ sp , hexvar ] mov r4 , num b hexvar cmp r0 , num ldr r3 , [ r5 ] beq hexvar tst r3 , hexvar bne hexvar rsb r2 , r4 , hexvar add r0 , r6 , r4 mov r3 , r5 mov r1 , num bl hexvar add r4 , r4 , r0 cmp r4 , hexvar bne hexvar mov r1 , r4 mov r2 , sp mov r0 , r6 bl hexvar b hexvar tst r3 , hexvar beq hexvar mov r0 , r6 bl hexvar mov r0 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ r7 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp push edi mov edi , eax push esi push ebx xor ebp , ebp call hexvar add ebx , hexvar sub esp , hexvar xor esi , esi mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax lea eax , [ ebx - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , eax lea eax , [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax jmp hexvar lea esi , [ esi ] sub esp , num push esi push edi call hexvar mov dword ptr [ esp ] , hexvar mov dword ptr [ esp + hexvar ] , eax push - num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax js hexvar add ebp , eax add esi , num sub esp , hexvar push edi call hexvar add esp , hexvar cmp eax , esi jg hexvar mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] mov eax , ebp jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { r4 , lr } bl hexvar cmn r0 , num mov r4 , r0 beq hexvar mov r0 , r4 pop { r4 , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi lea edi , [ ebp - hexvar ] mov ebx , edi mov dword ptr [ esp ] , ebx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi call hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax lea eax , [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp mov dword ptr [ rbp - num ] , edi mov dword ptr [ rbp - num ] , esi mov dword ptr [ rbp - hexvar ] , edx jmp hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ rbp - num ] and eax , num shl eax , num mov ecx , dword ptr [ rbp - num ] and ecx , num add eax , ecx add eax , dword ptr [ rbp - hexvar ] pop rbp ret
cmp dword ptr [ ebp - hexvar ] , num je hexvar lea eax , [ ebp - hexvar ] jmp hexvar mov eax , num sub esp , num push eax push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , num jmp hexvar cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar mov esi , eax mov ecx , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + num ] mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] sub esp , hexvar push num push esi push ecx push edx push eax call hexvar add esp , hexvar mov edx , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov eax , dword ptr [ ebp - hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] test eax , eax jne hexvar mov eax , num jmp hexvar
cmp qword ptr [ rdi + hexvar ] , num je hexvar mov rdx , rdi mov edi , hexvar mov esi , hexvar mov ecx , hexvar mov r8d , num xor r9d , r9d jmp hexvar mov eax , num ret
push rbp mov rbp , rsp movss xmm0 , dword ptr [ rip ] movss xmm1 , dword ptr [ rip ] mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + num ] mulss xmm1 , dword ptr [ rsi + rdi * num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] mulss xmm0 , dword ptr [ rsi + rdi * num ] addss xmm1 , xmm0 mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] movss xmm0 , dword ptr [ rsi + rdi * num ] movss dword ptr [ rbp - hexvar ] , xmm1 movss dword ptr [ rbp - hexvar ] , xmm0 movss xmm0 , dword ptr [ rip ] movss xmm1 , dword ptr [ rbp - hexvar ] mulss xmm0 , xmm1 movss xmm2 , dword ptr [ rbp - hexvar ] addss xmm2 , xmm0 cvtss2sd xmm0 , xmm2 movsd qword ptr [ rbp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] movsd qword ptr [ rbp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar srl v0 , a2 , num sw s0 , hexvar ( sp ) sw s3 , hexvar ( sp ) addiu v1 , v0 , num lw s0 , - hexvar ( gp ) move s3 , a0 sll v0 , v1 , num lw t9 , - hexvar ( gp ) sw s5 , hexvar ( sp ) move s5 , a1 addu v0 , v0 , v1 sw s4 , hexvar ( sp ) sw s2 , hexvar ( sp ) move s4 , a2 sw s1 , hexvar ( sp ) move s1 , a3 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a0 , ( s0 ) lw s2 , hexvar ( sp ) sw a0 , hexvar ( sp ) jalr t9 move a0 , v0 lw gp , hexvar ( sp ) beqz v0 , hexvar sw v0 , ( s1 )
push ebp mov ebp , esp sub esp , hexvar call hexvar pop eax add eax , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov edx , dword ptr [ ebp + num ] test edx , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] lea ecx , [ eax - hexvar ] mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ ebp - num ] lea ecx , [ eax - hexvar ] mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ ebp - num ] lea ecx , [ eax - hexvar ] mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ ebp - num ] lea ecx , [ eax - hexvar ] mov dword ptr [ ebp - num ] , ecx mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx cmp dword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - num ] cmp rax , qword ptr [ rbp - hexvar ] jle hexvar mov rax , qword ptr [ rbp - num ] sub rax , num cqo idiv qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - num ] sub rax , num cqo idiv qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar imul rax , qword ptr [ rbp - num ] , num cmp rax , qword ptr [ rbp - hexvar ] jle hexvar mov rax , qword ptr [ rbp - num ] sub rax , num cqo mov ecx , num idiv rcx add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] sub rax , num cqo mov ecx , num idiv rcx add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - num ] jge hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] sub rax , num movsxd rcx , dword ptr [ rbp - hexvar ] cqo idiv rcx add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] pop rbp ret
push r15 push r14 push r13 push r12 push rbp push rbx mov rbp , rdx mov rbx , rsi sub rsp , hexvar mov r13 , qword ptr [ rsi + hexvar ] mov r12 , qword ptr [ rsi + hexvar ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax cmp r13 , qword ptr [ rsi + hexvar ] mov qword ptr [ rsp ] , rdi lea r14 , [ r13 * num ] jbe hexvar mov rax , qword ptr [ rsi + hexvar ] mov qword ptr [ rax + r13 * num ] , rdx mov qword ptr [ rsi + hexvar ] , r13 cmp qword ptr [ r12 + hexvar ] , num jne hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov rax , rbp jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push esi push ebx sub esp , hexvar lea ebx , [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov dword ptr [ esp + hexvar ] , hexvar mov dword ptr [ esp + hexvar ] , hexvar mov dword ptr [ esp + hexvar ] , hexvar mov dword ptr [ esp + hexvar ] , hexvar mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num push ebx push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar pop eax pop edx push esi push ebx call hexvar add esp , hexvar mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ecx + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax jne hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ eax + hexvar ] , num jne hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar cmp eax , num je hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx call hexvar mov al , byte ptr [ ebp - num ] and al , num mov byte ptr [ ebp - num ] , al jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar and al , num mov byte ptr [ ebp - num ] , al jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar xor ecx , ecx mov dword ptr [ eax ] , hexvar mov eax , ecx add esp , num pop ebp ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] cmp ecx , num mov dword ptr [ ebp - num ] , eax jne hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax add esp , num pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r15 , rdx mov r14 , rsi mov rbx , rdi mov dword ptr [ rdx ] , num mov qword ptr [ rsp + hexvar ] , rdi mov rax , qword ptr [ rsp + hexvar ] mov eax , dword ptr [ rax ] mov dword ptr [ rsp + num ] , eax add rbx , num mov eax , hexvar mov r12d , hexvar mov r13d , hexvar jmp hexvar mov eax , hexvar mov ebp , num nop cmp eax , hexvar jg hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar nop cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar cmp dword ptr [ rsp + num ] , num mov eax , hexvar cmove eax , r13d jmp hexvar mov eax , hexvar mov ebp , hexvar jmp hexvar mov edx , dword ptr [ rsp + num ] mov rdi , r14 mov rsi , rbx call hexvar mov dword ptr [ rsp + hexvar ] , eax cmp dword ptr [ rsp + hexvar ] , num mov eax , hexvar cmovs eax , r12d jmp hexvar mov rax , qword ptr [ rsp + hexvar ] mov dword ptr [ rax ] , num mov eax , dword ptr [ rsp + hexvar ] mov dword ptr [ r15 ] , eax jmp hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar push dword ptr [ esp + hexvar ] call hexvar mov esi , eax add esp , hexvar mov eax , num test esi , esi je hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar mov edx , dword ptr [ esi ] mov eax , num test edx , edx je hexvar sub esp , hexvar push edx call hexvar mov dword ptr [ esi ] , num add esp , hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esi ] test eax , eax je hexvar or dword ptr [ eax + hexvar ] , hexvar mov eax , num add esp , num pop ebx pop esi ret
push r14 push rbx push rax mov r8 , rdx mov eax , dword ptr [ rip ] test eax , eax jne hexvar mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al test al , num add byte ptr [ rax ] , al add byte ptr [ rax ] , al xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al ret num
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax sub esp , num lea eax , [ ebp - hexvar ] push eax push dword ptr [ ebp - hexvar ] push dword ptr [ ebp + hexvar ] push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] test eax , eax je hexvar mov eax , dword ptr [ ebp - hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar jmp hexvar cmp dword ptr [ ebp + hexvar ] , num je hexvar lea eax , [ ebx - hexvar ] jmp hexvar lea eax , [ ebx - hexvar ] sub esp , num push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] push eax call hexvar add esp , hexvar sub esp , num push eax lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar nop mov eax , dword ptr [ ebp - hexvar ] xor eax , dword ptr gs : [ hexvar ] je hexvar call hexvar mov ebx , dword ptr [ ebp - num ] leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , - hexvar ( gp ) sw v0 , hexvar ( sp ) lui v0 , hexvar addiu a3 , v0 , hexvar lw a2 , hexvar ( fp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
lea rax , [ rip + hexvar ] cmp edi , num je hexvar lea rax , [ rip + hexvar ] cmp edi , num je hexvar lea rax , [ rip + hexvar ] cmp edi , num je hexvar sub rsp , num call hexvar add rsp , num ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr sb , [ pc , hexvar ] subs r4 , r2 , num ldr r2 , [ sb ] sub sp , sp , hexvar mov r5 , r0 mov fp , r3 str r2 , [ sp , hexvar ] ldr r8 , [ sp , hexvar ] bne hexvar mov sl , r4 mov r7 , r4 add r6 , sp , hexvar strb r4 , [ r6 , - hexvar ] ! mov r0 , r6 bl hexvar cmp fp , num moveq r3 , hexvar movne r3 , hexvar mvn r2 , num mov r1 , num add r0 , r6 , r0 stm sp , { r3 , r8 } ldr r3 , [ pc , hexvar ] bl hexvar mov r0 , hexvar bl hexvar mov r4 , r0 mov r0 , r6 bl hexvar mov r6 , num ldr r3 , [ r5 , hexvar ] str r0 , [ r4 , num ] str r3 , [ r4 ] str r4 , [ r5 , hexvar ] mov r0 , num str r7 , [ r4 , num ] str sl , [ r4 , hexvar ] str r8 , [ r4 , hexvar ] str r6 , [ r4 , hexvar ] str r6 , [ r4 , hexvar ] str r6 , [ r4 , hexvar ] str r6 , [ r4 , hexvar ] bl hexvar str r0 , [ r4 , hexvar ] mov r0 , num ldr r3 , [ r5 , hexvar ] ldr r3 , [ r3 , hexvar ] strb r6 , [ r3 ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sb ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbx mov rbx , rdi mov rdi , qword ptr [ rdi ] call hexvar cmp eax , hexvar jne hexvar mov rax , qword ptr [ rbx + num ] mov rdi , qword ptr [ rax ] call hexvar cmp eax , hexvar jne hexvar mov rax , qword ptr [ rbx + num ] mov rdi , qword ptr [ rax + num ] mov esi , hexvar call hexvar pop rbx ret
xorps xmm0 , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip + hexvar ] movups xmmword ptr [ rdi ] , xmm0 mov dword ptr [ rdi + hexvar ] , hexvar mov eax , num ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] push hexvar push esi call hexvar mov ebp , dword ptr [ esi + hexvar ] add esp , hexvar mov eax , dword ptr [ esi + hexvar ] test eax , eax jne hexvar mov edx , ebp mov eax , esi call hexvar mov edi , eax test eax , eax jg hexvar jmp hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push eax call hexvar mov edi , eax mov dword ptr [ esp ] , esi call hexvar add esp , hexvar mov eax , edi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] cmp edi , num je hexvar test esi , esi mov edx , num je hexvar call hexvar sub esp , hexvar push eax call hexvar add esp , hexvar test eax , eax je hexvar push esi push num push hexvar push eax mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar test eax , eax mov ecx , dword ptr [ esp + num ] jle hexvar cmp edi , num je hexvar lea eax , [ ebx - hexvar ] mov dword ptr [ esp + num ] , ecx sub esp , hexvar push hexvar push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar mov ecx , dword ptr [ esp + num ] xor edx , edx mov dword ptr [ esp + num ] , edx sub esp , hexvar push ecx call hexvar add esp , hexvar mov edx , dword ptr [ esp + num ] add esp , hexvar mov eax , edx pop ebx pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esi ] mov edx , dword ptr [ edi ] lea ebp , [ ecx - num ] lea eax , [ edx - num ] cmp ecx , edx cmovb eax , ebp push eax mov eax , dword ptr [ edi + hexvar ] add eax , num push eax mov eax , dword ptr [ esi + hexvar ] add eax , num push eax call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , dword ptr [ esi + hexvar ] mov ecx , dword ptr [ edi + hexvar ] mov edx , dword ptr [ esi + hexvar ] mov ebx , dword ptr [ edi + hexvar ] cmp eax , ecx mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ esp + num ] , ebx jb hexvar jbe hexvar mov edx , dword ptr [ esi + hexvar ] mov ebx , dword ptr [ esi + hexvar ] mov dword ptr [ esp + num ] , edx mov edx , dword ptr [ edi + hexvar ] mov ebp , edx mov edx , dword ptr [ edi + hexvar ] cmp ebx , edx ja hexvar jae hexvar cmp ecx , ebx ja hexvar jb hexvar mov ebx , dword ptr [ esp + num ] cmp dword ptr [ esp + num ] , ebx ja hexvar cmp eax , edx ja hexvar jb hexvar mov ebx , dword ptr [ esp + hexvar ] cmp ebx , ebp jbe hexvar lea esi , [ esi ] mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
test esi , esi jne hexvar lea rax , [ rip + hexvar ] mov qword ptr [ rdi + hexvar ] , rax mov eax , num ret
push r14 push rbx push rax mov r14 , rsi call hexvar mov rbx , rax mov rdi , r14 call hexvar mov rdi , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rax + hexvar ] call hexvar mov dword ptr [ rsp + num ] , eax mov edx , hexvar mov ecx , hexvar jmp hexvar mov edx , hexvar xor eax , eax nop dword ptr [ rax + rax ] cmp edx , hexvar jg hexvar cmp edx , hexvar je hexvar cmp edx , hexvar jne hexvar mov edx , hexvar mov eax , num jmp hexvar nop word ptr cs : [ rax + rax ] nop cmp edx , hexvar je hexvar cmp edx , hexvar jne hexvar cmp dword ptr [ rsp + num ] , num mov edx , hexvar cmove edx , ecx jmp hexvar add rsp , num pop rbx pop r14 ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu v0 , zero , num sw s3 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw s5 , hexvar ( sp ) move s5 , a1 lw s3 , - hexvar ( gp ) lw s0 , hexvar ( a0 )
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test rax , rax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax je hexvar lea rdi , [ rip + hexvar ] call hexvar mov rbx , rax call hexvar mov eax , dword ptr [ rax ] mov rdx , rbx mov esi , eax mov edi , num mov eax , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov eax , num add rsp , hexvar pop rbx pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp eax , hexvar mov cl , num mov byte ptr [ ebp - hexvar ] , cl je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , num sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , al jmp hexvar mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) bnez v0 , hexvar nop addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui v0 , hexvar addiu a3 , v0 , - hexvar addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) b hexvar nop lw v0 , hexvar ( sp ) lw v1 , hexvar ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax movsd xmm0 , qword ptr [ rip + hexvar ] mulsd xmm0 , qword ptr [ rbp - hexvar ] call hexvar cvtss2sd xmm0 , xmm0 mov rax , qword ptr [ rbp - num ] movsd qword ptr [ rax + hexvar ] , xmm0 add rsp , hexvar pop rbp ret
push { r4 , lr } ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar ldrsheq lr , [ r1 ] , -r8 ldrdeq r0 , r1 , [ r0 ] , -lr andseq lr , r1 , r8 , lsr num ldrheq lr , [ r1 ] , -r0
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar addiu a0 , v0 , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 bal - hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
cmp sil , dl push r14 push r13 push r12 push rbp push rbx je hexvar test rcx , rcx mov r10d , esi mov r9d , edx je hexvar test dil , num je hexvar movzx eax , byte ptr [ rdi ] cmp al , dl je hexvar cmp al , sil jne hexvar jmp hexvar nop word ptr [ rax + rax ] test dil , num je hexvar movzx eax , byte ptr [ rdi ] cmp r9b , al je hexvar cmp r10b , al je hexvar add rdi , num sub rcx , num jne hexvar movzx eax , sil mov r8d , eax shl r8d , num or eax , r8d movsxd r8 , eax movzx eax , dl mov ebp , eax mov rbx , r8 shl ebp , num shl rbx , hexvar or eax , ebp or r8 , rbx cdqe mov rbx , r8 mov rbp , rax shl rbx , hexvar shl rbp , hexvar or rbx , r8 or rax , rbp mov rbp , rax shl rbp , hexvar or rbp , rax cmp rcx , num jbe hexvar mov rax , qword ptr [ rdi ] mov r8 , rbx movabs r11 , hexvar xor r8 , rax xor rax , rbp lea r12 , [ r8 + r11 ] lea r13 , [ rax + r11 ] not r8 not rax and r12 , r8 mov r8 , rax mov rax , r13 and rax , r8 or rax , r12 movabs r12 , hexvar test rax , r12 je hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rax , qword ptr [ rdi ] mov r8 , rbx xor r8 , rax xor rax , rbp lea r13 , [ r8 + r11 ] lea r14 , [ rax + r11 ] not r8 not rax and r13 , r8 mov r8 , rax mov rax , r14 and rax , r8 or rax , r13 test rax , r12 jne hexvar sub rcx , num add rdi , num cmp rcx , num ja hexvar test rcx , rcx je hexvar movzx eax , byte ptr [ rdi ] cmp al , sil je hexvar cmp al , dl je hexvar lea rsi , [ rdi + num ] add rdi , rcx jmp hexvar nop word ptr cs : [ rax + rax ] movzx r8d , byte ptr [ rsi ] add rsi , num cmp r9b , r8b je hexvar cmp r10b , r8b je hexvar cmp rdi , rsi mov rax , rsi jne hexvar xor eax , eax pop rbx pop rbp pop r12 pop r13 pop r14 ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + num ] , num mov rax , qword ptr [ rbp - num ] mov byte ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov byte ptr [ rax + num ] , num mov rax , qword ptr [ rbp - num ] mov byte ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num nop pop rbp ret
push esi push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] test eax , eax je hexvar mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , esi add esp , num lea eax , [ ebx - hexvar ] pop ebx pop esi jmp hexvar lea esi , [ esi ] sub esp , num push esi push ecx push edx call hexvar add esp , hexvar pop ebx pop esi ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] ldr r3 , [ pc , hexvar ] str r3 , [ sp , hexvar ] b hexvar ldr r3 , [ sp , hexvar ] add r3 , r3 , hexvar str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] ldr r2 , [ sp ] cmp r2 , r3 bne hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r3 , num bne hexvar mov r3 , hexvar ldr r2 , [ pc , hexvar ] mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 bl hexvar ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] add r2 , r3 , hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] mov r1 , r3 mov r0 , r2 bl hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 bl hexvar ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] add r2 , r3 , hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] mov r1 , r3 mov r0 , r2 bl hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 bl hexvar ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] add r2 , r3 , hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] mov r1 , r3 mov r0 , r2 bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar test rdi , rdi je hexvar mov r15 , rsi test rsi , rsi je hexvar mov rbx , r8 test r8 , r8 je hexvar mov r14 , rdx mov eax , hexvar test r14b , hexvar je hexvar add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
cmp edx , num je hexvar cmp edx , num je hexvar cmp edx , num je hexvar lea rdi , [ rip + hexvar ] sub rsp , num mov esi , hexvar call hexvar xor eax , eax add rsp , num ret
cmp r0 , hexvar movlo r0 , hexvar push { r4 , r5 , r6 , r7 , r8 , lr } orr r6 , r0 , num cmn r6 , num beq hexvar ldr r8 , [ pc , hexvar ] umull r2 , r3 , r6 , r8 lsr r3 , r3 , num add r3 , r3 , r3 , lsl num cmp r6 , num sub r3 , r6 , r3 bls hexvar cmp r3 , num beq hexvar mov r7 , hexvar mov r5 , num mov r4 , num b hexvar cmp r1 , num add r7 , r7 , num beq hexvar add r4 , r4 , num mov r1 , r4 mov r0 , r6 bl hexvar add r5 , r5 , r7 cmp r5 , r6 mov r3 , r1 blo hexvar cmp r3 , num bne hexvar add r6 , r6 , num cmn r6 , num bne hexvar mov r0 , r6 pop { r4 , r5 , r6 , r7 , r8 , pc }
push rbp push r15 push r14 push rbx push rax mov rbp , qword ptr [ rsi + hexvar ] mov r14d , num test rbp , rbp je hexvar mov r15d , edi mov rdi , qword ptr [ rbp + num ] test rdi , rdi je hexvar call hexvar test eax , eax jle hexvar xor ebx , ebx nop word ptr cs : [ rax + rax ] nop mov rdi , qword ptr [ rbp + num ] mov esi , ebx call hexvar mov rdi , rax call hexvar cmp eax , r15d je hexvar add ebx , num mov rdi , qword ptr [ rbp + num ] call hexvar cmp ebx , eax jl hexvar mov rdi , qword ptr [ rbp ] test rdi , rdi je hexvar call hexvar test eax , eax jle hexvar xor ebx , ebx nop dword ptr [ rax ] mov rdi , qword ptr [ rbp ] mov esi , ebx call hexvar mov rdi , rax call hexvar cmp eax , r15d je hexvar add ebx , num mov rdi , qword ptr [ rbp ] call hexvar cmp ebx , eax jl hexvar jmp hexvar mov r14d , num jmp hexvar mov r14d , num mov eax , r14d add rsp , num pop rbx pop r14 pop r15 pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar test rdi , rdi je hexvar mov rbp , rsi test rsi , rsi je hexvar mov r15 , rcx test rcx , rcx je hexvar mov r14 , r8 test r8 , r8 je hexvar mov r13 , rdx mov r12 , rdi mov edi , hexvar call hexvar test rax , rax je hexvar mov rbx , rax lea rdi , [ rsp + hexvar ] mov rsi , rbp mov rdx , r13 call hexvar mov ebp , eax test eax , eax jne hexvar mov esi , num mov rdi , r12 call hexvar test rax , rax je hexvar mov r12 , rax mov qword ptr [ rsp + num ] , r14 lea r13 , [ rsp + hexvar ] mov esi , num mov edx , hexvar mov rdi , rbx mov rcx , r12 call hexvar mov r14 , rax mov rdi , r13 mov rsi , rbx mov rdx , rax call hexvar test eax , eax jne hexvar cmp r14 , hexvar je hexvar mov rdi , r12 call hexvar mov ebp , num test eax , eax jne hexvar lea rdi , [ rsp + hexvar ] mov rsi , r15 mov rdx , qword ptr [ rsp + num ] call hexvar mov ebp , eax jmp hexvar mov ebp , hexvar jmp hexvar mov ebp , hexvar jmp hexvar mov ebp , eax mov rdi , r12 call hexvar mov esi , hexvar mov rdi , rbx call hexvar mov rdi , rbx call hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s3 , hexvar ( sp ) lw s3 , - hexvar ( gp ) sw s6 , hexvar ( sp ) move s6 , a0 sw s5 , hexvar ( sp ) move s5 , a1 sw s4 , hexvar ( sp ) move s4 , a2 sw s2 , hexvar ( sp ) move s2 , a3 sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s3 ) sw v0 , hexvar ( sp ) beqz a3 , hexvar lui v0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 addiu a2 , zero , hexvar lw t9 , - hexvar ( gp ) slti s1 , s4 , hexvar sw s5 , hexvar ( sp ) movn a2 , s4 , s1 move a3 , s6 move a1 , s2 move a0 , v0 move s1 , a2 move a2 , zero jalr t9 sw s1 , hexvar ( sp ) lw v0 , hexvar ( sp ) bnez v0 , hexvar lw gp , hexvar ( sp ) addiu s4 , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 move a0 , s0 move a0 , s0 lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw v0 , hexvar ( sp ) addiu a1 , zero , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , s4 lw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v1 , ( s3 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) addiu s4 , sp , hexvar move a2 , zero sw s6 , hexvar ( sp ) sw s1 , hexvar ( sp ) move a3 , s4 sw s5 , hexvar ( sp ) move a1 , s2 jalr t9 move a0 , s0 b hexvar lw gp , hexvar ( sp ) lb v1 , hexvar ( v0 ) beqz v1 , hexvar lw t9 , - hexvar ( gp )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar add eax , num mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , hexvar ja hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov edx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push esi push ebx call hexvar add ebx , hexvar sub esp , num mov edx , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] lea esi , [ ebx - hexvar ] lea eax , [ ebx - hexvar ] jmp hexvar lea esi , [ esi ] lea edi , [ edi ] mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar cmp edx , dword ptr [ eax + hexvar ] jne hexvar cmp ecx , dword ptr [ eax + hexvar ] je hexvar test ecx , ecx jne hexvar cmp dword ptr [ eax + hexvar ] , num je hexvar mov ebx , dword ptr [ esp + hexvar ] mov dword ptr [ ebx + hexvar ] , eax mov eax , num add esp , num pop ebx pop esi ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx ] mov esi , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ esi ] mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push rax mov rdi , qword ptr [ rdi + hexvar ] mov esi , hexvar mov edx , hexvar mov ecx , hexvar call hexvar xor ecx , ecx test rax , rax setne cl mov eax , ecx pop rcx ret
push ebp mov ebp , esp sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , num je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax lea eax , [ hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , num call hexvar mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , ecx cmp eax , dword ptr [ ebp - num ] jg hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar jmp hexvar xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar jmp hexvar jmp hexvar xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar jmp hexvar add esp , hexvar pop ebp ret
cmp edi , num jne hexvar mov rax , qword ptr [ rsi ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + num ] test rax , rax je hexvar push rax mov rdi , qword ptr [ rax + num ] movsxd rsi , dword ptr [ rax ] call hexvar add rsp , num mov eax , num ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s5 , hexvar ( sp ) move s5 , a2 sw s3 , hexvar ( sp ) move s3 , a0 sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a1 sw gp , hexvar ( sp ) sw fp , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s4 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw s2 , ( a0 )
push rbp push rbx push rax test rdi , rdi je hexvar mov rbx , rdi mov ebp , num cmp dword ptr [ rdi + hexvar ] , num je hexvar cmp dword ptr [ rbx + hexvar ] , num je hexvar mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar test byte ptr [ rbx + hexvar ] , num je hexvar mov qword ptr [ rdi + num ] , num call hexvar mov qword ptr [ rbx + hexvar ] , num jmp hexvar xor ebp , ebp mov eax , ebp add rsp , num pop rbx pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp + hexvar ] add eax , dword ptr [ ecx + hexvar ] mov dword ptr [ ecx + hexvar ] , eax add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp push r15 push r14 push r12 push rbx sub rsp , hexvar mov rbx , rsi call hexvar mov rdi , rbx mov rsi , rax call hexvar test rax , rax je hexvar mov r12 , rax mov rdi , rax call hexvar mov r15d , num test eax , eax jle hexvar lea r14 , [ rsp + hexvar ] xor ebp , ebp nop dword ptr [ rax + rax ] mov rdi , r12 mov esi , ebp call hexvar mov rbx , rax mov rdi , qword ptr [ rax + num ] mov esi , hexvar call hexvar test eax , eax je hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov rdx , qword ptr [ rbx + num ] mov r8 , qword ptr [ rbx + hexvar ] mov esi , hexvar mov ecx , hexvar mov edi , num xor eax , eax call hexvar jmp hexvar nop mov rdi , rbx mov rsi , r14 call hexvar test eax , eax je hexvar cmp dword ptr [ rsp + hexvar ] , num jg hexvar add ebp , num mov rdi , r12 call hexvar cmp ebp , eax jl hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor r15d , r15d mov eax , r15d add rsp , hexvar pop rbx pop r12 pop r14 pop r15 pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , hexvar ( sp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( sp ) lw v0 , num ( v0 )
sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rdi mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax jmp hexvar mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] cmp rax , num setne cl mov byte ptr [ rsp + hexvar ] , cl mov al , byte ptr [ rsp + hexvar ] test al , num jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar call hexvar jmp hexvar mov rax , qword ptr [ rsp + hexvar ] mov word ptr [ rax + hexvar ] , num mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rcx , qword ptr [ rsp + hexvar ] add rcx , hexvar mov rdi , rcx mov esi , eax mov edx , hexvar mov dword ptr [ rsp + hexvar ] , eax call hexvar mov rcx , qword ptr [ rsp + hexvar ] mov qword ptr [ rcx + hexvar ] , num mov eax , dword ptr [ rsp + hexvar ] add rsp , hexvar ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov qword ptr [ rsp + num ] , rsi mov r15 , rdi lea rbx , [ rsp + hexvar ] mov rdi , rbx call hexvar mov rdi , rbx call hexvar mov r12 , rax lea r13 , [ rsp + hexvar ] lea r14 , [ rsp + hexvar ] nop lea rdi , [ rsp + hexvar ] lea rsi , [ rsp + num ] lea rdx , [ rsp + hexvar ] mov rcx , rsp call hexvar test rax , rax je hexvar mov edx , hexvar mov rdi , rax mov rsi , r13 call hexvar mov r9 , qword ptr [ rsp + hexvar ] mov ebx , dword ptr [ rsp + num ] test byte ptr [ rsp ] , num mov ebp , hexvar je hexvar mov rbp , qword ptr [ rsp + hexvar ] mov esi , hexvar mov edx , hexvar mov rdi , r14 mov rcx , r12 mov r8 , r13 mov eax , num push rbp push rbx call hexvar add rsp , hexvar mov rdi , r14 call hexvar mov rdi , r14 mov rsi , rax mov rdx , qword ptr [ rsp + num ] call r15
mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar mov rdi , rsi mov rsi , rdx mov rdx , rcx mov rcx , rax jmp hexvar push rax mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rcx ret
mov rax , qword ptr [ rsi ] mov rdx , qword ptr [ rsi + num ] cmp rax , rdx je hexvar sub rsp , num sub rdx , rax mov rsi , rax call hexvar add rsp , num ret
mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov edx , dword ptr [ eax ] mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] add edx , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] add edx , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] add edx , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] add edx , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] add edx , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] add edx , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] add edx , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num jmp hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) addiu a2 , zero , num lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp mov rbp , rsp sub rsp , hexvar xor eax , eax mov cl , al mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rsi + hexvar ] mov rsi , qword ptr [ rsi + hexvar ] movzx eax , byte ptr [ rsi + hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi + hexvar ] mov rsi , qword ptr [ rsi + hexvar ] movzx edx , byte ptr [ rsi + hexvar ] cmp eax , edx mov byte ptr [ rbp - hexvar ] , cl jne hexvar mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar cmp eax , num setne cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] and al , num movzx eax , al add rsp , hexvar pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax + hexvar ] call hexvar add esp , hexvar pop ebx ret
push esi push ebx mov esi , edx call hexvar add ebx , hexvar sub esp , hexvar mov ecx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx xor ecx , ecx push eax push num push num lea eax , [ esp + hexvar ] push eax call hexvar xor eax , num add esp , hexvar or edx , eax jne hexvar movzx eax , byte ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi ret
test rdi , rdi je hexvar xor edx , edx jmp hexvar push rax mov edi , num mov esi , num mov edx , hexvar call hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ]
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ebp + hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx jbe hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , edx call hexvar cmp eax , dword ptr [ ebp + hexvar ] jae hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ esp ] , num lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ esp ] , num mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , lr } mov r4 , r1 mov r5 , r2 cmp r0 , num beq hexvar mov r2 , r5 mov r1 , r4 bl hexvar cmp r0 , num popeq { r4 , r5 , r6 , pc } mov r3 , num str r3 , [ r0 , hexvar ] strb r3 , [ r0 , hexvar ] mvn r2 , num str r2 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] str r2 , [ r0 , hexvar ] ldrb r1 , [ r0 , hexvar ] bic r1 , r1 , num strb r1 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] str r2 , [ r0 , hexvar ] str r2 , [ r0 , hexvar ] pop { r4 , r5 , r6 , pc }
cmp edx , hexvar ja hexvar movsxd rsi , esi lea rax , [ rsi + rsi * num ] shl rax , num sub rax , rsi mov edx , edx lea rax , [ rax + rdx + hexvar ] shl rax , num add rax , qword ptr [ rdi + hexvar ] ret
sub esp , hexvar call hexvar add eax , hexvar cmp dword ptr [ esp + hexvar ] , hexvar ja hexvar mov edx , dword ptr [ esp + hexvar ] shl edx , num mov edx , dword ptr [ edx + eax - hexvar ] add eax , edx jmp eax
cmp byte ptr [ rip + hexvar ] , num jne hexvar push rax mov edi , dword ptr [ rip + hexvar ] mov esi , hexvar call hexvar mov edi , dword ptr [ rip + hexvar ] mov esi , hexvar call hexvar mov esi , hexvar xor edi , edi call hexvar mov byte ptr [ rip + hexvar ] , num add rsp , num mov eax , num ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp + hexvar ] , num jne hexvar mov dword ptr [ ebp + hexvar ] , num mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax ] mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + num ] , num cmp dword ptr [ ebp + num ] , num je hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + hexvar ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + num ] mov dword ptr [ ebp - hexvar ] , esi mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + hexvar ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar cmp eax , num je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] and eax , num cmp eax , num je hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax ] , num jmp hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] and eax , hexvar cmp eax , num jne hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar mov dword ptr [ ebp + hexvar ] , eax cmp dword ptr [ ebp + hexvar ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] add eax , num mov dword ptr [ ebp + hexvar ] , eax jmp hexvar jmp hexvar jmp hexvar cmp dword ptr [ ebp + hexvar ] , num jne hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] cmp eax , ecx setne dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop esi pop ebp ret
sub rsp , hexvar mov rdx , rdi mov ecx , num mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rdi , rsp cmp esi , hexvar rep stosq qword ptr [ rdi ] , rax je hexvar mov dword ptr [ rsp ] , esi mov rax , qword ptr [ rsp ] mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov qword ptr [ rdx ] , rax mov rax , qword ptr [ rsp + num ] mov qword ptr [ rdx + num ] , rax mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rdx + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rdx + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rdx + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rdx + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rdx + hexvar ] , rax mov rax , rdx jne hexvar add rsp , hexvar ret
push { r4 , r5 , r6 , lr } mov r5 , r0 mov r1 , hexvar bl hexvar subs r4 , r0 , num beq hexvar mov r2 , hexvar ldr r1 , [ pc , hexvar ] mov r0 , r4 bl hexvar cmp r0 , num beq hexvar mov r0 , r4 pop { r4 , r5 , r6 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar leave ret
push rbp push r15 push r14 push rbx sub rsp , hexvar mov r14 , rdi test rdi , rdi mov eax , hexvar mov ebx , hexvar cmove ebx , eax mov eax , hexvar mov r15d , hexvar jmp hexvar mov eax , hexvar xor ebp , ebp nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] cmp eax , hexvar jg hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar nop cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar call hexvar mov qword ptr [ rsp + num ] , r14 mov rax , qword ptr [ rsp + num ] mov edi , dword ptr [ rax ] call hexvar mov qword ptr [ rsp + hexvar ] , r14 mov rdx , qword ptr [ rsp + hexvar ] mov rdi , rax mov esi , num call hexvar test eax , eax mov eax , hexvar cmove eax , r15d jmp hexvar mov rax , qword ptr [ rsp + num ] mov edi , dword ptr [ rax ] call hexvar mov rax , qword ptr [ rsp + num ] mov edi , dword ptr [ rax ] call hexvar mov rdx , qword ptr [ rsp + hexvar ] mov rdi , rax mov esi , num call hexvar mov ebp , eax mov eax , hexvar jmp hexvar mov eax , ebx jmp hexvar mov eax , ebp add rsp , hexvar pop rbx pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , esp lea edi , [ ebp - hexvar ] mov dword ptr [ esi + num ] , edi mov dword ptr [ esi + num ] , edx mov dword ptr [ esi ] , ecx mov byte ptr [ ebp - hexvar ] , al call hexvar movzx ecx , al mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx + num ] , eax mov dword ptr [ ecx + num ] , hexvar mov dword ptr [ ecx ] , hexvar call hexvar movzx ecx , al mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + num ] , num call hexvar mov eax , dword ptr [ ebp - hexvar ] fstp dword ptr [ eax + hexvar ] mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
sra a0 , a0 , num addiu v0 , zero , num beq a0 , v0 , hexvar lui v0 , hexvar addiu v0 , zero , num beq a0 , v0 , hexvar nop lui v0 , hexvar addiu v0 , v0 , - hexvar jr ra nop jr ra addiu v0 , v0 , - hexvar lui v0 , hexvar jr ra addiu v0 , v0 , - hexvar
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] cmp edi , num lea edi , [ hexvar ] lea ebx , [ hexvar ] cmovne ebx , edi mov edi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi lea esi , [ hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , lr } ands ip , r1 , hexvar sub sp , sp , hexvar mov r5 , r0 bne hexvar cmp r3 , r0 bls hexvar ldrb r6 , [ r0 ] add r4 , r0 , num tst r6 , hexvar subne r5 , r3 , r0 and r6 , r6 , hexvar and r6 , r6 , hexvar mov r7 , num movne lr , ip rsbne r5 , r5 , r5 , lsl num bne hexvar b hexvar ldrb r1 , [ r4 ] , num and r8 , r1 , hexvar and r8 , r8 , hexvar lsl r2 , r8 , r2 orr r2 , r2 , r8 , lsr r0 orr r2 , r2 , r7 orr r8 , r6 , r8 , lsl lr tst r1 , hexvar mov r6 , r8 mov r7 , r2 beq hexvar add lr , lr , num cmp r5 , lr sub r2 , lr , hexvar rsb r0 , lr , hexvar bne hexvar mov r5 , r6 mov ip , num str ip , [ sp ] mov r3 , r5 ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar mov r0 , r4 add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
movzx eax , byte ptr [ rsi + hexvar ] cmp al , hexvar je hexvar cmp al , hexvar je hexvar jmp hexvar mov rax , qword ptr [ rsi + num ] mov qword ptr [ rax + hexvar ] , rsi jmp hexvar mov rax , qword ptr [ rsi + num ] mov rdx , qword ptr [ rsi + hexvar ] mov rdx , qword ptr [ rdx + hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rsi + hexvar ] mov rdx , qword ptr [ rsi + hexvar ] mov qword ptr [ rax + hexvar ] , rdx jmp hexvar mov rax , qword ptr [ rsi + num ] test rax , rax je hexvar mov rdx , qword ptr [ rsi + hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rsi + hexvar ] test rax , rax je hexvar mov rdx , qword ptr [ rsi + hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov eax , num ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu v0 , sp , hexvar sw s0 , hexvar ( sp ) sw a0 , hexvar ( sp ) lui a0 , hexvar lw s0 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v1 , ( s0 ) lw a0 , - hexvar ( a0 ) sw v1 , hexvar ( sp ) beqz a0 , hexvar lw t9 , - hexvar ( gp ) addiu a1 , sp , hexvar sw v0 , hexvar ( sp ) addiu v0 , zero , num jalr t9 sw v0 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) lw v0 , num ( v0 )
sub esp , hexvar call hexvar add eax , hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar add esp , hexvar ret
push rbx mov rbx , rsi mov rdi , qword ptr [ rdi ] cmp byte ptr [ rdi ] , hexvar je hexvar mov edx , num mov rsi , qword ptr [ rsi ] call hexvar mov edx , eax mov eax , num test edx , edx jne hexvar mov dword ptr [ rbx + num ] , num pop rbx ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldrb r3 , [ r0 , hexvar ] tst r3 , hexvar bne hexvar mov r5 , r0 mov r6 , r1 mov r8 , r2 add r7 , r0 , hexvar mov r3 , num mov r2 , num mov r0 , r7 bl hexvar subs r4 , r0 , num beq hexvar ldr r3 , [ r4 , hexvar ] cmp r3 , num addeq r1 , r4 , hexvar beq hexvar mov r2 , r6 mov r1 , r7 mov r0 , num bl hexvar subs r3 , r0 , num beq hexvar ldm r4 , { r0 , r1 , r2 } stm r3 , { r0 , r1 , r2 } str r3 , [ r4 ] add r1 , r3 , hexvar str r8 , [ r1 , hexvar ] str r6 , [ r1 ] mov r0 , r5 bl hexvar pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push r15 push r14 push r12 push rbx push rax mov r15 , rsi mov r12 , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rbx , rax xor r14d , r14d mov rdi , rax mov esi , hexvar xor edx , edx mov rcx , r12 call hexvar call hexvar test rax , rax je hexvar mov r12 , rax mov rdi , rax mov rsi , r15 call hexvar test eax , eax je hexvar mov rdi , rbx mov rsi , r12 mov edx , num xor ecx , ecx call hexvar mov r14d , eax mov rdi , r12 call hexvar mov rdi , rbx call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor r14d , r14d mov eax , r14d add rsp , num pop rbx pop r12 pop r14 pop r15 ret
test esi , esi js hexvar mov eax , num cmp edx , hexvar jl hexvar mov eax , num nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] shr edx , num add eax , num test edx , edx jne hexvar cmp edi , num jne hexvar add eax , num jmp hexvar mov eax , hexvar ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 move s2 , a1 move s3 , a2 move s4 , a3 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a0 , v0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 move a1 , s1 move a0 , v0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s1 , v0 lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) move a3 , s4 move a2 , s3 move a1 , s2 move a0 , s1 jal hexvar nop lw gp , hexvar ( sp ) move s2 , v0 move a3 , zero move a2 , zero addiu a1 , zero , hexvar move a0 , s1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a0 , s1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move v0 , s2 lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , - hexvar addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) b hexvar move s2 , zero
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov eax , dword ptr [ ebx + hexvar ] test eax , eax jns hexvar sub esp , hexvar lea eax , [ ebp - hexvar ] push eax call hexvar add esp , hexvar test eax , eax jne hexvar sub esp , num lea eax , [ ebx - hexvar ] push eax lea eax , [ ebp - hexvar ] add eax , hexvar push eax call hexvar add esp , hexvar test eax , eax js hexvar mov eax , num jmp hexvar mov eax , num mov dword ptr [ ebx + hexvar ] , eax mov eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ ebp - hexvar ] xor edx , dword ptr gs : [ hexvar ] je hexvar call hexvar mov ebx , dword ptr [ ebp - num ] leave ret
push { r4 , r5 , r6 , r7 , lr } sub sp , sp , hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] cmp r2 , num beq hexvar mov r6 , r0 mov r4 , r1 sub r5 , r2 , num mov r7 , hexvar add r2 , sp , num mov r1 , r4 mov r0 , r6 bl hexvar mov r2 , r6 mov r1 , r7 add r0 , sp , num bl hexvar cmp r0 , hexvar bne hexvar add r4 , r4 , hexvar sub r5 , r5 , num cmn r5 , num bne hexvar mov r0 , num b hexvar mvn r0 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc }
cmp di , hexvar ja hexvar lea rax , [ rip + hexvar ] movzx edx , di movsxd rdx , dword ptr [ rax + rdx * num ] add rdx , rax jmp rdx nop dword ptr [ rax ] mov eax , num ret
push rbx call hexvar mov ebx , eax test eax , eax js hexvar mov eax , ebx pop rbx ret
sub rsp , num call hexvar mov byte ptr [ rax + hexvar ] , num mov byte ptr [ rax + hexvar ] , num mov byte ptr [ rip + hexvar ] , num mov byte ptr [ rax + hexvar ] , num mov byte ptr [ rax + hexvar ] , num mov dword ptr [ rax + hexvar ] , hexvar mov eax , num add rsp , num ret
push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r14 , rcx mov r15 , rdx mov r12 , rsi mov r13 , rdi call hexvar mov rbx , rax test r12 , r12 je hexvar mov rdi , r12 call hexvar lea ebx , [ rax + rbx ] add ebx , num cmp ebx , hexvar jl hexvar mov rdi , qword ptr [ rip + hexvar ] xor ebx , ebx mov esi , hexvar xor eax , eax call hexvar jmp hexvar mov rdi , rsp test r12 , r12 je hexvar mov esi , hexvar mov edx , hexvar mov rcx , r13 mov r8 , r12 xor eax , eax call hexvar jmp hexvar mov edx , hexvar mov rsi , r13 call hexvar call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov r12 , rax mov rcx , rsp mov edx , num mov rdi , rax mov esi , hexvar call hexvar test rax , rax jle hexvar xor ebx , ebx mov rdi , r15 xor esi , esi call hexvar test rax , rax je hexvar mov r15 , rax mov rdi , r12 mov rsi , rax call hexvar mov esi , hexvar mov rdi , r12 call hexvar test r14 , r14 je hexvar mov qword ptr [ r14 ] , r15 mov ebx , num jmp hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar xor ebx , ebx jmp hexvar mov rdi , qword ptr [ rip + hexvar ] mov esi , hexvar xor eax , eax call hexvar mov rdi , r12 call hexvar jmp hexvar mov rdi , r12 call hexvar mov rdi , r15 call hexvar mov ebx , num mov eax , ebx add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , hexvar jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp + num ] cmp dword ptr [ eax + num ] , num je hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , eax mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num cmp dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax je hexvar xor eax , eax mov dword ptr [ ebp - hexvar ] , eax jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp + num ] movsx ecx , byte ptr [ ecx ] cmp ecx , hexvar mov ecx , num cmove eax , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] sub eax , ecx mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ ebp - num ] jae hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] sub ecx , num movsx eax , byte ptr [ eax + ecx ] cmp eax , hexvar je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , - num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , esp mov dword ptr [ esi ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp + hexvar ] test eax , eax mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax jne hexvar jmp hexvar jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp + hexvar ] mov edx , hexvar xor edx , hexvar mov esi , ecx xor esi , edx and esi , ecx cmp esi , num lea ecx , [ hexvar ] lea edx , [ hexvar ] cmovne edx , ecx mov ecx , dword ptr [ ebp + hexvar ] and ecx , hexvar cmp ecx , num lea ecx , [ hexvar ] lea esi , [ hexvar ] cmovne esi , ecx mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi lea ecx , [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , eax add esp , hexvar pop esi pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r5 , [ pc , hexvar ] sub sp , sp , hexvar ldr ip , [ r5 ] cmp r0 , num mov r4 , r1 mov r6 , r2 mov r7 , r3 str ip , [ sp , hexvar ] beq hexvar bl hexvar cmp r0 , num bne hexvar cmp r4 , num blt hexvar ldr lr , [ pc , hexvar ] ldr ip , [ lr , num ] cmp ip , num beq hexvar ldr r8 , [ lr , num ] ldr r3 , [ r8 ] cmp r4 , r3 movne r3 , num addne r2 , r8 , num bne hexvar b hexvar ldr r0 , [ r2 ] mov r1 , r2 cmp r0 , r4 add r2 , r2 , num beq hexvar add r3 , r3 , num cmp r3 , ip bne hexvar cmp r6 , num ble hexvar mov r4 , num add r1 , sp , hexvar str r4 , [ r1 , - hexvar ] ! mov r0 , r6 mov r2 , r4 bl hexvar cmn r0 , num beq hexvar ldr r2 , [ sp , hexvar ] and r4 , r2 , hexvar add r3 , r4 , num lsl r3 , r3 , hexvar cmp r3 , hexvar blt hexvar cmp r4 , hexvar bne hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r5 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc } ldclgt p8 , c0 , [ r6 ] , { hexvar } andeq r0 , r0 , r0
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lui a0 , hexvar addiu a0 , a0 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar nop lb v1 , ( v0 ) beqz v1 , hexvar addiu a2 , zero , hexvar addiu a1 , sp , hexvar move a0 , v0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw v1 , hexvar ( sp ) lb v1 , ( v1 ) beqz v1 , hexvar nop lui v0 , num b hexvar addiu v0 , v0 , hexvar lui v0 , num b hexvar addiu v0 , v0 , hexvar lui v0 , num addiu v0 , v0 , hexvar lw a0 , hexvar ( sp ) lw v1 , - hexvar ( gp ) lw v1 , ( v1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop nop
push rbp push rbx mov rbp , rdi mov rdi , rsi sub rsp , hexvar test al , al mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax lea rax , [ rsp + hexvar ] mov rsi , rsp mov qword ptr [ rsp + num ] , rax lea rax , [ rsp + hexvar ] mov dword ptr [ rsp ] , hexvar mov dword ptr [ rsp + num ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rbx , rax mov rax , qword ptr [ rbp + hexvar ] mov edx , dword ptr [ rbp ] lea rsi , [ rip + hexvar ] mov rcx , rbx mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax ] xor eax , eax call hexvar mov rdi , rbx call hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp ret
push rbx movzx eax , byte ptr [ rdi + hexvar ] mov rbx , rdi test al , hexvar je hexvar mov rdx , qword ptr [ rdi + num ] and eax , num call qword ptr [ rdx + rax * num + hexvar ] test eax , eax je hexvar mov rdi , rbx pop rbx jmp hexvar nop word ptr [ rax + rax ] pop rbx ret
push r14 mov rax , rdi push r13 mov r13 , rdx lea rdx , [ rip - hexvar ] push r12 test sil , sil push rbp lea rdi , [ rdi - hexvar ] push rbx lea rsi , [ rip + hexvar ] mov r14 , qword ptr [ rax - hexvar ] mov eax , num mov r12 , rcx cmove rdx , rax xor ecx , ecx call hexvar lea rbp , [ rax + hexvar ] mov rsi , r13 mov rbx , rax mov rdi , rbp call hexvar mov rsi , r12 mov rdi , rbp call hexvar mov rdi , qword ptr [ r14 + hexvar ] lea rsi , [ rbx + hexvar ] call hexvar pop rbx mov eax , num pop rbp pop r12 pop r13 pop r14 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s1 , a0 lui v0 , hexvar lw v0 , hexvar ( v0 ) beqz v0 , hexvar move s0 , a1 lb v0 , ( a1 ) bnez v0 , hexvar move a0 , a2 move a2 , s0 move a1 , s1 addiu a0 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui v0 , hexvar lw a2 , - hexvar ( v0 ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s2 , v0 move a2 , v0 move a1 , s1 addiu a0 , zero , num lw t9 , - hexvar ( gp )
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi movss dword ptr [ rbp - hexvar ] , xmm0 mov qword ptr [ rbp - hexvar ] , rsi movss xmm0 , dword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] movss dword ptr [ rsi + rdi * num ] , xmm0 pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar fstp qword ptr [ ebp - hexvar ] movsd xmm0 , qword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] sub eax , ecx cvtsi2sd xmm1 , eax movsd xmm2 , qword ptr [ hexvar ] mulsd xmm1 , xmm2 addsd xmm0 , xmm1 movsd qword ptr [ ebp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ ebp - hexvar ] movsd qword ptr [ ebp - hexvar ] , xmm0 fld qword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) lw a3 , hexvar ( sp ) lw a2 , hexvar ( sp ) lui v0 , hexvar addiu a1 , v0 , - hexvar lw a0 , - hexvar ( gp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 move s1 , a1 move s2 , a2 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sw zero , ( v0 )
mov ip , r1 orr r1 , r1 , r2 cmp r1 , hexvar movlo r3 , num movhs r3 , num cmp r2 , num moveq r3 , num cmp r3 , num push { r4 , r5 , r6 , lr } bne hexvar mul r1 , r2 , ip cmp r1 , num blt hexvar ldr r0 , [ r0 , hexvar ] beq hexvar add r1 , r1 , num bics r1 , r1 , num bne hexvar bl hexvar mov r4 , r0 cmp r4 , num beq hexvar mov r0 , r4 pop { r4 , r5 , r6 , pc }
addiu sp , sp , - num sw fp , num ( sp ) move fp , sp sw a0 , num ( fp ) lw v0 , num ( fp ) lw v0 , ( v0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov cl , byte ptr [ eax + hexvar ] mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] cmp al , num je hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar nop word ptr [ eax + eax ]
cmp r0 , num push { r4 , r5 , r6 , lr } mov r4 , r0 bhi hexvar bl hexvar mov r6 , r0 bl hexvar mov r5 , r0 mov r0 , r4 mov r4 , r6 ldr r6 , [ r5 ] bl hexvar str r6 , [ r5 ] mov r0 , r4 pop { r4 , r5 , r6 , pc }
push { r7 , lr } ldr lr , [ pc , hexvar ] sub sp , sp , hexvar ldr lr , [ lr ] ldr ip , [ pc , hexvar ] str lr , [ sp , hexvar ] sub r0 , r0 , num ldr r5 , [ ip ] ldr r6 , [ sp , hexvar ] cmp r0 , num ldrls pc , [ pc , r0 , lsl num ] b hexvar strheq sp , [ r1 ] , -ip strheq sp , [ r1 ] , -r4 strheq sp , [ r1 ] , -r4 andeq sp , r1 , ip , asr r1 ldr r0 , [ pc , hexvar ] cmp r1 , num movlt r3 , num ldrlt r4 , [ pc , hexvar ] ldrge r7 , [ r3 , r1 , lsl num ] sublt r4 , r4 , r1 strblt r2 , [ sp , num ] mov r1 , r0 mov r2 , num mov r0 , num strblt r3 , [ sp , num ] addlt r7 , sp , num ldrge r4 , [ pc , hexvar ] bl hexvar str r6 , [ sp , num ] mov r2 , r0 str r7 , [ sp ] mov r3 , r4 mov r0 , r5 mov r1 , num bl hexvar bl hexvar ldr r0 , [ pc , hexvar ] b hexvar ldr r0 , [ pc , hexvar ] b hexvar andeq r7 , r4 , r8 , lsl num ldrdeq r8 , sb , [ r4 ] , -r8 andeq r6 , r3 , r4 , lsl num andeq r6 , r3 , r8 , ror num andeq r6 , r3 , r0 , lsr num andeq r6 , r3 , r8 , asr num
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
xor ecx , ecx mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , num cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil je hexvar mov eax , hexvar mov edx , hexvar cmp byte ptr [ rip ] , dil jne hexvar mov eax , edx imul rax , rax , hexvar cmp qword ptr [ rax ] , num sbb ecx , ecx or ecx , edx mov eax , ecx ret
cmp qword ptr [ rdi + hexvar ] , num je hexvar test byte ptr [ rdi + hexvar ] , num jne hexvar mov rax , qword ptr [ rdi + num ] mov rax , qword ptr [ rax + hexvar ] jmp rax push rax mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov eax , hexvar add rsp , num ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw s0 , hexvar ( sp ) move s0 , a1 sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) lw a0 , num ( a0 )
push { r4 , r5 , r6 , lr } mov r4 , r0 mov r5 , r3 mov r3 , num bl hexvar cmp r0 , num popeq { r4 , r5 , r6 , pc } ldr r3 , [ r0 , hexvar ] cmp r3 , num popne { r4 , r5 , r6 , pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) addiu a1 , zero , num move a0 , v0 jalr t9 move s0 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) move v0 , s0 lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) addiu v0 , zero , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar sw v0 , hexvar ( sp ) addiu a1 , zero , hexvar addiu a0 , zero , hexvar jalr t9 move s0 , zero lui a2 , hexvar addiu a1 , zero , num addiu a2 , a2 , - hexvar jal hexvar move a0 , s1 move v0 , s0 lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar addiu a0 , zero , num sw s1 , hexvar ( sp ) lw s1 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lw v0 , ( s1 ) sw v0 , hexvar ( sp ) jalr t9 nop addiu v1 , zero , - num beq v0 , v1 , hexvar lw gp , hexvar ( sp ) move s0 , v0 lw t9 , - hexvar ( gp ) addiu a1 , sp , hexvar jalr t9 addiu a0 , zero , num bnez v0 , hexvar lw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) addiu v1 , zero , - num beq v0 , v1 , hexvar lw a0 , hexvar ( sp ) move s0 , a0 lw a0 , hexvar ( sp ) move v0 , s0 lw v1 , ( s1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar addiu s0 , zero , hexvar beq a0 , v0 , hexvar nop b hexvar move s0 , a0 lw t9 , - hexvar ( gp ) jalr t9 nop
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) addiu v0 , fp , hexvar move a0 , v0 jal hexvar nop lw gp , hexvar ( fp ) addiu v0 , fp , hexvar move a2 , v0 lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) addiu v0 , fp , hexvar lw a1 , hexvar ( fp ) move a0 , v0 jal hexvar nop lw gp , hexvar ( fp ) lw v1 , - hexvar ( gp ) lw a0 , hexvar ( fp ) lw v1 , ( v1 ) beq a0 , v1 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + num ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , eax xor eax , eax mov ecx , dword ptr [ ebp - num ] cmp eax , dword ptr [ ecx + hexvar ] setle dl mov byte ptr [ ebp - num ] , dl mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp dword ptr [ eax + hexvar ] , num je hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - num ] , eax jmp hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov byte ptr [ ebp - hexvar ] , al mov eax , dword ptr [ ebp + hexvar ] sub ebx , eax inc ebx mov dword ptr [ ebp - hexvar ] , ebx mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp + hexvar ] setb cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi + num ] , edx mov dword ptr [ edi ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] add ecx , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] movsx ecx , byte ptr [ ebp + hexvar ] lea esi , [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar cmp eax , num jge hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov dword ptr [ ebp - hexvar ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw a0 , ( a0 )
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dl , byte ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , dl mov eax , esp mov ecx , eax add ecx , - hexvar mov esp , ecx mov ecx , esp mov edx , ecx add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax - hexvar ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax - hexvar ] , edi mov bl , byte ptr [ ebp - hexvar ] mov byte ptr [ ecx - hexvar ] , bl sub esp , hexvar mov ecx , esp mov dword ptr [ ecx ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx - hexvar ] mov esi , dword ptr [ ecx - hexvar ] sub esp , hexvar mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi ] , edx mov dword ptr [ edi + num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] cmp byte ptr [ eax ] , num setne bl mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] movsx ecx , byte ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , hexvar mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar test rcx , rcx je hexvar mov rbx , r8 test r8 , r8 je hexvar mov r14 , rcx mov r15 , rdx mov r13 , rsi mov r12 , rdi mov dword ptr [ rsp + hexvar ] , r9d mov al , byte ptr [ rcx ] test al , al je hexvar lea rbp , [ r14 + num ] nop movsx esi , al mov rdi , rbx call hexvar test rax , rax je hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar movzx eax , byte ptr [ rbp ] add rbp , num test al , al jne hexvar test r13 , r13 je hexvar mov rbp , qword ptr [ rsp + hexvar ] test rbp , rbp je hexvar mov qword ptr [ rsp + hexvar ] , r15 mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov r15 , rax mov eax , dword ptr [ rsp + hexvar ] mov qword ptr [ r15 + num ] , r13 xor ecx , ecx cmp dword ptr [ rsp + hexvar ] , num setne cl mov dword ptr [ r15 + hexvar ] , ecx mov dword ptr [ r15 + hexvar ] , eax mov dword ptr [ r15 ] , num mov qword ptr [ r15 + hexvar ] , rbp cmp qword ptr [ r12 + num ] , num lea rbp , [ r12 + num ] jne hexvar call hexvar mov qword ptr [ rbp ] , rax test rax , rax je hexvar mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ r15 + hexvar ] , rax mov qword ptr [ r15 + hexvar ] , r14 mov qword ptr [ r15 + hexvar ] , rbx mov rdi , qword ptr [ rbp ] mov rsi , r15 call hexvar xor ecx , ecx test eax , eax setle cl sub eax , ecx jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov eax , hexvar add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
cmp r0 , num ldrls pc , [ pc , r0 , lsl num ] b hexvar muleq r1 , r4 , lr andeq r1 , r1 , ip , lsl num andeq r1 , r1 , r4 , lsl num andeq r1 , r1 , ip , ror lr andeq r1 , r1 , r4 , ror lr mov r0 , num bx lr add r0 , r1 , hexvar bx lr add r0 , r1 , num bx lr mov r0 , r1 bx lr add r0 , r1 , num bx lr push { r4 , lr } bl hexvar
sub rsp , hexvar cmp edi , hexvar ja hexvar test edi , edi je hexvar movsxd rax , edi lea rcx , [ rax + rax * num ] cmp dword ptr [ rcx * num + hexvar ] , num je hexvar lea rax , [ rax + rax * num ] mov rax , qword ptr [ rax * num + hexvar ] add rsp , hexvar ret
mov edi , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] cmp dword ptr [ edi + num ] , edx mov eax , dword ptr [ eax ] ja hexvar test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] cmp byte ptr [ eax ] , num je hexvar mov edi , dword ptr [ esp + num ] mov esi , eax mov eax , dword ptr [ edi + hexvar ] test eax , eax je hexvar sub esp , hexvar mov ebx , dword ptr [ esp + hexvar ] push ebx call eax add esp , hexvar test eax , eax je hexvar sub esp , num push eax lea eax , [ edi - hexvar ] push ebx mov ebx , edi lea edi , [ ebx + hexvar ] push eax push hexvar push num push hexvar push edi call hexvar add esp , hexvar push edi push esi mov ebx , dword ptr [ esp + hexvar ] lea eax , [ ebx - hexvar ] push eax push num call hexvar add esp , hexvar cmp byte ptr [ esi ] , num jne hexvar mov eax , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] cmp dword ptr [ eax + num ] , edi jbe hexvar mov edx , dword ptr [ eax + hexvar ] movzx edx , word ptr [ edx + edi * num ] mov edi , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ edi ] test ebx , ebx je hexvar cmp dx , - num je hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] xor ebp , ebp mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ esi + hexvar ] mov word ptr [ ecx + edi * num ] , dx mov edx , dword ptr [ eax + edi * num ] mov eax , dword ptr [ esi + hexvar ] mov dword ptr [ eax + edi * num ] , edx mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , eax jmp hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a1 sw a2 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw v0 , ( a0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 mov rcx , qword ptr [ rbp - hexvar ] mov dword ptr [ rcx ] , num mov rcx , qword ptr [ rbp - hexvar ] mov al , byte ptr [ rcx + hexvar ] sub al , num setne r9b movzx r10d , r9b mov ecx , r10d mov rcx , qword ptr [ rcx * num + hexvar ] mov byte ptr [ rbp - hexvar ] , al jmp rcx mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar test eax , eax setne cl movzx eax , cl mov edi , eax mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rcx ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] lea rdi , [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rcx , rax mov r8 , qword ptr [ rbp - hexvar ] call r8
push edi push esi mov edi , eax push ebx mov esi , edx call hexvar add ebx , hexvar sub esp , hexvar movzx eax , byte ptr [ esp + hexvar ] cmp al , hexvar je hexvar ja hexvar cmp al , num je hexvar jbe hexvar cmp al , num je hexvar cmp al , num jne hexvar mov ecx , dword ptr [ edx + hexvar ] mov eax , dword ptr [ edx + num ] sub esp , num mov edx , dword ptr [ edx + hexvar ] add eax , dword ptr [ ecx + hexvar ] adc edx , dword ptr [ ecx + hexvar ] push edx push eax push num jmp hexvar lea esi , [ esi ] cmp al , hexvar je hexvar jbe hexvar cmp al , hexvar jne hexvar mov ecx , dword ptr [ edx + hexvar ] mov eax , dword ptr [ edx + num ] sub esp , num mov edx , dword ptr [ edx + hexvar ] add eax , dword ptr [ ecx + hexvar ] adc edx , dword ptr [ ecx + hexvar ] push edx push eax push num push dword ptr [ esp + hexvar ] push dword ptr [ esi + num ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax setne al movzx eax , al add esp , hexvar pop ebx pop esi pop edi ret
push r14 push rbx push rax mov r14 , rsi mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] call hexvar cmp eax , hexvar jne hexvar call hexvar mov rcx , qword ptr [ rbx + hexvar ] mov rcx , qword ptr [ rcx + num ] mov qword ptr [ rcx + num ] , rax test rax , rax je hexvar mov rax , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax + num ] mov dword ptr [ rax ] , num mov rdi , r14 call hexvar mov edi , eax call hexvar mov rcx , qword ptr [ rbx + hexvar ] mov rcx , qword ptr [ rcx + num ] mov qword ptr [ rcx ] , rax jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov eax , num add rsp , num pop rbx pop r14 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx lea ecx , [ ebp - num ] mov dword ptr [ esp + num ] , ecx mov byte ptr [ ebp - hexvar ] , al call hexvar test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar xor ecx , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx + hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , ecx call hexvar fstp dword ptr [ ebp - hexvar ] movss xmm0 , dword ptr [ ebp - hexvar ] movss xmm1 , dword ptr [ hexvar ] mulss xmm1 , xmm0 mov eax , dword ptr [ ebp - hexvar ] movss dword ptr [ eax + hexvar ] , xmm1 mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi mov edi , dword ptr [ ecx ] mov dword ptr [ ebp - hexvar ] , eax mov eax , edi cdq mov edi , hexvar idiv edi mov dword ptr [ ebp - hexvar ] , ecx mov ecx , edx mov edx , num shl edx , cl xor edx , hexvar mov ebx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebx ] mov esi , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ esi ] mov eax , esi mov dword ptr [ ebp - hexvar ] , edx cdq idiv edi mov esi , dword ptr [ ebp - hexvar ] and esi , dword ptr [ ecx + eax * num ] mov dword ptr [ ecx + eax * num ] , esi lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
move v0 , zero lui a1 , hexvar addiu a0 , a0 , num lbu v1 , - num ( a0 ) beqz v1 , hexvar nop sll v0 , v0 , num addu v0 , v1 , v0 and v1 , v0 , a1 beqz v1 , hexvar srl v1 , v1 , hexvar ext v0 , v0 , num , hexvar b hexvar xor v0 , v1 , v0 jr ra nop
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r4 , r2 sub sp , sp , hexvar ldr r6 , [ pc , hexvar ] ldr r8 , [ sp , hexvar ] ldr ip , [ r6 ] ldr sl , [ r0 ] ldr r5 , [ r8 ] mov r2 , hexvar mov r1 , num mov r7 , r0 add r0 , sp , hexvar mov sb , r3 str ip , [ sp , hexvar ] bl hexvar mov r0 , r4 str r5 , [ sp , num ] str sl , [ sp , num ] str r4 , [ sp , hexvar ] bl hexvar mov r2 , hexvar mov r5 , r0 ldr r1 , [ pc , hexvar ] add r0 , sp , num bl hexvar ldr r3 , [ sp , num ] cmp r3 , num bne hexvar b hexvar mov r1 , num ldr r3 , [ sp , hexvar ] add r0 , sp , r1 sub r3 , r4 , r3 add r3 , r5 , r3 str r3 , [ sp , hexvar ] bl hexvar cmp r0 , num bne hexvar add r0 , sp , num bl hexvar ldr r3 , [ sp , num ] cmp r3 , num beq hexvar cmp r0 , num beq hexvar mov r0 , r5 bl hexvar mov r3 , num mov r0 , r3 str r3 , [ r7 ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r6 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } sbcs r5 , sl , hexvar andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move s0 , a0 move v1 , zero addiu v0 , v0 , num addiu t0 , zero , hexvar move a1 , s0 addu a3 , s0 , v1 lb a0 , ( a3 ) beq a0 , t0 , hexvar addiu a2 , v1 , num sb a0 , ( a1 ) move v1 , a2 sltu a0 , v1 , v0 bnez a0 , hexvar addiu a1 , a1 , num lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu v1 , v1 , num sltu t1 , v1 , v0 beqz t1 , hexvar addu t2 , s0 , a2 lb t1 , ( t2 ) addiu t1 , t1 , - hexvar andi t2 , t1 , hexvar sltiu t2 , t2 , num beqz t2 , hexvar nop lb t2 , num ( a3 ) addiu t2 , t2 , - hexvar andi t3 , t2 , hexvar sltiu t3 , t3 , num beqz t3 , hexvar sll t1 , t1 , num lbu t3 , num ( a3 ) addu a3 , t1 , t2 addiu t1 , t3 , - hexvar sll a3 , a3 , num andi t1 , t1 , hexvar addu a3 , t1 , a3 sltiu t1 , t1 , num beqz t1 , hexvar nop b hexvar sb a3 , ( a1 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ hexvar ] mov rdi , qword ptr [ rbp - hexvar ] call rax mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r4 , r0 mov r6 , r1 mov r5 , r2 bl hexvar subs r7 , r0 , num bne hexvar ldr r3 , [ r4 , hexvar ] ldr r1 , [ r3 , hexvar ] ldr r2 , [ r3 , hexvar ] add r1 , r1 , r2 ldr r4 , [ r3 , hexvar ] cmp r1 , r4 movlo r4 , r1 cmp r6 , num cmpne r4 , num bne hexvar cmp r5 , num strne r4 , [ r5 ] mov r0 , r7 pop { r4 , r5 , r6 , r7 , r8 , pc }
push rbx cmp esi , hexvar jne hexvar mov rbx , rcx test rcx , rcx je hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov edi , dword ptr [ rip + hexvar ] test edi , edi jne hexvar call hexvar mov edi , eax mov dword ptr [ rip + hexvar ] , eax mov ecx , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rbx ret
addiu sp , sp , - hexvar sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) andi v0 , v0 , hexvar andi v0 , v0 , hexvar sb v0 , num ( fp ) lw v0 , hexvar ( fp ) srl v0 , v0 , num sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) beqz v0 , hexvar nop lbu v1 , num ( fp ) addiu v0 , zero , - hexvar or v0 , v1 , v0 sb v0 , num ( fp ) lw v0 , hexvar ( fp ) addiu v1 , v0 , num sw v1 , hexvar ( fp ) lbu v1 , num ( fp ) sb v1 , ( v0 ) lw v0 , hexvar ( fp ) bnez v0 , hexvar nop lw v0 , hexvar ( fp ) move sp , fp lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop bnez v0 , hexvar lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a0 , hexvar jal hexvar addiu a0 , a0 , - hexvar
push rbp push r14 push rbx mov ebp , edx mov r14 , rsi mov rbx , rdi mov esi , hexvar mov ecx , hexvar xor eax , eax call hexvar add ebp , num mov esi , hexvar mov ecx , hexvar mov rdi , rbx mov edx , ebp xor eax , eax call hexvar mov rax , qword ptr [ r14 ] mov rsi , qword ptr [ rax ] mov rdi , rbx call hexvar mov esi , hexvar mov ecx , hexvar mov rdi , rbx mov edx , ebp xor eax , eax call hexvar mov rsi , qword ptr [ r14 + num ] mov rdi , rbx mov edx , num call hexvar mov esi , hexvar mov ecx , hexvar mov rdi , rbx mov edx , ebp xor eax , eax call hexvar mov rsi , qword ptr [ r14 + hexvar ] mov rdi , rbx mov edx , num call hexvar mov esi , hexvar mov ecx , hexvar mov rdi , rbx mov edx , ebp xor eax , eax call hexvar mov rsi , qword ptr [ r14 + hexvar ] mov rdi , rbx call hexvar mov esi , hexvar mov rdi , rbx xor eax , eax pop rbx pop r14 pop rbp jmp hexvar nop word ptr [ rax + rax ]
push ebp mov ebp , esp push ebx push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx ] , ecx mov bl , num and bl , num movzx ecx , bl mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw zero , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax test byte ptr [ hexvar ] , num je hexvar cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] xor eax , hexvar mov ecx , hexvar mov edx , ecx xor edx , hexvar xor ecx , hexvar or eax , edx or ecx , hexvar xor eax , hexvar and eax , ecx mov dword ptr [ ebp + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] xor ecx , num or ecx , eax sete dl mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar movss xmm0 , dword ptr [ hexvar ] mov eax , dword ptr [ ebp - hexvar ] movss dword ptr [ eax + hexvar ] , xmm0 jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] xor ecx , num or ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar jmp hexvar movss xmm0 , dword ptr [ hexvar ] mov eax , dword ptr [ ebp - hexvar ] movss dword ptr [ eax + hexvar ] , xmm0 jmp hexvar movss xmm0 , dword ptr [ hexvar ] mov eax , dword ptr [ ebp - hexvar ] movss dword ptr [ eax + hexvar ] , xmm0 jmp hexvar jmp hexvar mov byte ptr [ ebp - hexvar ] , num jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax ] add ecx , - num mov dword ptr [ eax ] , ecx mov byte ptr [ ebp - hexvar ] , num jmp hexvar mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp push rbx mov rbp , rsi lea rsi , [ rip + hexvar ] mov rbx , rdi sub rsp , hexvar lea rdx , [ rsp + num ] mov dword ptr [ rsp + num ] , num mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax call hexvar mov eax , dword ptr [ rsp + num ] test eax , eax je hexvar xor eax , eax mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp ret
ldr r2 , [ r0 , num ] ldr r3 , [ r1 , num ] cmp r2 , r3 beq hexvar mov r0 , num bx lr ldr r3 , [ r0 , num ] ldr r2 , [ r1 , num ] eor r3 , r3 , r2 bics r3 , r3 , hexvar bne hexvar ldr r2 , [ r0 , hexvar ] ldr r3 , [ r1 , hexvar ] cmp r2 , r3 beq hexvar mov r0 , num bx lr ldr r2 , [ r0 , hexvar ] ldr r3 , [ r1 , hexvar ] cmp r2 , r3 beq hexvar mov r0 , num bx lr ldr r0 , [ r0 , hexvar ] ldr r3 , [ r1 , hexvar ] cmp r0 , r3 movne r0 , num moveq r0 , num bx lr mov r0 , num bx lr
push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r0 mov r7 , r1 mov r8 , r2 mov r6 , r3 bl hexvar mov r4 , r0 mov r2 , r8 mov r1 , r7 mov r0 , r5 bl hexvar str r0 , [ r4 ] str r6 , [ r4 , num ] ldr r1 , [ sp , hexvar ] mov r0 , r5 bl hexvar str r0 , [ r4 , num ] pop { r4 , r5 , r6 , r7 , r8 , pc }
lwl a1 , num ( a0 ) lbu a2 , num ( a0 ) lbu a3 , num ( a0 ) lbu v0 , num ( a0 ) lwr a1 , num ( a0 ) lbu v1 , ( a0 ) wsbh a0 , a1 rotr a0 , a0 , hexvar sll a1 , a0 , num srl a0 , a0 , hexvar or a3 , a3 , a1 sll a1 , a3 , num sll a0 , a0 , num srl a3 , a3 , hexvar or a1 , a2 , a1 or a0 , a3 , a0 sll a2 , a1 , num sll a0 , a0 , num srl a1 , a1 , hexvar or v0 , v0 , a2 or a0 , a1 , a0 sll a0 , a0 , num sll a1 , v0 , num srl v0 , v0 , hexvar or v1 , v1 , a1 jr ra or v0 , v0 , a0
push rbp push r15 push r14 push r13 push r12 push rbx push rax test rdi , rdi je hexvar mov r14 , rsi test rsi , rsi je hexvar mov r15 , rdi mov r12d , dword ptr [ rdi + hexvar ] mov r13d , hexvar cmp r12d , hexvar ja hexvar mov rbx , rdx mov rax , qword ptr [ r15 ] not rax mov r13d , hexvar cmp rax , rdx jb hexvar xor r13d , r13d test rbx , rbx je hexvar lea rax , [ r15 + hexvar ] mov qword ptr [ rsp ] , rax cmp rbx , hexvar jae hexvar jmp hexvar nop dword ptr [ rax + rax ] mov r12d , dword ptr [ r15 + hexvar ] cmp rbx , hexvar jb hexvar test r12d , r12d jne hexvar mov rdi , r15 mov rsi , r14 call hexvar add qword ptr [ r15 ] , hexvar add r14 , hexvar add rbx , - hexvar test rbx , rbx jne hexvar jmp hexvar mov ebp , hexvar sub ebp , r12d cmp rbx , rbp cmovb rbp , rbx mov eax , r12d lea rdi , [ r15 + rax ] add rdi , hexvar mov rsi , r14 mov rdx , rbp call hexvar lea eax , [ r12 + rbp ] mov dword ptr [ r15 + hexvar ] , eax add r14 , rbp sub rbx , rbp cmp eax , hexvar jne hexvar mov rdi , r15 mov rsi , qword ptr [ rsp ] call hexvar add qword ptr [ r15 ] , hexvar mov dword ptr [ r15 + hexvar ] , num test rbx , rbx jne hexvar mov eax , r13d add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) move s3 , a0 sw s2 , hexvar ( sp ) move s2 , a1 sw s1 , hexvar ( sp ) move s1 , a2 sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) addiu a2 , zero , num addiu a1 , zero , hexvar move a3 , s2 move a0 , v0 jalr t9 move s0 , v0 blez v0 , hexvar lw gp , hexvar ( sp ) addiu v0 , zero , num beq s1 , v0 , hexvar addiu v0 , zero , num beq s1 , v0 , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , zero , hexvar addiu a3 , a3 , - hexvar addiu v0 , zero , hexvar addiu a1 , zero , hexvar sw v0 , hexvar ( sp ) addiu a0 , zero , hexvar jalr t9 move s1 , zero lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , s0 move v0 , s1 lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) addiu v0 , zero , hexvar addiu a3 , a3 , - hexvar addiu a2 , zero , num sw v0 , hexvar ( sp ) addiu a1 , zero , hexvar addiu a0 , zero , hexvar jalr t9 move s1 , zero lw ra , hexvar ( sp ) move v0 , s1 lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) move a1 , zero jalr t9 move a0 , s0 addiu a2 , zero , hexvar lw gp , hexvar ( sp ) move s2 , v0 beqz s2 , hexvar lw t9 , - hexvar ( gp )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar cmp dword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] xorps xmm0 , xmm0 movsd qword ptr [ rax + hexvar ] , xmm0 mov rax , qword ptr [ rbp - num ] movsd qword ptr [ rax + hexvar ] , xmm0 mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar call hexvar mov rax , qword ptr [ rbp - num ] movsd qword ptr [ rax + hexvar ] , xmm0 call hexvar mov rax , qword ptr [ rbp - num ] movsd qword ptr [ rax ] , xmm0 mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num add rsp , hexvar pop rbp ret
mov eax , dword ptr [ esp + num ] mov ecx , dword ptr [ eax + hexvar ] test ecx , ecx je hexvar mov edx , dword ptr [ esp + num ] mov eax , ebp call hexvar mov eax , dword ptr [ esp + num ] cmp dword ptr [ eax + hexvar ] , num je hexvar mov esi , dword ptr [ ebp + hexvar ] cmp esi , hexvar jbe hexvar mov byte ptr [ ebp + esi ] , num push edi push dword ptr [ ebp + hexvar ] push esi xor esi , esi push ebp call dword ptr [ ebp + hexvar ] add dword ptr [ ebp + hexvar ] , num mov dword ptr [ ebp + hexvar ] , num add esp , hexvar lea edi , [ ebx - hexvar ] lea eax , [ edi + num ] mov dword ptr [ esp + hexvar ] , eax jmp hexvar sub esp , num mov byte ptr [ ebp + hexvar ] , num push dword ptr [ ebp + hexvar ] push hexvar push ebp mov esi , num call dword ptr [ ebp + hexvar ] add dword ptr [ ebp + hexvar ] , num add esp , hexvar xor eax , eax add edi , num cmp dword ptr [ esp + hexvar ] , edi mov dword ptr [ ebp + hexvar ] , esi mov byte ptr [ ebp + eax ] , bl mov byte ptr [ ebp + hexvar ] , bl je hexvar cmp esi , hexvar movzx ebx , byte ptr [ edi ] je hexvar mov eax , esi add esi , num jmp hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] call hexvar mov word ptr [ rbp - hexvar ] , ax movsx eax , word ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , ( v0 )
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] sub edx , - num sbb esi , - num setb bl and bl , num movzx edi , bl mov dword ptr [ ebp - hexvar ] , eax mov eax , edi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ebp + hexvar ] , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx jae hexvar mov dword ptr [ ebp - num ] , num jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx ] , ecx mov dword ptr [ edx + num ] , hexvar mov dword ptr [ edx + num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] cmp ecx , eax jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar cmp eax , num jne hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar xor ecx , ecx cmp ecx , eax je hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
ldr r3 , [ r1 , hexvar ] ldr r2 , [ r0 , hexvar ] cmp r3 , num cmpne r3 , num moveq r3 , num movne r3 , num cmp r2 , num cmpne r2 , num beq hexvar ldr r2 , [ r0 , hexvar ] cmp r3 , num and r2 , r2 , hexvar beq hexvar cmp r2 , hexvar beq hexvar mov r0 , num bx lr cmp r3 , num bne hexvar ldr r3 , [ r1 , hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar beq hexvar mvn r0 , num bx lr ldr r3 , [ r1 , hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar beq hexvar cmp r2 , hexvar beq hexvar push { r4 , r5 , r6 , lr } mov r4 , r1 mov r5 , r0 mov r1 , hexvar ldr r0 , [ r0 ] bl hexvar mov r1 , hexvar mov r6 , r0 ldr r0 , [ r4 ] bl hexvar ldr r3 , [ pc , hexvar ] cmp r0 , num movne r1 , r0 moveq r1 , r3 cmp r6 , num movne r0 , r6 moveq r0 , r3 bl hexvar cmp r0 , num popne { r4 , r5 , r6 , pc } adcseq sp , r2 , r1 andeq r0 , r0 , r0
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar lui v0 , hexvar sw fp , hexvar ( sp ) lw fp , - hexvar ( gp ) lw v0 , - hexvar ( v0 ) sw s6 , hexvar ( sp ) move s6 , a0 sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v1 , ( fp ) sw v1 , hexvar ( sp ) bnez v0 , hexvar lui v0 , hexvar lw v0 , - hexvar ( v0 ) beqz v0 , hexvar nop lw s0 , hexvar ( a0 )
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov ax , word ptr [ rsi + hexvar ] mov cx , hexvar xor cx , hexvar mov dx , ax xor dx , cx and dx , ax movzx r8d , dx cmp r8d , num jne hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov cx , word ptr [ rax + hexvar ] xor cx , hexvar mov dx , hexvar mov si , dx xor si , hexvar xor dx , hexvar or cx , si or dx , hexvar xor cx , hexvar and cx , dx movzx edi , cx cmp edi , num je hexvar mov rax , qword ptr [ rbp - num ] mov cx , word ptr [ rax + hexvar ] and cx , hexvar movzx edx , cx cmp edx , num jne hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov ecx , dword ptr [ rax + hexvar ] shr ecx , num and ecx , num cmp ecx , num jne hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov ecx , dword ptr [ rax + hexvar ] and ecx , hexvar cmp ecx , num jne hexvar movabs rax , hexvar add rax , hexvar mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov byte ptr [ rax + hexvar ] , hexvar mov eax , num pop rbp ret
push { r4 , r5 , r6 , lr } ldr r4 , [ pc , hexvar ] ldr r3 , [ r4 , num ] ldr r0 , [ r4 , hexvar ] add r3 , r3 , num lsrs r2 , r3 , hexvar movne r5 , num moveq r5 , num lsls r1 , r3 , num str r3 , [ r4 , num ] bmi hexvar cmp r5 , num bne hexvar bl hexvar mov r6 , r0 ldr r0 , [ r4 , hexvar ] ldr r3 , [ r4 , num ] lsrs r2 , r0 , hexvar movne r5 , num lsls r0 , r0 , num str r6 , [ r4 , hexvar ] sub r4 , r3 , hexvar bmi hexvar cmp r5 , num bne hexvar bl hexvar str r0 , [ r6 , r4 , lsl num ] pop { r4 , r5 , r6 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , num mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , hexvar mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push rbp push rbx push rax test rdi , rdi je hexvar mov ebp , esi mov rbx , rdi call hexvar mov ecx , eax xor eax , eax test ebp , ebp js hexvar cmp ecx , ebp jle hexvar mov rdi , rbx mov esi , ebp call hexvar add rsp , num pop rbx pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) move a3 , a1 move a2 , a0 lui a1 , hexvar addiu a1 , a1 , - hexvar lw a0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldr r0 , [ r3 , hexvar ] ldr r3 , [ fp , - hexvar ] ldr r1 , [ r3 , hexvar ] ldr r3 , [ fp , - hexvar ] ldrb r2 , [ r3 , hexvar ] ldr r3 , [ fp , - num ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] bl hexvar mov r3 , num mov r0 , r3 sub sp , fp , num pop { fp , pc }
push rbp mov rbp , rsp mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi cmp dword ptr [ rbp - num ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] movzx ecx , byte ptr [ rax + num ] mov dx , cx movzx ecx , dx shl ecx , num mov dx , cx mov word ptr [ rbp - hexvar ] , dx mov rax , qword ptr [ rbp - hexvar ] movzx ecx , byte ptr [ rax ] mov dx , cx movzx ecx , dx movzx esi , word ptr [ rbp - hexvar ] or esi , ecx mov dx , si mov word ptr [ rbp - hexvar ] , dx movzx ecx , word ptr [ rbp - hexvar ] and ecx , hexvar mov dx , cx mov word ptr [ rbp - num ] , dx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx ecx , byte ptr [ rax ] mov dx , cx movzx ecx , dx shl ecx , num mov dx , cx mov word ptr [ rbp - hexvar ] , dx mov rax , qword ptr [ rbp - hexvar ] movzx ecx , byte ptr [ rax + num ] mov dx , cx movzx ecx , dx movzx esi , word ptr [ rbp - hexvar ] or esi , ecx mov dx , si mov word ptr [ rbp - hexvar ] , dx movzx ecx , word ptr [ rbp - hexvar ] and ecx , hexvar mov dx , cx mov word ptr [ rbp - num ] , dx movzx eax , word ptr [ rbp - num ] pop rbp ret
push rbp push r14 push rbx mov r14 , rsi mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx + hexvar ] , num mov rdi , rbx mov rsi , r14 call hexvar test eax , eax je hexvar cmp qword ptr [ r14 + hexvar ] , num je hexvar call hexvar mov qword ptr [ rbx + hexvar ] , rax test rax , rax je hexvar mov rsi , qword ptr [ r14 + hexvar ] mov rdi , rax call hexvar test rax , rax je hexvar mov rdi , qword ptr [ r14 + hexvar ] mov ebp , num test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx + hexvar ] , rax test rax , rax jne hexvar mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx + hexvar ] , num xor ebp , ebp mov eax , ebp pop rbx pop r14 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 mov dword ptr [ rbp - hexvar ] , esi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] movsd xmm0 , qword ptr [ rbp - hexvar ] mov esi , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] add rax , hexvar mov rdi , rax call hexvar nop leave ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar movss xmm0 , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] movss dword ptr [ eax + hexvar ] , xmm0 mov bl , num and bl , num movzx eax , bl add esp , hexvar pop esi pop ebx pop ebp ret
mov rcx , qword ptr [ rdi ] xor eax , eax test rcx , rcx je hexvar nop word ptr [ rax + rax ] add eax , num mov rcx , qword ptr [ rcx + hexvar ] test rcx , rcx jne hexvar ret
push rbp push r15 push r14 push rbx push rax mov r14d , edx mov rbp , rsi mov r15 , rdi call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax mov rsi , rbp call hexvar test eax , eax je hexvar mov rdi , r15 mov rsi , rbx mov edx , r14d xor ecx , ecx call hexvar mov ebp , eax mov rdi , rbx call hexvar mov eax , ebp jmp hexvar xor eax , eax add rsp , num pop rbx pop r14 pop r15 pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lui a0 , hexvar lui v1 , hexvar lw a1 , hexvar ( a0 ) addiu v1 , v1 , hexvar bne a1 , v1 , hexvar lw ra , hexvar ( sp ) sw v0 , hexvar ( a0 ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
cmp r0 , hexvar mov r3 , r0 push { r4 , lr } mov r0 , r2 mov r1 , num ldrlo r2 , [ pc , hexvar ] ldrhs r2 , [ pc , hexvar ] bl hexvar mvn r0 , num pop { r4 , pc }
addiu sp , sp , - hexvar lui gp , hexvar addiu v0 , zero , num sw s2 , hexvar ( sp ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw s2 , hexvar ( a0 )
push rbx mov ebx , esi call hexvar test rax , rax je hexvar add rax , hexvar mov rdi , rax mov esi , ebx pop rbx jmp hexvar xor eax , eax pop rbx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - num ] , eax call hexvar mov byte ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar jmp hexvar call hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar jmp hexvar add esp , hexvar pop ebp ret
push r15 push r14 mov r14 , rcx push r13 push r12 mov r13 , r9 push rbp push rbx mov rbp , rdx mov r12 , rdi sub rsp , hexvar mov rbx , qword ptr [ rsi ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , r8 mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rsp + hexvar ] , rax call hexvar mov edx , dword ptr [ r13 ] mov r15 , rax test edx , edx je hexvar test rax , rax je hexvar lea rax , [ rsp + hexvar ] mov qword ptr [ rsp + num ] , rax jmp hexvar nop dword ptr [ rax + rax ] cmp al , num jne hexvar cmp qword ptr [ rsp + hexvar ] , num jne hexvar mov rax , qword ptr [ rbx + hexvar ] mov r8 , qword ptr [ rsp + hexvar ] mov rcx , r14 mov rsi , qword ptr [ rsp + hexvar ] mov r9 , r13 mov rdx , rbp mov rdi , r12 mov qword ptr [ rsp + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rbx + hexvar ] , rax call hexvar mov rcx , rax mov eax , dword ptr [ r13 ] test eax , eax je hexvar test rcx , rcx je hexvar mov rax , qword ptr [ rsp + hexvar ] or qword ptr [ rbx + hexvar ] , rax pxor xmm0 , xmm0 mov r8 , qword ptr [ rsp + num ] lea rsi , [ rbx + hexvar ] lea rdi , [ rbx + hexvar ] mov rdx , r15 movaps xmmword ptr [ rsp + hexvar ] , xmm0 mov byte ptr [ rsp + hexvar ] , hexvar call hexvar test rax , rax mov r15 , rax je hexvar cmp byte ptr [ rbp + num ] , hexvar jne hexvar mov rdx , r14 mov rsi , r12 mov rdi , rbp or rdx , hexvar call hexvar cdqe add qword ptr [ r12 + hexvar ] , rax movzx eax , byte ptr [ rbp + num ] mov edx , eax and edx , hexvar cmp dl , num jne hexvar xor ecx , ecx jmp hexvar test r15 , r15 je hexvar lea rsi , [ rip - hexvar ] xor edx , edx mov rdi , r15 call hexvar xor r15d , r15d nop mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov rax , r15 jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rdi mov qword ptr [ rsp + num ] , rsi lea rdx , [ rsp + num ] mov esi , hexvar mov edi , num call hexvar add rsp , hexvar ret
push rbx mov rbx , rdi cmp dword ptr [ rip + hexvar ] , num je hexvar mov esi , hexvar mov rdi , rbx call hexvar mov rdx , rax mov eax , num test rdx , rdx je hexvar mov qword ptr [ rbx + hexvar ] , rdx mov qword ptr [ rdx ] , num mov qword ptr [ rdx + num ] , num mov eax , num pop rbx ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov edx , dword ptr [ rbp - num ] mov dword ptr [ rcx ] , edx mov esi , dword ptr [ rcx ] mov qword ptr [ rbp - hexvar ] , rax mov dword ptr [ rbp - hexvar ] , esi mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax mov edx , ecx sub eax , num mov qword ptr [ rbp - hexvar ] , rdx mov dword ptr [ rbp - hexvar ] , eax ja hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax * num + hexvar ] jmp rcx movabs rax , hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax jmp hexvar movabs rax , hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax jmp hexvar movabs rax , hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax jmp hexvar movabs rax , hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax jmp hexvar movabs rax , hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax jmp hexvar movabs rax , hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsp , rbp pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar add esp , num pop ebx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] call hexvar movsxd rcx , eax mov qword ptr [ rbp - hexvar ] , rcx jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] call hexvar movsxd rcx , eax mov qword ptr [ rbp - hexvar ] , rcx mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jge hexvar mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] sub rcx , num mov byte ptr [ rax + rcx ] , num mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar lea eax , [ ebx + hexvar ] mov byte ptr [ eax + hexvar ] , num push dword ptr [ esp + hexvar ] mov ecx , num mov edx , dword ptr [ esp + hexvar ] mov eax , num call hexvar call hexvar
push rbp push rbx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax lea rax , [ rsp + hexvar ] test rdi , rdi mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + num ] , rax lea rax , [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 mov dword ptr [ rsp ] , num mov qword ptr [ rsp + hexvar ] , rax je hexvar mov rbp , rax xor ebx , ebx nop dword ptr [ rax ] call hexvar add rbx , rax mov eax , dword ptr [ rsp ] cmp eax , hexvar ja hexvar mov edx , eax add eax , num add rdx , rbp mov dword ptr [ rsp ] , eax mov rdi , qword ptr [ rdx ] test rdi , rdi jne hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov rax , rbx jne hexvar add rsp , hexvar pop rbx pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov dword ptr [ ebp - num ] , hexvar mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar call hexvar mov dword ptr [ ebp - num ] , eax cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar add esp , hexvar pop ebp ret
mov edx , dword ptr [ edi + hexvar ] test edx , edx je hexvar cmp edx , esi jbe hexvar cmp dword ptr [ esp ] , num je hexvar mov ecx , esi mov esi , edx mov edx , dword ptr [ esp + num ] mov dword ptr [ esp + hexvar ] , edi mov edi , dword ptr [ esp ] sub edi , num add ebp , num movzx eax , byte ptr [ ebp - num ] shl eax , cl add edx , eax add ecx , num cmp esi , ecx jbe hexvar test edi , edi jne hexvar mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , edx mov esi , ecx mov edi , dword ptr [ esp + hexvar ] jmp hexvar mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , edx mov edx , esi mov esi , ecx mov edi , dword ptr [ esp + hexvar ] mov eax , hexvar mov ecx , edx shl eax , cl not eax mov ecx , dword ptr [ esp + num ] and eax , ecx add dword ptr [ edi + hexvar ] , eax mov eax , ecx mov ecx , edx shr eax , cl mov dword ptr [ esp + num ] , eax sub esi , edx add dword ptr [ edi + hexvar ] , edx mov eax , dword ptr [ edi + hexvar ] mov dword ptr [ edi + hexvar ] , eax mov dword ptr [ edi + num ] , hexvar
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , num mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ hexvar ] cmp eax , num mov cl , num mov byte ptr [ ebp - hexvar ] , cl jne hexvar mov eax , dword ptr [ hexvar ] cmp eax , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar test byte ptr [ hexvar ] , num je hexvar call hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx cmp dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax je hexvar mov eax , dword ptr [ ebp - num ] sub eax , num mov dword ptr [ hexvar ] , eax mov dword ptr [ ebp - num ] , hexvar jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx sub esp , num call hexvar add ebx , hexvar movzx eax , byte ptr [ ebx + hexvar ] test al , al je hexvar call hexvar jmp hexvar mov eax , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ eax ] sub esp , hexvar push eax call hexvar add esp , hexvar test eax , eax je hexvar sub esp , hexvar push num call hexvar nop mov ebx , dword ptr [ ebp - num ] leave ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , num pop ebp ret
push rbp push rbx sub rsp , num mov rbx , rdi mov rbp , rsi test dl , dl jne hexvar mov rcx , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rsi ] mov rsi , rdi lea rdi , [ rip + hexvar ] call hexvar mov rdx , qword ptr [ rbp + num ] lea rsi , [ rbx + hexvar ] mov rcx , qword ptr [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar add rsp , num pop rbx pop rbp ret
push rbp push rbx sub rsp , hexvar mov rbx , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax cmp esi , num je hexvar mov edi , esi and edi , num mov rsi , rbx call hexvar mov rbx , rax mov rax , rbx mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp ret
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) addiu gp , gp , hexvar lw s0 , hexvar ( a0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw s0 , ( a1 )
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] ldr r2 , [ sp ] mov r1 , num ldr r0 , [ sp , num ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r0 , [ sp ] bl hexvar ldr r3 , [ sp , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ hexvar ] sub edx , num mov ecx , dword ptr [ ecx + edx * num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu v0 , zero , num sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) beq a0 , v0 , hexvar sw gp , hexvar ( sp ) addiu s0 , zero , num beq a0 , s0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 addiu a0 , zero , hexvar beq v0 , s0 , hexvar addiu a0 , zero , num slt v1 , zero , v0 movz v0 , a0 , v1 lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 addiu a0 , a0 , - hexvar beqz v0 , hexvar lw gp , hexvar ( sp ) jal hexvar move a0 , v0 lui a0 , hexvar lw gp , hexvar ( sp ) move s1 , v0 lw t9 , - hexvar ( gp )
push ebp mov ebp , esp push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ eax + hexvar ] call hexvar mov eax , dword ptr [ eax ] sub esp , num push esi push eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar sub esp , hexvar push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar nop lea esp , [ ebp - num ] pop ebx pop esi pop ebp ret
push r13 push r12 push rbp push rbx sub rsp , num mov rbx , rdi mov r12 , rsi mov edx , dword ptr [ rdi + hexvar ] cmp edx , hexvar sbb rbp , rbp and rbp , hexvar add rbp , hexvar mov eax , edx add eax , dword ptr [ rdi + hexvar ] mov dword ptr [ rdi + hexvar ] , eax cmp eax , edx jae hexvar add dword ptr [ rdi + hexvar ] , num mov ecx , dword ptr [ rbx + hexvar ] shl ecx , num mov esi , eax shr esi , hexvar or ecx , esi bswap ecx shl rbp , num lea rsi , [ rbx + rbp ] mov dword ptr [ rsi + hexvar ] , ecx shl eax , num bswap eax mov dword ptr [ rsi + hexvar ] , eax mov edx , edx lea r13 , [ rbx + hexvar ] lea rdi , [ r13 + rdx ] mov rax , rbp sub rax , rdx lea rdx , [ rax - num ] lea rsi , [ rip + hexvar ] call hexvar mov rdx , rbx mov rsi , rbp mov rdi , r13 call hexvar mov rsi , r12 mov rdi , rbx call hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret
cmp rdx , rdi jbe hexvar movzx r8d , byte ptr [ rdi ] lea rcx , [ rdi + num ] mov rax , r8 and eax , hexvar test r8b , r8b jns hexvar cmp rdx , rcx jbe hexvar movzx r8d , byte ptr [ rdi + num ] lea r9 , [ rdi + num ] mov rcx , r8 and ecx , hexvar shl rcx , num or rax , rcx test r8b , r8b jns hexvar cmp rdx , r9 jbe hexvar movzx r8d , byte ptr [ rdi + num ] lea r9 , [ rdi + num ] mov rcx , r8 and ecx , hexvar shl rcx , hexvar or rax , rcx test r8b , r8b jns hexvar cmp rdx , r9 jbe hexvar movzx r8d , byte ptr [ rdi + num ] lea r9 , [ rdi + num ] mov rcx , r8 and ecx , hexvar shl rcx , hexvar or rax , rcx test r8b , r8b jns hexvar cmp rdx , r9 jbe hexvar movzx r8d , byte ptr [ rdi + num ] lea r9 , [ rdi + num ] mov rcx , r8 and ecx , hexvar shl rcx , hexvar or rax , rcx test r8b , r8b jns hexvar cmp rdx , r9 jbe hexvar movzx r8d , byte ptr [ rdi + num ] lea r9 , [ rdi + num ] mov rcx , r8 and ecx , hexvar shl rcx , hexvar or rax , rcx test r8b , r8b jns hexvar cmp rdx , r9 jbe hexvar movzx r8d , byte ptr [ rdi + num ] lea r9 , [ rdi + num ] mov rcx , r8 and ecx , hexvar shl rcx , hexvar or rax , rcx test r8b , r8b jns hexvar cmp rdx , r9 jbe hexvar movzx r8d , byte ptr [ rdi + num ] lea r9 , [ rdi + num ] mov rcx , r8 and ecx , hexvar shl rcx , hexvar or rax , rcx test r8b , r8b jns hexvar cmp rdx , r9 jbe hexvar movzx r8d , byte ptr [ rdi + num ] lea r9 , [ rdi + num ] mov rcx , r8 and ecx , hexvar shl rcx , hexvar or rax , rcx test r8b , r8b jns hexvar cmp rdx , r9 jbe hexvar movzx edx , byte ptr [ rdi + num ] mov rcx , rdx shl rcx , hexvar or rax , rcx test rsi , rsi je hexvar mov dword ptr [ rsi ] , hexvar ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax + hexvar ] call hexvar add esp , hexvar pop ebx ret
push { fp , lr } add fp , sp , num sub sp , sp , num str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] mov r2 , num ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - num ] bl hexvar mov r3 , r0 mov r0 , r3 sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov eax , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov edx , ecx cmp eax , edx jge hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] movsxd rdx , dword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rcx + rdx * num ] mov rdi , rax call hexvar add rsp , hexvar pop rbp ret
push ebp push edi xor eax , eax push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar cmp byte ptr [ esp + hexvar ] , num mov ebp , dword ptr [ esp + hexvar ] setne al mov edi , eax mov eax , dword ptr [ ebx + hexvar ] shl edi , num test eax , eax je hexvar xor esi , esi jmp hexvar nop lea esi , [ esi ] add esi , num cmp dword ptr [ ebx + hexvar ] , esi jbe hexvar mov eax , dword ptr [ ebx + hexvar ] sub esp , num push edi push dword ptr [ eax + esi * num ] push ebp call hexvar add esp , hexvar test eax , eax jne hexvar add esp , hexvar mov eax , num pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push r12 push rbp push rbx mov ebp , edi mov rdx , qword ptr [ rip + hexvar ] test rdx , rdx je hexvar mov rcx , qword ptr [ rip + hexvar ] cmp dword ptr [ rcx ] , num je hexvar mov ebx , num add ebx , num mov esi , ebx cmp rsi , rdx jae hexvar lea rax , [ rcx + rsi * num ] cmp dword ptr [ rax ] , num jne hexvar jmp hexvar mov r12 , rsi cmp rsi , rdx jne hexvar jmp hexvar mov rax , r12 shr rax , num lea rsi , [ r12 + rax + num ] jmp hexvar mov r12 , rsi jmp hexvar mov r12d , num mov ebx , num mov esi , hexvar mov qword ptr [ rip + hexvar ] , rsi shl rsi , num call hexvar mov qword ptr [ rip + hexvar ] , rax mov edx , ebx mov rsi , qword ptr [ rip + hexvar ] cmp rdx , rsi jae hexvar mov ecx , ebx mov dword ptr [ rax + rdx * num ] , num add ecx , num mov edx , ecx cmp rdx , rsi jb hexvar mov rax , qword ptr [ rip + hexvar ] lea rax , [ rax + r12 * num ] cmp dword ptr [ rax ] , num je hexvar mov ecx , hexvar mov edx , hexvar mov esi , hexvar mov edi , hexvar call hexvar cmp rsi , rdx jne hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar mov r12 , rsi jmp hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar mov r12d , num mov ebx , num jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov ebx , num mov dword ptr [ rax ] , ebp add qword ptr [ rip + hexvar ] , num mov byte ptr [ rip + hexvar ] , num mov eax , ebx pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num jne hexvar call hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] push esi push dword ptr [ esp + hexvar ] call hexvar mov dword ptr [ esp + hexvar ] , eax add esp , hexvar test byte ptr [ esi + hexvar ] , hexvar je hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov byte ptr [ eax + num ] , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax ] , num add esp , num pop ebp ret
push r14 push r13 push r12 push rbp push rbx mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar cmp dword ptr [ rax + hexvar ] , esi mov r12d , esi je hexvar cmp esi , num mov rbp , rdi je hexvar jb hexvar cmp esi , num je hexvar cmp esi , num jne hexvar lea r14 , [ rip + hexvar ] mov rbx , qword ptr [ rax + num ] mov rdi , rbx call hexvar sub eax , num add rbx , rax cmp byte ptr [ rbx ] , hexvar jne hexvar lea r13 , [ rbp + hexvar ] mov byte ptr [ rbx ] , num mov rsi , r14 mov rdi , r13 call hexvar test eax , eax jne hexvar xor eax , eax pop rbx pop rbp pop r12 pop r13 pop r14 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dl , byte ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dh , byte ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ebx movsx ebx , dh mov dword ptr [ esp + num ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ebx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , dl mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi call hexvar call hexvar nop word ptr cs : [ eax + eax ] nop dword ptr [ eax + eax ]
push rbp push rbx mov rbp , rdx sub rsp , hexvar cmp byte ptr [ rdi ] , hexvar je hexvar mov byte ptr [ rcx ] , num mov qword ptr [ rsi ] , rdi fldz xor r9d , r9d xor r8d , r8d xor ebx , ebx mov r10d , num fld st ( num ) fld dword ptr [ rip + hexvar ] movsx eax , byte ptr [ rdi ] lea edx , [ rax - hexvar ] cmp dl , num jbe hexvar fstp st ( num ) fstp st ( num ) test r9b , r9b jne hexvar fstp xword ptr [ rsp ] movsxd rdx , dword ptr [ rip + hexvar ] mov rsi , qword ptr [ rip + hexvar ] mov qword ptr [ rsp + hexvar ] , rcx call hexvar mov edx , eax mov rcx , qword ptr [ rsp + hexvar ] mov eax , num test edx , edx fld xword ptr [ rsp ] jne hexvar cmp byte ptr [ rcx ] , num je hexvar fchs test rbp , rbp je hexvar fstp xword ptr [ rbp ] mov eax , ebx jmp hexvar nop dword ptr [ rax ] fstp st ( num ) add rsp , hexvar pop rbx pop rbp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax push dword ptr [ esi + num ] call hexvar mov dword ptr [ esp + hexvar ] , eax lea eax , [ ebx - hexvar ] mov dword ptr [ esp ] , eax call dword ptr [ ebx + hexvar ] add esp , hexvar test eax , eax jle hexvar mov edi , eax mov eax , dword ptr [ ebx + hexvar ] mov dword ptr [ esp + hexvar ] , eax sub esp , hexvar push dword ptr [ esi + num ] call hexvar mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esi + num ] mov ecx , dword ptr [ eax ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp ] , ebp call hexvar mov dword ptr [ esp + hexvar ] , eax mov edx , dword ptr [ ebp ] mov dword ptr [ esp + hexvar ] , edx add esp , num push dword ptr [ esi + hexvar ] call hexvar add esp , num lea edx , [ esp + hexvar ] push edx push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push eax mov eax , dword ptr [ esi + hexvar ] push dword ptr [ eax ] push edi mov eax , dword ptr [ esp + hexvar ] call eax add esp , hexvar test eax , eax jne hexvar sub esp , hexvar push edi call dword ptr [ ebx + hexvar ] add esp , num push dword ptr [ esp + hexvar ] call dword ptr [ ebx + hexvar ] add esp , hexvar mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num jl hexvar mov dword ptr [ ebp - num ] , num lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx mov edx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx call hexvar cmp dword ptr [ ebp - num ] , num je hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx cmp dword ptr [ ebp - num ] , num jge hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + ecx * num ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - num ] and eax , dword ptr [ ecx + edx * num ] mov dword ptr [ ecx + edx * num ] , eax mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , edi mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ebx mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ edx ] mov eax , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , hexvar lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
sub sp , sp , num str r0 , [ sp , num ] str r1 , [ sp ] ldr r3 , [ sp ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r2 , [ r3 ] ldr r3 , [ sp ] str r2 , [ r3 ] ldr r3 , [ sp , num ] ldr r3 , [ r3 ] cmp r3 , num ldrls pc , [ pc , r3 , lsl num ] b hexvar mulseq sb , r0 , r6 mulseq sb , ip , r6 mulseq sb , ip , r6 andseq sb , sb , r4 , lsl num andseq sb , sb , r8 , lsr num andseq sb , sb , r4 , lsl num mulseq sb , ip , r6 ldrheq sb , [ sb ] , -r4 andseq sb , sb , r0 , asr num ldr r3 , [ sp , num ] ldr r3 , [ r3 , num ] b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , num ] b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , num ] b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , num ] b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , num ] b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , num ] b hexvar mov r3 , num mov r0 , r3 add sp , sp , num bx lr
sub rsp , num mov rsi , qword ptr [ rip + hexvar ] mov edi , dword ptr [ rip + hexvar ] xor ecx , ecx mov edx , num call hexvar test eax , eax sete al add rsp , num ret
lea eax , [ rdi - hexvar ] cmp al , hexvar ja hexvar lea rdx , [ rip + hexvar ] movzx eax , al movsxd rax , dword ptr [ rdx + rax * num ] add rax , rdx jmp rax nop word ptr [ rax + rax ] mov eax , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov al , byte ptr [ rdi + num ] sub al , num sete cl movzx edx , cl mov edi , edx mov rdi , qword ptr [ rdi * num + hexvar ] mov byte ptr [ rbp - num ] , al jmp rdi mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + num ] bt ecx , hexvar setae dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax ] call hexvar mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov cl , byte ptr [ rax + num ] sub cl , num sete dl movzx esi , dl mov eax , esi mov rax , qword ptr [ rax * num + hexvar ] mov byte ptr [ rbp - hexvar ] , cl jmp rax mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + num ] bt ecx , hexvar setae dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax ] call hexvar mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - num ] , eax je hexvar jmp hexvar mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar test byte ptr [ ebp - num ] , num jne hexvar mov al , byte ptr [ ebp - num ] and al , num mov byte ptr [ ebp - num ] , al jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rax , qword ptr [ rdi + hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax mov qword ptr [ rsp + hexvar ] , rax je hexvar mov rax , qword ptr [ rsp + hexvar ] add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbp , rdi mov qword ptr [ rsp + hexvar ] , rdx mov rbx , rcx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax cmp esi , hexvar je hexvar mov eax , num cmp esi , hexvar jne hexvar lea rsi , [ rsp + hexvar ] lea rdi , [ rsp + hexvar ] mov rdx , rcx call hexvar test eax , eax je hexvar mov rdx , qword ptr [ rsp + hexvar ] movzx eax , byte ptr [ rdx ] test al , al je hexvar sub rbx , num cmp rdx , rbx jae hexvar lea r12 , [ rip + hexvar ] jmp hexvar mov rax , qword ptr [ rsp + hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rsp + hexvar ] , rdx add qword ptr [ rsp + hexvar ] , num movzx eax , byte ptr [ rax + num ] test al , al je hexvar cmp rdx , rbx jae hexvar movzx eax , al movzx eax , byte ptr [ r12 + rax ] shl eax , num movzx edx , byte ptr [ rdx + num ] movzx r13d , byte ptr [ r12 + rdx ] add r13d , eax je hexvar mov r14 , qword ptr [ rsp + hexvar ] mov edx , num mov rsi , r14 mov rdi , rbp call hexvar and r14d , hexvar mov byte ptr [ rax + r14 ] , r13b shr r14 , num mov byte ptr [ rax + r14 + hexvar ] , num jmp hexvar mov eax , num jmp hexvar mov eax , num jmp hexvar mov eax , num jmp hexvar mov eax , num jmp hexvar lea rdx , [ rsp + hexvar ] lea rsi , [ rsp + hexvar ] lea rdi , [ rsp + hexvar ] call hexvar test eax , eax jne hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , num mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar add esp , num pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , rsp add rax , - hexvar mov rsp , rax mov ecx , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - num ] , ecx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rsi mov edi , dword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov edi , dword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] movabs rcx , hexvar call hexvar mov rsp , rbp pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) lw a0 , hexvar ( a1 )
push r15 push r14 mov r15 , rdx push r13 push r12 mov r12 , rdi push rbp push rbx movsxd rbx , ecx lea edi , [ rbx + num ] mov r14d , r8d mov r13 , rsi sub rsp , hexvar movsxd rdi , edi call hexvar mov rdx , rbx mov rbp , rax mov rsi , r15 mov rdi , rax call hexvar xor edx , edx mov byte ptr [ rbp + rbx ] , num mov rsi , rbp mov rdi , r12 call hexvar test rax , rax mov qword ptr [ rsp + num ] , rax jne hexvar mov rbx , qword ptr [ r13 ] test rbx , rbx je hexvar movzx r15d , byte ptr [ rbp ] jmp hexvar nop dword ptr [ rax ] mov rbx , qword ptr [ rbx ] test rbx , rbx je hexvar mov rdi , qword ptr [ rbx + num ] cmp byte ptr [ rdi ] , r15b jne hexvar mov rsi , rbp call hexvar test eax , eax jne hexvar mov eax , dword ptr [ rbx + hexvar ] test eax , eax jne hexvar mov dword ptr [ rbx + hexvar ] , r14d mov rdi , rbp call hexvar mov rax , qword ptr [ rbx + hexvar ] add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) bnez v0 , hexvar nop lui v0 , hexvar addiu a1 , v0 , hexvar move a0 , zero lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lui v0 , hexvar addiu a1 , v0 , hexvar move a0 , zero lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push { r4 , r5 , r6 , r7 , lr } ldr r5 , [ pc , hexvar ] ldr r3 , [ r0 ] ldr r2 , [ r5 ] sub sp , sp , hexvar mov r4 , r0 str r2 , [ sp , num ] cmp r3 , num ldrls pc , [ pc , r3 , lsl num ] b hexvar strheq r4 , [ r1 ] , -ip strheq r4 , [ r1 ] , -ip andeq r4 , r1 , r0 , asr num andeq r4 , r1 , ip , lsr num ldrdeq r4 , r5 , [ r1 ] , -r8 ldr r6 , [ r0 , num ] cmp r6 , num beq hexvar bgt hexvar mov r0 , num ldr r2 , [ sp , num ] ldr r3 , [ r5 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc }
push r14 push rbx push rax mov rbx , rsi mov r14 , rdi mov rdi , rsi call hexvar mov rdi , r14 mov rsi , rbx mov edx , eax add rsp , num pop rbx pop r14 jmp hexvar nop word ptr cs : [ rax + rax ]
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 lw a0 , hexvar ( a0 )
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi jmp hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] xor ecx , ecx mov edx , ecx div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] imul rsi , qword ptr [ rbp - hexvar ] movabs rdi , hexvar sub rax , rdi sub rax , rsi add rax , rdi mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jae hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movabs rcx , hexvar sub rax , rcx add rax , num add rax , rcx mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] pop rbp ret
push { r4 , r5 , r6 , lr } mov r5 , r0 mov r6 , r1 bl hexvar subs r4 , r0 , num beq hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ r3 , hexvar ] cmp r2 , r6 movne r4 , num beq hexvar mov r0 , r4 pop { r4 , r5 , r6 , pc }
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] mvn r3 , num str r3 , [ sp , num ] mov r3 , num str r3 , [ sp ] ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 mov qword ptr [ rbp - hexvar ] , r9 mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] and eax , num cmp al , num je hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] and eax , num cmp al , num je hexvar mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] and eax , hexvar test eax , eax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax je hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax + hexvar ] and eax , hexvar lea edx , [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax + hexvar ] , dl mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax ] or al , hexvar mov edx , eax mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax ] , edx mov eax , num leave ret
push rbp push rbx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax lea rax , [ rsp + hexvar ] test rdi , rdi mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + num ] , rax lea rax , [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 mov dword ptr [ rsp ] , num mov qword ptr [ rsp + hexvar ] , rax je hexvar mov rbp , rax xor ebx , ebx nop dword ptr [ rax ] call hexvar add rbx , rax mov eax , dword ptr [ rsp ] cmp eax , hexvar ja hexvar mov edx , eax add eax , num add rdx , rbp mov dword ptr [ rsp ] , eax mov rdi , qword ptr [ rdx ] test rdi , rdi jne hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov rax , rbx jne hexvar add rsp , hexvar pop rbx pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) b hexvar nop lw v0 , hexvar ( fp ) addiu v0 , v0 , num sw v0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw v1 , ( v0 ) lw v0 , hexvar ( fp ) lb v0 , ( v0 ) sll v0 , v0 , num addu v0 , v1 , v0 lhu v0 , ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi call hexvar mov rax , qword ptr [ rip + hexvar ] neg rax mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rbp - num ] lea rdx , [ rip + hexvar ] lea rcx , [ rip + hexvar ] mov rsi , rcx mov rdi , rax call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rip + hexvar ] mov rsi , rdx mov rdi , rax call hexvar nop leave ret
push r12 push rbp push rbx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov edi , hexvar call hexvar test rax , rax jne hexvar jmp hexvar cmp byte ptr [ rax + hexvar ] , hexvar jne hexvar movzx edx , byte ptr [ rax + hexvar ] cmp dl , hexvar je hexvar test dl , dl je hexvar lea rdi , [ rax + hexvar ] mov esi , num call hexvar cmp ebx , eax cmovl ebx , eax mov r12d , num jmp hexvar mov rbp , rax mov r12d , num mov ebx , hexvar mov rdi , rbp call hexvar test rax , rax jne hexvar mov rdi , rbp call hexvar test r12d , r12d je hexvar mov eax , ebx test ebx , ebx jns hexvar mov edi , num call hexvar mov rbx , rax cmp rax , - num mov eax , hexvar cmove rbx , rax mov rsi , rsp mov edi , num call hexvar mov edx , eax mov eax , ebx test edx , edx jne hexvar mov rax , qword ptr [ rsp ] cmp rax , - num cmove eax , ebx mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) jal hexvar nop lw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) move v1 , v0 lw v0 , hexvar ( sp ) sw v1 , ( v0 )
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar move a2 , a0 sw s0 , hexvar ( sp ) move a0 , zero sw ra , hexvar ( sp ) move s0 , a1 sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar addiu a1 , zero , - num lw v1 , ( s0 )
mov r2 , r1 ldr r1 , [ r0 , hexvar ] ldr r3 , [ r2 , hexvar ] cmp r1 , r3 blt hexvar bgt hexvar ldr r3 , [ r0 , hexvar ] ldr r1 , [ r2 , hexvar ] subs r3 , r3 , r1 bne hexvar ldr r1 , [ r0 ] ldr r0 , [ r2 ] b hexvar mov r3 , num mov r0 , r3 bx lr mvn r3 , num b hexvar
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rdi ] mov edi , eax mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rdi + num ] mov edi , eax shl rdi , num or rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rdi + num ] mov edi , eax shl rdi , hexvar or rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rdi + num ] mov edi , eax shl rdi , hexvar or rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , ecx add edx , - hexvar sub edx , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jb hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , - hexvar sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax jb hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , - hexvar sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax ja hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , - hexvar ( gp ) sb zero , hexvar ( v0 ) lw a2 , hexvar ( fp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
cmp r0 , num bxeq lr push { r4 , lr } sub sp , sp , hexvar mov r4 , r1 bl hexvar mov r2 , num mov r3 , num str r4 , [ sp , num ] stm sp , { r2 , r3 } bl hexvar add sp , sp , hexvar pop { r4 , pc }
mov rcx , qword ptr [ rdi + hexvar ] mov rdx , rsi movzx r8d , byte ptr [ rcx ] cmp r8b , hexvar je hexvar cmp r8b , hexvar je hexvar mov rax , rsi ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r3 , hexvar beq hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , num bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 bl hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) lw v0 , - hexvar ( gp ) sw gp , hexvar ( sp ) lw v0 , hexvar ( v0 ) bgez v0 , hexvar move a2 , a0 addiu v1 , zero , - hexvar bne v0 , v1 , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) addiu v1 , zero , hexvar addiu a0 , zero , num sw v1 , hexvar ( sp ) move a3 , a1 jalr t9 move a1 , v0 lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) lui a1 , hexvar lui a0 , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar addiu a1 , a1 , hexvar jalr t9 addiu a0 , a0 , hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push edi push esi push ebx mov ebx , dword ptr [ esp + hexvar ] call hexvar add eax , hexvar mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] test ebx , ebx je hexvar xor esi , esi lea edi , [ eax - hexvar ] cmp dword ptr [ eax + hexvar ] , edi je hexvar mov dword ptr [ ebx ] , esi test ecx , ecx je hexvar xor ebx , ebx lea esi , [ eax - hexvar ] cmp dword ptr [ eax + hexvar ] , esi je hexvar mov dword ptr [ ecx ] , ebx test edx , edx je hexvar mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ edx ] , eax pop ebx pop esi pop edi ret
push { r4 , r5 , r6 , lr } mov r6 , r0 mov r5 , r1 mov r0 , r1 bl hexvar mov r4 , r0 mov r0 , hexvar bl hexvar mov r3 , num str r3 , [ r0 ] str r6 , [ r0 , num ] mvn r3 , num str r3 , [ r0 , num ] mov r3 , num str r3 , [ r0 , hexvar ] ldr r3 , [ r4 , hexvar ] cmp r3 , num strne r0 , [ r3 , hexvar ] str r0 , [ r4 , hexvar ] ldr r3 , [ r4 , hexvar ] cmp r3 , num streq r0 , [ r4 , hexvar ] ldr r3 , [ r4 , hexvar ] add r3 , r3 , num str r3 , [ r4 , hexvar ] mov r1 , num mov r0 , r5 bl hexvar pop { r4 , r5 , r6 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebx call hexvar add ebx , hexvar sub esp , num lea eax , [ ebx - hexvar ] push eax lea eax , [ ebx - hexvar ] push hexvar push eax lea eax , [ ebx - hexvar ] push eax call hexvar
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar lui v0 , hexvar sw s2 , hexvar ( sp ) addiu a3 , zero , - num lw s2 , - hexvar ( gp ) addiu a1 , zero , num lw v1 , - hexvar ( v0 ) lw t9 , - hexvar ( gp ) sw s1 , hexvar ( sp ) move s1 , a0 sw s0 , hexvar ( sp ) addiu a0 , sp , hexvar sw gp , hexvar ( sp ) move a2 , s1 sw ra , hexvar ( sp ) lw v0 , ( s2 ) sw v1 , hexvar ( sp ) sw v0 , hexvar ( sp ) bal hexvar nop move s0 , v0 lb v1 , ( s1 ) lb v0 , hexvar ( sp ) beq v1 , v0 , hexvar lw gp , hexvar ( sp ) addiu v0 , zero , num lw a0 , hexvar ( sp ) lw v1 , ( s2 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 move a0 , s1 xor v0 , v0 , s0 lw gp , hexvar ( sp ) b hexvar sltu v0 , zero , v0 lw t9 , - hexvar ( gp )
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add eax , hexvar mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + num ] mov dword ptr [ ebp - hexvar ] , edx sub esp , num push hexvar push num push dword ptr [ ebp + hexvar ] mov ebx , eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + num ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx + hexvar ] , eax mov dword ptr [ ecx + hexvar ] , edx mov eax , num mov ebx , dword ptr [ ebp - num ] leave ret
push { r4 , lr } ldr r2 , [ pc , hexvar ] mov r0 , num ldr r3 , [ pc , hexvar ] b hexvar add r0 , r0 , num ldr r3 , [ r3 , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ r2 , num ] ! cmp r3 , num beq hexvar cmp r3 , num bne hexvar b hexvar add r0 , r0 , num lsl r0 , r0 , num bl hexvar cmp r0 , num popeq { r4 , pc } mov r2 , r0 ldr ip , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] b hexvar ldr r1 , [ r3 , hexvar ] str r1 , [ r2 ] , num ldr r3 , [ r3 , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ ip , num ] ! cmp r3 , num beq hexvar cmp r3 , num bne hexvar b hexvar mov r3 , num str r3 , [ r2 ] pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push r12 push rbp push rbx sub rsp , hexvar mov rbx , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rdi , rsp mov ecx , num rep stosq qword ptr [ rdi ] , rax test rsi , rsi je hexvar mov rbp , rsi cmp qword ptr [ rbx + hexvar ] , rdx ja hexvar mov eax , hexvar cmp qword ptr [ rbx + hexvar ] , num jne hexvar mov rdi , qword ptr [ rbx + hexvar ] mov rax , rdi add rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rbx + hexvar ] , rax cmp rdi , rax seta al movzx eax , al add qword ptr [ rbx + hexvar ] , rax cmp byte ptr [ rbx + hexvar ] , num je hexvar mov qword ptr [ rbx + hexvar ] , - num mov qword ptr [ rbx + hexvar ] , - num lea r12 , [ rbx + hexvar ] mov edx , hexvar sub rdx , rdi add rdi , r12 mov esi , num call hexvar mov rsi , r12 mov rdi , rbx call hexvar mov rcx , rbx mov rax , rsp lea rdi , [ rsp + hexvar ] mov rdx , qword ptr [ rcx ] mov byte ptr [ rax ] , dl mov rsi , rdx shr rsi , num mov byte ptr [ rax + num ] , sil mov rsi , rdx shr rsi , hexvar mov byte ptr [ rax + num ] , sil mov rsi , rdx shr rsi , hexvar mov byte ptr [ rax + num ] , sil mov rsi , rdx shr rsi , hexvar mov byte ptr [ rax + num ] , sil mov rsi , rdx shr rsi , hexvar mov byte ptr [ rax + num ] , sil mov rsi , rdx shr rsi , hexvar mov byte ptr [ rax + num ] , sil shr rdx , hexvar mov byte ptr [ rax + num ] , dl add rcx , num add rax , num cmp rax , rdi jne hexvar mov rdx , qword ptr [ rbx + hexvar ] mov rsi , rsp mov rdi , rbp call hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , hexvar mov esi , num mov rdi , rsp call rax mov eax , num jmp hexvar mov eax , hexvar jmp hexvar mov eax , hexvar mov rbx , qword ptr [ rsp + hexvar ] xor rbx , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] cmp rax , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rcx mov eax , hexvar mov rcx , qword ptr [ rbp - hexvar ] cmp rcx , rax jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbx call hexvar lea rsi , [ rip + hexvar ] mov rbx , rax mov edx , num xor edi , edi mov dword ptr [ rax ] , hexvar call hexvar mov esi , dword ptr [ rbx ] mov rdx , rax mov edi , num pop rbx xor eax , eax jmp hexvar nop nop word ptr cs : [ rax + rax ]
push { r4 , r5 , r6 , r7 , r8 , lr } sub sp , sp , num mov r4 , r1 mov r5 , r2 mov r8 , r3 ldr ip , [ r1 , hexvar ] cmp ip , num beq hexvar ldrb r7 , [ r2 ] ldr r3 , [ r0 , num ] ldrb r3 , [ r3 , hexvar ] cmp r3 , r7 beq hexvar ldrb r3 , [ r1 , num ] cmp r3 , r7 movne r6 , r2 movne r7 , num bne hexvar add r6 , r5 , num mov r3 , num mov r2 , r3 mov r1 , r6 mov r0 , ip bl hexvar cmp r0 , num beq hexvar mov r0 , r6 bl hexvar add r0 , r0 , num bl hexvar subs r5 , r0 , num beq hexvar strb r7 , [ r5 ] mov r3 , num strb r3 , [ r5 , num ] mov r0 , r5 bl hexvar mov r2 , num ldr r1 , [ pc , hexvar ] add r0 , r5 , r0 bl hexvar mov r1 , r6 mov r0 , r5 bl hexvar ldr r0 , [ r4 , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ sp ] mov r3 , num mov r2 , r8 mov r1 , r5 bl hexvar mov r4 , r0 mov r0 , r5 bl hexvar b hexvar ldrb r3 , [ r6 ] cmp r3 , hexvar beq hexvar ldr r0 , [ r4 , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ sp ] ldr r3 , [ sp , hexvar ] mov r2 , r8 mov r1 , r5 bl hexvar mov r4 , r0 mov r0 , r4 add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ edx + hexvar ] mov edx , dword ptr [ edx + hexvar ] mov edi , dword ptr [ hexvar ] mov ebx , dword ptr [ hexvar ] xor edx , ebx xor esi , edi or esi , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi jne hexvar jmp hexvar call hexvar mov dword ptr [ eax ] , hexvar mov dword ptr [ ebp - hexvar ] , num jmp hexvar call hexvar mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] add ecx , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jg hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] movsd xmm0 , qword ptr [ eax + hexvar ] movsd qword ptr [ hexvar ] , xmm0 mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) beqz a0 , hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) addiu a1 , zero , hexvar jalr t9 move s0 , a0 lw gp , hexvar ( sp ) beqz v0 , hexvar move s1 , v0 addiu s2 , v0 , num subu v0 , s2 , s0 slti v0 , v0 , num bnez v0 , hexvar lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , zero , num addiu a1 , a1 , hexvar jalr t9 addiu a0 , s1 , - num bnez v0 , hexvar lw gp , hexvar ( sp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , zero , num addiu a1 , a1 , hexvar jalr t9 move a0 , s2 bnez v0 , hexvar lw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) addiu s0 , s1 , num sw s0 , ( v0 ) lui v0 , hexvar lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) sw s0 , - hexvar ( v0 ) lw v0 , - hexvar ( gp ) sw s0 , ( v0 ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui v0 , hexvar lw ra , hexvar ( sp ) move s0 , s2 lw s1 , hexvar ( sp ) lw s2 , hexvar ( sp ) sw s0 , - hexvar ( v0 ) lw v0 , - hexvar ( gp ) sw s0 , ( v0 ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw v0 , - hexvar ( gp ) lui a0 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , zero , hexvar addiu a1 , zero , num addiu a0 , a0 , hexvar jalr t9 lw a3 , ( v0 ) lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp )
push { r4 , r5 , r6 , r7 , r8 , lr } subs r6 , r0 , num beq hexvar bl hexvar add r5 , r0 , num cmp r5 , hexvar movhs r0 , r5 movlo r0 , hexvar add r0 , r0 , num bic r0 , r0 , num bl hexvar subs r4 , r0 , num beq hexvar mov r7 , num mov r2 , num add r3 , r4 , num strh r2 , [ r4 , num ] mov r1 , r6 str r7 , [ r4 ] mov r0 , r3 mov r2 , r5 bl hexvar strb r7 , [ r0 , r5 ] mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , pc }
push r14 push rbx push rax mov r14 , rsi mov rbx , rdi mov rax , qword ptr [ rdi ] mov rdi , qword ptr [ rax ] mov rax , qword ptr [ rsi ] mov rsi , qword ptr [ rax ] call hexvar test eax , eax jne hexvar mov rdi , qword ptr [ rbx + num ] mov rsi , qword ptr [ r14 + num ] call hexvar test eax , eax jne hexvar mov rdi , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ r14 + hexvar ] call hexvar test eax , eax je hexvar add rsp , num pop rbx pop r14 ret
push ebp mov ebp , esp sub esp , num call hexvar call hexvar call hexvar add esp , num pop ebp ret
push r12 push rbp push rbx cmp byte ptr [ rdi + hexvar ] , num mov r12 , qword ptr [ rdi ] je hexvar cmp byte ptr [ rdi + hexvar ] , num mov rbx , rdi jne hexvar mov rax , qword ptr [ r12 + hexvar ] mov byte ptr [ rdi + hexvar ] , num mov edi , hexvar mov rax , qword ptr [ rax ] call qword ptr [ rax + hexvar ] mov esi , dword ptr [ rbx + num ] lea rdi , [ rax + hexvar ] mov rbp , rax call hexvar mov rdi , qword ptr [ r12 + hexvar ] lea rsi , [ rbp + hexvar ] call hexvar or dword ptr [ rbx + hexvar ] , num mov rdi , rbx pop rbx pop rbp pop r12 jmp hexvar nop dword ptr [ rax ] pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi call hexvar mov dword ptr [ ebp - num ] , eax xor eax , eax mov cl , al cmp dword ptr [ ebp - num ] , num mov byte ptr [ ebp - hexvar ] , cl jge hexvar call hexvar cmp dword ptr [ eax ] , num sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push { r4 , r5 , r6 , lr } mov r4 , r2 mov r5 , r3 ldr r6 , [ r0 , num ] ldr r1 , [ sp , hexvar ] cmp r1 , num beq hexvar ldr r1 , [ r0 , hexvar ] ldr ip , [ r0 , hexvar ] adds r4 , r2 , r1 adc r5 , r3 , ip cmp r4 , num sbcs r3 , r5 , num blt hexvar mov r1 , r4 ldr r3 , [ r6 ] cmp r4 , r3 bls hexvar ldrb r2 , [ r0 , hexvar ] tst r2 , hexvar beq hexvar add r3 , r3 , hexvar bic r4 , r3 , hexvar str r1 , [ r6 ] add r1 , r1 , hexvar bic r5 , r1 , hexvar cmp r4 , r5 blo hexvar mov r0 , num pop { r4 , r5 , r6 , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] and ecx , hexvar cmp ecx , num mov dword ptr [ ebp - num ] , eax je hexvar cmp dword ptr [ ebp + num ] , - hexvar je hexvar cmp dword ptr [ ebp + num ] , num jl hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax cmp dword ptr [ hexvar ] , num jge hexvar mov eax , hexvar cmp eax , dword ptr [ ebp + num ] jne hexvar mov dword ptr [ hexvar ] , hexvar jmp hexvar cmp dword ptr [ ebp + num ] , num jl hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ hexvar ] , eax jmp hexvar cmp dword ptr [ hexvar ] , num jge hexvar cmp dword ptr [ ebp + num ] , num jl hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar jmp hexvar jmp hexvar jmp hexvar jmp hexvar jmp hexvar add esp , hexvar pop ebp ret
movups xmm2 , xmmword ptr [ rdi ] mov eax , dword ptr [ rdx + hexvar ] movups xmm0 , xmmword ptr [ rdx ] movups xmm1 , xmmword ptr [ rdx + hexvar ] lea rdx , [ rdx + hexvar ] xorps xmm2 , xmm0 aesdec xmm2 , xmm1 dec eax movups xmm1 , xmmword ptr [ rdx ] lea rdx , [ rdx + hexvar ] jne hexvar aesdeclast xmm2 , xmm1 movups xmmword ptr [ rsi ] , xmm2 ret nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ]
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar lui a1 , hexvar addiu a2 , zero , num sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) addiu a1 , a1 , - hexvar sw gp , hexvar ( sp ) move a0 , zero lw v0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) lw s0 , ( v0 ) jalr t9 nop lui a2 , hexvar lw gp , hexvar ( sp ) move a1 , zero addiu a2 , a2 , - hexvar move a3 , v0 lw t9 , - hexvar ( gp ) jalr t9 move a0 , s0 lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop nop
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] mov r3 , num str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] b hexvar ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] cmn r3 , num beq hexvar ldr r3 , [ fp , - num ] cmp r3 , num bne hexvar bl hexvar mov r2 , r0 mov r3 , num str r3 , [ r2 ] b hexvar ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - num ] add r3 , r2 , r3 str r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - num ] add r3 , r2 , r3 str r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - num ] sub r3 , r2 , r3 str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar b hexvar mov r0 , r0 ldr r3 , [ fp , - hexvar ] mov r0 , r3 sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp mov edx , ecx add edx , - hexvar mov esp , edx mov esi , esp add esi , - hexvar mov esp , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx - hexvar ] , edi mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx - hexvar ] , ebx cmp dword ptr [ hexvar ] , num sete cl mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] movsd xmm0 , qword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] movsd qword ptr [ ecx ] , xmm0 mov edx , dword ptr [ hexvar ] sub esp , hexvar mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r14 , rdx mov r15 , rsi xor r12d , r12d test rdi , rdi je hexvar cmp byte ptr [ rdi ] , num cmovne r12 , rdi test r8 , r8 je hexvar mov rax , qword ptr [ r8 ] mov rdi , qword ptr [ r8 + num ] mov r13 , qword ptr [ r8 + hexvar ] test rcx , rcx je hexvar mov rdx , qword ptr [ rcx ] xor esi , esi test rdx , rdx cmovne rax , rsi cmovne rdi , rdx mov rcx , qword ptr [ rcx + num ] test rcx , rcx cmovne r13 , rcx test rax , rax jne hexvar test rdi , rdi jne hexvar mov edi , dword ptr [ rip + hexvar ] test edi , edi jne hexvar call hexvar mov edi , eax mov dword ptr [ rip + hexvar ] , eax mov ecx , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov eax , hexvar jmp hexvar test rdi , rdi je hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov esi , hexvar mov rdi , rax mov rdx , r12 call hexvar mov r12 , rax mov r9d , dword ptr [ r15 ] add r9d , - num mov rdi , rbx mov rsi , rax mov edx , num mov rcx , r14 xor r8d , r8d call hexvar mov ebp , eax mov rdi , rbx mov rsi , r13 call hexvar mov edx , num mov rdi , rbx mov esi , num xor ecx , ecx xor r8d , r8d call hexvar test ebp , ebp js hexvar nop dword ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax jns hexvar mov rdi , rbx mov esi , num xor edx , edx xor ecx , ecx xor r8d , r8d call hexvar test eax , eax jne hexvar jmp hexvar xor eax , eax xor r13d , r13d xor edi , edi test rcx , rcx jne hexvar jmp hexvar mov esi , dword ptr [ r15 ] mov rdi , r14 xor edx , edx mov rcx , r13 call rax mov dword ptr [ r15 ] , eax jmp hexvar mov rdi , r14 call hexvar mov dword ptr [ r15 ] , eax mov rdi , rbx call hexvar mov rdi , r12 call hexvar cmp dword ptr [ r15 ] , num sbb eax , eax add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp push rbx mov ebp , edi sub rsp , num mov rbx , qword ptr [ rip + hexvar ] test rbx , rbx je hexvar nop dword ptr [ rax ] lea rdi , [ rbx + hexvar ] call hexvar mov rbx , qword ptr [ rbx ] test rbx , rbx jne hexvar mov edi , ebp xor esi , esi mov qword ptr [ rip + hexvar ] , num call hexvar add rsp , num mov edi , ebp pop rbx pop rbp jmp hexvar nop word ptr [ rax + rax ]
ldrb r3 , [ r0 , hexvar ] tst r3 , hexvar beq hexvar cmn r1 , num moveq r1 , num ldr r3 , [ r0 , hexvar ] addne r1 , r1 , num ldr r0 , [ r3 , hexvar ] cmp r0 , r1 mvnls r1 , num ldrhi r3 , [ r3 , hexvar ] mov r0 , r1 addhi r3 , r3 , r1 , lsl num strhi r3 , [ r2 ] bx lr push { r4 , lr } mov r0 , num bl hexvar mvn r1 , num mov r0 , r1 pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rdi mov esi , dword ptr [ rbp - hexvar ] mov al , sil mov rdi , qword ptr [ rbp - hexvar ] mov byte ptr [ rdi ] , al mov esi , dword ptr [ rbp - hexvar ] shr esi , num mov al , sil mov rdi , qword ptr [ rbp - hexvar ] mov byte ptr [ rdi + num ] , al mov esi , dword ptr [ rbp - hexvar ] shr esi , hexvar mov al , sil mov rdi , qword ptr [ rbp - hexvar ] add rdi , num mov byte ptr [ rbp - hexvar ] , al mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov cl , byte ptr [ rbp - hexvar ] mov byte ptr [ rax ] , cl mov eax , dword ptr [ rbp - hexvar ] shr eax , hexvar mov cl , al mov rdx , qword ptr [ rbp - hexvar ] mov byte ptr [ rdx + num ] , cl pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax xor eax , eax mov edi , eax mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rdx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rdx + hexvar ] mov rsi , qword ptr [ rcx + rdx * num ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , qword ptr [ rax + hexvar ] call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , rcx add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi mov edi , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , esi call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - num ] pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , num pop ebp ret
push r14 push rbx push rax test rdi , rdi je hexvar mov r14 , rsi mov rbx , rdi mov rax , qword ptr [ rdi ] mov rdi , qword ptr [ rax ] test rdi , rdi jne hexvar mov edi , num call hexvar mov rdi , rax mov rax , qword ptr [ rbx ] mov qword ptr [ rax ] , rdi test rdi , rdi je hexvar mov rsi , r14 add rsp , num pop rbx pop r14 jmp hexvar xor eax , eax add rsp , num pop rbx pop r14 ret
push r12 push rbp push rbx mov r12d , edi mov rbp , rsi mov esi , num mov eax , num call hexvar and eax , num mov ebx , num jne hexvar mov ebx , eax lea rdx , [ rbp + hexvar ] mov rax , qword ptr [ rbp + num ] lea rsi , [ rax * num + num ] mov rdi , qword ptr [ rbp ] call hexvar test rax , rax je hexvar mov qword ptr [ rbp ] , rax mov rdx , qword ptr [ rbp + num ] mov dword ptr [ rax + rdx * num ] , r12d add qword ptr [ rbp + num ] , num jmp hexvar mov ebx , hexvar mov eax , ebx pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - hexvar ] , eax jne hexvar mov eax , dword ptr [ hexvar ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] sub eax , ecx cmp eax , num jl hexvar mov eax , dword ptr [ ebp - num ] add eax , - num mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , num call hexvar cmp eax , num jne hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , num call hexvar cmp eax , num jne hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ hexvar ] mov dword ptr [ hexvar ] , eax lea eax , [ hexvar ] mov dword ptr [ hexvar ] , eax test byte ptr [ hexvar ] , num je hexvar movsd xmm0 , qword ptr [ hexvar ] movsd qword ptr [ hexvar ] , xmm0 mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push r15 push r14 mov r14 , rdi push r13 push r12 mov r13 , rsi push rbp push rbx sub rsp , hexvar call hexvar test r14 , r14 mov r15 , rax je hexvar mov rdi , r14 call hexvar test r13 , r13 movsxd r12 , eax je hexvar mov rdi , r13 call hexvar mov dword ptr [ rsp + hexvar ] , eax movsxd rbp , eax mov rdi , r15 call hexvar lea rdi , [ r12 + rbp + num ] movsxd rbx , eax add rdi , rbx call hexvar mov rsi , r15 mov rbp , rax mov rdi , rax call hexvar lea rdi , [ rbp + rbx ] mov rsi , r14 add rbx , r12 call hexvar lea rax , [ rbp + rbx ] mov edx , hexvar lea rdi , [ rbp + rbx + num ] mov rsi , r13 mov word ptr [ rax + num ] , dx mov dword ptr [ rax ] , hexvar mov byte ptr [ rax + num ] , num call hexvar mov esi , dword ptr [ rsp + hexvar ] mov rdi , rbp call hexvar cmp eax , - num je hexvar mov edi , eax call hexvar test eax , eax jne hexvar add rsp , hexvar mov rax , rbp pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s4 , hexvar ( sp ) move s4 , a0 sw s3 , hexvar ( sp ) move a0 , a2 sw s2 , hexvar ( sp ) move s3 , a1 sw s1 , hexvar ( sp ) move s2 , a3 sw gp , hexvar ( sp ) move s1 , a2 sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) lw v0 , ( s0 ) sw v0 , hexvar ( sp ) jalr t9 nop sltiu v0 , v0 , hexvar beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , s2 sltiu v0 , v0 , hexvar bnez v0 , hexvar lw gp , hexvar ( sp ) move v0 , zero lw a0 , hexvar ( sp ) lw v1 , ( s0 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu s5 , sp , hexvar move a1 , s2 jal hexvar move a0 , s5 move a2 , zero lw gp , hexvar ( sp ) move a1 , v0 lw t9 , - hexvar ( gp )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , ecx mov edx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , edx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov cl , byte ptr [ eax ] mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] movsx ecx , al cmp ecx , hexvar jne hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov cl , byte ptr [ eax ] mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] cmp al , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] cmp eax , ecx je hexvar mov eax , dword ptr [ ebp - num ] add eax , - num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov esp , ebp pop ebp ret
push rbx sub rsp , hexvar mov rsi , rdi lea rax , [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax mov rcx , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax mov rdi , qword ptr [ rsp + hexvar ] call hexvar mov dword ptr [ rsp + num ] , eax mov ecx , hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] mov ecx , hexvar xor ebx , ebx cmp ecx , hexvar jle hexvar cmp ecx , hexvar jg hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar nop dword ptr [ rax ] cmp ecx , hexvar jg hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov rdi , qword ptr [ rsp + num ] call hexvar jmp hexvar nop dword ptr [ rax + rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar call hexvar mov qword ptr [ rsp + num ] , rax cmp qword ptr [ rsp + num ] , num mov ecx , hexvar je hexvar mov ecx , hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar cmp dword ptr [ rsp + num ] , num mov ecx , hexvar je hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar mov rbx , qword ptr [ rsp + num ] jmp hexvar mov rsi , qword ptr [ rsp + hexvar ] mov edx , dword ptr [ rsp + num ] mov rdi , qword ptr [ rsp + num ] call hexvar mov ecx , hexvar test eax , eax je hexvar mov ecx , hexvar jmp hexvar mov rax , qword ptr [ rsp + hexvar ] mov rax , rbx add rsp , hexvar pop rbx ret
add r3 , r1 , num cmp r3 , r2 bhi hexvar push { r4 , lr } ldr r3 , [ r0 , num ] ldr r3 , [ r3 , hexvar ] mov r0 , r1 blx r3 pop { r4 , pc }
push ebx sub esp , num mov ebx , dword ptr [ esp + hexvar ] mov eax , ebx call hexvar sub esp , num push dword ptr [ esp + hexvar ] push ebx call hexvar add esp , hexvar pop ebx ret
push rax add rdi , hexvar call hexvar xor ecx , ecx test rax , rax setne cl mov eax , ecx pop rcx ret
push { r4 , r5 , lr } ldrb ip , [ r0 ] ldrb lr , [ r1 ] cmp ip , hexvar beq hexvar cmp lr , hexvar bne hexvar ldrb lr , [ r1 , num ] ! cmp lr , hexvar beq hexvar cmp r3 , lr beq hexvar cmp r2 , lr beq hexvar sub lr , lr , hexvar cmp lr , num bhi hexvar mov r4 , num mov r0 , r4 pop { r4 , r5 , pc }
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar call hexvar mov esi , eax add esp , hexvar test eax , eax je hexvar mov dword ptr [ eax ] , ebp mov dword ptr [ eax + num ] , edi mov dword ptr [ eax + num ] , num cmp dword ptr [ esp + hexvar ] , num je hexvar sub esp , hexvar push dword ptr [ ebp + num ] call hexvar add esp , hexvar cmp eax , hexvar je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] test eax , eax je hexvar sub esp , num push esi push eax call hexvar add esp , hexvar test eax , eax je hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] test eax , eax je hexvar sub esp , num push ebp push eax call hexvar add esp , hexvar test eax , eax je hexvar test edi , edi je hexvar add dword ptr [ edi + num ] , num mov eax , esi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] ldr r1 , [ sp , num ] mov r0 , r3 bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push r13 push r12 push rbp push rbx sub rsp , num mov rbp , rdi mov r12 , rsi mov r13d , ecx mov rsi , rdx mov rdi , r12 call hexvar test rax , rax je hexvar mov rbx , rax test r13d , r13d jne hexvar mov rax , qword ptr [ rbp ] mov qword ptr [ rbx + hexvar ] , rax mov qword ptr [ rbp ] , rbx mov eax , num add rsp , num pop rbx pop rbp pop r12 pop r13 ret
test byte ptr [ rdi + hexvar ] , num je hexvar cmp qword ptr [ rdi + hexvar ] , - num je hexvar mov rax , qword ptr [ rsi ] add rax , num mov qword ptr [ rsi ] , rax mov qword ptr [ rdi + hexvar ] , rax mov eax , num ret
push rbp push rbx push rax mov rbx , rdi cmp dword ptr [ rdi + hexvar ] , esi jne hexvar mov ebp , edx mov rax , qword ptr [ rbx + hexvar ] mov rdx , qword ptr [ rax + num ] mov byte ptr [ rdx ] , num mov rax , qword ptr [ rbx + hexvar ] movzx ecx , word ptr [ rax + hexvar ] mov word ptr [ rax + hexvar ] , cx mov dword ptr [ rbx + hexvar ] , num cmp dword ptr [ rbx ] , hexvar jne hexvar lea esi , [ rcx + num ] mov word ptr [ rax + hexvar ] , si mov byte ptr [ rdx + num ] , ch mov rax , qword ptr [ rbx + hexvar ] mov al , byte ptr [ rax + hexvar ] mov byte ptr [ rdx + num ] , al add dword ptr [ rbx + hexvar ] , num mov rax , qword ptr [ rbx + hexvar ] movzx ecx , word ptr [ rax + hexvar ] mov dword ptr [ rbx + hexvar ] , num mov byte ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , num mov word ptr [ rax + hexvar ] , cx xorps xmm0 , xmm0 movups xmmword ptr [ rax + hexvar ] , xmm0 mov rdi , rbx mov esi , num call hexvar mov dword ptr [ rbx + hexvar ] , ebp mov rdi , rbx mov esi , hexvar add rsp , num pop rbx pop rbp jmp hexvar nop dword ptr [ rax ]
mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar push rbp push rbx sub rsp , num mov rsi , qword ptr [ rip + hexvar ] cmp rsi , rdi jbe hexvar lea rbx , [ rax + rdi ] sub rsi , rdi mov rbp , rsi mov rdi , rbx call hexvar cmp rbp , rax je hexvar add rsp , num mov rax , rbx pop rbx pop rbp ret
lui v0 , hexvar lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar lw v0 , - hexvar ( v0 ) addiu a2 , zero , num sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) beqz v0 , hexvar lw t9 , - hexvar ( gp ) lui a1 , hexvar addiu a1 , a1 , hexvar jalr t9 move a0 , zero addiu a0 , zero , num lw gp , hexvar ( sp ) move a2 , s0 lw t9 , - hexvar ( gp ) jalr t9 move a1 , v0 lui v1 , hexvar lw gp , hexvar ( sp ) addiu v0 , zero , hexvar move a0 , zero lw v1 , - hexvar ( v1 ) beq v1 , v0 , hexvar lw t9 , - hexvar ( gp ) lui a1 , hexvar addiu a1 , a1 , hexvar jalr t9 addiu a2 , zero , num addiu a0 , zero , num lw gp , hexvar ( sp ) move a1 , v0 lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jr t9 addiu sp , sp , hexvar lui a1 , hexvar b hexvar addiu a1 , a1 , hexvar lui a1 , hexvar b hexvar addiu a1 , a1 , hexvar
addiu sp , sp , - hexvar lui v0 , hexvar lui gp , hexvar sw s0 , hexvar ( sp ) lui s0 , hexvar sw s1 , hexvar ( sp ) lui s1 , hexvar sw s2 , hexvar ( sp ) addiu gp , gp , - hexvar sw ra , hexvar ( sp ) move s2 , a0 sw gp , hexvar ( sp ) lw v1 , hexvar ( s0 ) lw a1 , hexvar ( v0 ) beq v1 , a1 , hexvar lw a0 , hexvar ( s1 ) sll v0 , v1 , num lw ra , hexvar ( sp ) addiu v1 , v1 , num lw s1 , hexvar ( sp ) addu a0 , a0 , v0 sw v1 , hexvar ( s0 ) lw s0 , hexvar ( sp ) sw s2 , ( a0 ) lw s2 , hexvar ( sp ) jr ra addiu sp , sp , hexvar beqz a0 , hexvar lui a1 , hexvar addiu a1 , a1 , hexvar sltu a1 , v1 , a1 beqz a1 , hexvar addiu a1 , v1 , num srl v1 , v1 , num addu v1 , a1 , v1 sll a1 , v1 , num lw t9 , - hexvar ( gp ) bal hexvar sw v1 , hexvar ( v0 ) lw v1 , hexvar ( s0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx ] test rdx , rdx setne al movzx ecx , al mov edx , ecx mov rdx , qword ptr [ rdx * num + hexvar ] jmp rdx mov rax , qword ptr [ rip + hexvar ] jmp rax movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax ] mov ecx , eax and ecx , num mov eax , ecx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - num ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
ldr r3 , [ pc , hexvar ] push { r4 , r5 , r6 , lr } ldr r4 , [ r3 ] mov r5 , r0 cmp r4 , num beq hexvar bl hexvar mov r3 , r5 ldr ip , [ r0 ] add r1 , r5 , r4 ldrb r2 , [ r3 ] , num lsl r2 , r2 , num ldrh r0 , [ ip , r2 ] ands r0 , r0 , hexvar popeq { r4 , r5 , r6 , pc }
mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi je hexvar push rax mov edx , hexvar xor esi , esi call hexvar add rsp , num mov eax , num ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) move s4 , a2 sw s3 , hexvar ( sp ) move s3 , a3 sw s2 , hexvar ( sp ) move s2 , a1 sw s1 , hexvar ( sp ) move s1 , a0 sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a3 , s4 sw s3 , hexvar ( sp ) move a2 , s2 move a1 , s1 move a0 , v0 jalr t9 move s0 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) move v0 , s0 lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop addiu v1 , zero , hexvar srl a0 , v0 , hexvar bne a0 , v1 , hexvar lw gp , hexvar ( sp ) andi v0 , v0 , hexvar addiu v0 , v0 , - hexvar sltiu v0 , v0 , num beqz v0 , hexvar lw t9 , - hexvar ( gp )
push { r4 , lr } ldr r4 , [ pc , hexvar ] ldr r3 , [ r4 , hexvar ] cmp r3 , num beq hexvar cmp r3 , num ldr r0 , [ pc , hexvar ] movge r0 , num pop { r4 , pc }
push rbp push r15 push r14 push r12 push rbx sub rsp , hexvar mov r14 , rcx mov r15 , rdx mov rbx , rsi mov edx , hexvar call hexvar mov qword ptr [ rsp + num ] , rax mov eax , hexvar mov r12d , hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] mov rdx , qword ptr [ rsp + num ] mov rdi , r14 mov rsi , r15 call hexvar mov eax , hexvar mov ebp , num cmp eax , hexvar jg hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar cmp qword ptr [ rsp + num ] , num mov eax , hexvar cmove eax , r12d jmp hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov rdi , qword ptr [ rip + hexvar ] xor ebp , ebp mov esi , hexvar mov ecx , hexvar mov rdx , rbx xor eax , eax call hexvar mov eax , hexvar jmp hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r14 pop r15 pop rbp ret
push { r4 , r5 , r6 , lr } mov r4 , r1 mov r1 , num mov r2 , r4 mov r5 , r0 bl hexvar cmp r0 , num subne r0 , r0 , r5 addne r0 , r0 , num moveq r0 , r4 pop { r4 , r5 , r6 , pc }
push { r4 , lr } sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] ldr r3 , [ r3 , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r2 , r3 ldr r3 , [ sp , hexvar ] str r2 , [ r3 ] mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r4 , [ r3 ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r4 , r3 bhs hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] mov r0 , r3 bl hexvar str r0 , [ sp , hexvar ] b hexvar mov r3 , hexvar str r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ sp , num ] add r3 , sp , hexvar str r3 , [ sp ] ldr r3 , [ sp , hexvar ] ldr r1 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bgt hexvar ldr r3 , [ sp , hexvar ] b hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] str r2 , [ r3 ] mov r3 , num mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] shl rax , num add rdx , rax mov rcx , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax xor eax , eax mov cl , al test cl , num jne hexvar jmp hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar jmp hexvar xor eax , eax mov cl , al test cl , num jne hexvar jmp hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - num ] add qword ptr [ rax ] , num lea rax , [ rax + num ] jb hexvar mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] add qword ptr [ rax ] , rcx jae hexvar add qword ptr [ rax + num ] , num lea rax , [ rax + num ] jb hexvar mov qword ptr [ rbp - hexvar ] , rax jmp hexvar jmp hexvar add rsp , hexvar pop rbp ret
push rax mov rdi , qword ptr [ rip + hexvar ] call hexvar test rax , rax je hexvar pop rax ret
push rax mov rdi , qword ptr [ rip + hexvar ] call hexvar test rax , rax je hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] mov rdi , rax call hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar test rax , rax jne hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , num pop rax ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar mov r8d , hexvar movabs r9 , hexvar movabs r10 , hexvar mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax call hexvar mov qword ptr [ rbp - num ] , - num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r4 , r0 ldr r6 , [ r0 , hexvar ] ldr r3 , [ r0 , num ] ldr r3 , [ r3 , hexvar ] blx r3 cmp r0 , num beq hexvar ldr r5 , [ r0 , num ] bl hexvar cmp r5 , num bhi hexvar mov r0 , num pop { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar addiu a0 , zero , hexvar sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move s0 , a1 addiu v1 , zero , num sb zero , num ( v0 ) sb zero , num ( v0 ) sb zero , hexvar ( v0 ) sb zero , hexvar ( v0 ) sb zero , hexvar ( v0 ) sb zero , hexvar ( v0 ) sb zero , hexvar ( v0 ) sb zero , hexvar ( v0 ) sw s0 , num ( v0 )
push ebp mov ebp , esp push esi sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esi + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx add esp , num pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov edi , num mov qword ptr [ rbp - hexvar ] , rax call hexvar mov rcx , qword ptr [ rbp - hexvar ] cmp rcx , rax jge hexvar mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + rcx * num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + rcx * num ] mov rdi , rax call hexvar mov rcx , qword ptr [ rbp - num ] mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + rdi * num ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar pop ebx ret
test rdi , rdi je hexvar mov rax , qword ptr [ rdi ] test rax , rax je hexvar mov rdi , qword ptr [ rax ] jmp hexvar xor eax , eax ret
push ebp mov ebp , esp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov eax , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] add dword ptr [ ecx + num ] , num mov dword ptr [ ebp - hexvar ] , ecx test eax , eax setne byte ptr [ ebp - hexvar ] test edx , edx movzx eax , byte ptr [ ebp - hexvar ] jne hexvar test al , al jne hexvar mov dword ptr [ ebp - hexvar ] , num test edi , edi je hexvar sub esp , hexvar push hexvar call hexvar lea ecx , [ eax + num ] mov esi , eax mov dword ptr [ eax ] , num mov dword ptr [ eax + hexvar ] , num xor edx , edx mov dword ptr [ ebp - hexvar ] , esi and ecx , hexvar sub eax , ecx add eax , hexvar and eax , hexvar mov dword ptr [ ecx + edx ] , num add edx , num cmp edx , eax jb hexvar mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , edi call hexvar mov edi , dword ptr [ ebp - hexvar ] mov edx , eax add esp , hexvar mov dword ptr [ esi + num ] , eax lea ecx , [ ebx - hexvar ] mov dword ptr [ esi + num ] , num mov dword ptr [ esi + hexvar ] , num mov dword ptr [ esi + hexvar ] , num mov eax , dword ptr [ edi + num ] mov dword ptr [ esi + hexvar ] , num mov dword ptr [ edi + num ] , esi mov dword ptr [ esi ] , eax mov eax , dword ptr [ ebp + hexvar ] test eax , eax lea eax , [ ebx - hexvar ] cmovne eax , ecx mov dword ptr [ esi + hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] or eax , dword ptr [ ebp + hexvar ] je hexvar cmp byte ptr [ ebp - hexvar ] , num jne hexvar mov dword ptr [ esi + num ] , num mov eax , num mov ebx , dword ptr [ ebp - hexvar ] xor ebx , dword ptr gs : [ hexvar ] jne hexvar lea esp , [ ebp - hexvar ] pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar xor eax , eax mov esi , eax mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov edx , hexvar call hexvar add rsp , hexvar pop rbp ret
push r15 push r14 push r12 push rbx push rax mov rbx , rsi mov r14 , rdi cmp byte ptr [ rsi ] , hexvar jne hexvar lea rsi , [ rbx + num ] mov rdi , r14 call hexvar mov r15 , rax test rax , rax je hexvar xor edi , edi mov rsi , r14 mov rdx , r15 call hexvar mov r12 , rax cmp byte ptr [ rbx ] , hexvar jne hexvar mov rdi , r14 mov rsi , r15 call hexvar jmp hexvar mov rdi , rbx call hexvar mov r15 , rax test rax , rax jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor r12d , r12d jmp hexvar mov esi , hexvar mov rdi , r15 call hexvar mov rax , r12 add rsp , num pop rbx pop r12 pop r14 pop r15 ret
sltiu v0 , a1 , num bnez v0 , hexvar lui gp , hexvar addiu sp , sp , - hexvar sw s1 , hexvar ( sp ) addiu s1 , a1 , - num addiu gp , gp , hexvar sw ra , hexvar ( sp ) addu v0 , a0 , s1 sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lb v0 , ( v0 ) bnez v0 , hexvar addu a1 , a0 , a1 lb v0 , - num ( a1 ) bnez v0 , hexvar lw t9 , - hexvar ( gp ) move s0 , a0 jalr t9 addiu a0 , zero , hexvar beqz v0 , hexvar addiu v1 , zero , num sw s1 , hexvar ( v0 ) sw s0 , num ( v0 ) move a0 , v0 sw s0 , num ( v0 ) sw s1 , hexvar ( v0 ) sw v1 , hexvar ( v0 ) sw zero , hexvar ( v0 ) sw zero , ( v0 ) sw zero , hexvar ( v0 ) sw zero , hexvar ( v0 ) sw zero , hexvar ( v0 ) jal hexvar sw v0 , hexvar ( sp ) lw ra , hexvar ( sp ) lw v0 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw ra , hexvar ( sp ) move v0 , zero lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar jr ra move v0 , zero lui a0 , hexvar jal hexvar addiu a0 , a0 , hexvar
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , hexvar mov ecx , dword ptr [ ebp + num ] and ecx , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , esp add esi , - hexvar mov esp , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edi mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , ebx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ecx mov eax , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ ebp - hexvar ] , esi call hexvar add esp , hexvar movss xmm0 , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ecx ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ecx ] mov byte ptr [ eax + hexvar ] , num mov byte ptr [ hexvar ] , num mov eax , dword ptr [ ecx ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ecx ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ecx ] movss dword ptr [ eax + hexvar ] , xmm0 mov al , num and al , num movzx eax , al lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar lea ebp , [ ebx - hexvar ] push hexvar push ebp push hexvar call hexvar mov esi , eax add esp , hexvar xor eax , eax test esi , esi je hexvar lea edi , [ esi + num ] mov ecx , esi mov dword ptr [ esi ] , num mov dword ptr [ esi + hexvar ] , num sub esp , num and edi , hexvar sub ecx , edi add ecx , hexvar shr ecx , num rep stosd dword ptr es : [ edi ] , eax push hexvar push ebp push hexvar call hexvar add esp , hexvar test eax , eax mov dword ptr [ esi + hexvar ] , eax je hexvar sub esp , num push hexvar push ebp push hexvar call hexvar add esp , hexvar test eax , eax mov dword ptr [ esi + hexvar ] , eax je hexvar mov eax , dword ptr [ esp + hexvar ] sub esp , hexvar mov dword ptr [ eax + hexvar ] , esi push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s3 , hexvar ( sp ) move s3 , a3 sw s2 , hexvar ( sp ) move s2 , a1 sw s1 , hexvar ( sp ) move s1 , a2 sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) beqz a2 , hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar addiu a1 , zero , num bnez v0 , hexvar lw gp , hexvar ( sp ) move a2 , s1 move a1 , s2 jal hexvar move a0 , s0 addiu v1 , zero , - num lw gp , hexvar ( sp ) beq v0 , v1 , hexvar move a2 , v0 lw ra , hexvar ( sp ) move a3 , s3 lw s1 , hexvar ( sp ) move a1 , s2 lw s3 , hexvar ( sp ) move a0 , s0 lw s2 , hexvar ( sp ) lw s0 , hexvar ( sp ) j hexvar addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) move a1 , v0 sw v0 , hexvar ( sp ) bal hexvar move a0 , s0 addiu v1 , zero , num lw gp , hexvar ( sp ) beq v0 , v1 , hexvar lw a2 , hexvar ( sp ) lw t9 , - hexvar ( gp )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) bnez v0 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) move v1 , v0 lui v0 , hexvar sw v1 , hexvar ( v0 ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) beqz v0 , hexvar nop lui v0 , hexvar sw zero , - hexvar ( v0 ) lui v0 , hexvar lw v1 , hexvar ( v0 ) lui v0 , hexvar addiu a1 , v0 , - hexvar move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lui v0 , hexvar lw v1 , hexvar ( v0 ) lui v0 , hexvar addiu a1 , v0 , - hexvar move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx xor ecx , ecx mov edx , dword ptr [ esi + hexvar ] test edx , edx je hexvar mov eax , dword ptr [ esp + hexvar ] xor eax , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push ebp push edi push esi push ebx mov esi , eax call hexvar add ebx , hexvar sub esp , hexvar mov ebp , dword ptr [ edx ] mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax cmp byte ptr [ ebp ] , hexvar jne hexvar lea eax , [ ebp + num ] mov edi , edx mov dword ptr [ edx ] , eax movzx eax , byte ptr [ ebp + num ] or ah , hexvar cmp eax , hexvar je hexvar lea eax , [ ebx - hexvar ] push ecx push num jmp hexvar lea eax , [ ebp + num ] lea ecx , [ esp + hexvar ] sub esp , hexvar mov dword ptr [ edx ] , eax push num mov eax , esi call hexvar add esp , hexvar test eax , eax je hexvar lea ecx , [ esp + hexvar ] sub esp , hexvar mov edx , edi push num mov eax , esi call hexvar add esp , hexvar test eax , eax je hexvar lea ecx , [ esp + hexvar ] sub esp , hexvar mov edx , edi push num mov eax , esi call hexvar add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] or eax , dword ptr [ esp + hexvar ] jne hexvar mov eax , dword ptr [ esp + hexvar ] xor eax , hexvar or eax , dword ptr [ esp + hexvar ] je hexvar lea eax , [ ebx - hexvar ] push edx push num push eax push num call hexvar mov ebx , dword ptr [ esi + num ] lea edx , [ esi + num ] mov dword ptr [ esp ] , eax mov ecx , ebp mov eax , ebx call hexvar add esp , hexvar xor eax , eax jmp hexvar push eax push eax mov edx , edi push num push dword ptr [ esp + hexvar ] mov eax , esi mov ecx , dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov edi , dword ptr [ esp + hexvar ] xor edi , dword ptr gs : [ hexvar ] je hexvar call hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movzx eax , al mov edi , eax call hexvar mov edx , eax mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , edx call hexvar add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax - num ] mov qword ptr [ rbp - hexvar ] , rdx test rax , rax jne hexvar nop leave ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esi mov dword ptr [ ebp - hexvar ] , edx mul dword ptr [ ebp + hexvar ] seto bl mov dword ptr [ ebp - hexvar ] , eax and bl , num mov byte ptr [ ebp - hexvar ] , bl test byte ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx je hexvar call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] imul ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar pop esi pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar addiu v0 , sp , hexvar sw s1 , hexvar ( sp ) addiu a3 , sp , hexvar sw v0 , hexvar ( sp ) addiu a2 , sp , hexvar lw s1 , - hexvar ( gp ) addiu a1 , sp , hexvar lw t9 , - hexvar ( gp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s0 , hexvar ( sp ) lw v0 , ( s1 ) sw v0 , hexvar ( sp ) bal hexvar nop bnez v0 , hexvar lw gp , hexvar ( sp ) lw v1 , hexvar ( sp ) lw v0 , ( s1 ) bne v1 , v0 , hexvar lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) bal hexvar move s0 , v0 addiu v0 , sp , hexvar lw gp , hexvar ( sp ) addiu a3 , sp , hexvar lw a2 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw t9 , - hexvar ( gp )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rax , qword ptr [ rax + rcx * num ] mov edx , dword ptr [ rax + hexvar ] cmp edx , dword ptr [ rbp - hexvar ] jne hexvar cmp dword ptr [ rbp - hexvar ] , num je hexvar mov eax , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rdx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rcx + rdx * num ] mov dword ptr [ rcx + hexvar ] , eax mov rdi , qword ptr [ rbp - num ] mov eax , dword ptr [ rbp - hexvar ] mov esi , eax mov eax , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov edi , eax call hexvar mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , num mov rdx , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lw s1 , - hexvar ( gp ) lw s0 , hexvar ( sp ) sw s6 , hexvar ( sp ) move s6 , a0 sw s5 , hexvar ( sp ) move s5 , a1 sw s4 , hexvar ( sp ) move s4 , a2 sw s3 , hexvar ( sp ) move s3 , a3 sw s2 , hexvar ( sp ) sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s1 ) lbu s2 , hexvar ( sp ) sw v0 , hexvar ( sp ) bltz s0 , hexvar lw v0 , hexvar ( sp ) beqz s2 , hexvar addiu v0 , zero , hexvar beq s0 , v0 , hexvar addiu s7 , sp , hexvar lw a0 , hexvar ( sp ) move v0 , s0 lw v1 , ( s1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s7 , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 sw v0 , hexvar ( sp ) lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw t9 , - hexvar ( gp )
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , num ] mov r3 , num str r3 , [ sp , num ] mov r3 , num str r3 , [ sp ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r14 , r8 mov r15 , rcx mov r12 , rdx mov ebp , esi mov rbx , rdi mov rax , qword ptr [ rdi + num ] mov qword ptr [ rsp + num ] , rax mov ecx , hexvar mov r13d , hexvar jmp hexvar mov rax , qword ptr [ rsp + hexvar ] mov rdi , rbx mov esi , ebp mov rdx , r12 mov rcx , r15 mov r8 , r14 call rax mov ecx , hexvar nop dword ptr [ rax ] cmp ecx , hexvar jle hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar cmp qword ptr [ rsp + num ] , num mov ecx , hexvar cmove ecx , r13d jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov rcx , qword ptr [ rsp + num ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rsp + hexvar ] , rcx cmp qword ptr [ rsp + hexvar ] , num mov ecx , hexvar cmove ecx , r13d jmp hexvar mov ecx , hexvar xor eax , eax jmp hexvar add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push { r4 , r5 , r6 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , num mov r5 , r0 ldr r0 , [ r4 ] ldr r1 , [ r4 , num ] bl hexvar ldr r3 , [ r4 , num ] ldr r6 , [ r4 ] cmp r3 , num ldr r0 , [ r4 , num ] beq hexvar bl hexvar ldr r3 , [ r4 , num ] add r0 , r6 , r0 str r5 , [ sp ] mvn r2 , num mov r1 , num bl hexvar ldr r0 , [ r4 ] add sp , sp , num pop { r4 , r5 , r6 , pc }
push rbp push r15 push r14 push rbx push rax test rdi , rdi je hexvar mov ebp , ecx mov rcx , rsi test rsi , rsi je hexvar mov rbx , rdi cmp qword ptr [ rdi + hexvar ] , num je hexvar mov r14 , rdx mov rdi , rbx mov esi , hexvar xor edx , edx xor r8d , r8d call hexvar test eax , eax jle hexvar mov r15d , eax movsxd rbp , eax mov rdi , rbx mov esi , hexvar mov rdx , rbp xor ecx , ecx xor r8d , r8d call hexvar test eax , eax js hexvar test al , num je hexvar mov rdi , rbx mov esi , hexvar mov rdx , rbp xor ecx , ecx xor r8d , r8d call hexvar test eax , eax js hexvar test al , num jne hexvar test r14 , r14 je hexvar test al , num jne hexvar test al , num jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax movzx eax , al add rsp , num pop rbx pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx ] , ecx mov dword ptr [ edx + num ] , hexvar mov dword ptr [ ebp - num ] , eax call hexvar cmp eax , num je hexvar xor eax , eax mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - num ] , eax call hexvar cmp eax , num jge hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ esp ] , num mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rax , num mov rdi , rax mov rsi , rax movabs rdx , num call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] xor ecx , num mov dword ptr [ rax + hexvar ] , ecx mov rdi , qword ptr [ rbp - num ] call hexvar mov edx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rdx add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , lr } sub sp , sp , hexvar mov r6 , r0 mov r0 , hexvar bl hexvar subs r4 , r0 , num beq hexvar cmp r6 , hexvar bls hexvar ldr r3 , [ pc , hexvar ] ldr r1 , [ r3 ] lsl ip , r1 , num ldr r0 , [ pc , hexvar ] umull r2 , r3 , ip , r0 cmp r6 , r3 , lsr num bhs hexvar add r5 , r6 , num bic r5 , r5 , num mov r0 , r5 bl hexvar str r0 , [ r4 ] cmp r0 , num movne r3 , num strbne r3 , [ r4 , hexvar ] beq hexvar mov r3 , num str r3 , [ r4 , num ] str r5 , [ r4 , hexvar ] str r5 , [ r4 , num ] mov r0 , r4 add sp , sp , hexvar pop { r4 , r5 , r6 , pc } ldclvs p4 , c1 , [ pc , hexvar ] ! andeq r0 , r0 , r0
call hexvar add eax , hexvar push edi push esi push ebx lea ebx , [ eax - hexvar ] lea edi , [ eax - hexvar ] mov esi , dword ptr [ esp + hexvar ] lea esi , [ esi ] sub esp , num push esi push ebx call dword ptr [ ebx + hexvar ] add esp , hexvar test eax , eax jne hexvar mov ebx , dword ptr [ ebx + hexvar ] test ebx , ebx jne hexvar add edi , num mov eax , dword ptr [ edi ] test eax , eax je hexvar sub esp , num mov ebx , eax push esi push ebx call dword ptr [ ebx + hexvar ] add esp , hexvar test eax , eax je hexvar mov eax , ebx pop ebx pop esi pop edi ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov byte ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num je hexvar lea rdi , [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov r8 , qword ptr [ rbp - hexvar ] mov esi , hexvar movabs rdx , hexvar mov al , num call hexvar mov qword ptr [ rbp - hexvar ] , rax lea rsi , [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] movabs rdx , hexvar lea rcx , [ rbp - hexvar ] lea r8 , [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
lui v0 , hexvar beqz a0 , hexvar sb zero , - hexvar ( v0 ) lui v0 , hexvar jr ra sw a0 , - hexvar ( v0 ) lui a0 , hexvar lui v0 , hexvar addiu a0 , a0 , - hexvar jr ra sw a0 , - hexvar ( v0 )
push rbp mov rbp , rsp mov dword ptr [ rbp - num ] , edi mov edi , dword ptr [ rbp - num ] shl edi , num mov eax , dword ptr [ rbp - num ] shr eax , hexvar and eax , hexvar or edi , eax mov eax , edi pop rbp ret
push r15 push r14 xor eax , eax push r13 push r12 push rbp push rbx sub rsp , hexvar mov r14d , dword ptr [ rdi + hexvar ] test r14d , r14d jne hexvar cmp qword ptr [ rdi + hexvar ] , num mov r15 , r9 mov qword ptr [ rsp + num ] , r8 mov r12 , rcx mov r13 , rdx mov rbx , rsi mov rbp , rdi je hexvar mov r8 , qword ptr [ rbp + hexvar ] mov qword ptr [ r12 ] , num test r8d , r8d jne hexvar mov rdi , qword ptr [ rbp + hexvar ] mov ecx , dword ptr [ rdi + hexvar ] test ecx , ecx jle hexvar mov r8 , qword ptr [ rdi + hexvar ] xor esi , esi jmp hexvar nop word ptr [ rax + rax ] mov rsi , qword ptr [ rbp + hexvar ] cmp rbx , qword ptr [ rsi + num ] jb hexvar lea esi , [ rax + num ] cmp esi , ecx jge hexvar lea edx , [ rsi + rcx ] mov eax , edx shr eax , hexvar add eax , edx sar eax , num movsxd rdx , eax lea rdx , [ rdx + rdx * num ] lea rbp , [ r8 + rdx * num ] mov rdx , qword ptr [ rbp ] cmp rbx , rdx jae hexvar mov ecx , eax cmp esi , ecx jl hexvar cmp rbx , rdx jae hexvar mov qword ptr [ r13 ] , num xor eax , eax add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - num ] bl hexvar mov r3 , r0 mov r0 , r3 sub sp , fp , num pop { fp , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw a1 , hexvar ( a0 )
push ebp push edi mov edi , eax push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ esp + hexvar ] , ecx mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] push hexvar push num call hexvar add esp , hexvar test eax , eax mov ecx , dword ptr [ esp + num ] mov edx , dword ptr [ esp + hexvar ] je hexvar test edi , edi mov dword ptr [ eax ] , edi jne hexvar mov dword ptr [ eax + num ] , ecx test ebp , ebp je hexvar mov ebx , dword ptr [ ebp ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ eax + hexvar ] , ebx mov ebx , dword ptr [ ebp + num ] mov dword ptr [ eax + hexvar ] , ecx mov dword ptr [ eax + hexvar ] , ebx mov ebx , dword ptr [ ebp + num ] mov dword ptr [ eax + hexvar ] , ebx test esi , esi je hexvar mov ecx , dword ptr [ esi ] mov dword ptr [ eax + hexvar ] , ecx mov ecx , dword ptr [ esi + num ] mov dword ptr [ eax + hexvar ] , ecx mov ecx , dword ptr [ esi + num ] mov dword ptr [ eax + hexvar ] , ecx mov ecx , dword ptr [ esi + hexvar ] mov dword ptr [ eax + hexvar ] , ecx add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax + hexvar ] call hexvar add esp , hexvar pop ebx ret
push rax mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rip + hexvar ] , num cmp byte ptr [ rip + hexvar ] , num jne hexvar mov edi , dword ptr [ rip + hexvar ] mov esi , hexvar call hexvar mov edi , dword ptr [ rip + hexvar ] mov esi , hexvar call hexvar mov esi , hexvar xor edi , edi call hexvar mov byte ptr [ rip + hexvar ] , num mov eax , num pop rcx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp eax , - num sete cl and cl , num movzx edx , cl mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] cmp eax , num sete cl and cl , num movzx edx , cl mov esi , dword ptr [ ebp - hexvar ] xor esi , edx cmp esi , num setne cl and cl , num movzx eax , cl add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov eax , dword ptr [ rbp - num ] cmp eax , num je hexvar nop lea rdi , [ rip + hexvar ] call hexvar mov rdx , rax mov eax , dword ptr [ rbp - num ] mov ecx , eax mov esi , hexvar lea rdi , [ rip + hexvar ] mov eax , num call hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rdi , [ rip + hexvar ] call hexvar leave ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - num ] bl hexvar mov r3 , r0 mov r0 , r3 sub sp , fp , num pop { fp , pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) sw s3 , hexvar ( sp ) move s3 , a1 lw s0 , - hexvar ( gp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a1 , a1 , - hexvar sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) move s1 , a0 sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s2 , hexvar ( sp ) lw v0 , ( s0 ) sw v0 , hexvar ( sp ) jalr t9 nop blez v0 , hexvar lw gp , hexvar ( sp ) lw v0 , ( s3 ) move a1 , zero lw t9 , - hexvar ( gp ) bal hexvar lw a0 , hexvar ( v0 )
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , edi mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ebx mov esi , dword ptr [ eax ] mov ecx , dword ptr [ ecx ] sub esp , hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , esi call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax cmp byte ptr [ edx ] , hexvar je hexvar lea edi , [ ebx - hexvar ] mov ecx , num mov esi , edx repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta al sbb al , num test al , al je hexvar xor eax , eax mov ebx , dword ptr [ ebp - hexvar ] xor ebx , dword ptr gs : [ hexvar ] jne hexvar lea esp , [ ebp - hexvar ] pop ebx pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx call hexvar add ecx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ edi + num ] mov esi , dword ptr [ eax + hexvar ] mov dword ptr [ esp + num ] , ebx mov ebp , dword ptr [ edx + hexvar ] lea edx , [ esi + num ] mov dword ptr [ eax + hexvar ] , edx mov ebx , dword ptr [ ebp + hexvar ] movzx edx , byte ptr [ ebx + num ] imul esi , edx add esi , dword ptr [ eax + hexvar ] add edx , esi mov dword ptr [ esp + hexvar ] , edx mov edx , dword ptr [ eax + hexvar ] add edx , dword ptr [ eax + hexvar ] cmp dword ptr [ esp + hexvar ] , edx jbe hexvar lea eax , [ ecx - hexvar ] sub esp , num mov ebx , ecx push hexvar push eax call hexvar mov ebx , dword ptr [ ebp + hexvar ] add esp , hexvar mov eax , dword ptr [ esp + num ] mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ ebx + hexvar ] add esp , hexvar pop ebx pop esi pop edi pop ebp jmp eax mov esi , esi lea edi , [ edi ]
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a1 sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) beqz a1 , hexvar sw gp , hexvar ( sp ) lw ra , hexvar ( sp ) move v0 , s0 lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui s1 , hexvar lw t9 , - hexvar ( gp ) lui s2 , hexvar addiu a2 , s1 , hexvar jalr t9 addiu a1 , s2 , hexvar lw gp , hexvar ( sp ) bnez v0 , hexvar move s0 , v0 lw v0 , - hexvar ( gp )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) lw v0 , - hexvar ( gp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a3 , hexvar ( sp ) lw a2 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop nop
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov eax , dword ptr [ hexvar ] mov dword ptr [ rbp - num ] , eax mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ rbp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ rbp - hexvar ] , ecx jmp hexvar cmp qword ptr [ hexvar ] , num mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ rbp - hexvar ] , ecx jmp hexvar movabs rdi , hexvar call hexvar mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov rdi , qword ptr [ hexvar ] call hexvar mov eax , dword ptr [ hexvar ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ rbp - hexvar ] , ecx jmp hexvar xor eax , eax mov esi , eax movabs rdi , hexvar movabs rdx , hexvar call hexvar mov qword ptr [ hexvar ] , rax mov dword ptr [ hexvar ] , num mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov rdi , qword ptr [ hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar xor eax , eax mov rcx , qword ptr [ hexvar ] cmp rcx , num mov edx , num cmovne eax , edx add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rbp - num ] mov rdi , rdx call rax mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rbp - num ] add rdx , num mov rdi , rdx call rax mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num nop leave ret
mov rax , qword ptr [ rdi ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar jmp rax push rax mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rcx ret
sub rsp , num cmp dword ptr [ rip + hexvar ] , num movzx eax , byte ptr [ rip + hexvar ] je hexvar movsxd rdx , dword ptr [ rip + hexvar ] cmp edx , dword ptr [ rip + hexvar ] jle hexvar test byte ptr [ rip + hexvar ] , num je hexvar lea rcx , [ rip + hexvar ] mov dword ptr [ rcx + rdx * num ] , hexvar test al , al je hexvar add qword ptr [ rip + hexvar ] , num add rsp , num jmp hexvar nop dword ptr [ rax + rax ] test al , al je hexvar mov r9d , dword ptr [ rip + hexvar ] add qword ptr [ rip + hexvar ] , num mov eax , dword ptr [ rip + hexvar ] test r9b , num je hexvar or dword ptr [ rip + hexvar ] , hexvar add eax , num test sil , num je hexvar cmp edi , num je hexvar cmp edi , num je hexvar cmp edi , hexvar ja hexvar lea r8 , [ rip + hexvar ] mov ecx , edi movsxd rdx , dword ptr [ r8 + rcx * num ] add rdx , r8 jmp rdx cmp eax , num mov rdx , qword ptr [ rip + hexvar ] mov rcx , qword ptr [ rip + hexvar ] jle hexvar mov eax , hexvar mov dword ptr [ rdx ] , hexvar add rdx , num mov word ptr [ rdx - num ] , ax mov qword ptr [ rip + hexvar ] , rdx add rsp , num ret
push ebp mov ebp , esp sub esp , hexvar call hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , hexvar mov eax , hexvar mov ecx , hexvar cmovl ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp - num ] lea edx , [ ebp - hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
cmp r2 , num blt hexvar push { r4 , r5 , r6 , r7 , lr } ldr r7 , [ pc , hexvar ] ldr r6 , [ pc , hexvar ] umull r4 , r5 , r2 , r7 lsr r3 , r5 , hexvar rsb ip , r3 , r3 , lsl num add r3 , r3 , ip , lsl num sub r3 , r2 , r3 and lr , r0 , r6 mul ip , lr , r3 umull r4 , r5 , ip , r7 lsr r2 , r5 , hexvar rsb r3 , r3 , r0 , lsr num rsb r0 , r2 , r2 , lsl num add r2 , r2 , r0 , lsl num add r3 , r3 , r1 , lsr num sub r2 , ip , r2 add r3 , r3 , r2 and r1 , r1 , r6 adds r1 , r1 , lr add r0 , r3 , hexvar add r0 , r0 , hexvar ldreq r2 , [ pc , hexvar ] beq hexvar ldr ip , [ pc , hexvar ] sub r2 , r1 , num cmp r2 , ip subhi r2 , r1 , hexvar subhi r2 , r2 , hexvar ldr r1 , [ pc , hexvar ] cmp r0 , r1 subhi r0 , r3 , hexvar ldr r3 , [ pc , hexvar ] subhi r0 , r0 , hexvar cmp r0 , r3 subhi r0 , r0 , hexvar subhi r0 , r0 , hexvar orr r0 , r2 , r0 , lsl num pop { r4 , r5 , r6 , r7 , pc }
push ebx call hexvar add ebx , hexvar sub esp , num mov edx , dword ptr [ esp + hexvar ] cmp dl , hexvar sete al cmp dl , hexvar sete cl or al , cl jne hexvar mov ecx , edx and ecx , hexvar cmp cl , hexvar je hexvar sub esp , hexvar movsx edx , dl push edx call hexvar add esp , hexvar add esp , num pop ebx ret
ldr r3 , [ pc , hexvar ] push { r4 , lr } ldr r3 , [ r3 ] mov r4 , r0 cmp r3 , num beq hexvar blx r3 mov r0 , r4 bl hexvar andeq r7 , r2 , ip , ror num
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] lea edi , [ ebp - hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , hexvar call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rip + hexvar ] sub rdi , rax sete cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi jmp rax mov rdi , qword ptr [ rip + hexvar ] mov esi , hexvar mov edx , num call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ hexvar ] mov rdx , qword ptr [ hexvar ] mov rsi , rdx add rsi , num mov qword ptr [ hexvar ] , rsi mov qword ptr [ rcx + rdx * num ] , rax add rsp , hexvar pop rbp ret
push r14 push rbx push rax mov r14 , rsi mov rbx , rdi mov rax , qword ptr [ rdi + hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , rbx call rax mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx + hexvar ] , num mov qword ptr [ rbx + hexvar ] , r14 mov rax , qword ptr [ r14 + hexvar ] test rax , rax je hexvar mov rdi , rbx call rax mov eax , num add rsp , num pop rbx pop r14 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , ecx mov byte ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp byte ptr [ eax ] , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov al , byte ptr [ ebp - num ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push { r4 , r5 , lr } sub r2 , r2 , hexvar sub sp , sp , hexvar mov r4 , r0 mov r5 , r1 cmp r2 , hexvar ldrls pc , [ pc , r2 , lsl num ] b hexvar andeq r2 , r1 , r0 , lsl num andeq r2 , r1 , r8 , lsr num strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 andeq r2 , r1 , ip , asr num andeq r2 , r1 , r0 , ror num andeq r2 , r1 , r4 , ror r1 andeq r2 , r1 , r8 , lsl num strdeq r2 , r3 , [ r1 ] , -r8 muleq r1 , ip , r1 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strheq r2 , [ r1 ] , -r0 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 andeq r2 , r1 , r4 , asr num strdeq r2 , r3 , [ r1 ] , -r8 ldrdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 strdeq r2 , r3 , [ r1 ] , -r8 andeq r2 , r1 , r4 , ror num andeq r2 , r1 , r4 , rrx ldr r3 , [ sp , hexvar ] ldr r2 , [ r3 ] asr r3 , r2 , hexvar bl hexvar mov r0 , num add sp , sp , hexvar pop { r4 , r5 , pc } ldrbpl r0 , [ r7 , - hexvar ] ! andeq r0 , r0 , r0
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx cmp dword ptr [ ebp - num ] , num jge hexvar xor eax , eax mov cl , al mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - num ] shl edx , num add eax , edx mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp - num ] mov edx , dword ptr [ edx + esi * num ] mov dword ptr [ ebp - hexvar ] , edx test cl , num mov dword ptr [ ebp - hexvar ] , eax jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] and eax , hexvar shr eax , hexvar mov ecx , dword ptr [ ebp - hexvar ] and ecx , hexvar shr ecx , num or eax , ecx mov ecx , dword ptr [ ebp - hexvar ] and ecx , hexvar shl ecx , num or eax , ecx mov ecx , dword ptr [ ebp - hexvar ] and ecx , hexvar shl ecx , hexvar or eax , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] bswap eax mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , ebx sar eax , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , ecx mov dword ptr [ eax + num ] , ebx mov dword ptr [ eax ] , edi mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx ] , eax add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov edx , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ ebp + num ] sub esp , num push edx push eax call hexvar add esp , hexvar mov edx , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ ebp + hexvar ] sub edx , eax mov eax , edx mov dword ptr [ ebp - hexvar ] , eax fild dword ptr [ ebp - hexvar ] fld qword ptr [ ebx - hexvar ] fmulp st ( num ) faddp st ( num ) fstp qword ptr [ ebp - hexvar ] fld qword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - num ] leave ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx ] , num mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx + num ] , num mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx + num ] , num mov edx , dword ptr [ ebp + num ] add edx , hexvar mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , num lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar xor ecx , ecx mov edx , dword ptr [ ebp + num ] add edx , hexvar mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , num lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov edx , dword ptr [ ebp + num ] add edx , hexvar mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , num lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar lui a1 , hexvar addiu a2 , zero , num sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) addiu a1 , a1 , - hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , zero move s0 , v0 lw gp , hexvar ( sp ) lui v0 , hexvar lw v1 , - hexvar ( v0 ) lui v0 , hexvar lw t9 , - hexvar ( gp ) lw v0 , - hexvar ( v0 ) sll v1 , v1 , num addu v0 , v0 , v1 bal hexvar lw a0 , - num ( v0 )
push r13 push r12 mov r13 , rdi push rbp push rbx mov r12 , rsi sub rsp , num mov rax , qword ptr [ rdi + hexvar ] call qword ptr [ rax ] mov edx , dword ptr [ rax ] test edx , edx jne hexvar mov rdi , qword ptr [ r12 + hexvar ] mov rbp , rax call hexvar xor edx , edx mov esi , hexvar mov edi , num call hexvar mov rbx , rax mov qword ptr [ rax + hexvar ] , r13 mov qword ptr [ rax ] , rbp mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ r12 + hexvar ] mov rsi , rbp lea rdi , [ rax + hexvar ] call hexvar test rax , rax mov qword ptr [ rbx + num ] , rax je hexvar mov rdi , qword ptr [ r12 + hexvar ] call hexvar mov qword ptr [ rbx + hexvar ] , rax lea rax , [ rbx + hexvar ] add rsp , num pop rbx pop rbp pop r12 pop r13 ret
test rdi , rdi je hexvar mov eax , dword ptr [ rdi + hexvar ] cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar push rbx mov rbx , rdi mov edi , dword ptr [ rdi + hexvar ] xor esi , esi mov edx , num call hexvar cmp rax , - num je hexvar cmp dword ptr [ rbx + hexvar ] , hexvar je hexvar pop rbx ret
push r12 push rbp push rbx sub rsp , hexvar mov rbx , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rax , qword ptr [ rdi + num ] call qword ptr [ rax + hexvar ] mov ebp , eax test eax , eax je hexvar mov rax , qword ptr [ rbx + hexvar ] mov rdi , rbx call qword ptr [ rax + hexvar ] test eax , eax sete bpl movzx ebp , bpl je hexvar mov rdi , rbx call hexvar mov eax , ebp mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
push edi push esi push ebx mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] sub esp , num call hexvar add ebx , hexvar push edi push dword ptr [ esp + hexvar ] push esi call hexvar add esp , hexvar test eax , eax je hexvar sub esp , hexvar push edi push dword ptr [ esp + hexvar ] push esi push esi push num call hexvar add esp , hexvar pop ebx pop esi pop edi ret
lw v0 , num ( a0 ) lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu a3 , zero , hexvar lw v0 , hexvar ( v0 )
push r14 push r13 mov r14 , rsi push r12 push rbp mov rbp , rdx push rbx mov rbx , rdi mov rdi , rsi call hexvar mov rdi , qword ptr [ rbx + hexvar ] movsxd r12 , eax mov r13 , rax lea rax , [ rdi + r12 ] cmp qword ptr [ rbx + hexvar ] , rax jb hexvar mov rdx , r12 mov rsi , r14 call hexvar mov rdx , r12 add rdx , qword ptr [ rbx + hexvar ] lea rax , [ rdx + num ] cmp rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rbx + hexvar ] , rdx ja hexvar mov qword ptr [ rbx + hexvar ] , rax mov byte ptr [ rdx ] , hexvar add r13 , num mov rax , qword ptr [ rbx + hexvar ] lea rdx , [ rax + num ] cmp qword ptr [ rbx + hexvar ] , rdx jae hexvar lea rdi , [ rbx + hexvar ] mov esi , num call hexvar mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rax ] , r13 add qword ptr [ rbx + hexvar ] , num lea rdi , [ rbx + hexvar ] mov rsi , rbp call hexvar test al , al jne hexvar mov rcx , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rbx + hexvar ] sub rax , rcx cmp rax , hexvar jle hexvar lea rax , [ rcx + hexvar ] mov qword ptr [ rbx + hexvar ] , rax sub rax , qword ptr [ rbx + hexvar ] shr eax , num mov edx , eax mov rax , qword ptr [ rbx + hexvar ] sub rax , qword ptr [ rbx + hexvar ] shr eax , num add rax , num cmp rdx , rax jne hexvar mov rax , qword ptr [ rbp ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp + num ] mov qword ptr [ rcx ] , num mov qword ptr [ rcx + hexvar ] , rax pop rbx pop rbp pop r12 pop r13 pop r14 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov esi , num mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] sub rdx , rax mov rax , rdx add rax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] leave ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ecx + hexvar ] , num mov dl , num mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , dl je hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ eax + hexvar ] , num sete cl mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
mov dword ptr [ rsp - num ] , edi mov eax , dword ptr [ rsp - num ] mov dword ptr [ rsp - hexvar ] , eax mov eax , dword ptr [ rsp - hexvar ] cmp eax , num jl hexvar mov eax , dword ptr [ rsp - num ] mov dword ptr [ rsp - hexvar ] , eax mov eax , dword ptr [ rsp - hexvar ] cmp eax , hexvar setge cl mov byte ptr [ rsp - hexvar ] , cl mov al , byte ptr [ rsp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ rsp - num ] mov dword ptr [ rsp - hexvar ] , eax mov eax , dword ptr [ rsp - hexvar ] movsxd rcx , eax mov qword ptr [ rsp - hexvar ] , rcx mov rax , qword ptr [ rsp - hexvar ] imul rcx , rax , hexvar movabs rdx , num add rdx , rcx cmp qword ptr [ rdx ] , num jne hexvar mov dword ptr [ rsp - num ] , hexvar jmp hexvar mov dword ptr [ rsp - num ] , num jmp hexvar mov eax , dword ptr [ rsp - num ] mov dword ptr [ rsp - hexvar ] , eax mov eax , dword ptr [ rsp - hexvar ] ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rdi , hexvar call hexvar movabs rdi , hexvar mov dword ptr [ rbp - num ] , eax call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
sub esp , hexvar call hexvar add eax , hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + num ] test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + num ] mov edx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ edx + hexvar ] sub esp , num push dword ptr [ esp + hexvar ] push edx call eax add esp , hexvar jmp hexvar nop add esp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax movsd xmm0 , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] movsd qword ptr [ rax + hexvar ] , xmm0 add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , eax mov dword ptr [ ebp - hexvar ] , hexvar mov edx , dword ptr [ ebp - hexvar ] lea esi , [ hexvar ] mov dword ptr [ ebp - hexvar ] , esi mov esi , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ esi + hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ edi + num ] sub esi , hexvar sub esi , edi add esi , hexvar mov dword ptr [ ebp - hexvar ] , esi cmp edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx ja hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar xor eax , eax sub eax , dword ptr [ ebp - hexvar ] add eax , dword ptr [ hexvar ] mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ecx mov ecx , dword ptr [ eax + num ] mov dword ptr [ edx + num ] , ecx mov ecx , dword ptr [ eax + num ] mov dword ptr [ edx + num ] , ecx mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ edx + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret num
push r14 push rbx push rax mov r14 , rdi mov rdi , qword ptr [ rdi ] call hexvar mov rbx , rax shl rbx , num mov rdi , qword ptr [ r14 + num ] call hexvar xor rax , rbx add rsp , num pop rbx pop r14 ret
sub esp , hexvar push dword ptr [ ebp + num ] call hexvar add esp , hexvar push num push eax push hexvar push dword ptr [ ebp + num ] call hexvar add esp , hexvar jmp hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) bal hexvar nop
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lw s0 , - hexvar ( v0 ) bnez s0 , hexvar move s2 , a0 move s1 , a1 addiu v1 , zero , num beqz a1 , hexvar sw v1 , - hexvar ( v0 ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a2 , zero move a1 , zero move a0 , s1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) blez v0 , hexvar lui a1 , hexvar b hexvar addiu s0 , zero , num lw v0 , - hexvar ( gp ) lw s1 , ( v0 ) bnez s1 , hexvar lw t9 , - hexvar ( gp ) b hexvar addiu s0 , zero , num addiu a1 , a1 , hexvar move a0 , s2 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a0 , s2 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) b hexvar move v0 , s0 addiu s0 , zero , num move v0 , s0 lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - num ] mov edx , dword ptr [ edx ] mov edx , dword ptr [ edx + hexvar ] add edx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ ebp - num ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov edx , dword ptr [ ebp - hexvar ] call edx add esp , hexvar pop esi pop ebp ret
push { r4 , lr } mov r4 , r0 ldr r0 , [ r0 ] cmp r0 , num beq hexvar bl hexvar ldr r0 , [ r4 , hexvar ] cmp r0 , num beq hexvar bl hexvar ldr r0 , [ r4 , hexvar ] cmp r0 , num beq hexvar bl hexvar ldr r0 , [ r4 , hexvar ] cmp r0 , num popeq { r4 , pc }
adds r3 , r0 , num movne r3 , num cmp r1 , num movne r3 , num cmp r3 , num push { r4 , lr } bne hexvar mov r4 , r1 bl hexvar adds r4 , r4 , num movne r4 , num cmp r0 , num movne r4 , num cmp r4 , num popeq { r4 , pc }
push rbx lea rsi , [ rip + hexvar ] mov rbx , rdi mov edx , num xor edi , edi call hexvar mov rcx , rbx mov rdi , qword ptr [ rip + hexvar ] mov rdx , rax pop rbx mov esi , num xor eax , eax jmp hexvar nop dword ptr [ rax + rax ] nop word ptr cs : [ rax + rax ]
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov dword ptr [ ebp - num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] add esp , hexvar pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r14 , r8 mov r15d , ecx mov r12 , rdx mov ebx , esi mov ebp , r14d and ebp , hexvar cmp rbp , num mov qword ptr [ rsp ] , rdi jne hexvar mov r13d , hexvar xor r14d , r14d mov edi , ebx mov esi , r15d mov rdx , r12 call hexvar test rax , rax je hexvar mov rbx , rax mov rax , qword ptr [ rsp ] mov rdi , qword ptr [ rax ] test r14b , r14b je hexvar mov esi , r13d mov rbp , rax call hexvar mov rdi , rax call hexvar mov rdi , qword ptr [ rbp ] mov esi , r13d mov rdx , rbx call hexvar jmp hexvar mov rdi , qword ptr [ rdi ] mov esi , ebx mov edx , hexvar call hexvar mov r13d , eax test eax , eax js hexvar test rbp , rbp je hexvar cmp rbp , num je hexvar mov r14b , num cmp rbp , num jne hexvar mov rax , qword ptr [ rsp ] mov rdi , qword ptr [ rax ] mov esi , r13d call hexvar xor ecx , ecx test rax , rax jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx jmp hexvar test rdi , rdi jne hexvar mov rbp , rax call hexvar mov rdi , rax mov qword ptr [ rbp ] , rax test rax , rax je hexvar mov rsi , rbx call hexvar xor ecx , ecx test eax , eax setne cl lea ebx , [ rcx + rcx ] add ebx , - num mov eax , ebx add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar beqz a0 , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar beqz a1 , hexvar lbu s0 , - hexvar ( v0 ) addu a3 , a0 , a1 move v0 , a0 addiu v0 , v0 , num sb s0 , - num ( v0 ) andi v1 , v0 , hexvar addiu v1 , v1 , hexvar bne v0 , a3 , hexvar addu s0 , s0 , v1 move a2 , a1 andi a1 , s0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar nop addiu s0 , s0 , hexvar addu s0 , v0 , s0 lui v0 , hexvar sb s0 , - hexvar ( v0 ) lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] cmp esi , hexvar ja hexvar test ebp , ebp je hexvar sub esp , num push hexvar lea eax , [ ebx - hexvar ] push eax lea eax , [ esi + num ] push eax call hexvar mov edi , eax add esp , hexvar test eax , eax je hexvar sub esp , num push esi push ebp push eax call hexvar mov byte ptr [ edi + esi ] , num add esp , hexvar mov eax , edi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp mov edx , dword ptr [ rip + hexvar ] mov eax , dword ptr [ rip + hexvar ] cmp edx , eax jl hexvar call hexvar call hexvar pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi jne hexvar lea eax , [ ebp - hexvar ] mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , hexvar cmp eax , dword ptr [ ebp - hexvar ] ja hexvar cmp dword ptr [ ebp + hexvar ] , num je hexvar xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar test al , num jne hexvar mov eax , dword ptr [ ebp + hexvar ] mov cl , byte ptr [ eax ] mov byte ptr [ ebp - hexvar ] , cl movzx eax , byte ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx ] , eax mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
xor edx , edx mov rax , - num div rsi cmp rax , rdi jbe hexvar imul rdi , rsi jmp hexvar nop word ptr [ rax + rax ] xor eax , eax ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax xor eax , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , edx mov ecx , dword ptr [ ecx ] sub esp , hexvar mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov esp , ebp pop ebp ret
push r14 push rbx push rax mov r14 , qword ptr [ rdi + hexvar ] test r14 , r14 je hexvar mov rbx , rdi mov rdi , qword ptr [ r14 + num ] test rdi , rdi je hexvar call hexvar mov rdi , r14 call hexvar mov dword ptr [ rbx + hexvar ] , num mov qword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx + hexvar ] , num mov eax , num add rsp , num pop rbx pop r14 ret
push rbp mov rbp , rsp sub rsp , hexvar cmp qword ptr [ hexvar ] , num sete al mov byte ptr [ rbp - num ] , al mov al , byte ptr [ rbp - num ] test al , num jne hexvar jmp hexvar cmp qword ptr [ hexvar ] , num sete al mov byte ptr [ rbp - num ] , al mov al , byte ptr [ rbp - num ] test al , num jne hexvar jmp hexvar movabs rdi , hexvar call hexvar jmp hexvar mov rdi , qword ptr [ hexvar ] call hexvar cmp qword ptr [ hexvar ] , num jne hexvar xor eax , eax mov edi , eax call hexvar mov qword ptr [ hexvar ] , rax mov rdi , qword ptr [ hexvar ] call hexvar jmp hexvar xor eax , eax mov rcx , qword ptr [ hexvar ] cmp rcx , num mov edx , num cmovne eax , edx mov dword ptr [ rbp - num ] , eax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
addiu sp , sp , - num sw fp , num ( sp ) move fp , sp sw a0 , num ( fp ) lw v0 , num ( fp ) lw v1 , num ( v0 )
mov eax , dword ptr [ esp + num ] mov edx , dword ptr [ eax + num ] cmp dword ptr [ edx + num ] , num jne hexvar movzx edx , byte ptr [ eax + hexvar ] and edx , num cmp dl , num jne hexvar mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] ret
ldrb r3 , [ r1 ] and r3 , r3 , num cmp r3 , num bxeq lr ldr r3 , [ r0 , num ] ldr r3 , [ r3 , num ] cmp r3 , num bxne lr
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r6 , r2 add r3 , r0 , hexvar ldm r3 , { r2 , r3 } adds r8 , r2 , r6 and r2 , r2 , hexvar rsb r7 , r2 , hexvar adc sb , r3 , num cmp r7 , r6 mov r5 , r0 str r8 , [ r0 , hexvar ] str sb , [ r0 , hexvar ] mov r4 , r1 bhi hexvar cmp r2 , num bne hexvar cmp r6 , hexvar movls r2 , num bls hexvar sub r7 , r6 , hexvar bic r7 , r7 , hexvar add r7 , r7 , hexvar add r7 , r4 , r7 mov r1 , r4 mov r0 , r5 add r4 , r4 , hexvar bl hexvar cmp r4 , r7 bne hexvar mov r2 , num and r6 , r6 , hexvar cmp r6 , num popeq { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } add r5 , r5 , hexvar add r0 , r5 , r2 mov r1 , r4 mov r2 , r6 pop { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } b hexvar add r8 , r0 , hexvar add r0 , r8 , r2 mov r2 , r7 bl hexvar sub r6 , r6 , r7 mov r1 , r8 mov r0 , r5 bl hexvar cmp r6 , hexvar add r4 , r4 , r7 movls r2 , num bhi hexvar b hexvar
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov r12 , qword ptr [ rbp - hexvar ] mov rbx , qword ptr [ rbp - hexvar ] cmp r12 , rbx jne hexvar mov eax , num jmp hexvar movzx eax , byte ptr [ r12 ] movzx eax , al mov edi , eax call hexvar mov byte ptr [ rbp - hexvar ] , al movzx eax , byte ptr [ rbx ] movzx eax , al mov edi , eax call hexvar mov byte ptr [ rbp - hexvar ] , al cmp byte ptr [ rbp - hexvar ] , num je hexvar add r12 , num add rbx , num movzx eax , byte ptr [ rbp - hexvar ] cmp al , byte ptr [ rbp - hexvar ] je hexvar jmp hexvar nop movzx edx , byte ptr [ rbp - hexvar ] movzx eax , byte ptr [ rbp - hexvar ] sub edx , eax mov eax , edx add rsp , hexvar pop rbx pop r12 pop rbp ret
push rbp push rbx sub rsp , num mov rcx , qword ptr [ rsi + num ] test rcx , rcx je hexvar mov eax , num cmp rcx , qword ptr [ rdx + hexvar ] jne hexvar mov rbp , rdx mov rbx , rsi mov rdx , rsi mov rsi , qword ptr [ rip + hexvar ] call hexvar mov edx , eax mov eax , num test edx , edx jne hexvar mov rax , qword ptr [ rbp + hexvar ] cmp qword ptr [ rbx + num ] , rax jne hexvar mov rax , qword ptr [ rbp + hexvar ] cmp qword ptr [ rbx ] , rax sete dl movzx edx , dl mov eax , edx and eax , num add rsp , num pop rbx pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax movsd xmm0 , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbp - num ] mulsd xmm0 , qword ptr [ rax + hexvar ] add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 move s3 , a1 sltiu v0 , a2 , hexvar beqz v0 , hexvar move s0 , a2 sll s2 , a2 , num addu s2 , a0 , s2 lw v0 , hexvar ( s2 ) bnez v0 , hexvar lw ra , hexvar ( sp ) addiu a2 , a2 , - hexvar sltiu v0 , a2 , hexvar beqz v0 , hexvar lw s4 , ( a0 ) move a1 , s3 move a0 , s1 jal hexvar nop lw gp , hexvar ( sp ) move a1 , v0 move a0 , s4 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) b hexvar sw v0 , hexvar ( s2 ) addiu a2 , zero , num lui a1 , hexvar addiu a1 , a1 , - hexvar move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a2 , v0 move a1 , s3 move a0 , s1 jal hexvar nop lw gp , hexvar ( sp ) b hexvar move v0 , zero move a0 , s4 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) b hexvar addiu a0 , s0 , hexvar move a0 , s4 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) move a2 , v0 lui a1 , hexvar addiu a1 , a1 , - hexvar move a0 , s4 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) addiu a0 , s0 , hexvar sll a0 , a0 , num addu a0 , s1 , a0 sw v0 , num ( a0 ) lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar move a2 , zero addiu a1 , zero , num move a0 , s4 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) move a2 , v0 lui a1 , hexvar b hexvar addiu a1 , a1 , - hexvar addiu a2 , zero , num addiu a1 , zero , num move a0 , s4 lw t9 , - hexvar ( gp )
cmp esi , num je hexvar cmp esi , num ja hexvar lea rax , [ rip + hexvar ] cmp esi , num je hexvar cmp esi , num ja hexvar lea rax , [ rax - hexvar ] cmp esi , num je hexvar lea rax , [ rax + hexvar ] cmp esi , num jne hexvar ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] cmp ecx , num mov dword ptr [ ebp - num ] , eax jle hexvar mov eax , dword ptr [ hexvar ] add eax , - num mov dword ptr [ hexvar ] , eax add esp , num pop ebp ret
push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] lea edx , [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ esi + num ] push edx push hexvar push - num push hexvar push hexvar push esi call dword ptr [ eax + hexvar ] add esp , hexvar mov edx , dword ptr [ esp + num ] test edx , edx je hexvar mov edx , dword ptr [ esi + hexvar ] cmp dword ptr [ edx + hexvar ] , hexvar je hexvar mov dword ptr [ edx + hexvar ] , num mov edx , dword ptr [ esi + hexvar ] mov eax , dword ptr [ edx + hexvar ] test eax , eax je hexvar sub esp , num push dword ptr [ edx + hexvar ] push esi call eax add esp , hexvar test eax , eax je hexvar js hexvar mov eax , num mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , num ( v0 )
push rbp mov rbp , rsp mov dword ptr [ rbp - num ] , edi cmp dword ptr [ rbp - num ] , num jne hexvar movzx eax , byte ptr [ rip + hexvar ] xor eax , num test al , al je hexvar mov eax , dword ptr [ rbp - num ] mov dword ptr [ rip + hexvar ] , eax nop pop rbp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar movss xmm0 , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] movss dword ptr [ eax + hexvar ] , xmm0 mov bl , num and bl , num movzx eax , bl add esp , hexvar pop esi pop ebx pop ebp ret
push ebx sub esp , num call hexvar add ebx , hexvar mov ecx , dword ptr [ esp + hexvar ] cmp dword ptr [ ecx + hexvar ] , num jne hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , num push dword ptr [ ecx + hexvar ] push dword ptr [ ecx + hexvar ] call hexvar test eax , eax setg al add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp addiu a0 , zero , num jal hexvar nop lui v0 , hexvar lw v0 , - hexvar ( v0 ) addiu v1 , v0 , num lui v0 , hexvar sw v1 , - hexvar ( v0 ) nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ecx ] , num mov dword ptr [ ebp - num ] , eax je hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar add esp , num pop ebp ret
push esi push ebx sub esp , num call hexvar add ebx , hexvar call hexvar sub esp , hexvar push eax call hexvar add esp , hexvar test eax , eax je hexvar mov esi , eax push dword ptr [ esp + hexvar ] push num push hexvar push eax call hexvar add esp , num push esi push dword ptr [ esp + hexvar ] call hexvar mov dword ptr [ esp ] , esi call hexvar add esp , hexvar add esp , num pop ebx pop esi ret
push rax mov rdi , qword ptr [ rdi ] add rdi , hexvar call hexvar xor ecx , ecx test rax , rax setne cl mov eax , ecx pop rcx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] add rsi , - hexvar mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rsi + hexvar ] mov esi , eax mov eax , esi and eax , num mov esi , eax mov rsi , qword ptr [ rsi * num + hexvar ] jmp rsi mov rax , qword ptr [ rbp - hexvar ] sub rax , hexvar setb cl movzx edx , cl mov esi , edx mov rsi , qword ptr [ rsi * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rsi mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov esi , hexvar call hexvar mov rax , qword ptr [ rip + hexvar ] jmp rax add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , esp add esi , - hexvar mov esp , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edi mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , ebx mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , edi mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax cmp dword ptr [ ecx ] , num sete al mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar call hexvar cmp dword ptr [ eax ] , hexvar sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar call hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push num push eax push num call hexvar pop edx pop ecx push eax push num call hexvar add esp , hexvar pop ebx ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edx , dword ptr [ ebx + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax test edx , edx je hexvar mov eax , dword ptr [ esp + hexvar ] sub esp , hexvar and eax , hexvar mov dword ptr [ esp + hexvar ] , eax lea eax , [ esp + hexvar ] push eax call dword ptr [ edx + num ] add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx ret
push rbp push r15 push r14 push rbx sub rsp , hexvar mov rbx , rsi mov r14 , rdi mov rdi , rsi mov esi , hexvar call hexvar test rax , rax je hexvar movabs rax , hexvar mov qword ptr [ rsp + hexvar ] , rax mov dword ptr [ rsp + hexvar ] , num xor ebp , ebp lea r8 , [ rsp + hexvar ] mov ecx , hexvar mov rdi , rbx mov esi , hexvar xor edx , edx call hexvar test eax , eax je hexvar movsxd rbx , dword ptr [ rsp + hexvar ] movsxd r15 , dword ptr [ rsp + hexvar ] cmp rbx , - num je hexvar cmp r15d , hexvar je hexvar mov eax , dword ptr [ rsp + hexvar ] cmp eax , num jg hexvar cmp eax , num je hexvar cmp eax , num jne hexvar test r15d , r15d jg hexvar jmp hexvar xor ebp , ebp lea rdx , [ rsp + hexvar ] lea rcx , [ rsp + hexvar ] lea r8 , [ rsp + hexvar ] lea r9 , [ rsp + hexvar ] mov esi , hexvar mov rdi , rbx xor eax , eax call hexvar cmp eax , num jne hexvar mov edx , dword ptr [ rsp + hexvar ] mov eax , dword ptr [ rsp + hexvar ] mov edi , eax or edi , edx mov ebx , dword ptr [ rsp + hexvar ] mov ecx , dword ptr [ rsp + hexvar ] mov esi , ebx or esi , ecx or esi , edi cmp esi , hexvar ja hexvar mov byte ptr [ r14 ] , dl mov byte ptr [ r14 + num ] , al mov byte ptr [ r14 + num ] , bl mov byte ptr [ r14 + num ] , cl mov ebp , num jmp hexvar cmp r15d , hexvar jne hexvar movups xmm0 , xmmword ptr [ rsp + hexvar ] movups xmmword ptr [ r14 ] , xmm0 mov ebp , hexvar mov eax , ebp add rsp , hexvar pop rbx pop r14 pop r15 pop rbp ret
push rbp push r15 push r14 push rbx push rax mov r14d , ecx mov r15d , edx mov ebp , esi mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] call hexvar mov qword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov qword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov qword ptr [ rbx + hexvar ] , num test ebp , ebp je hexvar call hexvar mov qword ptr [ rbx + hexvar ] , rax test rax , rax je hexvar movsxd rsi , ebp mov rdi , rax call hexvar test eax , eax je hexvar test r15d , r15d je hexvar call hexvar mov qword ptr [ rbx + hexvar ] , rax test rax , rax je hexvar movsxd rsi , r15d mov rdi , rax call hexvar test eax , eax je hexvar mov ebp , num test r14d , r14d je hexvar call hexvar mov qword ptr [ rbx + hexvar ] , rax test rax , rax je hexvar movsxd rsi , r14d mov rdi , rax call hexvar test eax , eax jne hexvar mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov qword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov qword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov qword ptr [ rbx + hexvar ] , num mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebp , ebp mov eax , ebp add rsp , num pop rbx pop r14 pop r15 pop rbp ret
push edi push esi push ebx mov edi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] cmp edi , eax jae hexvar mov eax , dword ptr [ edx ] cmp esi , ecx lea eax , [ eax + edi * num ] mov edi , dword ptr [ eax + num ] jae hexvar mov ecx , dword ptr [ esp + hexvar ] test edi , edi mov edx , dword ptr [ ecx ] lea edx , [ edx + esi * num ] mov ecx , dword ptr [ edx ] mov esi , dword ptr [ edx + num ] je hexvar test esi , esi je hexvar cmp byte ptr [ ebx + hexvar ] , num mov eax , dword ptr [ eax ] jne hexvar cmp byte ptr [ ebx + hexvar ] , num jne hexvar sub esp , num mov edx , esi cmp edi , esi cmovbe edx , edi push edx push ecx push eax call hexvar add esp , hexvar test eax , eax jne hexvar cmp edi , esi jb hexvar setne al pop ebx movzx eax , al pop esi pop edi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx cmp ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx jne hexvar mov eax , dword ptr [ ebp + num ] test byte ptr [ eax + hexvar ] , num je hexvar mov eax , dword ptr [ ebp + num ] add eax , hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp dword ptr [ eax + hexvar ] , num je hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov ecx , dword ptr [ ebp - num ] add ecx , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop ebp ret
cmp r0 , num push { r4 , lr } beq hexvar mov r4 , r1 mov r2 , num mov r1 , r0 mov r0 , num bl hexvar mov r1 , num mov r2 , r0 mov r3 , r4 mov r0 , r1 bl hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r3 , [ pc , hexvar ] mov r2 , r0 ldr r3 , [ r3 ] mov r1 , num mov r0 , num bl hexvar bl hexvar andeq sp , r1 , r0 , ror pc strheq r0 , [ r3 ] , -ip
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar lui a3 , hexvar lui a1 , hexvar sw ra , hexvar ( sp ) lui a0 , hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) addiu a3 , a3 , - hexvar addiu a2 , zero , hexvar addiu a1 , a1 , - hexvar jalr t9 addiu a0 , a0 , - hexvar
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] cmp edi , dword ptr [ esi + hexvar ] mov eax , dword ptr [ esi + hexvar ] ja hexvar sub esp , num push edi push dword ptr [ esp + hexvar ] push eax call hexvar add esp , hexvar test edi , edi mov eax , dword ptr [ esi + hexvar ] je hexvar movzx edx , byte ptr [ eax ] lea ebp , [ eax + edi ] mov ecx , edx and ecx , hexvar cmp cl , hexvar jne hexvar jmp hexvar cmp dl , hexvar jne hexvar mov byte ptr [ eax ] , hexvar add eax , num cmp eax , ebp je hexvar movzx edx , byte ptr [ eax ] mov ecx , edx and ecx , hexvar cmp cl , hexvar je hexvar cmp dl , hexvar jne hexvar mov byte ptr [ eax ] , hexvar add eax , num cmp eax , ebp jne hexvar mov eax , dword ptr [ esi + hexvar ] sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push edi push eax lea eax , [ esi + num ] push eax call hexvar mov edx , dword ptr [ esi + num ] add esp , hexvar mov dword ptr [ esi ] , edx add esp , hexvar pop ebx pop esi pop edi pop ebp ret
test rdi , rdi je hexvar movabs rax , hexvar movq xmm0 , rax pslldq xmm0 , num movdqu xmmword ptr [ rdi ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movabs rax , hexvar movq xmm0 , rax movdqu xmmword ptr [ rdi + hexvar ] , xmm0 xor eax , eax ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi ] mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , num setne cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax ] , hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , num mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar cmp eax , num setge bl and bl , num movzx eax , bl add esp , hexvar pop esi pop ebx pop ebp ret
test rdi , rdi mov r10d , ecx je hexvar cmp qword ptr [ rdi + hexvar ] , num je hexvar cmp qword ptr [ rdi + hexvar ] , num je hexvar mov r9 , qword ptr [ rdi + hexvar ] mov eax , hexvar test r9 , r9 je hexvar cmp rdi , qword ptr [ r9 ] je hexvar ret nop mov eax , dword ptr [ r9 + num ] mov edi , num lea ecx , [ rax - hexvar ] cmp ecx , hexvar ja hexvar movabs rdi , hexvar shr rdi , cl not rdi and edi , num cmp eax , hexvar setne cl cmp eax , hexvar setne al test cl , al je hexvar test dil , dil mov eax , hexvar jne hexvar mov dword ptr [ r9 + hexvar ] , esi mov dword ptr [ r9 + hexvar ] , edx xor eax , eax mov dword ptr [ r9 + hexvar ] , r10d mov dword ptr [ r9 + hexvar ] , r8d ret
push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ esi + num ] mov dword ptr [ esp + hexvar ] , edx test eax , eax je hexvar mov edx , dword ptr [ esi + hexvar ] test edx , edx je hexvar mov eax , dword ptr [ esi + num ] cmp dword ptr [ edx + num ] , eax je hexvar sub esp , hexvar push hexvar call hexvar lea edi , [ eax + num ] mov ecx , eax mov dword ptr [ eax ] , num mov dword ptr [ eax + hexvar ] , num mov edx , eax xor eax , eax and edi , hexvar sub ecx , edi sub ecx , - hexvar shr ecx , num rep stosd dword ptr es : [ edi ] , eax mov eax , dword ptr [ esi + num ] mov ecx , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esp + hexvar ] mov dword ptr [ edx + num ] , eax mov eax , dword ptr [ esp + hexvar ] add esp , hexvar mov dword ptr [ edx + hexvar ] , ecx lea ecx , [ edx + hexvar ] mov dword ptr [ edx + hexvar ] , ebx mov dword ptr [ edx + num ] , eax lea eax , [ edx + hexvar ] mov esi , esi lea edi , [ edi ] mov dword ptr [ eax ] , hexvar add eax , num cmp eax , ecx jne hexvar mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar mov dword ptr [ eax ] , edx mov dword ptr [ esi + hexvar ] , edx mov eax , num add esp , hexvar pop ebx pop esi pop edi ret
push { r4 , r5 , r6 , r7 , r8 , sb , lr } ldr r3 , [ pc , hexvar ] ldr r7 , [ pc , hexvar ] ldrb r1 , [ r3 , hexvar ] ldr r2 , [ r7 ] ldr r5 , [ pc , hexvar ] sub sp , sp , hexvar cmp r1 , r0 mov r6 , r0 str r2 , [ sp , hexvar ] ldr r4 , [ r5 , hexvar ] ldreq r8 , [ r3 , hexvar ] beq hexvar cmp r0 , num beq hexvar bl hexvar ldr r2 , [ r0 ] lsl r3 , r6 , num ldrh r3 , [ r2 , r3 ] tst r3 , hexvar bne hexvar ldrb r3 , [ r5 , hexvar ] cmp r3 , num bne hexvar ldrb r1 , [ r5 , hexvar ] cmp r1 , num beq hexvar tst r6 , hexvar bne hexvar mov r3 , hexvar mov r0 , num eor r6 , r6 , hexvar strb r6 , [ r4 , num ] strb r3 , [ r4 ] mov r1 , r0 ldr sb , [ r5 , hexvar ] b hexvar mov r8 , num ldr sb , [ r5 , hexvar ] mov r1 , r8 mov r0 , sb bl hexvar ldrb r3 , [ r5 , hexvar ] sub r1 , r8 , r1 cmp r3 , num bne hexvar cmp r1 , num strb r6 , [ r4 ] mov r0 , num blt hexvar add r1 , r1 , sb str r1 , [ r5 , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r7 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc } andeq r8 , r0 , fp , lsl num andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num jne hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + hexvar ] mov eax , hexvar cmp rdx , rax je hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] lea rsi , [ rip - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + num ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar call hexvar mov dword ptr [ rax ] , num jmp hexvar nop leave ret
push edi push ebx call hexvar add ebx , hexvar sub esp , num lea eax , [ ebx - hexvar ] push hexvar push eax push hexvar call hexvar add esp , hexvar test eax , eax mov edx , eax je hexvar lea edi , [ eax + num ] mov ecx , eax mov dword ptr [ eax ] , num mov dword ptr [ eax + hexvar ] , num xor eax , eax and edi , hexvar sub ecx , edi add ecx , hexvar shr ecx , num rep stosd dword ptr es : [ edi ] , eax add esp , num mov eax , edx pop ebx pop edi ret
sw a0 , ( sp ) lw v0 , ( sp ) lw v0 , num ( v0 ) bnez v0 , hexvar nop lw v0 , ( sp ) lw v1 , ( v0 ) addiu v0 , zero , num bne v1 , v0 , hexvar nop lw v0 , ( sp ) lw v0 , ( v0 ) b hexvar nop move v0 , zero jr ra nop
push { r4 , r5 , r6 , r7 , r8 , lr } sub sp , sp , num mov r7 , r1 mov r8 , r2 mov r4 , r3 mov r6 , r0 bl hexvar mov r5 , r0 bl hexvar ldr r0 , [ r0 ] cmp r0 , num beq hexvar sub r4 , r4 , num str r4 , [ sp ] mov r3 , r8 sub r2 , r7 , num mov r1 , r6 bl hexvar mov r0 , r5 add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , pc }
push rbp push r14 push rbx sub rsp , hexvar mov r14 , rdi mov qword ptr [ rsp + num ] , num lea rdi , [ rsp + num ] mov edx , num call hexvar test eax , eax js hexvar mov ebx , eax mov rsi , qword ptr [ rsp + num ] mov rdi , r14 mov edx , eax call hexvar mov ebp , eax mov rdi , qword ptr [ rsp + num ] call hexvar cmp ebp , ebx mov eax , hexvar cmove eax , ebx jmp hexvar mov eax , hexvar add rsp , hexvar pop rbx pop r14 pop rbp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar xor ecx , ecx mov dword ptr [ eax ] , hexvar mov eax , ecx add esp , num pop ebp ret
addiu sp , sp , - hexvar sw s2 , hexvar ( sp ) move s2 , a2 sw s0 , hexvar ( sp ) move s0 , a1 sw s1 , hexvar ( sp ) move a1 , a3 sw ra , hexvar ( sp ) move s1 , a0 jal hexvar lw a2 , hexvar ( a0 )
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar pop ebx ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] ldr r3 , [ sp , num ] ldr r1 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] mov r0 , hexvar bl hexvar mov r0 , r0 add sp , sp , hexvar pop { pc }
mov edi , dword ptr [ esp ] lea eax , [ edi - hexvar ] cmp eax , hexvar ja hexvar lea eax , [ ebx - hexvar ] sub esp , num push num push eax push num call hexvar add esp , hexvar push edi push eax push num call hexvar add esp , hexvar lea esi , [ esi ] mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] mov eax , dword ptr [ esp + hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push r15 push r14 lea r15 , [ rip + hexvar ] push r13 push r12 mov r14 , rsi push rbp push rbx mov rbp , rdi mov r13 , rdx mov r12 , r8 lea rsi , [ rip + hexvar ] sub rsp , hexvar test cl , num jne hexvar lea rax , [ rip + hexvar ] lea r15 , [ rip + hexvar ] and ecx , num lea rsi , [ rip + hexvar ] cmovne r15 , rax lea rax , [ rip + hexvar ] cmovne rsi , rax mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsp + num ] , rsi call hexvar lea rbx , [ rax + num ] mov rsi , qword ptr [ rsp + num ] mov rdx , r14 mov rcx , r13 shr rbx , num mov rdi , rbx call hexvar mov rsi , rbx mov r13 , rax mov rdi , rax call hexvar mov rsi , rbx mov rdi , r13 mov r14 , rax call hexvar mov rdi , r13 call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rdi , r14 mov r9 , qword ptr [ rbp - hexvar ] mov r8 , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , r14 mov rbp , rax call hexvar mov rdi , qword ptr [ r12 + num ] mov rsi , r15 call hexvar mov rdi , rbp call hexvar lea rbx , [ rax + num ] mov rdi , qword ptr [ r12 + num ] shr rbx , num mov rsi , rbx call hexvar test rbx , rbx je hexvar sub rbx , num nop dword ptr [ rax + rax ] mov rsi , rbx mov rdi , rbp sub rbx , num call hexvar mov rdi , qword ptr [ r12 + num ] movzx esi , al call hexvar cmp rbx , - num jne hexvar add rsp , hexvar mov rdi , rbp pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp hexvar nop dword ptr [ rax + rax ]
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - num ] , num jmp hexvar mov rdx , qword ptr [ rbp - num ] mov rax , rdx shl rax , num sub rax , rdx mov rdx , rax movzx eax , byte ptr [ rbp - num ] add rax , rdx mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rdx add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] mov byte ptr [ rbp - num ] , al cmp byte ptr [ rbp - num ] , num jne hexvar mov rax , qword ptr [ rbp - num ] pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - num ] jge hexvar mov rax , qword ptr [ rbp - hexvar ] shl rax , num movabs rcx , hexvar add rcx , rax cmp dword ptr [ rcx + num ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] shl rax , num movabs rcx , hexvar add rcx , rax call qword ptr [ rcx + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] shl rcx , num movabs rdx , hexvar add rdx , rcx mov dword ptr [ rdx + num ] , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov byte ptr [ ebp - num ] , num mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov ecx , esp mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + num ] , hexvar call hexvar cmp eax , num je hexvar mov eax , dword ptr [ ebp - num ] mov ecx , esp mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + num ] , hexvar call hexvar cmp eax , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
movzx edx , byte ptr [ rdi ] xor eax , eax lea rcx , [ rdi + num ] test dl , dl je hexvar lea rdi , [ rip + hexvar ] mov esi , hexvar nop dword ptr [ rax ] cmp dl , hexvar cmove rdx , rsi add rcx , num movzx edx , byte ptr [ rdi + rdx ] imul eax , eax , hexvar lea eax , [ rax + rdx - hexvar ] movzx edx , byte ptr [ rcx - num ] test dl , dl jne hexvar ret ret nop dword ptr [ rax ] nop word ptr cs : [ rax + rax ]
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] cmp dword ptr [ esp + hexvar ] , eax jle hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] sub esp , hexvar push eax call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ eax ] , edx mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ eax + num ] , edx mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
push rbp push rbx push rax mov rbx , rdx mov ebp , esi call hexvar test rax , rax je hexvar add rax , hexvar mov rdi , rax mov esi , ebp mov rdx , rbx add rsp , num pop rbx pop rbp jmp hexvar xor eax , eax add rsp , num pop rbx pop rbp ret
sub rsp , hexvar mov r10 , rdi test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 mov qword ptr [ rsp + hexvar ] , r9 mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rsi lea rax , [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax lea rax , [ rsp + hexvar ] mov qword ptr [ rsp + num ] , rax movabs rax , hexvar mov qword ptr [ rsp ] , rax mov rdi , qword ptr [ rip + hexvar ] mov rdx , rsp mov rsi , r10 call hexvar add rsp , hexvar ret
lw a2 , hexvar ( a0 ) addiu sp , sp , - hexvar lw t8 , hexvar ( a0 ) lw t2 , hexvar ( a0 ) lw v0 , hexvar ( a0 ) addiu v1 , a2 , - hexvar lw t0 , hexvar ( a0 ) sltu v1 , v1 , t8 sw s1 , num ( sp ) sw s4 , hexvar ( sp ) addu t9 , t2 , t8 sw s3 , hexvar ( sp ) move t1 , v0 sw s2 , hexvar ( sp ) sw s0 , num ( sp ) beqz v1 , hexvar lw s1 , hexvar ( a0 ) addiu t4 , t8 , hexvar subu t4 , t4 , a2 lw a2 , hexvar ( a0 ) addu v1 , t9 , v0 addiu t8 , t8 , hexvar lw t6 , hexvar ( a0 ) lw t7 , hexvar ( a0 ) sltu v0 , v0 , a2 lbu s0 , - num ( v1 )
cmp qword ptr [ rip + hexvar ] , num je hexvar mov rax , qword ptr [ rip + hexvar ] jmp rax push rax mov edi , dword ptr [ rip + hexvar ] test edi , edi jne hexvar call hexvar mov edi , eax mov dword ptr [ rip + hexvar ] , eax mov ecx , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rcx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + num ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbx sub rsp , hexvar mov rbx , rdx test edi , edi sete cl mov al , hexvar cmp edi , num jne hexvar mov cl , hexvar cmp edi , num jne hexvar mov al , hexvar cmp edi , num je hexvar mov eax , ecx mov byte ptr [ rsp + hexvar ] , al mov rdi , qword ptr [ rbx + num ] lea rsi , [ rsp + hexvar ] mov edx , num call hexvar mov rdi , qword ptr [ rbx + num ] mov esi , hexvar xor edx , edx xor ecx , ecx call hexvar mov eax , num add rsp , hexvar pop rbx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + num ] cmp edx , hexvar mov eax , dword ptr [ eax + hexvar ] jbe hexvar mov ecx , dword ptr [ esp + num ] mov eax , dword ptr [ eax + ecx * num + hexvar ] test eax , eax je hexvar cmp edx , dword ptr [ eax + num ] je hexvar jae hexvar jmp hexvar nop lea esi , [ esi ] cmp dword ptr [ eax + num ] , edx je hexvar ja hexvar mov eax , dword ptr [ eax ] test eax , eax jne hexvar ret nop lea ecx , [ edx + edx * num ] imul edx , dword ptr [ esp + num ] , hexvar lea edx , [ edx + ecx * num ] mov eax , dword ptr [ eax + edx + hexvar ] ret
lw v0 , hexvar ( a0 ) beqz v0 , hexvar lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar move a2 , a0 lui a3 , hexvar sw ra , hexvar ( sp ) lui a1 , hexvar sw gp , hexvar ( sp ) lui a0 , hexvar lw t9 , - hexvar ( gp ) addiu v0 , zero , num addiu a3 , a3 , - hexvar addiu a1 , a1 , hexvar sw v0 , hexvar ( sp ) addiu a0 , a0 , - hexvar jalr t9 sw v0 , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar jr ra addiu v0 , zero , num
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , ecx mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + hexvar ] , eax mov eax , num add esp , hexvar pop ebp ret
cmp edi , hexvar je hexvar cmp edi , hexvar jle hexvar cmp edi , hexvar je hexvar cmp edi , hexvar jg hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar cmp edi , hexvar jle hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar jmp hexvar cmp edi , hexvar jg hexvar cmp edi , hexvar jge hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar cmp edi , hexvar jle hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar jmp hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar jne hexvar ret lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar cmp edi , hexvar jg hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar mov eax , num jmp hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar jmp hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar cmp edi , hexvar jle hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar jmp hexvar lea rax , [ rip + hexvar ] cmp edi , hexvar je hexvar jmp hexvar sub edi , hexvar movsxd rdi , edi lea rax , [ rip + hexvar ] mov rax , qword ptr [ rax + rdi * num ] ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 move s3 , a1 move s0 , zero lw a0 , num ( s1 )
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] str r3 , [ fp , - num ] ldr r1 , [ fp , - num ] ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 cmp r3 , num moveq r3 , num movne r3 , num and r3 , r3 , hexvar mov r0 , r3 sub sp , fp , num pop { fp , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r12 , r9 mov r13 , r8 mov rbp , rcx mov r14 , rdx mov rbx , rsi mov r15 , qword ptr [ rsp + hexvar ] mov rdi , rsp call hexvar mov rdi , rbx mov rsi , r14 mov r14 , qword ptr [ rsp + hexvar ] mov rdx , rbp mov rcx , r15 mov r8 , r14 call hexvar xor ebp , ebp test eax , eax je hexvar mov rdi , rsp mov rsi , r13 mov rdx , r12 mov rcx , r15 mov r8 , r14 call hexvar test eax , eax je hexvar mov rdx , rsp mov rdi , rbx mov rsi , rbx mov rcx , r15 mov r8 , r14 call hexvar xor ebp , ebp test eax , eax setne bpl mov rdi , rsp call hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] add eax , hexvar push eax call hexvar test eax , eax setne al add esp , hexvar movzx eax , al pop ebx ret
push rbp push r14 push rbx mov eax , dword ptr [ rdi ] mov ebp , hexvar cmp eax , dword ptr [ rsi ] jne hexvar mov rbx , rdi mov rax , qword ptr [ rdi + hexvar ] mov ebp , hexvar test rax , rax je hexvar mov r14 , rsi mov rcx , qword ptr [ rax + hexvar ] test rcx , rcx je hexvar mov rdi , rbx mov rsi , r14 call rcx test eax , eax jle hexvar mov rax , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , rbx mov rsi , r14 pop rbx pop r14 pop rbp jmp rax mov ebp , eax mov eax , ebp pop rbx pop r14 pop rbp ret
push r15 push r14 mov r9d , r8d push r13 push r12 mov r14d , edi push rbp push rbx mov r12 , rsi mov r15d , edx mov r13 , rcx mov ebp , r8d sub rsp , hexvar mov r8 , rcx mov ecx , edx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rdx , rsi mov esi , edi mov edi , hexvar call hexvar mov rbx , rax call hexvar test ebx , ebx mov r9 , rax mov eax , ebx js hexvar mov rsi , qword ptr [ rsp + hexvar ] xor rsi , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov edi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov esi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar xor esi , esi mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] shl rcx , num mov rdi , rax mov rdx , rcx call hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jge hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi + rdi * num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + rsi * num ] , num jne hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] sub ecx , num sete dl movzx esi , dl mov esi , dword ptr [ esi * num + hexvar ] mov dl , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , dl jmp esi mov eax , dword ptr [ ebp + num ] sub eax , hexvar sete cl movzx edx , cl mov edx , dword ptr [ edx * num + hexvar ] mov cl , num mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , cl jmp edx mov eax , dword ptr [ ebp + num ] sub eax , hexvar sete cl movzx edx , cl mov edx , dword ptr [ edx * num + hexvar ] mov cl , num mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , cl jmp edx mov eax , dword ptr [ ebp + num ] sub eax , hexvar sete cl mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , cl jmp edx mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rsi + num ] mov rsi , qword ptr [ rbp - hexvar ] cmp eax , dword ptr [ rsi + num ] jae hexvar mov dword ptr [ rbp - num ] , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] cmp ecx , dword ptr [ rax + num ] jbe hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rcx , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rcx ] jae hexvar mov dword ptr [ rbp - num ] , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rcx , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rcx ] jbe hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rcx + hexvar ] jae hexvar mov dword ptr [ rbp - num ] , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rcx + hexvar ] jbe hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] pop rbp ret
movzx rbx , word ptr [ rsi + hexvar ] movzx rax , word ptr [ rsi + hexvar ] shl rbx , hexvar shl rax , hexvar mov bx , word ptr [ rsi + hexvar ] mov ax , word ptr [ rsi + hexvar ] shl rbx , hexvar shl rax , hexvar mov bx , word ptr [ rsi + hexvar ] mov ax , word ptr [ rsi + hexvar ] shl rbx , hexvar shl rax , hexvar mov bx , word ptr [ rsi ] mov ax , word ptr [ rsi + hexvar ] mov qword ptr [ rdx ] , rbx mov qword ptr [ rdx + num ] , rax lea rsi , [ rsi + hexvar ] lea rdx , [ rdx + hexvar ] sub rbp , num jne hexvar mov qword ptr [ rsp + hexvar ] , hexvar mov rcx , qword ptr [ rsp + num ] mov qword ptr [ rsp + hexvar ] , rcx mov r10 , qword ptr [ rcx ] mov r11 , qword ptr [ rcx + num ] mov r12 , qword ptr [ rcx + hexvar ] mov r13 , qword ptr [ rcx + hexvar ] mov r14 , qword ptr [ rcx + hexvar ] mov r15 , qword ptr [ rcx + hexvar ] mov r8 , qword ptr [ rcx + hexvar ] mov r9 , qword ptr [ rcx + hexvar ] jmp hexvar
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ esi + num ] mov dword ptr [ esp + hexvar ] , edx test eax , eax je hexvar xor edi , edi nop sub esp , num push dword ptr [ esi ] add edi , num push hexvar call hexvar add esp , hexvar cmp edi , dword ptr [ esi + num ] jb hexvar mov eax , dword ptr [ esp + num ] mov edx , dword ptr [ esp + hexvar ] lea edi , [ esp + hexvar ] mov ecx , edi call hexvar lea eax , [ ebx - hexvar ] sub esp , num push edi push dword ptr [ esp + hexvar ] push ebp push eax push num push dword ptr [ esi ] call hexvar add esp , hexvar mov eax , num mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rax test rdi , rdi je hexvar test rsi , rsi je hexvar mov rax , qword ptr [ rdi ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar call rax test rax , rax je hexvar pop rcx ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r15 , r9 mov r14d , r8d mov r12 , rcx mov r13d , edx mov rbp , rsi xor esi , esi call hexvar test rax , rax je hexvar mov rbx , rax sub rsp , num mov rdi , rax mov rsi , rbp mov edx , num mov ecx , r13d mov r8d , num mov r9 , r12 push qword ptr [ rsp + hexvar ] push r15 push r14 call hexvar add rsp , hexvar mov ebp , eax mov rdi , rbx call hexvar mov eax , ebp jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar xor eax , eax add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] mov r3 , r1 strb r3 , [ fp , - hexvar ] mov r1 , hexvar ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] cmp r3 , num beq hexvar ldr r3 , [ fp , - num ] add r3 , r3 , num ldrb r3 , [ r3 ] cmp r3 , num bne hexvar ldrb r3 , [ fp , - hexvar ] mov r1 , r3 ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r3 , num b hexvar mov r3 , num b hexvar mov r3 , num mov r0 , r3 sub sp , fp , num pop { fp , pc }
beqz a0 , hexvar addiu v0 , zero , num jr ra nop lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu a2 , zero , hexvar sw s1 , hexvar ( sp ) lui s1 , hexvar sw s0 , hexvar ( sp ) addiu a0 , zero , num sw gp , hexvar ( sp ) move s0 , a1 sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu a1 , s1 , - hexvar lw gp , hexvar ( sp ) beqz v0 , hexvar move v1 , v0 lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) sw zero , ( v0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar cmp dword ptr [ ebp + hexvar ] , num je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx ] , eax xorps xmm0 , xmm0 movsd qword ptr [ ebp - num ] , xmm0 jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar fstp qword ptr [ ebp - hexvar ] movsd xmm0 , qword ptr [ ebp - hexvar ] movsd qword ptr [ ebp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ ebp - hexvar ] movsd qword ptr [ ebp - num ] , xmm0 movsd xmm0 , qword ptr [ ebp - num ] movsd qword ptr [ ebp - hexvar ] , xmm0 fld qword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
cmp byte ptr [ rip + hexvar ] , num je hexvar push r13 push r12 push rbp push rbx sub rsp , num mov r12d , edi mov ebp , hexvar mov ebx , hexvar mov r13d , hexvar test r12d , r12d je hexvar cmp r12d , dword ptr [ rbp ] jne hexvar cmp qword ptr [ rbx ] , num je hexvar mov edx , num mov rsi , rbx mov edi , dword ptr [ rbp ] call hexvar add rbp , num add rbx , hexvar cmp rbx , r13 jne hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r14d , r8d mov r12 , rcx mov r13d , edx mov r15d , esi mov rbx , rdi mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rsp ] , rax mov eax , hexvar jmp hexvar mov edi , num mov esi , r13d mov rdx , r12 mov ecx , r14d call hexvar mov ebp , dword ptr [ rbx ] add ebp , r15d mov dword ptr [ rbx ] , ebp mov edi , hexvar mov esi , r13d mov rdx , r12 mov ecx , r14d call hexvar mov eax , hexvar nop cmp eax , hexvar jg hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar nop word ptr [ rax + rax ] cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar cmp qword ptr [ rsp ] , num mov eax , hexvar mov ecx , hexvar cmove eax , ecx jmp hexvar mov rax , qword ptr [ rsp ] mov rdi , rbx mov esi , r15d mov edx , r13d mov rcx , r12 mov r8d , r14d call rax mov ebp , eax mov eax , hexvar jmp hexvar mov eax , ebp add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax lea esi , [ esp + hexvar ] push esi call hexvar add esp , hexvar push esi push num push num call hexvar add esp , hexvar test eax , eax jne hexvar mov ebp , num lea eax , [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ ebx + hexvar ] mov dword ptr [ esp + hexvar ] , eax jmp hexvar sub esp , num push num lea eax , [ ebx - hexvar ] push eax push num call hexvar mov esi , eax call hexvar add esp , hexvar push esi push dword ptr [ eax ] push hexvar call hexvar lea esi , [ ebx - hexvar ] cmp byte ptr [ esi ] , num je hexvar lea eax , [ ebx - hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp ] , eax sub esp , num lea edi , [ esp + hexvar ] push edi push ebp call hexvar push esi push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push ebp push edi lea eax , [ ebx - hexvar ] push eax push num mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax ] call hexvar add esp , hexvar add ebp , num cmp ebp , hexvar je hexvar sub esp , num push dword ptr [ esp + hexvar ] push num push ebp call hexvar add esp , hexvar test eax , eax jne hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar sub esp , num push ebp lea eax , [ esp + hexvar ] push eax call hexvar add esp , hexvar test eax , eax je hexvar lea esi , [ ebx - hexvar ] mov dword ptr [ esp + num ] , esi lea eax , [ ebx - hexvar ] mov dword ptr [ esp ] , eax jmp hexvar sub esp , num push ebp lea eax , [ esp + hexvar ] push eax call hexvar add esp , hexvar lea esi , [ ebx - hexvar ] test eax , eax je hexvar lea esi , [ ebx - hexvar ] lea eax , [ ebx - hexvar ] mov dword ptr [ esp + num ] , eax lea eax , [ ebx - hexvar ] mov dword ptr [ esp ] , eax jmp hexvar mov eax , dword ptr [ esp + hexvar ] xor eax , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
push r15 push r14 push rbx mov r14 , rdx mov rbx , rdi xor esi , esi call hexvar mov r15 , rax mov rdi , rbx call hexvar cmp eax , - num je hexvar mov rdi , rbx mov esi , num xor edx , edx xor ecx , ecx call hexvar test rax , rax sete al test r15 , r15 setne cl and cl , al movzx eax , cl mov dword ptr [ r14 + num ] , eax jmp hexvar mov rdi , qword ptr [ rip + hexvar ] mov esi , hexvar xor eax , eax call hexvar xor eax , eax pop rbx pop r14 pop r15 ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - num ] ldr r3 , [ pc , hexvar ] ldrb r3 , [ r3 ] cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] ldr r2 , [ fp , - hexvar ] sub r3 , r2 , r3 ldr r2 , [ pc , hexvar ] str r3 , [ r2 ] b hexvar mov r0 , hexvar bl hexvar ldr r3 , [ fp , - num ] add r3 , r3 , num str r3 , [ fp , - num ] ldr r2 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 ble hexvar ldr r2 , [ pc , hexvar ] ldr r3 , [ fp , - hexvar ] str r3 , [ r2 ] mov r0 , r0 sub sp , fp , num pop { fp , pc }
push { r4 , r5 , r6 , lr } cmp r0 , num sub sp , sp , hexvar mov r6 , r1 movne r0 , num ldrne r1 , [ pc , hexvar ] ldreq r1 , [ pc , hexvar ] mov r2 , num bl hexvar mvn r4 , num mov r2 , num mvn r5 , num ldr r3 , [ pc , hexvar ] str r0 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] mov r0 , r6 stm sp , { r4 , r5 } mov r2 , num mov r3 , num bl hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) beqz v0 , hexvar addiu a0 , zero , hexvar lui v0 , hexvar lw v0 , hexvar ( v0 ) lw ra , hexvar ( sp ) lw s7 , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s1 , v0 lui v0 , hexvar addiu v0 , v0 , - hexvar sw v0 , ( s1 ) addiu a0 , zero , hexvar lw t9 , - hexvar ( gp )
push { r0 , r1 , r2 , r3 } push { r4 , r5 , r6 , r7 , lr } ldr r4 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] ldr r3 , [ r4 ] sub sp , sp , hexvar ldr r0 , [ r2 ] ldr r5 , [ pc , hexvar ] str r3 , [ sp , num ] ldr r6 , [ sp , hexvar ] bl hexvar add r3 , sp , hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num ldr r7 , [ r5 ] str r3 , [ sp ] bl hexvar ldr r3 , [ pc , hexvar ] mov r2 , r0 ldr r3 , [ r3 ] mov r1 , num mov r0 , r7 bl hexvar mov r2 , r6 ldr r3 , [ sp ] ldr r0 , [ r5 ] mov r1 , num bl hexvar ldr r2 , [ sp , num ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , lr } add sp , sp , hexvar bx lr bl hexvar andeq fp , fp , r8 , lsl num andeq sp , fp , r4 , lsr r4 andeq sp , fp , r0 , lsr r4 andeq r4 , sl , ip , asr lr andeq ip , fp , r8 , lsl num
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx mov ecx , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , ecx mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } subs r4 , r0 , num sub sp , sp , num beq hexvar ldr r3 , [ r4 , hexvar ] cmp r3 , num beq hexvar ldrb r2 , [ r3 , hexvar ] tst r2 , num bne hexvar ldr r7 , [ r3 ] ldr r6 , [ pc , hexvar ] mov r0 , r7 bl hexvar ldr r8 , [ r4 ] mov r5 , r0 mov r0 , r8 bl hexvar ldr r3 , [ r6 ] add r5 , r5 , r0 add r5 , r5 , num cmp r3 , r5 bhs hexvar cmp r3 , num bne hexvar add r5 , r5 , r5 , lsr num mov r0 , r5 str r5 , [ r6 ] bl hexvar ldr r3 , [ r4 , hexvar ] ldr r8 , [ r4 ] ldr r7 , [ r3 ] str r0 , [ r6 , num ] b hexvar ldr r0 , [ r4 ] add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , pc }
push r13 push r12 push rbp push rbx sub rsp , num mov rbp , rdi mov rbx , rsi mov r13 , rdx call hexvar test byte ptr [ rbx + hexvar ] , hexvar je hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov dword ptr [ rcx + hexvar ] , eax mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - num ] b hexvar ldr r3 , [ pc , hexvar ] ldrb r3 , [ r3 ] cmp r3 , num beq hexvar bl hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] mov r0 , r3 bl hexvar sub r3 , fp , hexvar mov r2 , r3 ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num beq hexvar ldr r3 , [ fp , - hexvar ] sub r3 , r3 , num ldr r2 , [ pc , hexvar ] str r3 , [ r2 ] mov r3 , hexvar str r3 , [ fp , - hexvar ] b hexvar mov r1 , num ldr r0 , [ fp , - hexvar ] bl hexvar ldr r0 , [ fp , - hexvar ] bl hexvar sub r3 , fp , hexvar mov r2 , num mov r1 , r3 mov r0 , num bl hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r3 , num bne hexvar mov r0 , r0 ldr r3 , [ pc , hexvar ] ldr r2 , [ fp , - num ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar sub sp , fp , num pop { fp , pc }
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx jmp hexvar mov rbx , qword ptr [ rbp - hexvar ] lea rax , [ rbx + num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar movq rax , xmm0 mov qword ptr [ rbx ] , rax sub qword ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num ja hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov edx , num mov rsi , rcx mov rdi , rax call hexvar nop add rsp , hexvar pop rbx pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , num ] ldr r1 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp mov rbp , rsp sub rsp , hexvar movabs rdi , hexvar call hexvar mov dword ptr [ rbp - num ] , eax movabs rdi , hexvar call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jne hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp + num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] cmp byte ptr [ eax ] , num jne hexvar mov eax , dword ptr [ ebp + num ] cmp eax , dword ptr [ ebp - num ] je hexvar mov eax , dword ptr [ ebp + num ] add eax , - num mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp + num ] add esp , num pop ebp ret
push rbp push r15 push r14 push rbx push rax mov ebx , ecx mov r14 , rdx mov r15d , esi mov rbp , rdi call hexvar test eax , hexvar je hexvar cmp dword ptr [ rbp + hexvar ] , num je hexvar cmp ebx , hexvar jl hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov eax , hexvar add rsp , num pop rbx pop r14 pop r15 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov eax , edx mov dword ptr [ rbp - hexvar ] , eax mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ]
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rcx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov esi , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , esi mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax mov rdi , qword ptr [ rcx ] mov rsi , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rsp , rbp pop rbp ret
lb v1 , ( a0 ) beqz v1 , hexvar move v0 , zero addiu a0 , a0 , num rotr v0 , v0 , hexvar addu v0 , v1 , v0 lb v1 , ( a0 ) bnez v1 , hexvar nop teq a1 , zero , num divu zero , v0 , a1 mfhi v0 jr ra nop
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] mov edi , dword ptr [ esp + hexvar ] push num push eax push num call hexvar mov ebp , dword ptr [ edi ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp ] , ebp call hexvar pop edx push dword ptr [ esp + hexvar ] mov esi , eax call hexvar mov ecx , dword ptr [ edi + hexvar ] add esi , eax add esp , hexvar lea edx , [ esi + num ] test ecx , ecx je hexvar mov eax , dword ptr [ edi + hexvar ] test eax , eax jne hexvar sub esp , hexvar push edx mov dword ptr [ esp + hexvar ] , edx call hexvar add esp , hexvar test eax , eax mov edi , eax mov edx , dword ptr [ esp + hexvar ] je hexvar sub esp , num lea eax , [ ebx - hexvar ] push dword ptr [ esp + hexvar ] push ebp jmp hexvar lea esi , [ esi ] sub esp , hexvar push edx mov dword ptr [ esp + hexvar ] , edx call hexvar add esp , hexvar test eax , eax mov edi , eax mov edx , dword ptr [ esp + hexvar ] je hexvar sub esp , num lea eax , [ ebx - hexvar ] push dword ptr [ esp + hexvar ] push ebp push eax push - num push num push edx push edi call hexvar add esp , hexvar add esp , hexvar mov eax , edi pop ebx pop esi pop edi pop ebp ret
push esi push ebx mov eax , num call hexvar add ebx , hexvar sub esp , hexvar mov edx , dword ptr [ esp + hexvar ] test edx , edx je hexvar sub esp , num push edx push num call hexvar mov esi , eax add esp , hexvar xor eax , eax test esi , esi je hexvar sub esp , num push dword ptr [ esp + hexvar ] push esi push dword ptr [ esp + hexvar ] call hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx pop esi ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi ] , edx mov dword ptr [ edi + num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] shr eax , hexvar mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] test eax , eax sete dl movzx eax , dl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov byte ptr [ ebp - num ] , num mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx call hexvar mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] test ecx , ecx setne dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] test eax , eax sete byte ptr [ ebp - num ] mov eax , dword ptr [ hexvar ] jmp eax mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
push r12 push rbp mov r12 , rdx push rbx mov rbp , rsi mov rbx , rdi call hexvar mov rcx , r12 mov rdx , rbp mov rsi , rbx pop rbx pop rbp pop r12 mov edi , hexvar jmp hexvar nop dword ptr [ rax ]
push edi push esi push ebx call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] cmp dword ptr [ esi ] , num je hexvar cmp dword ptr [ esi + num ] , num je hexvar cmp dword ptr [ esi + hexvar ] , - num jne hexvar mov dword ptr [ esi + hexvar ] , num mov edi , num cmp dword ptr [ esp + hexvar ] , num je hexvar sub esp , num push dword ptr [ esi + num ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax setne al movzx eax , al mov edi , eax sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esi + hexvar ] push dword ptr [ esi ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax cmove edi , eax mov eax , edi pop ebx pop esi pop edi ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rax + hexvar ] add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar beqz a0 , hexvar sw gp , hexvar ( sp ) move s3 , a3 move s2 , a2 move s1 , a1 move s0 , a0 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) move a0 , v0 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) addiu v1 , zero , hexvar bne v0 , v1 , hexvar addiu v0 , zero , hexvar lw v0 , hexvar ( s0 )
push { r4 , r5 , r6 , lr } mov r4 , r0 mov r5 , r1 bl hexvar mov r2 , num mov r3 , r0 mov r1 , r5 mov r0 , r4 pop { r4 , r5 , r6 , lr } str r2 , [ r3 ] b hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movsx ecx , byte ptr [ rax ] cmp ecx , num je hexvar call hexvar mov rax , qword ptr [ rax ] mov rcx , qword ptr [ rbp - hexvar ] movzx edx , byte ptr [ rcx ] movsxd rcx , edx movzx edx , word ptr [ rax + rcx * num ] and edx , hexvar cmp edx , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] lea edi , [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edi mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , ecx mov dword ptr [ eax + num ] , ebx mov dword ptr [ eax ] , edi mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , lr } cmp r2 , num cmpne r1 , num mov r7 , hexvar sub sp , sp , hexvar ldr lr , [ pc , hexvar ] add ip , sp , num mov r6 , r1 mov r5 , r2 mov r8 , r0 mov sb , r3 ldm lr ! , { r0 , r1 , r2 , r3 } stm ip ! , { r0 , r1 , r2 , r3 } ldm lr ! , { r0 , r1 , r2 , r3 } stm ip ! , { r0 , r1 , r2 , r3 } ldm lr , { r0 , r1 , r2 , r3 } ldr r4 , [ pc , hexvar ] stm ip , { r0 , r1 , r2 , r3 } ldr r3 , [ r4 ] str r7 , [ sp , num ] str r3 , [ sp , hexvar ] beq hexvar add r3 , sp , num ldr r2 , [ sp , hexvar ] mov r1 , sb mov r0 , r8 str r6 , [ sp , hexvar ] str r5 , [ sp , hexvar ] bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movss dword ptr [ rbp - hexvar ] , xmm0 mov qword ptr [ rbp - hexvar ] , rsi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , rsp add rdx , - hexvar mov rsp , rdx mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rsi movss xmm0 , dword ptr [ rbp - hexvar ] movss dword ptr [ rcx ] , xmm0 mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx ] , rdi movss xmm1 , dword ptr [ rcx ] mov rcx , qword ptr [ rdx ] mov rax , qword ptr [ rax ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + num ] movss dword ptr [ rcx + rax * num ] , xmm1 mov rsp , rbp pop rbp ret
push rbp mov rbp , rsp mov dword ptr [ rbp - num ] , edi mov dword ptr [ rbp - num ] , esi mov esi , dword ptr [ rbp - num ] mov eax , esi mov rax , qword ptr [ rax * num ] mov esi , dword ptr [ rbp - num ] sub esi , num mov esi , esi mov ecx , esi imul rax , qword ptr [ rcx * num ] mov esi , dword ptr [ rbp - num ] sub esi , dword ptr [ rbp - num ] sub esi , num mov esi , esi mov ecx , esi imul rax , qword ptr [ rcx * num ] mov esi , dword ptr [ rbp - num ] shr esi , num sub esi , num mov esi , esi mov ecx , esi movzx esi , byte ptr [ rcx ] mov edi , dword ptr [ rbp - num ] shr edi , num sub edi , num mov edi , edi mov ecx , edi movzx edi , byte ptr [ rcx ] sub esi , edi mov edi , dword ptr [ rbp - num ] sub edi , dword ptr [ rbp - num ] shr edi , num sub edi , num mov edi , edi mov ecx , edi movzx edi , byte ptr [ rcx ] sub esi , edi mov esi , esi mov ecx , esi shl rax , cl pop rbp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdi + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] cmp edx , dword ptr [ rax + hexvar ] jb hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rcx + hexvar ] mov ecx , edx mov rax , qword ptr [ rax + rcx * num ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] pop rbp ret
xor eax , eax cmp qword ptr [ rdi + num ] , num je hexvar ret nop dword ptr [ rax + rax ] xor eax , eax cmp qword ptr [ rdi ] , num sete al ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s1 , a0 move s0 , a1 addiu a1 , zero , num lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) blez v0 , hexvar lw ra , hexvar ( sp ) beqz s0 , hexvar lui a2 , hexvar ori a2 , v0 , hexvar beq a2 , v0 , hexvar addiu a1 , zero , num move a0 , s1 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu a2 , a2 , hexvar b hexvar and a2 , v0 , a2
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx cmp ecx , eax sete bl and bl , num movzx eax , bl add esp , hexvar pop esi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a3 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , num ( v0 )
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw a0 , ( a0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + num ] add eax , num cmp eax , hexvar ja hexvar mov eax , eax lea rdx , [ rax * num ] lea rax , [ rip + hexvar ] mov eax , dword ptr [ rdx + rax ] movsxd rdx , eax lea rax , [ rip + hexvar ] add rax , rdx jmp rax mov eax , num jmp hexvar mov eax , num jmp hexvar mov eax , num jmp hexvar mov eax , num jmp hexvar mov eax , num jmp hexvar mov eax , hexvar jmp hexvar mov eax , num jmp hexvar mov eax , num jmp hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar leave ret
push ebp mov ebp , esp push ebx sub esp , num call hexvar add ebx , hexvar mov eax , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ eax ] sub esp , hexvar push eax call hexvar add esp , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar mov edx , eax mov eax , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ eax ] push dword ptr [ ebp + hexvar ] push dword ptr [ ebp + num ] push edx push eax call hexvar add esp , hexvar mov eax , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ eax ] sub esp , hexvar push eax call hexvar add esp , hexvar call hexvar mov ebx , dword ptr [ ebp - num ] leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) bnez v0 , hexvar nop addiu a1 , zero , hexvar lui v0 , hexvar addiu a0 , v0 , - hexvar lui v0 , hexvar addiu v0 , v0 , hexvar move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) lui v0 , hexvar addiu a1 , v0 , - hexvar lw a0 , hexvar ( fp ) lui v0 , hexvar addiu v0 , v0 , hexvar move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) addiu v0 , zero , num move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] lea edi , [ ebp - hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , hexvar call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) sw s4 , hexvar ( sp ) move s4 , a2 sw s3 , hexvar ( sp ) move s3 , a1 sw s2 , hexvar ( sp ) move s2 , a0 sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s0 ) sw v0 , hexvar ( sp ) beqz a0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop blez v0 , hexvar lw gp , hexvar ( sp ) lui v0 , hexvar addiu v1 , zero , num addiu s1 , zero , num sw v1 , - hexvar ( v0 ) lw a0 , hexvar ( sp ) move v0 , s1 lw v1 , ( s0 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar move a0 , s2 lw t9 , - hexvar ( gp ) jalr t9 addiu a1 , zero , - num bnez v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp )
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , hexvar ] mov r3 , hexvar str r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r2 , r3 bhs hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 ldr r3 , [ sp , hexvar ] add r3 , r3 , hexvar ldr r2 , [ sp , hexvar ] add r2 , r2 , hexvar ldr r1 , [ sp , hexvar ] ldr r1 , [ r1 , num ] str r1 , [ sp , num ] str r2 , [ sp , num ] str r3 , [ sp ] mov r3 , r0 ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] sub r3 , r2 , r3 str r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r3 , r2 , r3 str r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r3 , r2 , r3 str r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r2 , r3 bhs hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r2 , r3 bhs hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov dword ptr [ eax ] , num mov edx , dword ptr [ hexvar ] mov dword ptr [ ecx ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] cmp dword ptr [ ecx ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] mov edx , ecx add edx , num mov dword ptr [ eax ] , edx mov ecx , dword ptr [ ecx ] sub esp , hexvar mov edx , esp mov dword ptr [ edx ] , ecx call hexvar add esp , hexvar add eax , num mov ecx , dword ptr [ ebp - num ] add eax , dword ptr [ ecx ] mov dword ptr [ ecx ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov esp , ebp pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov dl , byte ptr [ rcx + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov byte ptr [ rbp - hexvar ] , dl xor eax , eax mov cl , al mov dl , byte ptr [ rbp - hexvar ] test dl , num mov byte ptr [ rbp - hexvar ] , cl jne hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov cl , byte ptr [ rax ] mov byte ptr [ rbp - hexvar ] , cl xor eax , eax mov cl , al mov dl , byte ptr [ rbp - hexvar ] test dl , num mov byte ptr [ rbp - hexvar ] , cl jne hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov cl , byte ptr [ rax + hexvar ] mov byte ptr [ rbp - hexvar ] , cl xor eax , eax mov cl , al mov dl , byte ptr [ rbp - hexvar ] test dl , num mov byte ptr [ rbp - hexvar ] , cl jne hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] and ecx , num cmp ecx , num setne dl mov byte ptr [ rbp - hexvar ] , dl mov al , byte ptr [ rbp - hexvar ] xor al , hexvar mov byte ptr [ rbp - hexvar ] , al mov al , byte ptr [ rbp - hexvar ] mov byte ptr [ rbp - hexvar ] , al jmp hexvar mov al , byte ptr [ rbp - hexvar ] movzx ecx , al and ecx , num mov rdi , qword ptr [ rbp - hexvar ] mov esi , ecx call hexvar add rsp , hexvar pop rbp ret
push r12 push rbp push rbx sub rsp , hexvar mov qword ptr [ rsp + num ] , rdi mov rbp , rcx test sil , hexvar je hexvar mov ebx , esi mov eax , esi and eax , num je hexvar cmp eax , num je hexvar cmp eax , num jbe hexvar cmp eax , num je hexvar cmp eax , num jne hexvar mov rdi , qword ptr [ rsp + num ] call hexvar jmp hexvar lea rbx , [ rsp + num ] mov rsi , rcx mov rdi , rbx call hexvar mov r12 , rax mov rsi , rbp mov rdi , rbx call hexvar mov r8 , rax mov rcx , r12 lea rdx , [ rip + hexvar ] lea rsi , [ rip + hexvar ] mov edi , num mov eax , num call hexvar mov rax , qword ptr [ rsp + num ] add rsp , hexvar pop rbx pop rbp pop r12 ret
push rbp push rbx xor edx , edx mov rbp , rdi mov esi , hexvar mov edi , num sub rsp , num call hexvar lea rdi , [ rax + num ] mov rcx , rax mov qword ptr [ rax ] , num mov qword ptr [ rax + hexvar ] , num mov rbx , rax xor eax , eax and rdi , hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar sub rcx , rdi add ecx , hexvar shr ecx , num rep stosq qword ptr [ rdi ] , rax lea rdi , [ rbx + hexvar ] mov dword ptr [ rbx + hexvar ] , num mov rcx , rbp call hexvar test eax , eax js hexvar cmp eax , hexvar jle hexvar lea rax , [ rip + hexvar ] mov qword ptr [ rbx + num ] , rax mov qword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx ] , num add rsp , num mov rax , rbx pop rbx pop rbp ret
push r15 push r14 xor edx , edx push r13 push r12 push rbp push rbx mov rbp , rsi mov rbx , rdi sub rsp , hexvar lea r13 , [ rsp + num ] mov r12 , rsp mov rcx , r12 mov r8 , r13 mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax call hexvar mov r14 , rax mov eax , dword ptr [ rsp ] mov r15d , r14d add rbx , rax mov eax , r14d cmp rax , r14 mov eax , dword ptr [ rsp + num ] je hexvar or eax , num mov dword ptr [ rsp + num ] , eax test al , num mov edx , num lea rsi , [ rip + hexvar ] jne hexvar test al , num jne hexvar lea rcx , [ rip + hexvar ] xor edx , edx mov rax , rcx cmp dword ptr [ rax + num ] , r15d je hexvar add edx , num add rax , hexvar cmp edx , num jne hexvar mov rsi , rbx mov rdx , rbp mov edi , r14d call hexvar mov rbx , rax mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] mov rax , rbx jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax test esi , esi je hexvar sub esp , num push num push esi call ebp lea edx , [ ebx - hexvar ] add esp , hexvar add eax , hexvar push hexvar push edx mov dword ptr [ esp + hexvar ] , edx push eax call hexvar add esp , hexvar test eax , eax mov edi , eax mov edx , dword ptr [ esp + hexvar ] je hexvar mov dword ptr [ esp + hexvar ] , eax sub esp , num lea eax , [ esp + hexvar ] push eax push esi call ebp mov dword ptr [ esp + hexvar ] , edi add esp , hexvar push eax lea eax , [ esp + hexvar ] push eax push num mov eax , dword ptr [ esp + hexvar ] call eax mov dword ptr [ esp ] , edi mov esi , eax call hexvar add esp , hexvar mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] mov eax , esi jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lbu v0 , hexvar ( s0 ) beqz v0 , hexvar lw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar nop jal hexvar move a0 , v0 sb zero , hexvar ( s0 ) lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , num pop ebp ret
addiu sp , sp , - hexvar sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) lui v0 , hexvar lbu v0 , - hexvar ( v0 ) xori v0 , v0 , num andi v0 , v0 , hexvar beqz v0 , hexvar nop lui v0 , hexvar lw v0 , - hexvar ( v0 ) sw v0 , ( fp ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) sw v0 , num ( fp ) b hexvar nop lui v0 , hexvar lbu v0 , - hexvar ( v0 ) beqz v0 , hexvar nop lw v0 , ( fp ) addiu v1 , zero , num sw v1 , num ( v0 ) b hexvar nop lw v0 , ( fp ) addiu v1 , zero , num sw v1 , num ( v0 ) lw v0 , ( fp ) addiu v0 , v0 , hexvar sw v0 , ( fp ) lw v0 , num ( fp ) addiu v0 , v0 , - num sw v0 , num ( fp ) lw v0 , num ( fp ) bnez v0 , hexvar nop b hexvar nop lw v0 , hexvar ( fp ) addiu v1 , zero , num sw v1 , num ( v0 ) lw v0 , hexvar ( fp ) sw zero , hexvar ( v0 ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) addiu v1 , v0 , - num lui v0 , hexvar sw v1 , - hexvar ( v0 ) nop move sp , fp lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ esi + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar cmp eax , num sete bl and bl , num movzx eax , bl add esp , hexvar pop esi pop ebx pop ebp ret
push rbx sub rsp , hexvar mov rbx , rdi mov rax , qword ptr [ rdi + num ] lea r9 , [ rsp + hexvar ] mov r8d , hexvar mov esi , hexvar mov edx , hexvar mov ecx , hexvar call qword ptr [ rax + hexvar ] cmp dword ptr [ rsp + hexvar ] , num je hexvar test rax , rax jle hexvar mov rdi , rbx mov esi , num mov edx , hexvar call hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov dword ptr [ rbx + hexvar ] , num mov eax , hexvar add rsp , hexvar pop rbx ret
lw v1 , hexvar ( a0 ) lui gp , hexvar lw v0 , hexvar ( a0 ) addiu sp , sp , - hexvar addiu gp , gp , hexvar lw a3 , hexvar ( a0 ) lw a2 , num ( v1 ) lw t9 , - hexvar ( gp ) sw s2 , hexvar ( sp ) move s2 , a1 addu a2 , a2 , v0 sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) bal hexvar sw s1 , hexvar ( sp ) bltz v0 , hexvar lw gp , hexvar ( sp ) move s1 , v0 addiu v0 , zero , hexvar beq s2 , v0 , hexvar move a2 , s1 lw v1 , hexvar ( s0 ) beq v1 , s1 , hexvar subu v1 , v1 , s1 lw a0 , hexvar ( s0 ) move v0 , zero sw v1 , hexvar ( s0 ) addu s1 , a0 , s1 sw s1 , hexvar ( s0 ) lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , hexvar ( s0 ) beqz t9 , hexvar addiu a0 , zero , num lw a3 , hexvar ( s0 ) lw v0 , hexvar ( s0 ) move a2 , s2 lw v1 , hexvar ( s0 ) lw a1 , ( s0 ) lw a3 , num ( a3 ) addu s1 , s1 , v0 sw s0 , hexvar ( sp ) sw v1 , hexvar ( sp ) jalr t9 sw s1 , hexvar ( sp ) addiu v0 , zero , num lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw v1 , hexvar ( s0 ) lw v0 , hexvar ( s0 ) move a0 , s0 lw t9 , - hexvar ( gp ) lw a1 , num ( v1 ) bal hexvar addu a1 , a1 , v0 b hexvar lw v1 , hexvar ( s0 ) b hexvar addiu v0 , zero , num b hexvar addiu v0 , zero , - num
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ ebx + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax test ecx , ecx je hexvar mov ecx , dword ptr [ ebx + hexvar ] test ecx , ecx jne hexvar cmp dword ptr [ ebx + hexvar ] , - num jne hexvar sub esp , num lea eax , [ ebx - hexvar ] push ebp push eax push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] call eax add esp , hexvar jmp hexvar lea esi , [ esi ] cmp dword ptr [ esp + hexvar ] , hexvar ja hexvar movzx eax , byte ptr [ esp + hexvar ] lea esi , [ esp + hexvar ] mov byte ptr [ esp + hexvar ] , al mov eax , num test ecx , ecx je hexvar sub esp , num push ebp push eax push esi mov eax , dword ptr [ esp + hexvar ] call eax add esp , hexvar mov edi , dword ptr [ esp + hexvar ] xor edi , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num cmp dword ptr [ esp ] , num je hexvar lea eax , [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + num ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num je hexvar cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , dword ptr [ esp + hexvar ] jmp hexvar mov eax , dword ptr [ esp + hexvar ] sub esp , num push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] sub esp , num lea edx , [ ebx - hexvar ] push edx push eax call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] je hexvar call hexvar add esp , hexvar pop ebx ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx + hexvar ] push dword ptr [ esp + hexvar ] push eax call hexvar add esp , hexvar pop ebx ret
push r15 push r14 mov r15 , rcx push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbx , qword ptr [ rsi ] mov rbp , qword ptr [ r15 ] mov rcx , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rcx xor ecx , ecx mov qword ptr [ rsp ] , rdi mov qword ptr [ rsp + num ] , rsi test rbx , rbx je hexvar mov qword ptr [ rsi ] , num lea r13 , [ rsp + hexvar ] lea rsi , [ rip + hexvar ] mov qword ptr [ rsp + hexvar ] , rdx mov edx , hexvar mov dword ptr [ rsp + hexvar ] , num mov qword ptr [ rsp + hexvar ] , num mov rdi , r13 mov qword ptr [ rsp + hexvar ] , num mov qword ptr [ rsp + hexvar ] , num call hexvar test eax , eax mov r14d , eax jne hexvar mov rax , qword ptr [ rsp ] mov dword ptr [ rsp + hexvar ] , num mov r12d , hexvar mov qword ptr [ rsp + hexvar ] , rax xor eax , eax jmp hexvar nop dword ptr [ rax ] mov eax , dword ptr [ rsp + hexvar ] test eax , eax jne hexvar cmp rbx , r12 mov rax , r12 cmovbe rax , rbx mov dword ptr [ rsp + hexvar ] , eax sub rbx , rax mov eax , dword ptr [ rsp + hexvar ] test eax , eax jne hexvar cmp rbp , r12 mov rax , r12 cmovbe rax , rbp mov dword ptr [ rsp + hexvar ] , eax sub rbp , rax xor esi , esi mov rdi , r13 call hexvar test eax , eax mov edx , eax je hexvar mov eax , dword ptr [ rsp + hexvar ] mov rcx , qword ptr [ r15 ] sub rcx , rax mov rax , rcx lea rcx , [ rsp + hexvar ] sub rax , rbp cmp qword ptr [ rsp ] , rcx mov qword ptr [ r15 ] , rax mov rax , qword ptr [ rsp + hexvar ] je hexvar mov rcx , qword ptr [ rsp + num ] mov qword ptr [ rcx ] , rax mov rdi , r13 mov dword ptr [ rsp ] , edx call hexvar mov edx , dword ptr [ rsp ] cmp edx , num je hexvar cmp edx , num je hexvar cmp edx , - num mov r14d , edx je hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov eax , r14d jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov edi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov ecx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx xor ecx , ecx test edi , edi je hexvar test eax , eax je hexvar cmp dword ptr [ edi + hexvar ] , num je hexvar sub esp , hexvar push num push eax push num push hexvar push edi call hexvar mov dword ptr [ esp + hexvar ] , eax add esp , hexvar test eax , eax jg hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar call hexvar mov esi , num jmp hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar mov esi , num mov eax , esi mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - num ] sub r3 , fp , hexvar mov r0 , r3 bl hexvar sub r3 , fp , hexvar mov r2 , r3 ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar sub r3 , fp , hexvar ldr r1 , [ fp , - hexvar ] mov r0 , r3 bl hexvar mov r3 , r0 mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ fp , - num ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax lea eax , [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + hexvar ] , ebx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a1 lui v1 , hexvar lw v0 , - hexvar ( v1 ) lw v1 , - hexvar ( v1 ) or v0 , v0 , v1 bnez v0 , hexvar move s0 , a0 addiu v0 , zero , num lui v1 , hexvar sw s1 , - hexvar ( v1 ) sw s0 , - hexvar ( v1 ) lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu a2 , zero , num lui a1 , hexvar addiu a1 , a1 , - hexvar move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a2 , v0 move a1 , zero move a0 , zero lw t9 , - hexvar ( gp )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov ah , cl test al , num mov byte ptr [ ebp - hexvar ] , ah jne hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num mov byte ptr [ ebp - hexvar ] , al lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx call hexvar mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s6 , hexvar ( sp ) move s6 , a2 sw s5 , hexvar ( sp ) move s5 , a0 sw s4 , hexvar ( sp ) move a0 , a1 sw gp , hexvar ( sp ) move s4 , a3 sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) beqz s5 , hexvar move s1 , v0 lw s2 , ( s5 )
push { r4 , lr } ldrb r3 , [ r0 , hexvar ] and r2 , r3 , num cmp r2 , num bne hexvar and r3 , r3 , hexvar cmp r3 , hexvar beq hexvar ldr r3 , [ r0 , num ] ldr r3 , [ r3 , hexvar ] blx r3 pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push r12 push rbp lea rdx , [ rip + hexvar ] push rbx lea r9 , [ rip + hexvar ] lea r8 , [ rip + hexvar ] lea rcx , [ rip + hexvar ] mov rbp , rdi mov esi , num sub rsp , hexvar movsxd rbx , dword ptr [ rip + hexvar ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov r12 , rsp mov rdi , r12 mov rax , rbx shl rbx , num add eax , num add rbx , rdx mov edx , hexvar and eax , hexvar mov dword ptr [ rip + hexvar ] , eax xor eax , eax call hexvar mov ecx , hexvar xor eax , eax mov r9 , rbp mov r8 , r12 mov edx , num mov esi , hexvar mov rdi , rbx call hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar mov rax , rbx pop rbx pop rbp pop r12 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw s2 , hexvar ( a0 )
push { fp , lr } add fp , sp , num sub sp , sp , num str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] ldr r2 , [ pc , hexvar ] ldr r1 , [ fp , - num ] ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 sub sp , fp , num pop { fp , pc }
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r14d , num test esi , esi je hexvar mov r15 , r8 mov r12 , rcx mov r13d , edx mov ebp , esi mov rbx , rdi cmp edx , hexvar je hexvar cmp r13d , hexvar jne hexvar mov r13d , ebp xor ebp , ebp nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] movzx eax , byte ptr [ rbx + rbp ] shl rax , num mov qword ptr [ rsp ] , rax movzx edi , byte ptr [ rbx + rbp + num ] or rdi , rax mov qword ptr [ rsp ] , rdi test r12 , r12 je hexvar mov rsi , r15 call r12
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , esi mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , esi mov esi , dword ptr [ ebp - hexvar ] cmp esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx je hexvar cmp dword ptr [ ebp + hexvar ] , num jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] movzx eax , byte ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar mov cl , al mov byte ptr [ ebp - hexvar ] , cl mov eax , dword ptr [ ebp - hexvar ] movzx eax , byte ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar mov cl , al mov byte ptr [ ebp - hexvar ] , cl mov eax , dword ptr [ ebp + hexvar ] add eax , - num mov dword ptr [ ebp + hexvar ] , eax cmp eax , num je hexvar movzx eax , byte ptr [ ebp - hexvar ] cmp eax , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax movzx eax , byte ptr [ ebp - hexvar ] movzx ecx , byte ptr [ ebp - hexvar ] cmp eax , ecx je hexvar movzx eax , byte ptr [ ebp - hexvar ] movzx ecx , byte ptr [ ebp - hexvar ] sub eax , ecx mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] test rax , rax sete cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx ] sub rax , rcx sete dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rcx ] call rax movzx edx , al mov ecx , edx mov rcx , qword ptr [ rcx * num + hexvar ] jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rdi , rsp call hexvar call hexvar mov rax , qword ptr [ rsp ] mov edx , eax mov qword ptr [ rsp + hexvar ] , rax mov rax , qword ptr [ rsp + num ] mov qword ptr [ rsp + hexvar ] , rax mov rsi , qword ptr [ rsp + hexvar ] mov rdi , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdi mov rsi , qword ptr [ rsp + hexvar ] mov rdi , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdi mov rsi , qword ptr [ rsp + hexvar ] mov rdi , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdi mov rsi , qword ptr [ rsp + hexvar ] mov rdi , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdi mov rsi , qword ptr [ rsp + hexvar ] mov rdi , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdi mov rsi , qword ptr [ rsp + hexvar ] mov rdi , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdi mov rsi , qword ptr [ rsp + hexvar ] mov rdi , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdi mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax test dl , dl jne hexvar call hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov sl , r3 mov r3 , num mov r7 , r0 mov sb , r2 add r0 , r0 , hexvar mov r2 , r3 mov r8 , r1 bl hexvar subs r4 , r0 , num beq hexvar ldr r5 , [ r4 , num ] mov r3 , r5 b hexvar ldr r4 , [ r4 ] cmp r4 , num beq hexvar ldr r3 , [ r4 , num ] cmp r3 , r5 bne hexvar mov r1 , r8 ldr r0 , [ r4 , num ] bl hexvar cmp r0 , num add r6 , r4 , hexvar bne hexvar mov r2 , sl mov r1 , r6 mov r0 , r7 blx sb cmp r0 , num beq hexvar mov r0 , r6 pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp call hexvar add eax , hexvar cmp dword ptr [ ebp + num ] , num ja hexvar mov edx , dword ptr [ ebp + num ] shl edx , num mov edx , dword ptr [ edx + eax - hexvar ] add edx , eax jmp edx
push edi push esi push ebx mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] sub esp , num push dword ptr [ esp + hexvar ] push edi call hexvar add ebx , hexvar call hexvar mov edx , eax mov dword ptr [ esi ] , eax add esp , hexvar xor eax , eax test edx , edx je hexvar cmp edi , hexvar je hexvar cmp edi , hexvar je hexvar cmp edi , hexvar je hexvar pop ebx pop esi pop edi ret
push rbp push rbx push rax test rdi , rdi je hexvar mov rbx , rdi mov ebp , hexvar mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar call hexvar mov eax , dword ptr [ rbx ] cmp eax , hexvar ja hexvar bt ebp , eax jae hexvar mov rdi , qword ptr [ rbx + num ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx + num ] , num mov rbx , qword ptr [ rbx + hexvar ] test rbx , rbx jne hexvar add rsp , num pop rbx pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx cmp ecx , eax je hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov dword ptr [ rbp - num ] , esi mov qword ptr [ rbp - hexvar ] , rdx xor edi , edi lea rsi , [ rbp - hexvar ] call hexvar test eax , eax setne cl movzx eax , cl mov edx , eax mov rdx , qword ptr [ rdx * num + hexvar ] jmp rdx call hexvar mov ecx , dword ptr [ rax ] sub ecx , hexvar setne dl movzx esi , dl mov eax , esi mov rax , qword ptr [ rax * num + hexvar ] mov dword ptr [ rbp - hexvar ] , ecx jmp rax call hexvar xor edi , edi mov esi , dword ptr [ rax ] mov rdx , qword ptr [ rbp - hexvar ] mov ecx , num mov dword ptr [ rbp - hexvar ] , esi mov esi , ecx call hexvar mov edi , num mov esi , dword ptr [ rbp - hexvar ] movabs rdx , hexvar mov rcx , rax mov al , num call hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov eax , dword ptr [ rbp - num ] test eax , eax setns cl movzx eax , cl mov edx , eax mov rdx , qword ptr [ rdx * num + hexvar ] jmp rdx mov ax , word ptr [ rbp - num ] mov word ptr [ rbp - hexvar ] , ax mov rcx , qword ptr [ rip + hexvar ] jmp rcx mov eax , dword ptr [ rbp - num ] test eax , eax setns cl movzx eax , cl mov edx , eax mov rdx , qword ptr [ rdx * num + hexvar ] jmp rdx mov ax , word ptr [ rbp - num ] mov word ptr [ rbp - hexvar ] , ax mov rcx , qword ptr [ rip + hexvar ] jmp rcx xor eax , eax mov cl , al mov esi , hexvar lea rdx , [ rbp - hexvar ] mov edi , eax mov al , cl call hexvar test eax , eax setne cl movzx eax , cl mov edx , eax mov rdx , qword ptr [ rdx * num + hexvar ] jmp rdx call hexvar xor edi , edi mov esi , dword ptr [ rax ] mov rdx , qword ptr [ rbp - hexvar ] mov ecx , num mov dword ptr [ rbp - hexvar ] , esi mov esi , ecx call hexvar mov edi , num mov esi , dword ptr [ rbp - hexvar ] movabs rdx , hexvar mov rcx , rax mov al , num call hexvar add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar nop leave ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , num mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx + num ] jae hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call eax test al , num jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num cmp dword ptr [ esp + hexvar ] , num je hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , num jmp hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + num ] , num jmp hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax sub esp , num push - num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + num ] , eax cmp dword ptr [ esp + num ] , - num je hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar sub esp , num push - num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + num ] , eax cmp dword ptr [ esp + num ] , - num jne hexvar sub esp , num push - num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar jmp hexvar nop add dword ptr [ esp + num ] , num sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar cmp dword ptr [ esp + num ] , eax jl hexvar mov dword ptr [ esp + hexvar ] , num jmp hexvar nop sub esp , num lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] add edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , edx mov edx , dword ptr [ ebp - num ] cmp edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx jb hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push { r4 , lr } mov r4 , r0 bl hexvar ldrb r3 , [ r0 ] cmp r3 , num movne r4 , r0 mov r0 , r4 bl hexvar mov r2 , num ldrb r3 , [ r4 , r0 ] strb r2 , [ r4 , r0 ] subs r0 , r3 , r2 movne r0 , num pop { r4 , pc }
push { r4 , r5 , fp , lr } add fp , sp , hexvar ldr r3 , [ pc , hexvar ] ldr r4 , [ r3 ] ldr r0 , [ pc , hexvar ] bl hexvar mov r3 , r0 ldr r2 , [ pc , hexvar ] mov r1 , num mov r0 , r4 bl hexvar bl hexvar strheq r8 , [ r3 ] , -r8 andeq r6 , r2 , r0 , lsr num andeq r6 , r2 , r4 , lsr sp
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r0 , hexvar mov sb , r1 mov r8 , r2 mov r7 , r3 ldr r6 , [ sp , hexvar ] mov r5 , num bl hexvar mov lr , num add r4 , r0 , hexvar strb lr , [ r0 , hexvar ] strb lr , [ r0 , hexvar ] strb lr , [ r0 , hexvar ] strb lr , [ r0 , hexvar ] str sb , [ r0 ] str r8 , [ r0 , num ] str r7 , [ r0 , hexvar ] str r6 , [ r0 , num ] str r5 , [ r0 , hexvar ] pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r8 , r0 mov r7 , r1 mov sb , r2 ldr r5 , [ pc , hexvar ] mov r2 , sb mov r1 , r7 mov r0 , r8 bl hexvar subs r6 , r0 , num bge hexvar bl hexvar ldr r3 , [ r0 ] cmp r3 , num beq hexvar cmp sb , r5 movls r4 , num movhi r4 , num cmp r3 , hexvar movne r4 , num cmp r4 , num movne sb , r5 bne hexvar mov r0 , r6 pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] call hexvar mov ebp , dword ptr [ eax ] test esi , esi je hexvar mov edi , eax mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ eax ] test ecx , ecx je hexvar mov eax , dword ptr [ esp + hexvar ] cmp ecx , esi jae hexvar lea edx , [ ecx + ecx ] cmp ecx , edx jbe hexvar call hexvar lea eax , [ ebx - hexvar ] push eax push hexvar lea eax , [ ebx - hexvar ] push eax lea eax , [ ebx - hexvar ] push eax call hexvar test ecx , ecx jne hexvar cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax ] , edx sub esp , hexvar push edx call hexvar add esp , hexvar test eax , eax je hexvar mov dword ptr [ edi ] , ebp add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar xor esi , esi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax mov edx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , rcx mov qword ptr [ rbp - hexvar ] , rax call hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov r8 , qword ptr [ rbp - hexvar ] mov r9 , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov esi , eax mov r10 , qword ptr [ rbp - hexvar ] call r10
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , ecx sub edx , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move t0 , a1 move a1 , a2 lw v1 , num ( a1 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , rsp add rdx , - hexvar mov rsp , rdx mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rsi mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov r8 , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , r8 mov r9 , qword ptr [ rbp - num ] mov r9 , qword ptr [ r9 ] mov qword ptr [ rcx ] , r9 mov rdi , qword ptr [ rcx ] mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdx ] mov dword ptr [ rbp - hexvar ] , eax call hexvar mov ecx , eax mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax ] , ecx mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rdx ] movsxd rdi , dword ptr [ rax ] add rsi , rdi mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi ] , rsi mov ecx , dword ptr [ rax ] mov eax , ecx mov rsp , rbp pop rbp ret
push rbp mov rbp , rsp movsd xmm0 , qword ptr [ rip ] movsd xmm1 , qword ptr [ rip ] movsd xmm2 , qword ptr [ rip ] mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + num ] mulsd xmm2 , qword ptr [ rsi + rdi * num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] mulsd xmm1 , qword ptr [ rsi + rdi * num ] addsd xmm2 , xmm1 mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] mulsd xmm0 , qword ptr [ rsi + rdi * num ] addsd xmm2 , xmm0 movaps xmm0 , xmm2 pop rbp ret
addiu sp , sp , - num sw fp , num ( sp ) move fp , sp sw a0 , num ( fp ) lw v0 , num ( fp ) lw v0 , num ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) lw v0 , hexvar ( fp ) sltiu v0 , v0 , num beqz v0 , hexvar nop lw v0 , hexvar ( fp ) sll v1 , v0 , num lui v0 , hexvar addiu v0 , v0 , hexvar addu v0 , v1 , v0 lw v0 , ( v0 )
push r14 push rbx push rax mov r14 , qword ptr [ rdi + hexvar ] test r14 , r14 je hexvar mov rbx , rdi mov rdi , qword ptr [ r14 + num ] test rdi , rdi je hexvar call hexvar mov rdi , r14 call hexvar mov dword ptr [ rbx + hexvar ] , num mov qword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx + hexvar ] , num mov eax , num add rsp , num pop rbx pop r14 ret
push { r4 , lr } mov r4 , r1 ldr r3 , [ r1 ] add r3 , r3 , hexvar sub r3 , r3 , hexvar cmp r3 , num ldrls pc , [ pc , r3 , lsl num ] b hexvar muleq r3 , r0 , pc andeq sl , r3 , r8 , lsr num andeq sl , r3 , r0 , ror num strdeq sl , fp , [ r3 ] , -r8 andeq fp , r3 , r0 , lsl r0 andeq sl , r3 , r0 , asr num ldr r1 , [ pc , hexvar ] bl hexvar ldr r3 , [ r0 , hexvar ] str r3 , [ r4 , num ] mov r0 , num pop { r4 , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx jne hexvar movss xmm0 , dword ptr [ hexvar ] mov eax , dword ptr [ ebp - num ] movss dword ptr [ eax + hexvar ] , xmm0 jmp hexvar movss xmm0 , dword ptr [ hexvar ] mov eax , dword ptr [ ebp - num ] movss dword ptr [ eax + hexvar ] , xmm0 jmp hexvar mov al , num and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax cmp dword ptr [ esp + hexvar ] , num je hexvar mov esi , num lea eax , [ ebp + hexvar ] mov dword ptr [ esp + hexvar ] , eax lea eax , [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov edi , esi shr edi , num mov eax , dword ptr [ esp + hexvar ] movzx eax , byte ptr [ eax + edi ] mov ecx , esi not ecx and ecx , num sar eax , cl shl eax , num mov byte ptr [ esp + hexvar ] , al mov eax , dword ptr [ ebp + hexvar ] sub esp , hexvar push dword ptr [ ebp + num ] push dword ptr [ esp + hexvar ] lea edx , [ eax + hexvar ] push edx lea edx , [ eax + hexvar ] push edx push eax push num push num push dword ptr [ esp + hexvar ] lea eax , [ esp + hexvar ] push eax call hexvar mov eax , dword ptr [ esp + hexvar ] lea edx , [ eax + edi ] mov ecx , esi and ecx , num mov eax , hexvar sar eax , cl not eax and al , byte ptr [ edx ] mov byte ptr [ esp + hexvar ] , al movzx edi , byte ptr [ esp + hexvar ] and edi , hexvar mov eax , edi movzx edi , al sar edi , cl movzx eax , byte ptr [ esp + hexvar ] or eax , edi mov byte ptr [ edx ] , al add esi , num add esp , hexvar cmp dword ptr [ esp + hexvar ] , esi jne hexvar mov eax , num mov ebx , dword ptr [ esp + hexvar ] xor ebx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { r4 , r5 , r6 , r7 , lr } sub sp , sp , hexvar mov r7 , r3 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r3 , [ r0 , hexvar ] tst r3 , hexvar movne r5 , num bne hexvar mov r4 , r0 mov r5 , r1 mov r6 , r2 cmp r2 , num cmpne r1 , num moveq r5 , num beq hexvar cmp r7 , num beq hexvar ldr r3 , [ r4 , hexvar ] tst r3 , hexvar bne hexvar tst r3 , hexvar bne hexvar mov r3 , r7 mov r2 , r6 mov r1 , r5 mov r0 , r4 bl hexvar mov r5 , r0 mov r0 , r5 ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc } ldmdavs fp ! , { r1 , r2 , r4 , r6 , r7 , sb , sl , fp , lr , pc } ^ andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rsi ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rsi + hexvar ] mov esi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - num ] mov ecx , dword ptr [ rsi + hexvar ] mov esi , ecx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - num ] movsxd rsi , dword ptr [ rsi + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rdi , rax mov esi , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + num ] test ecx , ecx mov dword ptr [ ebp - num ] , eax jns hexvar jmp hexvar mov eax , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ eax ] mov eax , dword ptr [ eax + num ] xor edx , edx neg ecx sbb edx , eax setl bl and bl , num movzx eax , bl mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar cmp eax , num je hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx sub esp , num call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + num ] add eax , num sub esp , hexvar push eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] sub esp , num push dword ptr [ ebp + hexvar ] push eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp + num ] add eax , num sub esp , hexvar push eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp + num ] add eax , hexvar sub esp , hexvar push eax call hexvar add esp , hexvar nop mov ebx , dword ptr [ ebp - num ] leave ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov dword ptr [ ebp - hexvar ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebx + eax * num - hexvar ] sub esp , num push eax push dword ptr [ ebp + num ] call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebx + eax * num - hexvar ] jmp hexvar add dword ptr [ ebp - hexvar ] , num cmp dword ptr [ ebp - hexvar ] , hexvar jbe hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar sub esp , num push dword ptr [ ebp + num ] push eax call hexvar add esp , hexvar mov eax , hexvar mov ebx , dword ptr [ ebp - num ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ num ] , num jne hexvar cmp qword ptr [ num ] , num jne hexvar movabs rdi , num call hexvar mov rdi , qword ptr [ num ] call hexvar cmp qword ptr [ num ] , num jne hexvar mov rdi , qword ptr [ rbp - num ] call hexvar mov qword ptr [ num ] , rax mov rdi , qword ptr [ num ] call hexvar xor eax , eax mov rcx , qword ptr [ num ] cmp rcx , num mov edx , num cmovne eax , edx add rsp , hexvar pop rbp ret
sw a0 , ( sp ) lw v0 , ( sp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , ( sp ) lw v0 , ( v0 )
test byte ptr [ rsi + hexvar ] , hexvar jne hexvar mov edx , dword ptr [ rdx ] mov rax , qword ptr [ rip + hexvar ] add qword ptr [ rsi + hexvar ] , rax test edx , edx je hexvar add qword ptr [ rsi + hexvar ] , rax ret nop dword ptr [ rax ]
push ebp mov ebp , esp sub esp , hexvar mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax lea eax , [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - hexvar ] sub ecx , num mov byte ptr [ eax + ecx ] , num call hexvar mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar cmp eax , num jne hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - hexvar ] sub ecx , num cmp byte ptr [ eax + ecx ] , num jne hexvar jmp hexvar jmp hexvar call hexvar cmp dword ptr [ eax ] , num je hexvar call hexvar cmp dword ptr [ eax ] , hexvar je hexvar call hexvar cmp dword ptr [ eax ] , hexvar je hexvar call hexvar cmp dword ptr [ eax ] , hexvar je hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov dword ptr [ ebp - num ] , num jmp hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx + num ] mov esi , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ esi + num ] mov edi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ edi + hexvar ] mov ebx , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebx + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ esp + hexvar ] , ebx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar xor eax , eax add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx jmp hexvar mov edi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] leave ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx ] mov esi , dword ptr [ ebp - hexvar ] cmp edx , dword ptr [ esi ] sete bl and bl , num movzx edx , bl mov dword ptr [ ebp - hexvar ] , eax mov eax , edx mov dword ptr [ ebp - hexvar ] , ecx add esp , hexvar pop esi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp + hexvar ] mov ecx , eax add ecx , - num mov dword ptr [ ebp + hexvar ] , ecx cmp eax , num jbe hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] movzx eax , byte ptr [ eax + ecx ] mov dword ptr [ esp ] , eax call hexvar mov dl , al mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov byte ptr [ eax + ecx ] , dl jmp hexvar mov eax , dword ptr [ ebp + num ] add esp , hexvar pop ebp ret
push { r4 , lr } mov r4 , r0 ldr r3 , [ r0 , hexvar ] mov r0 , r1 ldr r1 , [ r4 , num ] blx r3 ldr r3 , [ r4 , num ] cmp r3 , r0 bls hexvar ldr r3 , [ r4 ] add r0 , r3 , r0 , lsl num pop { r4 , pc }
push esi push ebx sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esp + hexvar ] push esi call dword ptr [ ebx ] add esp , hexvar push eax push esi push ebx call hexvar add esp , hexvar pop ebx pop esi ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax test byte ptr [ rdx + hexvar ] , num jne hexvar mov r12 , rcx mov r13 , rdx mov rbp , rsi mov r14 , rdi mov rdi , rcx call hexvar cmp r14 , rbp je hexvar mov r15 , r14 cmp r14 , r13 jne hexvar mov rdi , r12 call hexvar mov r15 , rax mov rdi , r12 call hexvar test r15 , r15 je hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rbx mov rsi , rbp call hexvar test rax , rax je hexvar mov rdi , r13 call hexvar mov dword ptr [ rsp + num ] , eax cmp dword ptr [ r13 + num ] , num jle hexvar mov rax , qword ptr [ r13 ] test byte ptr [ rax ] , num jne hexvar mov esi , num mov rdi , r15 call hexvar test eax , eax je hexvar mov ebp , num cmp dword ptr [ rsp + num ] , num jl hexvar mov ebp , num nop dword ptr [ rax ] mov rdi , rbx mov rsi , rbx mov rdx , r12 call hexvar test eax , eax je hexvar mov rdi , r13 mov esi , ebp call hexvar test eax , eax je hexvar mov rdi , r15 mov rsi , r15 mov rdx , rbx mov rcx , r12 call hexvar test eax , eax je hexvar add ebp , num cmp ebp , dword ptr [ rsp + num ] jl hexvar mov ebp , num cmp r15 , r14 jne hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov ebp , hexvar jmp hexvar mov rdi , r15 mov rsi , rbp call hexvar test rax , rax jne hexvar xor ebp , ebp cmp r15 , r14 jne hexvar jmp hexvar xor ebp , ebp cmp r15 , r14 je hexvar mov rdi , r14 mov rsi , r15 call hexvar mov rdi , r12 call hexvar mov eax , ebp add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
movsxd rdx , edx add rdx , rsi cmp rsi , rdx jae hexvar pxor xmm1 , xmm1 movdqa xmm0 , xmmword ptr [ rdi - hexvar ] movdqa xmm3 , xmmword ptr [ rip + hexvar ] movdqa xmm2 , xmmword ptr [ rip + hexvar ] nop dword ptr [ rax + rax ] pshufb xmm0 , xmm3 movdqa xmm5 , xmm1 movdqu xmm6 , xmmword ptr [ rsi ] add rsi , hexvar pxor xmm0 , xmmword ptr [ rdi - hexvar ] aesenc xmm0 , xmmword ptr [ rdi - hexvar ] aesenc xmm0 , xmmword ptr [ rdi - hexvar ] aesenc xmm0 , xmmword ptr [ rdi - hexvar ] aesenc xmm0 , xmmword ptr [ rdi - hexvar ] aesenc xmm0 , xmmword ptr [ rdi - hexvar ] aesenc xmm0 , xmmword ptr [ rdi - hexvar ] aesenc xmm0 , xmmword ptr [ rdi - hexvar ] aesenc xmm0 , xmmword ptr [ rdi - hexvar ] aesenc xmm0 , xmmword ptr [ rdi - hexvar ] aesenclast xmm0 , xmmword ptr [ rdi - hexvar ] pxor xmm0 , xmm6 movups xmmword ptr [ rsi - hexvar ] , xmm0 cmp rdx , rsi movdqa xmm0 , xmmword ptr [ rdi - hexvar ] paddq xmm0 , xmm2 movdqa xmm4 , xmm0 pcmpeqq xmm4 , xmm1 punpcklqdq xmm5 , xmm4 psubq xmm0 , xmm5 movaps xmmword ptr [ rdi - hexvar ] , xmm0 ja hexvar ret nop nop word ptr cs : [ rax + rax ]
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi movsxd rdi , dword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi xor eax , eax mov cl , al mov rdx , qword ptr [ rbp - num ] and rdx , num cmp rdx , num mov byte ptr [ rbp - hexvar ] , cl jne hexvar cmp dword ptr [ rbp - hexvar ] , num setg al mov byte ptr [ rbp - hexvar ] , al mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov qword ptr [ rbp - num ] , rax mov ecx , dword ptr [ rbp - hexvar ] add ecx , - num mov dword ptr [ rbp - hexvar ] , ecx jmp hexvar mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] shl rax , cl pop rbp ret
mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar push rax mov esi , hexvar call hexvar mov qword ptr [ rip + hexvar ] , num add rsp , num xor edi , edi jmp hexvar nop dword ptr [ rax ]
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , - num jne hexvar call hexvar cmp dword ptr [ eax ] , hexvar jne hexvar call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax + hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - num ] , eax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ eax + hexvar ] push num push dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] call hexvar add esp , hexvar ret
mov edx , dword ptr [ rip + hexvar ] mov eax , num cmp edx , dword ptr [ rip + hexvar ] jne hexvar add edx , dword ptr [ rip + hexvar ] cmp edx , dword ptr [ rip + hexvar ] jg hexvar cmp edi , hexvar setne al cmp edi , - num setne dl movzx edx , dl and eax , edx and eax , num ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ eax + hexvar ] test ecx , ecx je hexvar mov edx , dword ptr [ esp + hexvar ] test edx , edx jne hexvar add esp , num xor eax , eax pop ebx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s4 , a0 move s2 , a1 move s3 , a2 lui v0 , hexvar sltu v0 , a3 , v0 bnez v0 , hexvar move s0 , a3 lui s1 , hexvar addiu s6 , s4 , hexvar addiu s5 , s4 , hexvar lw v0 , num ( s4 )
push rbp mov rbp , rsp movsd xmm3 , qword ptr [ rip ] movsd xmm4 , qword ptr [ rip ] movsd xmm5 , qword ptr [ rip ] movsd xmm6 , qword ptr [ rip ] movsd xmm7 , qword ptr [ rip ] movsd xmm8 , qword ptr [ rip ] movsd xmm9 , qword ptr [ rip ] movsd xmm10 , qword ptr [ rip ] movsd xmm11 , qword ptr [ rip ] movsd xmm12 , qword ptr [ rip ] movsd xmm13 , qword ptr [ rip ] movsd qword ptr [ rbp - num ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 movsd qword ptr [ rbp - hexvar ] , xmm2 mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mulsd xmm13 , qword ptr [ rbp - num ] mulsd xmm12 , qword ptr [ rbp - hexvar ] addsd xmm13 , xmm12 mulsd xmm11 , qword ptr [ rbp - hexvar ] addsd xmm13 , xmm11 movaps xmm0 , xmm4 mulsd xmm0 , xmm13 mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm0 mulsd xmm10 , qword ptr [ rbp - num ] mulsd xmm9 , qword ptr [ rbp - hexvar ] subsd xmm10 , xmm9 mulsd xmm8 , qword ptr [ rbp - hexvar ] addsd xmm10 , xmm8 movaps xmm0 , xmm4 mulsd xmm0 , xmm10 addsd xmm0 , xmm3 mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm0 mulsd xmm7 , qword ptr [ rbp - num ] mulsd xmm6 , qword ptr [ rbp - hexvar ] addsd xmm7 , xmm6 mulsd xmm5 , qword ptr [ rbp - hexvar ] addsd xmm7 , xmm5 mulsd xmm4 , xmm7 addsd xmm4 , xmm3 mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm4 pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r4 , [ r1 ] cmp r4 , num beq hexvar mov r7 , r2 mov r5 , r1 mov r8 , r0 bl hexvar ldr r3 , [ r7 ] mov r6 , r0 cmp r3 , r0 bhi hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp dword ptr [ eax + hexvar ] , num jne hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar jmp hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax xor eax , eax mov cl , al mov eax , num cmp eax , dword ptr [ ebp - num ] mov byte ptr [ ebp - hexvar ] , cl jae hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] sub ecx , num movsx eax , byte ptr [ eax + ecx ] cmp eax , hexvar sete dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp - num ] sub eax , - num sub ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx sub esp , num call hexvar add ebx , hexvar cmp dword ptr [ ebp + hexvar ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] movzx eax , byte ptr [ eax ] test al , al jne hexvar mov eax , num jmp hexvar add dword ptr [ ebp + hexvar ] , num mov eax , dword ptr [ ebp + hexvar ] movzx eax , byte ptr [ eax ] movsx eax , al sub eax , hexvar cmp eax , hexvar ja hexvar shl eax , num mov eax , dword ptr [ eax + ebx - hexvar ] add eax , ebx jmp eax
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar lea eax , [ hexvar ] mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar lea eax , [ hexvar ] mov byte ptr [ hexvar ] , num add esp , hexvar pop ebp ret
bltz a2 , hexvar andi a3 , a0 , hexvar lui v0 , hexvar ori v0 , v0 , hexvar multu a2 , v0 srl t0 , a1 , hexvar srl a0 , a0 , hexvar andi a1 , a1 , hexvar mfhi v1 addu a0 , a0 , t0 ori t1 , zero , hexvar addu a1 , a1 , a3 srl v1 , v1 , hexvar sll t0 , v1 , hexvar subu t0 , t0 , v1 sll t0 , t0 , num addu v1 , t0 , v1 subu v1 , a2 , v1 mul a2 , v1 , a3 subu a0 , a0 , v1 multu a2 , v0 mfhi v0 srl v0 , v0 , hexvar sll v1 , v0 , hexvar subu v1 , v1 , v0 sll v1 , v1 , num addu v0 , v1 , v0 subu a2 , a2 , v0 addu a0 , a0 , a2 bnez a1 , hexvar addu v1 , a0 , t1 ori v0 , zero , hexvar lui a1 , num ori a1 , a1 , hexvar sltu a1 , v1 , a1 bnez a1 , hexvar nop lui v1 , hexvar addiu v1 , v1 , hexvar addu v1 , a0 , v1 ori a0 , zero , hexvar sltu a1 , v1 , a0 bnez a1 , hexvar nop subu v1 , v1 , a0 sll v1 , v1 , hexvar jr ra or v0 , v1 , v0 addiu v0 , a1 , - num sltu t1 , v0 , t1 bnez t1 , hexvar nop lui v0 , hexvar addiu v0 , v0 , hexvar b hexvar addu v0 , a1 , v0 jr ra addiu v0 , zero , - num
push rax test rdi , rdi je hexvar test rsi , rsi je hexvar test rdx , rdx je hexvar mov rax , qword ptr [ rdi + hexvar ] cmp qword ptr [ rdx ] , rax jb hexvar mov qword ptr [ rdx ] , rax pop rax jmp hexvar mov edi , num mov esi , num mov edx , hexvar call hexvar mov edi , num mov esi , num mov edx , hexvar call hexvar mov edi , num mov esi , num mov edx , hexvar call hexvar mov edi , num mov esi , num mov edx , hexvar call hexvar
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s5 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s1 , hexvar ( sp ) addiu s1 , sp , hexvar lw s5 , - hexvar ( gp ) lw s3 , hexvar ( a0 )
push r12 push rbp push rbx mov r12 , rdi mov rbx , rsi mov rbp , rdx mov rax , qword ptr [ rdi + num ] mov rdi , rsi call qword ptr [ rax + hexvar ] mov qword ptr [ rbp ] , rax lea rdi , [ rbx + num ] mov rax , qword ptr [ r12 + num ] call qword ptr [ rax + hexvar ] mov qword ptr [ rbp + num ] , rax lea rdi , [ rbx + num ] mov rax , qword ptr [ r12 + num ] call qword ptr [ rax + hexvar ] mov qword ptr [ rbp + hexvar ] , rax pop rbx pop rbp pop r12 ret
push rbp mov rbp , rsp mov rax , qword ptr [ rip + hexvar ] test rax , rax sete cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov eax , num pop rbp ret
push ebp mov ebp , esp call hexvar add eax , hexvar mov eax , dword ptr [ ebp + hexvar ] movzx eax , byte ptr [ eax + hexvar ] movzx eax , al cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ eax + hexvar ] , edx jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ eax + num ] mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + num ] mov edx , dword ptr [ edx + hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + num ] mov edx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ edx + hexvar ] mov dword ptr [ eax + hexvar ] , edx jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + num ] test eax , eax je hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + num ] mov edx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ edx + hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + num ] test eax , eax je hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + num ] mov edx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ edx + hexvar ] mov dword ptr [ eax + hexvar ] , edx nop mov eax , num pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) addiu v0 , sp , hexvar addiu a1 , sp , hexvar lbu v1 , ( a0 ) sb v1 , ( v0 ) addiu v0 , v0 , - num bne v0 , a1 , hexvar addiu a0 , a0 , num addiu a1 , zero , hexvar addiu a0 , sp , hexvar jal hexvar nop lw gp , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v1 , - hexvar ( gp ) lw v1 , ( v1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , esp mov dword ptr [ ebx + num ] , edi mov dword ptr [ ebx + num ] , edx mov dword ptr [ ebx ] , esi mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) sw a3 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( sp ) lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v1 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a3 , hexvar ( fp ) lw a2 , hexvar ( fp ) addiu a1 , zero , hexvar lw a0 , hexvar ( fp ) jal hexvar nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop nop
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov ebp , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov esi , dword ptr [ esp + hexvar ] test ebp , ebp mov dword ptr [ esp + hexvar ] , edx je hexvar mov edi , dword ptr [ ebp ] test edi , edi je hexvar test edx , edx mov ecx , dword ptr [ esi + hexvar ] movzx eax , byte ptr [ esi ] jne hexvar test al , al jne hexvar test ecx , ecx je hexvar mov edi , dword ptr [ ecx + hexvar ] test edi , edi mov dword ptr [ esp ] , edi je hexvar cmp al , num ja hexvar mov edi , dword ptr [ ebx + eax * num - hexvar ] add edi , ebx jmp edi nop lea esi , [ esi ] cmp al , num ja hexvar mov edi , dword ptr [ ebx + eax * num - hexvar ] add edi , ebx jmp edi mov edi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov esi , eax cmp dword ptr [ esp + hexvar ] , num je hexvar mov eax , dword ptr [ esp ] test eax , eax je hexvar push num push esi push dword ptr [ esp + hexvar ] push num call eax add esp , hexvar test eax , eax jne hexvar lea esi , [ esi ] xor edi , edi mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] mov eax , edi jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbx lea rsi , [ rip + hexvar ] mov rbx , rdi mov edx , num xor edi , edi call hexvar mov rsi , rbx mov rdi , rax call hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ]
addiu sp , sp , - hexvar addiu a2 , a2 , - num lui gp , hexvar sw s1 , hexvar ( sp ) addu s1 , a1 , a2 addiu gp , gp , hexvar sw s4 , hexvar ( sp ) sltu v0 , a1 , s1 sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) move s4 , a1 sw s3 , hexvar ( sp ) move s0 , a1 sw s2 , hexvar ( sp ) beqz v0 , hexvar sw gp , hexvar ( sp ) move s2 , a0 b hexvar addiu s3 , zero , hexvar lb v0 , ( s0 ) beq v0 , s3 , hexvar nop addiu s0 , s0 , num beq s1 , s0 , hexvar nop addiu a2 , zero , num move a1 , s0 jal hexvar move a0 , s2 bgtz v0 , hexvar lw gp , hexvar ( sp ) sb zero , ( s0 ) lb v0 , ( s4 ) beqz v0 , hexvar lw ra , hexvar ( sp ) move a0 , s4 lw s3 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jr t9 addiu sp , sp , hexvar move v0 , zero lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ esi ] lea edx , [ edx + esi - num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jmp edx mov eax , dword ptr [ ebp - hexvar ] movsx ecx , byte ptr [ eax ] mov edx , ecx mov bl , dl inc bl mov byte ptr [ eax ] , bl sub ecx , hexvar setl bl movzx eax , bl mov eax , dword ptr [ eax * num + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax dec ecx mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ eax ] , hexvar mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] sub eax , ecx setae dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ eax ] mov edx , ecx dec edx mov dword ptr [ eax ] , edx mov byte ptr [ ecx - num ] , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax ] inc ecx mov dword ptr [ eax ] , ecx mov eax , dword ptr [ hexvar ] jmp eax add esp , hexvar pop esi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar xor ecx , ecx mov dx , cx mov dword ptr [ eax ] , hexvar movzx eax , dx add esp , num pop ebp ret
cmp esi , num lea rax , [ rip + hexvar ] jne hexvar jmp hexvar nop cmp dword ptr [ rax + num ] , esi je hexvar add rax , hexvar cmp qword ptr [ rax ] , num jne hexvar sub rsp , num mov esi , hexvar call hexvar add rsp , num ret
push ebx sub esp , num call hexvar add ebx , hexvar mov edx , dword ptr [ esp + hexvar ] cmp edx , hexvar je hexvar cmp edx , hexvar je hexvar cmp edx , hexvar je hexvar mov eax , num cmp edx , hexvar jne hexvar call hexvar add esp , num pop ebx ret
xor eax , eax test rdi , rdi jle hexvar mov r8 , qword ptr [ rsi ] sub rdi , num xor esi , esi cmp rsi , rdi jae hexvar lea rcx , [ rsi + rdi ] shr rcx , num cmp rdx , qword ptr [ r8 + rcx * num ] jle hexvar jmp hexvar nop dword ptr [ rax ] lea rax , [ rsi + rcx ] shr rax , num cmp qword ptr [ r8 + rax * num ] , rdx jl hexvar mov rcx , rax cmp rsi , rcx jb hexvar xor eax , eax cmp rdx , qword ptr [ r8 + rsi * num ] je hexvar ret nop word ptr [ rax + rax ] mov rax , rcx mov rcx , rdi nop word ptr cs : [ rax + rax ] lea rsi , [ rax + num ] mov rdi , rcx jmp hexvar nop dword ptr [ rax ] lea rax , [ rsi + num ] ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw a2 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , - hexvar ( gp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , ecx mov ecx , esi shl edx , cl mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , hexvar sub eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] shr eax , cl mov edx , dword ptr [ ebp - hexvar ] or edx , eax mov eax , edx add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar beqz a0 , hexvar sw gp , hexvar ( sp ) move s2 , a0 lui s0 , hexvar addiu s0 , s0 , hexvar move s1 , zero addiu s3 , zero , num move a1 , s2 lw a0 , ( s0 ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar sll v0 , s1 , num addiu s1 , s1 , num bne s1 , s3 , hexvar addiu s0 , s0 , hexvar move v0 , zero lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addu s1 , v0 , s1 sll s1 , s1 , num lui v0 , hexvar addiu v0 , v0 , hexvar b hexvar addu v0 , v0 , s1 lui v0 , hexvar b hexvar addiu v0 , v0 , hexvar
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi ] mov edi , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ esi + edi * num + num ] and esi , hexvar mov dword ptr [ ebp - hexvar ] , esi mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi ] mov edi , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ esi + edi * num + num ] shr esi , num and esi , hexvar mov dword ptr [ ebp - hexvar ] , esi cmp dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] and eax , num cmp eax , num je hexvar mov eax , dword ptr [ ebp + hexvar ] and eax , num cmp eax , num je hexvar mov eax , dword ptr [ ebp - hexvar ] and eax , num cmp eax , num je hexvar mov eax , dword ptr [ ebp + hexvar ] and eax , num cmp eax , num jne hexvar mov eax , dword ptr [ ebp - hexvar ] and eax , hexvar cmp eax , num je hexvar mov eax , dword ptr [ ebp + hexvar ] and eax , num cmp eax , num je hexvar mov eax , dword ptr [ ebp - hexvar ] and eax , hexvar cmp eax , num je hexvar mov eax , dword ptr [ ebp + hexvar ] and eax , num cmp eax , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ hexvar ] mov ecx , eax sub ecx , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx ja hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ hexvar ] jae hexvar xor eax , eax mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx + edx * num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ esp ] , hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar cmp dword ptr [ hexvar ] , num jne hexvar mov dword ptr [ esp ] , hexvar call hexvar jmp hexvar call hexvar jmp hexvar cmp dword ptr [ hexvar ] , num jne hexvar mov dword ptr [ esp ] , hexvar call hexvar jmp hexvar call hexvar jmp hexvar mov dword ptr [ esp ] , hexvar call hexvar jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ hexvar ] jae hexvar call hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + ecx * num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ esp ] , hexvar call hexvar mov ecx , dword ptr [ hexvar ] add ecx , num mov dword ptr [ hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar add esp , hexvar pop ebp ret
mov eax , esi mov byte ptr [ edi + hexvar ] , al mov dword ptr [ edi + num ] , ebp mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ esp + num ] , eax add eax , num mov edi , dword ptr [ esp + hexvar ] mov dword ptr [ edi ] , eax mov edi , dword ptr [ esp + hexvar ] cmp edi , eax ja hexvar test edi , edi js hexvar add edi , edi mov dword ptr [ esp + hexvar ] , edi cmp edi , hexvar ja hexvar sub esp , num imul eax , edi , hexvar push eax mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax + num ] mov ebx , dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar mov edi , dword ptr [ esp + hexvar ] mov dword ptr [ edi + num ] , eax jmp hexvar mov ebx , dword ptr [ esp + hexvar ] lea eax , [ ebx + num ] mov dword ptr [ edi + hexvar ] , ebx cmp ebx , - num je hexvar mov dword ptr [ esp + hexvar ] , eax jmp hexvar lea eax , [ ebx + num ] mov dword ptr [ esp + hexvar ] , eax cmp ebx , eax jbe hexvar jmp hexvar sub esp , hexvar push edx mov ebx , dword ptr [ esp + hexvar ] call hexvar add esp , hexvar jmp hexvar cmp edx , dword ptr [ esp + hexvar ] je hexvar
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , ecx mov byte ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp byte ptr [ eax ] , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov al , byte ptr [ ebp - num ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx call hexvar and al , num mov byte ptr [ ebp - num ] , al test byte ptr [ ebp - num ] , num je hexvar test byte ptr [ ebp - num ] , num jne hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar test byte ptr [ ebp - num ] , num jne hexvar test byte ptr [ ebp - num ] , num je hexvar mov dword ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push { r4 , lr } mov r2 , hexvar mov r1 , num mov r4 , r0 bl hexvar bl hexvar clz r0 , r0 lsr r0 , r0 , num strb r0 , [ r4 , hexvar ] strb r0 , [ r4 , hexvar ] pop { r4 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx xor eax , eax mov cl , al cmp dword ptr [ ebp - num ] , num mov byte ptr [ ebp - hexvar ] , cl jge hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] movsx eax , byte ptr [ eax + ecx ] mov dword ptr [ esp ] , eax call hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] shl eax , num mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - hexvar ] movsx ecx , byte ptr [ ecx + edx ] add eax , ecx sub eax , hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , - num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] mov dl , al mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] movsx eax , al add esp , hexvar pop ebp ret
push r12 push rbp push rbx mov rbx , rsi call hexvar mov rbp , rax mov rdi , rbx call hexvar mov rbx , rax mov rsi , rax mov rdi , rbp call hexvar mov r12d , eax mov rdi , rbp call hexvar mov rdi , rbx call hexvar mov eax , r12d pop rbx pop rbp pop r12 ret
push { fp , lr } add fp , sp , num sub sp , sp , num ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 , num ] sub r3 , r3 , num str r3 , [ fp , - num ] ldr r3 , [ fp , - num ] cmp r3 , num bls hexvar ldr r3 , [ pc , hexvar ] ldr r0 , [ r3 , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] mov r2 , num mov r1 , r3 bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r3 , num b hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] ldr r2 , [ fp , - num ] cmp r2 , r3 bne hexvar ldr r3 , [ pc , hexvar ] ldr r0 , [ r3 , num ] ldr r3 , [ pc , hexvar ] ldr r1 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] mov r2 , r3 bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] ldr r2 , [ fp , - num ] cmp r2 , r3 bne hexvar ldr r3 , [ pc , hexvar ] ldr r0 , [ r3 , num ] ldr r3 , [ pc , hexvar ] ldr r1 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] mov r2 , r3 bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] ldr r2 , [ fp , - num ] cmp r2 , r3 bne hexvar ldr r3 , [ pc , hexvar ] ldr r0 , [ r3 , num ] ldr r3 , [ pc , hexvar ] ldr r1 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] mov r2 , r3 bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num b hexvar mov r3 , num mov r0 , r3 sub sp , fp , num pop { fp , pc }
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mov r3 , num b hexvar bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r1 , [ sp , num ] ldr r0 , [ sp , hexvar ] blx r3 mov r3 , r0 cmp r3 , num bne hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar b hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar b hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] mov r0 , r3 bl hexvar ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] str r2 , [ r3 ] mov r3 , num b hexvar mov r0 , r0 ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num setne cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov eax , hexvar mov rcx , qword ptr [ rbp - hexvar ] cmp rcx , rax jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax + hexvar ] mov dword ptr [ rbp - hexvar ] , ecx mov eax , dword ptr [ rbp - hexvar ] cmp eax , num je hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , qword ptr [ rbp - hexvar ] mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] add rax , hexvar add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax ] movsd qword ptr [ rbp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp movsd qword ptr [ rbp - hexvar ] , xmm0 movsd qword ptr [ rbp - num ] , xmm1 mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi + hexvar ] , num mov rdi , qword ptr [ rbp - hexvar ] mov dword ptr [ rdi + hexvar ] , num mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi ] , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rdi + num ] , rax mov eax , num pop rbp ret
mov edx , dword ptr [ esi + hexvar ] mov ebp , dword ptr [ esp + hexvar ] test edx , edx jne hexvar xor edx , edx xor ebx , ebx mov dword ptr [ esp + hexvar ] , num sub esp , num xor ecx , ecx cmp ebx , esi sete cl cmp eax , num sete al push ecx push edx movzx eax , al push dword ptr [ esi + num ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call dword ptr [ ebp + hexvar ] add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ esi + hexvar ] test eax , eax jne hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] jmp hexvar lea esi , [ esi ]
push { r4 , lr } ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] mov r1 , num mov r0 , num bl hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] mov r1 , num mov r0 , hexvar bl hexvar pop { r4 , pc }
mov eax , hexvar add edi , - hexvar cmp edi , hexvar ja hexvar xor ecx , ecx jmp qword ptr [ rdi * num ] mov ecx , num jmp hexvar mov ecx , num jmp hexvar mov ecx , num jmp hexvar mov ecx , num jmp hexvar mov ecx , num jmp hexvar mov ecx , num jmp hexvar mov ecx , num jmp hexvar mov ecx , num jmp hexvar mov ecx , num jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar jmp hexvar mov ecx , hexvar mov eax , dword ptr [ rcx * num ] ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov rbx , r9 mov r14d , r8d mov r15 , rcx mov r12d , edx mov r13 , rsi mov ebp , edi mov eax , dword ptr [ r9 + hexvar ] and eax , hexvar mov dword ptr [ rsp + num ] , eax mov eax , r8d mov qword ptr [ rsp + hexvar ] , rax mov ecx , hexvar jmp hexvar mov edx , hexvar cmove ecx , edx nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] cmp ecx , hexvar jle hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov edi , ebp mov rsi , r13 mov edx , r12d mov ecx , num mov r8d , num mov r9 , r15 push rbx push qword ptr [ rsp + hexvar ] call hexvar add rsp , hexvar mov ecx , hexvar jmp hexvar mov rcx , qword ptr [ rbx + hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rsp + num ] , rcx cmp qword ptr [ rsp + num ] , num mov ecx , hexvar jmp hexvar mov rax , qword ptr [ rsp + num ] mov edi , ebp mov rsi , r13 mov edx , r12d mov rcx , r15 mov r8d , r14d mov r9 , rbx call rax mov ecx , hexvar jmp hexvar cmp dword ptr [ rsp + num ] , num mov ecx , hexvar jmp hexvar add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push r12 push rbp mov r12 , rdi push rbx test dword ptr [ rdi + hexvar ] , hexvar mov rbx , rsi je hexvar mov edi , hexvar call hexvar test rax , rax mov rbp , rax je hexvar mov rax , qword ptr [ rbx + hexvar ] mov rdi , qword ptr [ r12 + hexvar ] mov rsi , rbp mov qword ptr [ rbp + hexvar ] , rbx mov qword ptr [ rbp ] , rax mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rbp + num ] , rax call hexvar cmp rbp , rax mov r12 , rax je hexvar mov rdi , rbp call hexvar test r12 , r12 je hexvar mov rax , qword ptr [ r12 + hexvar ] mov ecx , num mov word ptr [ rbx + hexvar ] , cx mov qword ptr [ rbx ] , rax pop rbx mov eax , num pop rbp pop r12 ret
push esi push ebx sub esp , num call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] test esi , esi je hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push num call hexvar mov edx , dword ptr [ ebx + hexvar ] add esp , hexvar cmp esi , edx je hexvar test edx , edx je hexvar mov eax , edx mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar cmp esi , eax jne hexvar test eax , eax je hexvar mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar mov ecx , dword ptr [ esi + hexvar ] mov dword ptr [ eax + hexvar ] , ecx mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar mov ecx , dword ptr [ esi + hexvar ] mov dword ptr [ eax + hexvar ] , ecx cmp esi , edx je hexvar cmp esi , dword ptr [ ebx + hexvar ] je hexvar sub esp , num push num push esi call hexvar add esp , hexvar mov esi , num push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar call hexvar add esp , hexvar mov eax , esi add esp , num pop ebx pop esi ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r3 , [ pc , hexvar ] ldr r4 , [ r0 ] ldr r3 , [ r3 ] sub sp , sp , hexvar mov r8 , r0 mov r5 , r1 mov r0 , r4 str r3 , [ sp , hexvar ] bl hexvar cmp r5 , num ldr sb , [ r8 , hexvar ] mov r2 , r0 beq hexvar ldr r5 , [ r8 , hexvar ] cmp r5 , num bne hexvar cmp r2 , hexvar addls r2 , r4 , r2 addhi r2 , r4 , hexvar mov r1 , r4 mov r0 , r8 bl hexvar cmp r0 , num beq hexvar ldr r7 , [ sb ] cmp r7 , num beq hexvar ldr r3 , [ pc , hexvar ] ldr r6 , [ r7 , num ] ldr r2 , [ r3 ] cmp r2 , num moveq r2 , num streq r2 , [ r3 ] beq hexvar ldr r3 , [ sb , num ] rsb r3 , r3 , hexvar cmp r2 , r3 ldrhi r2 , [ pc , hexvar ] strhi r3 , [ r2 ] movhi r2 , r3 ldr r1 , [ r7 , hexvar ] cmp r1 , num movne r5 , num bne hexvar b hexvar ldr r1 , [ r7 , hexvar ] add r5 , r5 , r4 cmp r1 , r5 bls hexvar mov r6 , sl ldr r3 , [ pc , hexvar ] ldr r2 , [ r3 ] sub r1 , r1 , r5 cmp r1 , r2 mov r0 , r8 movlo r4 , r1 movhs r4 , r2 ldr fp , [ r7 , num ] bl hexvar mov r1 , r0 mov r0 , r5 bl hexvar add sl , r6 , r4 ldr r1 , [ sb , num ] add r2 , r0 , fp mov r3 , r6 str sl , [ sp ] mov r0 , r8 bl hexvar cmp r0 , num bne hexvar mov r4 , num ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] mov r0 , r4 cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } stcne p2 , c10 , [ r7 , hexvar ] ! andeq r0 , r0 , r0
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx jge hexvar cmp dword ptr [ hexvar ] , - hexvar sete al mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
test rdi , rdi je hexvar xorps xmm0 , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 mov qword ptr [ rdi + hexvar ] , num movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 mov qword ptr [ rdi + hexvar ] , hexvar xor eax , eax ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] sub edx , num mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] sub edi , num mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ esp + hexvar ] , edi call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) addiu gp , gp , hexvar lw a0 , hexvar ( a0 )
lw v0 , ( a1 ) addiu sp , sp , - hexvar ext v0 , v0 , hexvar , num sw s1 , hexvar ( sp ) sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) bnez v0 , hexvar lw s1 , hexvar ( sp ) lw v0 , hexvar ( a0 )
push edi push esi push ebx mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov edx , dword ptr [ esi + hexvar ] cmp dword ptr [ edx ] , num je hexvar mov eax , esi call hexvar test eax , eax mov edi , eax jle hexvar call hexvar sub esp , num mov dword ptr [ eax ] , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esi + hexvar ] call hexvar mov edi , eax pop eax pop edx push hexvar push esi call hexvar add esp , hexvar test edi , edi jle hexvar mov eax , edi pop ebx pop esi pop edi ret
push rbp push r15 push r14 push r12 push rbx mov r14d , edx mov r15 , rsi mov rbp , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rbx , rax xor r12d , r12d mov rdi , rax mov esi , hexvar xor edx , edx mov rcx , rbp call hexvar call hexvar test rax , rax je hexvar mov rbp , rax mov rdi , rax mov rsi , r15 call hexvar test eax , eax je hexvar mov rdi , rbx mov rsi , rbp mov edx , r14d xor ecx , ecx call hexvar mov r12d , eax mov rdi , rbp call hexvar mov rdi , rbx call hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar xor r12d , r12d mov eax , r12d pop rbx pop r12 pop r14 pop r15 pop rbp ret
push r15 push r14 mov r14d , ecx push r13 push r12 mov r13d , r9d push rbp push rbx mov rbp , rsi mov rbx , rdx sub rsp , hexvar mov rax , qword ptr [ rsi + hexvar ] test rax , rax je hexvar movzx r15d , byte ptr [ rdx ] mov rdx , qword ptr [ rdi + num ] cmp r15b , byte ptr [ rdx + hexvar ] je hexvar cmp r15b , byte ptr [ rsi + num ] je hexvar mov r12 , rbx xor r15d , r15d xor ecx , ecx xor edx , edx mov rsi , r12 mov rdi , rax mov dword ptr [ rsp + num ] , r8d call hexvar test rax , rax mov r8d , dword ptr [ rsp + num ] je hexvar mov rdi , r12 call hexvar lea rdi , [ rax + num ] call hexvar test rax , rax mov rbx , rax je hexvar mov rdi , rax mov byte ptr [ rax ] , r15b mov byte ptr [ rax + num ] , num call hexvar movabs rsi , hexvar lea rdi , [ rbx + rax + num ] mov qword ptr [ rbx + rax ] , rsi mov rsi , r12 call hexvar mov rdi , qword ptr [ rbp + hexvar ] mov ecx , num mov edx , r14d mov rsi , rbx call hexvar test r13d , r13d je hexvar test rax , rax jne hexvar jmp hexvar nop word ptr [ rax + rax ] mov rax , qword ptr [ rax + hexvar ] movzx esi , byte ptr [ rax + hexvar ] lea edx , [ rsi - num ] cmp dl , num jbe hexvar mov rdi , rbx mov qword ptr [ rsp + num ] , rax call hexvar mov rax , qword ptr [ rsp + num ] add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
cmp dl , num ja hexvar mov eax , dword ptr [ esp + hexvar ] test byte ptr [ eax + hexvar ] , hexvar je hexvar mov eax , dword ptr [ esp ] xor edx , edx mov ecx , dword ptr [ eax + hexvar ] xor eax , eax mov edi , dword ptr [ ecx + hexvar ] test edi , edi je hexvar mov eax , dword ptr [ esp ] mov ebx , dword ptr [ ecx + hexvar ] mov ecx , dword ptr [ ecx + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp + hexvar ] , ebx mov dword ptr [ esp + hexvar ] , ecx add ecx , - num adc ebx , - num xor edx , edx mov eax , dword ptr [ eax + num ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp + hexvar ] , eax add eax , ecx mov ecx , dword ptr [ esp + hexvar ] adc edx , ebx mov ebx , dword ptr [ esp + hexvar ] cmp ebx , edx ja hexvar jb hexvar cmp ecx , eax ja hexvar mov eax , dword ptr [ esp + hexvar ] xor ebx , ebx sub eax , num mov ecx , eax add ecx , dword ptr [ esp + hexvar ] not eax adc ebx , dword ptr [ esp + hexvar ] and eax , ecx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , ebx mov eax , dword ptr [ edi + hexvar ] sub eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ edi + hexvar ] sbb edx , dword ptr [ esp + hexvar ] add eax , dword ptr [ esp + hexvar ] adc edx , dword ptr [ esp + hexvar ] neg eax adc edx , num mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ ebp ] neg edx mov dword ptr [ esp + hexvar ] , edx mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , edx jmp hexvar
cmp r0 , num beq hexvar ldr ip , [ r0 , hexvar ] cmp ip , num beq hexvar ldr ip , [ r0 , hexvar ] cmp ip , num beq hexvar ldr ip , [ r0 , hexvar ] cmp ip , num beq hexvar push { r4 , lr } ldr lr , [ ip ] cmp r0 , lr beq hexvar mvn r0 , num pop { r4 , pc } rfedb num !
sub rsp , hexvar xor edx , edx xor esi , esi mov r8d , hexvar mov rcx , rsp mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax call hexvar test eax , eax je hexvar cmp eax , num je hexvar xor eax , eax mov rdx , qword ptr [ rsp + num ] xor rdx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] ldr r3 , [ sp , num ] add r3 , r3 , hexvar mov r0 , r3 bl hexvar mov r3 , r0 sub r3 , r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov rax , qword ptr [ hexvar ] mov qword ptr [ rbp - num ] , rax mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] cmp rax , num mov ecx , hexvar mov edx , hexvar cmove edx , ecx mov dword ptr [ rbp - hexvar ] , edx jmp hexvar call hexvar mov qword ptr [ hexvar ] , rax mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov eax , num add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) sw zero , hexvar ( fp ) b hexvar nop lw v0 , hexvar ( fp ) sll v0 , v0 , num lw v1 , hexvar ( fp ) addu a0 , v1 , v0 lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) sll v0 , v0 , num addu v0 , v1 , v0 lw v0 , ( v0 ) move a1 , v0 jal hexvar nop lw v0 , hexvar ( fp ) addiu v0 , v0 , num sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) slti v0 , v0 , num bnez v0 , hexvar nop lw v0 , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov al , num call hexvar cmp qword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax ] , num mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + num ] , num mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + num ] , num mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] xorps xmm0 , xmm0 movsd qword ptr [ rax + hexvar ] , xmm0 mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov byte ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num call hexvar movabs rdi , hexvar mov dword ptr [ rbp - hexvar ] , eax call hexvar mov qword ptr [ rbp - hexvar ] , rax add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , eax add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar xor eax , eax xor ecx , ecx mov r8d , ecx mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdi , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov r9 , qword ptr [ rbp - hexvar ] mov esi , eax mov qword ptr [ rbp - hexvar ] , rdx mov rdx , r8 mov rcx , r8 mov r8 , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
str lr , [ sp , - num ] ! ldr r3 , [ r0 , hexvar ] ldr r3 , [ r3 , num ] ldr ip , [ r0 , hexvar ] add r2 , r1 , ip , lsl num mov lr , num str lr , [ r1 , ip , lsl num ] cmp r3 , lr beq hexvar str r3 , [ r2 , - num ] ! ldr r3 , [ r3 , hexvar ] cmp r3 , num bne hexvar ldr r0 , [ r0 , hexvar ] pop { pc }
test rdi , rdi je hexvar test rdx , rdx je hexvar test rsi , rsi je hexvar xor ecx , ecx xor eax , eax jmp hexvar nop dword ptr [ rax ] lea r8d , [ r9 - hexvar ] cmp ecx , hexvar movzx r8d , r8b ja hexvar shl ecx , num add rax , num add ecx , r8d cmp rsi , rax je hexvar movzx r9d , byte ptr [ rdi + rax ] lea r8d , [ r9 - hexvar ] cmp r8b , num jbe hexvar lea r8d , [ r9 - hexvar ] cmp r8b , num jbe hexvar lea r8d , [ r9 - hexvar ] cmp r8b , num ja hexvar lea r8d , [ r9 - hexvar ] cmp ecx , hexvar movzx r8d , r8b jbe hexvar xor eax , eax ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rip + hexvar ] jmp rsi mov rax , qword ptr [ rbp - hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov edi , hexvar call hexvar test rax , rax sete cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rdi , qword ptr [ rip + hexvar ] call hexvar test eax , eax setns cl movzx eax , cl mov edi , eax mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi call hexvar test eax , eax sets cl movzx eax , cl mov edx , eax mov rdx , qword ptr [ rdx * num + hexvar ] jmp rdx mov byte ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov edi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] add rdx , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] sub rdx , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] jmp rax mov byte ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov al , byte ptr [ rbp - num ] and al , num movzx eax , al add rsp , hexvar pop rbp ret
cmp dword ptr [ rdi + num ] , num sete cl movzx ecx , cl cmp dword ptr [ rsi + num ] , num sete dl movzx edx , dl mov eax , num cmp ecx , edx jl hexvar jg hexvar mov rcx , qword ptr [ rdi + hexvar ] and rcx , qword ptr [ rdi ] mov rdx , qword ptr [ rsi + hexvar ] and rdx , qword ptr [ rsi ] cmp rcx , rdx jb hexvar ja hexvar mov rdx , qword ptr [ rdi + hexvar ] mov rax , qword ptr [ rsi + hexvar ] cmp rdx , rax jb hexvar seta al movzx eax , al ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r4 , r0 mov r0 , r2 mov r8 , r3 mov r6 , r1 mov r5 , r2 bl hexvar mov r1 , r5 mov r7 , r0 mov r2 , r0 ldr r0 , [ r4 ] bl hexvar cmp r0 , num moveq r0 , num ldreq r3 , [ r6 ] movne r0 , num strbeq r8 , [ r3 ] ldreq r3 , [ r4 ] addeq r7 , r3 , r7 streq r7 , [ r4 ] ldreq r3 , [ r6 ] addeq r3 , r3 , r0 streq r3 , [ r6 ] pop { r4 , r5 , r6 , r7 , r8 , pc }
sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rax , qword ptr [ rdi + hexvar ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rax ] cmp eax , num je hexvar cmp eax , num jb hexvar cmp eax , num je hexvar lea rax , [ rip + hexvar ] mov qword ptr [ rsp + hexvar ] , rax lea rax , [ rip + hexvar ] mov qword ptr [ rsp + hexvar ] , rax mov rsi , rsp call hexvar mov rdx , qword ptr [ rsp + hexvar ] xor rdx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar ret
push r15 push r14 push r12 push rbx push rax mov rbx , rsi mov r14 , rdi cmp byte ptr [ rsi ] , hexvar jne hexvar lea rsi , [ rbx + num ] mov rdi , r14 call hexvar mov r15 , rax test rax , rax je hexvar xor edi , edi mov rsi , r14 mov rdx , r15 call hexvar mov r12 , rax cmp byte ptr [ rbx ] , hexvar jne hexvar mov rdi , r14 mov rsi , r15 call hexvar jmp hexvar mov rdi , rbx call hexvar mov r15 , rax test rax , rax jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor r12d , r12d jmp hexvar mov esi , hexvar mov rdi , r15 call hexvar mov rax , r12 add rsp , num pop rbx pop r12 pop r14 pop r15 ret
push { r4 , r5 , r6 , lr } mov r4 , r1 mov r5 , r0 mov r0 , r1 bl hexvar adds r3 , r4 , num movne r3 , num cmp r0 , num movne r3 , num cmp r3 , num bne hexvar mov r2 , r4 mov r1 , r5 pop { r4 , r5 , r6 , lr } b hexvar bl hexvar
mov eax , dword ptr [ esi ] lea ebp , [ edx + num ] test eax , eax je hexvar mov edx , dword ptr [ esi + num ] mov ecx , dword ptr [ esi + num ] sub ecx , edx cmp ecx , num jg hexvar sub edx , eax sub esp , num lea edi , [ edx + edx + hexvar ] mov dword ptr [ esp + num ] , edx push edi push eax call hexvar mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esi ] , eax add esp , hexvar add edx , eax add eax , edi mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , eax mov dword ptr [ edx ] , hexvar mov byte ptr [ edx + num ] , hexvar add dword ptr [ esi + num ] , num jmp hexvar lea esi , [ esi ]
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , hexvar call hexvar leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , hexvar ( a0 ) beq v0 , a1 , hexvar move s0 , a0 move a0 , a1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s1 , v0 lw a0 , hexvar ( s0 ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sw s1 , hexvar ( s0 ) b hexvar addiu v0 , zero , num addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) b hexvar move v0 , zero addiu v0 , zero , num lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbp push rbx mov rbp , rdi mov rbx , rsi sub rsp , num call hexvar mov rdx , rax mov rcx , rax mov rax , qword ptr [ rdx ] mov rdx , qword ptr [ rdx + num ] cmp rax , rbx je hexvar nop dword ptr [ rax + rax ] test rdx , rdx je hexvar mov rax , qword ptr [ rdx ] mov rdx , qword ptr [ rdx + num ] cmp rax , rbx jne hexvar test rdx , rdx jne hexvar mov rdx , qword ptr [ rbp + num ] jmp hexvar nop dword ptr [ rax ] mov rax , qword ptr [ rcx ] test rax , rax jne hexvar add rcx , hexvar cmp rdx , rcx ja hexvar xor eax , eax add rsp , num pop rbx pop rbp ret
push r12 push rbp push rbx mov rbp , rdi mov rbx , rsi mov rdx , qword ptr [ rsi + hexvar ] cmp rdx , hexvar je hexvar cmp rdx , hexvar je hexvar cmp rdx , hexvar je hexvar cmp rdx , hexvar je hexvar cmp rdx , hexvar je hexvar mov eax , num cmp rdx , hexvar je hexvar pop rbx pop rbp pop r12 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rdi , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] shr rax , num mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] shr rcx , num mov r8 , qword ptr [ rbp - hexvar ] mov rsi , rax mov rdx , rcx mov ecx , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
lea eax , [ edx + num ] cmp dword ptr [ esp + hexvar ] , eax jb hexvar sub esp , hexvar add edx , num add ebp , num mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] push edx call dword ptr [ eax + hexvar ] jmp hexvar
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s6 , hexvar ( sp ) move s6 , a0 sw s7 , hexvar ( sp ) move s7 , a2 sw s5 , hexvar ( sp ) move s5 , a1 sw s0 , hexvar ( sp ) move s0 , a3 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal - hexvar lw a0 , hexvar ( a3 )
push { fp , lr } add fp , sp , num sub sp , sp , num str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] ldr r3 , [ r3 , num ] mov r0 , r3 bl hexvar ldr r3 , [ fp , - num ] mov r2 , num str r2 , [ r3 , num ] ldr r3 , [ fp , - num ] ldr r3 , [ r3 ] mov r0 , r3 bl hexvar ldr r3 , [ fp , - num ] mov r2 , num str r2 , [ r3 ] ldr r0 , [ fp , - num ] bl hexvar mov r0 , r0 sub sp , fp , num pop { fp , pc }
sub esp , hexvar call hexvar add eax , hexvar push num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar add esp , hexvar ret
mov edx , dword ptr [ ebp - hexvar ] sub esp , num push dword ptr [ ebp - hexvar ] lea eax , [ ebp - hexvar ] push eax push edx call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov edx , num mov esi , eax xor esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , esi mov eax , edx xor eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov eax , edi or eax , esi test eax , eax je hexvar sub esp , num push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] mov edi , dword ptr [ ebp - hexvar ] lea eax , [ edi - hexvar ] push eax call hexvar add esp , hexvar mov esi , eax sub esp , hexvar lea eax , [ edi - hexvar ] push eax mov ebx , edi call hexvar add esp , hexvar mov edx , eax push esi push hexvar lea eax , [ edi - hexvar ] push eax push edx mov ebx , edi call hexvar add esp , hexvar mov edx , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] add eax , edx mov dword ptr [ ebp - hexvar ] , eax mov edx , dword ptr [ ebp - hexvar ] sub esp , num push dword ptr [ ebp - hexvar ] lea eax , [ ebp - hexvar ] push eax push edx call hexvar add esp , hexvar mov edx , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] add eax , edx mov dword ptr [ ebp - hexvar ] , eax sub esp , num push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar test eax , eax js hexvar mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] add eax , eax add eax , edx mov word ptr [ eax ] , num jmp hexvar
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] mov r3 , num str r3 , [ fp , - num ] b hexvar ldr r2 , [ fp , - num ] mov r3 , r2 lsl r3 , r3 , num add r3 , r3 , r2 lsl r3 , r3 , num mov r2 , r3 ldr r3 , [ fp , - hexvar ] add r3 , r3 , r2 ldrb r3 , [ r3 , hexvar ] eor r3 , r3 , num and r3 , r3 , hexvar cmp r3 , num beq hexvar ldr r2 , [ fp , - num ] mov r3 , r2 lsl r3 , r3 , num add r3 , r3 , r2 lsl r3 , r3 , num mov r2 , r3 ldr r3 , [ fp , - hexvar ] add r3 , r3 , r2 ldr r3 , [ r3 ] ldr r1 , [ pc , hexvar ] mov r0 , r3 bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ fp , - num ] add r3 , r3 , num str r3 , [ fp , - num ] ldr r2 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 blo hexvar mov r3 , num mov r0 , r3 sub sp , fp , num pop { fp , pc }
movzx eax , byte ptr [ rsi ] and eax , num cmp al , num je hexvar mov rax , qword ptr [ rdi + num ] mov rdx , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rdx + hexvar ] mov ecx , eax add ecx , dword ptr [ rdx + hexvar ] mov rdx , rcx mov rax , qword ptr [ rdi + num ] mov rax , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rax + hexvar ] imul eax , dword ptr [ rdi + hexvar ] add rax , rdx ret
push edi push esi mov edx , hexvar push ebx mov edi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov ecx , dword ptr [ edi + num ] mov esi , dword ptr [ edi + hexvar ] mov eax , ecx mul edx shr edx , num lea eax , [ edx + edx * num ] cmp ecx , eax je hexvar mov eax , ecx mov edx , dword ptr [ esp + hexvar ] add ecx , num shl eax , num add eax , esi mov dword ptr [ eax ] , edx mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ eax + num ] , edx mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ eax + num ] , edx mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ eax + hexvar ] , edx mov dword ptr [ edi + num ] , ecx mov eax , num pop ebx pop esi pop edi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ecx + hexvar ] mov ecx , dword ptr [ ecx + hexvar ] or edx , ecx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] or ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar jmp hexvar movsd xmm0 , qword ptr [ hexvar ] movsd qword ptr [ ebp - num ] , xmm0 jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] shr eax , hexvar movsd xmm0 , qword ptr [ eax * num + hexvar ] movsd qword ptr [ ebp - num ] , xmm0 jmp hexvar mov eax , dword ptr [ ebp + num ] fild qword ptr [ eax + hexvar ] fstp qword ptr [ ebp - hexvar ] movsd xmm0 , qword ptr [ ebp - hexvar ] movsd xmm1 , qword ptr [ hexvar ] mulsd xmm0 , xmm1 movsd qword ptr [ ebp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp + num ] fild qword ptr [ eax + hexvar ] fstp qword ptr [ ebp - hexvar ] movsd xmm1 , qword ptr [ ebp - hexvar ] divsd xmm0 , xmm1 movsd qword ptr [ ebp - num ] , xmm0 movsd xmm0 , qword ptr [ ebp - num ] movsd qword ptr [ ebp - hexvar ] , xmm0 fld qword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , hexvar mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push r12 push rbp push rbx mov r12 , rdi mov ebx , num lea rbp , [ rip + hexvar ] mov eax , ebx movzx eax , byte ptr [ r12 + rax ] test al , al je hexvar add ebx , num sub eax , hexvar cmp al , hexvar ja hexvar movzx eax , al movsxd rax , dword ptr [ rbp + rax * num ] add rax , rbp jmp rax mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar or dword ptr [ rip + hexvar ] , num jmp hexvar or dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar mov edx , num lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rsi , r12 mov rdi , rax mov eax , num call hexvar jmp hexvar pop rbx pop rbp pop r12 ret
sub sp , sp , num str r0 , [ sp , num ] ldr r3 , [ sp , num ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 ] mov r0 , r3 add sp , sp , num bx lr
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 movlo r3 , r2 movhs r3 , r3 mov r2 , r3 ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] cmp r3 , num bne hexvar ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 bhs hexvar mvn r3 , num str r3 , [ fp , - num ] b hexvar ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 bls hexvar mov r3 , num str r3 , [ fp , - num ] ldr r3 , [ fp , - num ] mov r0 , r3 sub sp , fp , num pop { fp , pc }
push { r4 , r5 , r6 , r7 , r8 , lr } mov r4 , r0 ldr r0 , [ r0 , hexvar ] ldr r3 , [ r4 , hexvar ] cmp r0 , hexvar movhi r5 , hexvar movls r5 , hexvar movhi r8 , hexvar movls r8 , hexvar movhi r2 , hexvar movls r2 , hexvar movhi lr , hexvar movls lr , hexvar adds r3 , r3 , r0 mov r6 , r1 movhs r1 , num movlo r1 , num ldr r7 , [ r4 , hexvar ] cmp r1 , num addne r7 , r7 , num lsr ip , r3 , hexvar strne r7 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] add lr , r4 , lr , lsl num orr ip , ip , r7 , lsl num add r1 , r4 , r8 , lsl num lsl r3 , r3 , num add r7 , r4 , hexvar str r3 , [ lr , hexvar ] sub r2 , r2 , r0 str ip , [ r1 , hexvar ] add r0 , r7 , r0 ldr r1 , [ pc , hexvar ] bl hexvar mov r1 , r5 mov r0 , r7 mov r2 , r4 bl hexvar mov r1 , r6 mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , lr } b hexvar andeq r5 , r2 , r0 , lsr num
push rbp mov rbp , rsp sub rsp , hexvar movabs rdi , hexvar call hexvar movabs rdi , hexvar mov dword ptr [ rbp - num ] , eax call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] ldr r3 , [ sp , num ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r0 , [ sp , num ] blx r3 mov r3 , r0 b hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp push rbx lea rcx , [ rip + hexvar ] sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax movsxd rax , esi cmp dword ptr [ rcx + rax * num ] , num jne hexvar lea rcx , [ rip + hexvar ] cmp dword ptr [ rcx + rax * num ] , num jne hexvar mov rbp , rdi mov rdi , qword ptr [ rdi ] mov dword ptr [ rsp ] , esi mov qword ptr [ rsp + num ] , rdx mov rsi , rsp xor edx , edx call hexvar test rax , rax mov rbx , rax je hexvar mov rdi , qword ptr [ rbp ] mov rsi , rax call hexvar mov rdi , rbx call hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , edi mov ecx , dword ptr [ ecx ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] sub ecx , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] add ecx , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ecx jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ecx jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] add ecx , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ecx jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] add ecx , hexvar mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ecx jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num jmp hexvar call hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - num ] pop esi pop edi pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr sl , [ pc , hexvar ] ldr r7 , [ r0 , hexvar ] ldr r2 , [ sl ] ldr r3 , [ r7 , hexvar ] sub sp , sp , hexvar mov r5 , r0 str r2 , [ sp , hexvar ] and fp , r3 , hexvar bl hexvar mov r2 , num mov r4 , r2 ldr r3 , [ r5 , hexvar ] str r0 , [ r5 , hexvar ] ldrb r1 , [ r7 , hexvar ] cmp r1 , num bne hexvar cmp r3 , hexvar beq hexvar ldr r3 , [ r5 , hexvar ] ldrb r6 , [ r5 , hexvar ] ldr r8 , [ r7 , hexvar ] cmp r3 , num movne r6 , num andeq r6 , r6 , num cmp r6 , num bne hexvar cmp r2 , num bne hexvar ldr r1 , [ r5 , hexvar ] cmp r1 , num streq r4 , [ sp , hexvar ] streq r4 , [ sp , hexvar ] addeq sb , sp , hexvar beq hexvar cmp r8 , num ble hexvar bl hexvar ldr r3 , [ r5 , hexvar ] ldr r1 , [ r5 , hexvar ] sub r0 , r0 , r3 cmp r0 , r8 suble r8 , r8 , r0 strgt r4 , [ sp , hexvar ] strle r8 , [ sp , hexvar ] str r4 , [ sp , hexvar ] add sb , sp , hexvar cmp fp , num bne hexvar add r2 , sp , hexvar add r3 , sp , hexvar str r4 , [ r2 , num ] ! cmp r3 , r2 bne hexvar add r2 , sp , hexvar str r4 , [ r3 , num ] ! cmp r3 , r2 bne hexvar add r2 , sp , hexvar str r4 , [ r3 , num ] ! cmp r2 , r3 bne hexvar mvn r3 , num str r3 , [ sp , hexvar ] cmp r1 , num ldrls pc , [ pc , r1 , lsl num ]
srl v1 , a0 , hexvar sb a0 , num ( a2 ) srl v0 , a0 , hexvar sb a1 , ( a2 ) srl a0 , a0 , num sb v1 , num ( a2 ) srl a3 , a1 , hexvar sb v0 , num ( a2 ) srl v1 , a1 , hexvar sb a0 , num ( a2 ) srl v0 , a1 , num sb a3 , num ( a2 ) sb v1 , num ( a2 ) jr ra sb v0 , num ( a2 )
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov edx , dword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov esi , edx mov edi , eax call hexvar test eax , eax jns hexvar lea rdi , [ rip + hexvar ] call hexvar mov rbx , rax call hexvar mov eax , dword ptr [ rax ] mov rdx , rbx mov esi , eax mov edi , num mov eax , num call hexvar nop add rsp , hexvar pop rbx pop rbp ret
push rbx mov rbx , rdi mov rdi , qword ptr [ rdi ] mov esi , hexvar call hexvar mov rdi , qword ptr [ rbx + num ] call hexvar mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov rdi , rbx call hexvar xor eax , eax pop rbx ret
push r14 push rbx push rax test rdi , rdi je hexvar mov r14 , rsi test rsi , rsi je hexvar mov rbx , rdx test rdx , rdx je hexvar movsxd rdx , dword ptr [ rbx + num ] mov eax , num cmp qword ptr [ r14 ] , rdx jb hexvar lea rsi , [ rbx + hexvar ] call hexvar movsxd rdx , dword ptr [ rbx + num ] xor eax , eax mov qword ptr [ r14 ] , rdx add rsp , num pop rbx pop r14 ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebx + hexvar ] test eax , eax jne hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebx + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebx + hexvar ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] add eax , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] test eax , eax jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov eax , dword ptr [ eax ] sub esp , num push dword ptr [ ebp - hexvar ] push eax call hexvar add esp , hexvar test eax , eax jne hexvar cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] add eax , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] add eax , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] test eax , eax jne hexvar jmp hexvar nop mov eax , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - num ] leave ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push num call hexvar add esp , hexvar test eax , eax je hexvar sub esp , num push eax push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , num add esp , num pop ebx ret
push r15 push r14 push rbx test rdi , rdi je hexvar mov rbx , qword ptr [ rdi ] test rbx , rbx je hexvar mov rdi , qword ptr [ rbx + num ] test rdi , rdi je hexvar mov r14 , rdx mov r15 , rsi mov rsi , qword ptr [ rbx + hexvar ] test rsi , rsi jne hexvar call hexvar mov qword ptr [ rbx + hexvar ] , rax test rax , rax je hexvar mov rsi , rax mov rdi , qword ptr [ rbx + num ] mov rdx , qword ptr [ r15 ] mov rcx , r14 xor r8d , r8d call hexvar test eax , eax je hexvar mov rax , qword ptr [ r15 ] movzx ecx , byte ptr [ rax ] and ecx , hexvar mov dword ptr [ rbx + hexvar ] , ecx add r14 , rax mov qword ptr [ r15 ] , r14 jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx mov rax , rbx pop rbx pop r14 pop r15 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num jne hexvar jmp hexvar call hexvar cmp qword ptr [ hexvar ] , num je hexvar mov rax , qword ptr [ hexvar ] mov rcx , qword ptr [ hexvar ] cmp qword ptr [ rax + rcx * num ] , num jne hexvar jmp hexvar xor eax , eax mov cl , al test cl , num jne hexvar jmp hexvar mov al , byte ptr [ hexvar ] mov rcx , qword ptr [ hexvar ] mov byte ptr [ rcx ] , al mov rcx , qword ptr [ hexvar ] mov rdx , qword ptr [ hexvar ] mov rsi , qword ptr [ hexvar ] mov rdx , qword ptr [ rdx + rsi * num ] mov qword ptr [ rdx + hexvar ] , rcx mov edi , dword ptr [ hexvar ] mov rcx , qword ptr [ hexvar ] mov rdx , qword ptr [ hexvar ] mov rcx , qword ptr [ rcx + rdx * num ] mov dword ptr [ rcx + hexvar ] , edi cmp qword ptr [ hexvar ] , num je hexvar mov rax , qword ptr [ hexvar ] mov rcx , qword ptr [ hexvar ] cmp qword ptr [ rax + rcx * num ] , num jne hexvar jmp hexvar xor eax , eax mov cl , al test cl , num jne hexvar jmp hexvar mov rax , qword ptr [ hexvar ] add rax , num mov qword ptr [ hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ hexvar ] mov rdx , qword ptr [ hexvar ] mov qword ptr [ rcx + rdx * num ] , rax call hexvar mov dword ptr [ hexvar ] , num add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] lea esi , [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov byte ptr [ ebp - hexvar ] , num jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ esp + hexvar ] , ebx mov dword ptr [ ebp - hexvar ] , eax call hexvar and al , num mov byte ptr [ ebp - hexvar ] , al mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx call hexvar mov al , byte ptr [ ebp - hexvar ] and al , num mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
test r8 , r8 je hexvar push r15 push r14 mov r15 , rcx push r13 push r12 mov r14 , rdx push rbp push rbx mov r12 , rsi mov rbx , rdi sub rsp , hexvar test byte ptr [ rdi + hexvar ] , hexvar mov qword ptr [ rsp + num ] , r8 jne hexvar mov rbp , qword ptr [ rdi + hexvar ] test rbp , rbp je hexvar mov rax , rbp xor r13d , r13d xor esi , esi jmp hexvar nop dword ptr [ rax ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov edx , dword ptr [ rax + hexvar ] and edx , hexvar cmp edx , hexvar jne hexvar cmp qword ptr [ rax + hexvar ] , num je hexvar test esi , esi mov rdx , qword ptr [ rax + hexvar ] jne hexvar mov rax , qword ptr [ rax + hexvar ] mov r13 , rdx mov esi , num test rax , rax jne hexvar nop mov rsi , rbp mov rdi , rbx call hexvar mov rdx , qword ptr [ rbp + hexvar ] mov eax , eax sub rdx , r13 imul rax , rdx mov edx , dword ptr [ rbp + hexvar ] and edx , hexvar cmp edx , hexvar mov qword ptr [ rbp + hexvar ] , rax jne hexvar cmp qword ptr [ rbp + hexvar ] , num je hexvar test rax , rax js hexvar mov rbp , qword ptr [ rbp + hexvar ] test rbp , rbp jne hexvar or byte ptr [ rbx + hexvar ] , hexvar mov eax , dword ptr [ r12 + hexvar ] test al , num je hexvar test ah , num je hexvar add rsp , hexvar mov eax , num pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call eax mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax + num ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] cmp eax , dword ptr [ ebp - hexvar ] mov cl , num mov byte ptr [ ebp - hexvar ] , cl je hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax + num ] , num sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push rax mov dword ptr [ rsp + num ] , hexvar mov rdi , qword ptr [ rdi + hexvar ] mov esi , hexvar call hexvar test rax , rax je hexvar lea rcx , [ rsp + num ] mov rdi , rax mov esi , hexvar xor edx , edx call hexvar mov eax , dword ptr [ rsp + num ] pop rcx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) lw v0 , hexvar ( fp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( fp ) lw v0 , ( v0 )
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx + hexvar ] mov esi , dword ptr [ ebp - hexvar ] cmp edx , dword ptr [ esi + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] add eax , dword ptr [ ecx + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ ebp - hexvar ] add ecx , dword ptr [ edx + hexvar ] cmp eax , ecx setb bl and bl , num movzx eax , bl mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ecx + hexvar ] setb dl and dl , num movzx eax , dl mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) sw a3 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 ) beqz v0 , hexvar nop lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 ) lw v1 , hexvar ( v0 )
ldr ip , [ pc , hexvar ] push { r4 , r5 , lr } ldrb r3 , [ ip , hexvar ] cmp r3 , num movne r3 , num strne r3 , [ r0 ] bne hexvar ldr r0 , [ pc , hexvar ] ldr r2 , [ ip ] ldr r3 , [ r0 ] cmp r3 , num beq hexvar mov r5 , num mov r4 , num ldrb lr , [ r0 , num ] cmp lr , num moveq r0 , r5 movne r0 , r4 subs r3 , r3 , num str r0 , [ r2 , num ] add r2 , r2 , hexvar bne hexvar mov r2 , num ldr r3 , [ ip , num ] str r2 , [ r1 ] sub r3 , r3 , num str r3 , [ ip , num ] pop { r4 , r5 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + hexvar ] mov byte ptr [ ebp - hexvar ] , al mov byte ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + hexvar ] and eax , hexvar cmp eax , hexvar jne hexvar lea eax , [ ebx + hexvar ] mov edx , dword ptr [ eax + hexvar ] lea eax , [ ebx + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , num push edx push eax push dword ptr [ ebp + num ] call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar cmp byte ptr [ ebp - hexvar ] , num je hexvar mov edx , hexvar jmp hexvar mov edx , num mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , num push edx push dword ptr [ ebp - hexvar ] push eax call hexvar add esp , hexvar test eax , eax jne hexvar mov byte ptr [ ebp - hexvar ] , num sub esp , hexvar push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar movzx eax , byte ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - num ] leave ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r0 , hexvar mov r7 , r1 mov r6 , r2 mov r5 , num bl hexvar mov r2 , r5 mov r4 , r0 mov r1 , num add r0 , r0 , r5 bl hexvar mov r2 , num mov r3 , num mov r0 , r5 stm r4 , { r2 , r3 } bl hexvar mov r3 , r0 mov r0 , r4 str r7 , [ r3 ] str r6 , [ r3 , num ] str r3 , [ r4 , hexvar ] pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov bl , num and bl , num movzx esi , bl mov dword ptr [ ebp - hexvar ] , eax mov eax , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx add esp , hexvar pop esi pop ebx pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r13 , rsi cmp edx , r8d mov eax , edx cmovl eax , r8d mov dword ptr [ rsp + hexvar ] , eax mov rax , rcx cmovl rax , rsi mov qword ptr [ rsp + hexvar ] , rax mov ebp , r8d cmovle ebp , edx mov rbx , rdi cmovl r13 , rcx test ebp , ebp jle hexvar mov r12d , r8d mov r14d , edx movsxd r15 , dword ptr [ rsp + hexvar ] mov rax , qword ptr [ rsp + hexvar ] mov rcx , qword ptr [ rax ] mov rdi , rbx mov rsi , r13 mov edx , r15d call hexvar mov qword ptr [ rbx + r15 * num ] , rax cmp ebp , num je hexvar not r14d not r12d cmp r14d , r12d cmovge r12d , r14d lea rbp , [ rbx + r15 * num ] add rbp , hexvar mov r15d , hexvar sub r15d , r12d xor r14d , r14d nop lea rdi , [ rbx + r14 ] add rdi , num mov rax , qword ptr [ rsp + hexvar ] mov rcx , qword ptr [ rax + r14 + num ] mov rsi , r13 mov edx , dword ptr [ rsp + hexvar ] call hexvar mov qword ptr [ rbp + r14 - hexvar ] , rax cmp r15d , - num je hexvar lea r12d , [ r15 + num ] lea rdi , [ rbx + r14 ] add rdi , hexvar mov rax , qword ptr [ rsp + hexvar ] mov rcx , qword ptr [ rax + r14 + hexvar ] mov rsi , r13 mov edx , dword ptr [ rsp + hexvar ] call hexvar mov qword ptr [ rbp + r14 - hexvar ] , rax cmp r12d , num jl hexvar mov rax , qword ptr [ rsp + hexvar ] mov rcx , qword ptr [ rax + r14 + hexvar ] lea rdi , [ rbx + r14 ] add rdi , hexvar mov rsi , r13 mov edx , dword ptr [ rsp + hexvar ] call hexvar mov qword ptr [ rbp + r14 - num ] , rax test r15d , r15d jle hexvar lea rdi , [ rbx + r14 ] add rdi , hexvar mov rax , qword ptr [ rsp + hexvar ] mov rcx , qword ptr [ rax + r14 + hexvar ] mov rsi , r13 mov edx , dword ptr [ rsp + hexvar ] call hexvar mov qword ptr [ rbp + r14 ] , rax add r14 , hexvar add r15d , - num cmp r15d , - num jne hexvar add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov rbx , r9 mov r14 , r8 mov r15d , ecx mov r12 , rdx mov r13 , rsi mov rbp , rdi mov esi , hexvar mov rdx , r8 xor eax , eax call hexvar mov rdi , rbp mov rsi , r13 mov rdx , r12 mov ecx , r15d mov r8 , rbx call hexvar mov ebx , eax mov esi , hexvar mov rdi , rbp mov rdx , r14 xor eax , eax call hexvar mov eax , ebx add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 move s1 , a1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sw zero , ( v0 )
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu a2 , zero , hexvar sw s1 , hexvar ( sp ) lui s1 , hexvar sw s2 , hexvar ( sp ) move s2 , a0 sw gp , hexvar ( sp ) addiu a1 , s1 , - hexvar sw ra , hexvar ( sp ) addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal - hexvar move s0 , v0 lw gp , hexvar ( sp ) beqz v0 , hexvar sw v0 , ( s0 )
ldr r2 , [ r0 , num ] push { r4 , lr } cmp r2 , num beq hexvar ldr r2 , [ r0 , hexvar ] mov r3 , r0 cmp r2 , num beq hexvar ldr r4 , [ r2 , num ] cmp r4 , num beq hexvar str r1 , [ r2 , hexvar ] mov r0 , num str r4 , [ r3 , hexvar ] pop { r4 , pc } andeq r0 , r0 , r0 stchs p6 , c10 , [ ip , hexvar ]
test byte ptr [ ebx + hexvar ] , num mov ecx , dword ptr [ esp + hexvar ] lea edx , [ ecx + hexvar ] jne hexvar test byte ptr [ esp + hexvar ] , num je hexvar mov ecx , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ ecx + edx * num ] or dword ptr [ ebx + hexvar ] , eax jmp hexvar lea esi , [ esi ]
test rsi , rsi je hexvar movsxd rax , dword ptr [ rdx ] mov rdi , qword ptr [ rsi + rax * num ] mov eax , num test rdi , rdi je hexvar push rbx mov rbx , rdx call hexvar mov dword ptr [ rip + hexvar ] , eax add dword ptr [ rbx ] , num mov eax , num jmp hexvar mov eax , num ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) jal hexvar nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov dword ptr [ esp + hexvar ] , num cmp dword ptr [ esp + hexvar ] , num jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar mov eax , num jmp hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push num call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] lea edx , [ eax + num ] mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax + hexvar ] , edx push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar call hexvar add esp , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r0 ldr r0 , [ r0 , num ] sub sp , sp , num cmp r0 , num mov r8 , r1 mov r6 , r2 mov r7 , r3 beq hexvar mov r4 , num ldr r1 , [ r5 ] mov r0 , hexvar bl hexvar ldr r3 , [ r5 , num ] add r4 , r4 , num cmp r4 , r3 blo hexvar ldr r0 , [ r5 ] mov r3 , r8 stm sp , { r6 , r7 } ldr r2 , [ pc , hexvar ] mov r1 , num bl hexvar mov r0 , num add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov dword ptr [ ebp - hexvar ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edi mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx ] mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ esi ] sub esp , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , edi call hexvar add esp , hexvar and al , num movzx eax , al lea esp , [ ebp - num ] pop esi pop edi pop ebp ret
lea rdi , [ rdi + num ] lea rdx , [ rdx + rsi ] neg rsi mov rcx , rsi xor eax , eax xor r9 , r9 xor r10 , r10 xor r11 , r11 mov r8d , dword ptr [ rip + hexvar ] bt r8d , hexvar jb hexvar jmp hexvar nop dword ptr [ rax ] mov dword ptr [ rdi + rax * num ] , eax add al , num jae hexvar xor r9 , r9 xor r8 , r8 nop dword ptr [ rax ] mov r10d , dword ptr [ rdi + r9 * num ] add r8b , byte ptr [ rdx + rsi ] add r8b , r10b add rsi , num mov r11d , dword ptr [ rdi + r8 * num ] cmove rsi , rcx mov dword ptr [ rdi + r8 * num ] , r10d mov dword ptr [ rdi + r9 * num ] , r11d add r9b , num jae hexvar jmp hexvar nop word ptr [ rax + rax ] mov byte ptr [ rdi + rax ] , al add al , num jae hexvar xor r9 , r9 xor r8 , r8 nop dword ptr [ rax ] mov r10b , byte ptr [ rdi + r9 ] add r8b , byte ptr [ rdx + rsi ] add r8b , r10b add rsi , num mov r11b , byte ptr [ rdi + r8 ] jne hexvar mov rsi , rcx mov byte ptr [ rdi + r8 ] , r10b mov byte ptr [ rdi + r9 ] , r11b add r9b , num jae hexvar mov dword ptr [ rdi + hexvar ] , hexvar xor eax , eax mov dword ptr [ rdi - num ] , eax mov dword ptr [ rdi - num ] , eax ret nop word ptr [ rax + rax ]
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw s0 , hexvar ( a1 )
bnez a2 , hexvar lbu v0 , hexvar ( a0 ) ins v0 , zero , num , num sb v0 , hexvar ( a0 ) sw zero , ( a1 )
push ebx sub esp , num call hexvar add ebx , hexvar call hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push rbp push rbx sub rsp , num mov rbp , qword ptr [ rdx + hexvar ] call hexvar mov rbx , rax mov rdi , rax call hexvar xor edx , edx mov rsi , rbx mov rdi , rbp call hexvar mov rdi , rbx mov ebp , eax call hexvar test ebp , ebp sete al add rsp , num pop rbx pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 move s2 , a2 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) addiu s0 , sp , hexvar move a0 , s0 jal hexvar nop lw gp , hexvar ( sp ) move a0 , s0 addiu v0 , sp , hexvar addiu v1 , sp , hexvar lw t0 , ( a0 ) lw a3 , num ( a0 ) lw a2 , num ( a0 ) lw a1 , hexvar ( a0 ) sw t0 , ( v0 ) sw a3 , num ( v0 ) sw a2 , num ( v0 ) sw a1 , hexvar ( v0 ) addiu a0 , a0 , hexvar bne a0 , v1 , hexvar addiu v0 , v0 , hexvar addiu a2 , zero , num addiu a1 , zero , hexvar addiu s0 , sp , hexvar move a0 , s0 jal hexvar nop lw gp , hexvar ( sp ) move a3 , s0 addiu a2 , zero , - num move a1 , s2 move a0 , s1 jal hexvar nop lw gp , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v1 , - hexvar ( gp ) lw v1 , ( v1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar cmp dword ptr [ ebp + hexvar ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] lea ecx , [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar test al , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax lea eax , [ ebp - num ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar mov dword ptr [ esp + hexvar ] , ecx lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar cmp eax , num sete dl and dl , num mov byte ptr [ ebp - num ] , dl mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] test rsi , rsi setne al movzx ecx , al mov esi , ecx mov rsi , qword ptr [ rsi * num + hexvar ] jmp rsi mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] xor ecx , ecx mov edx , ecx lea rsi , [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax test rax , rax setne r8b movzx ecx , r8b mov eax , ecx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rip + hexvar ] jmp rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar lw a0 , num ( a0 ) move a0 , s0 lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jr t9 addiu sp , sp , hexvar
cmp r1 , num bne hexvar ldr r3 , [ pc , hexvar ] str r3 , [ r0 , hexvar ] mov r0 , num bx lr push { r4 , lr } bl hexvar pop { r4 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar nop leave ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ ebp - num ] , ecx mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx + hexvar ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , num add esp , hexvar pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] add esi , num lea edi , [ ebp - hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar sub esp , num mov eax , dword ptr [ ebp + num ] add eax , num lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar sub esp , num mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ edx ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call eax mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) jal hexvar nop lw gp , hexvar ( sp ) move s1 , v0 addiu v0 , zero , - num beq s1 , v0 , hexvar move a1 , s1 addiu a0 , sp , hexvar lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw v0 , hexvar ( sp ) lw v0 , ( v0 )
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ ebx + hexvar ] mov edi , dword ptr [ esp + hexvar ] test esi , esi je hexvar test edi , edi je hexvar lea eax , [ ebx + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ ebx + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov ebp , dword ptr [ esi + hexvar ] add esi , hexvar mov dword ptr [ esp + num ] , num test ebp , ebp jne hexvar jmp hexvar lea esi , [ esi ] mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp + num ] , num mov dword ptr [ esi ] , eax mov ebp , dword ptr [ ebp + hexvar ] test ebp , ebp je hexvar sub esp , num push dword ptr [ edi ] push dword ptr [ ebp ] call hexvar add esp , hexvar test eax , eax je hexvar lea esi , [ ebp + hexvar ] mov ebp , dword ptr [ ebp + hexvar ] test ebp , ebp jne hexvar mov eax , dword ptr [ esp + num ] test eax , eax je hexvar mov edi , dword ptr [ edi + num ] test edi , edi je hexvar mov esi , dword ptr [ ebx + hexvar ] jmp hexvar lea esi , [ esi ] mov eax , dword ptr [ esp + num ] mov ebp , dword ptr [ edi ] sub esp , num mov esi , dword ptr [ eax ] lea eax , [ ebx - hexvar ] push num push eax push num call hexvar mov dword ptr [ esp ] , ebp push esi push eax push num mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax ] call hexvar lea eax , [ ebx + hexvar ] add esp , hexvar mov edx , dword ptr [ eax ] test edx , edx jne hexvar sub esp , hexvar push num call hexvar lea esi , [ esi ] lea edi , [ edi ] lea eax , [ ebx + hexvar ] sub esp , num mov esi , dword ptr [ eax ] lea eax , [ ebx - hexvar ] push num push eax push num call hexvar push esi push eax mov eax , dword ptr [ ebx + hexvar ] push num push dword ptr [ eax ] call hexvar lea eax , [ ebx + hexvar ] add esp , hexvar mov ecx , dword ptr [ eax ] test ecx , ecx je hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dl , byte ptr [ ecx + num ] test dl , dl setne dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] add eax , num mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx xor eax , eax mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar test eax , eax setne dl movzx eax , dl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax call hexvar mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar sub rsp , num call rax test rax , rax setne al movzx eax , al add rsp , num ret
push { r4 , r5 , fp , lr } add fp , sp , hexvar sub sp , sp , hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - hexvar ] mov r0 , hexvar bl hexvar mov r3 , r0 mov r0 , r3 bl hexvar mov r3 , r0 mov r4 , r1 str r3 , [ fp , - hexvar ] str r4 , [ fp , - hexvar ] mov r0 , hexvar bl hexvar mov r3 , r0 mov r0 , r3 bl hexvar mov r3 , r0 mov r4 , r1 str r3 , [ fp , - hexvar ] str r4 , [ fp , - hexvar ] mov r2 , num mov r3 , num sub r1 , fp , hexvar ldm r1 , { r0 , r1 } bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r2 , num mov r3 , num sub r1 , fp , hexvar ldm r1 , { r0 , r1 } bl hexvar mov r3 , r0 cmp r3 , num beq hexvar sub r3 , fp , hexvar ldm r3 , { r2 , r3 } sub r1 , fp , hexvar ldm r1 , { r0 , r1 } bl hexvar mov r3 , r0 mov r4 , r1 b hexvar sub r3 , fp , hexvar mov r0 , r3 bl hexvar mov r3 , r0 cmp r3 , num bne hexvar ldr r3 , [ fp , - hexvar ] mov r0 , r3 bl hexvar mov r4 , r0 mov r5 , r1 ldr r3 , [ fp , - hexvar ] mov r0 , r3 bl hexvar mov r2 , r0 mov r3 , r1 mov r0 , r4 mov r1 , r5 bl hexvar mov r3 , r0 mov r4 , r1 b hexvar mov r3 , num ldr r4 , [ pc , hexvar ] mov r0 , r3 mov r1 , r4 ldr r3 , [ pc , hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar sub sp , fp , hexvar pop { r4 , r5 , fp , pc }
push rbx mov rbx , rdi mov eax , dword ptr [ rip ] test eax , eax jne hexvar mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al cmp eax , dword ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al push rsp add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al clc add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al in eax , num add byte ptr [ rax ] , al add byte ptr [ rax ] , al xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al jo hexvar add byte ptr [ rax ] , al add byte ptr [ rax ] , al xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al add byte ptr [ rip ] , hexvar add byte ptr [ rip ] , hexvar or eax , hexvar add byte ptr [ rax ] , al mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al cmp dword ptr [ rip ] , eax xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al or al , num add byte ptr [ rax ] , al add byte ptr [ rax ] , al xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al
push rax mov rdi , qword ptr [ rip + hexvar ] call hexvar test rax , rax je hexvar pop rax ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , esp mov dword ptr [ edi + hexvar ] , esi lea esi , [ ebp - hexvar ] mov dword ptr [ edi + num ] , esi lea esi , [ ebp - hexvar ] mov dword ptr [ edi + num ] , esi mov dword ptr [ edi ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar test eax , eax setne bl movzx eax , bl mov eax , dword ptr [ eax * num + hexvar ] jmp eax call hexvar xor ecx , ecx mov eax , dword ptr [ eax ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ esp ] , num mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov ecx , dword ptr [ ebx + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax test ecx , ecx je hexvar push num push num push num push esi call hexvar add esp , hexvar test eax , eax jne hexvar push esi push num push num lea eax , [ esp + hexvar ] push eax call hexvar xor eax , num add esp , hexvar or edx , eax jne hexvar cmp byte ptr [ esp + num ] , hexvar jne hexvar movzx edx , byte ptr [ esp + num ] lea eax , [ ebx - hexvar ] cmp byte ptr [ eax + edx ] , hexvar je hexvar movzx edx , byte ptr [ esp + hexvar ] cmp byte ptr [ eax + edx ] , hexvar je hexvar movzx edx , byte ptr [ esp + hexvar ] cmp byte ptr [ eax + edx ] , hexvar je hexvar mov edx , dword ptr [ ebx + hexvar ] mov edi , dword ptr [ esi + hexvar ] test edx , edx je hexvar sub esp , num push num push hexvar push esi call hexvar add esp , hexvar test eax , eax je hexvar mov dword ptr [ esi + hexvar ] , eax mov dword ptr [ eax + num ] , num mov dword ptr [ eax ] , num mov dword ptr [ eax + num ] , num mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , num mov eax , esi call hexvar test eax , eax je hexvar mov eax , dword ptr [ esi + hexvar ] test eax , eax jne hexvar mov eax , dword ptr [ esi + num ] mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar beqz a0 , hexvar sw gp , hexvar ( sp ) move s0 , a0 lw a0 , num ( a0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - num ] , ecx mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
mov rbx , qword ptr [ rcx ] mov word ptr [ rbp ] , bx shr rbx , hexvar mov word ptr [ rbp + hexvar ] , bx shr rbx , hexvar mov word ptr [ rbp + hexvar ] , bx shr rbx , hexvar mov word ptr [ rbp + hexvar ] , bx lea rcx , [ rcx + num ] lea rbp , [ rbp + hexvar ] dec rax jne hexvar mov rax , qword ptr [ rsp + hexvar ] sub rax , num mov qword ptr [ rsp + hexvar ] , rax jne hexvar movdqa xmmword ptr [ rsp + hexvar ] , xmm0 movdqa xmmword ptr [ rsp + hexvar ] , xmm1 movdqa xmmword ptr [ rsp + hexvar ] , xmm2 movdqa xmmword ptr [ rsp + hexvar ] , xmm3 mov eax , dword ptr [ rsp + hexvar ] mov rdx , rax shr rax , hexvar and edx , hexvar mov dword ptr [ rsp + hexvar ] , edx lea rsi , [ rsp + rax * num + hexvar ] mov rdx , qword ptr [ rsp + num ] mov rbp , num
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , edi mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ebx mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , num call hexvar add esp , hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr r5 , [ sp , hexvar ] ldr r1 , [ r4 ] str r5 , [ sp ] mov r7 , r3 str r1 , [ sp , hexvar ] mov r6 , r2 ldr r8 , [ sp , hexvar ] bl hexvar cmp r0 , num sbcs r3 , r1 , num blt hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp + num ] lea esi , [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar call hexvar nop word ptr cs : [ eax + eax ] nop
push rbp mov rbp , rsp sub rsp , hexvar movss dword ptr [ rbp - num ] , xmm0 mov qword ptr [ rbp - hexvar ] , rdi movss xmm0 , dword ptr [ rbp - num ] call hexvar mov word ptr [ rbp - hexvar ] , ax mov rdi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdi + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi movzx eax , word ptr [ rbp - hexvar ] mov ecx , eax imul rcx , rcx , hexvar mov rdx , qword ptr [ rbp - hexvar ] add rdx , rcx mov rcx , qword ptr [ rdx + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] add rdx , hexvar mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rcx ] jne hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] movzx edx , word ptr [ rbp - hexvar ] mov esi , edx imul rsi , rsi , hexvar add rcx , rsi mov rsi , qword ptr [ rcx + hexvar ] add rsi , num mov qword ptr [ rcx + hexvar ] , rsi jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] movzx eax , word ptr [ rbp - hexvar ] mov esi , eax mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar jmp hexvar add rsp , hexvar pop rbp ret
push { fp , lr } add fp , sp , num sub sp , sp , num ldr r0 , [ pc , hexvar ] bl hexvar str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] cmp r3 , num beq hexvar ldr r3 , [ fp , - num ] ldrb r3 , [ r3 ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ pc , hexvar ] str r3 , [ fp , - hexvar ] b hexvar mov r2 , num ldr r1 , [ pc , hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar ldr r3 , [ fp , - hexvar ] add r3 , r3 , num mov r2 , num ldr r1 , [ fp , - num ] mov r0 , r3 bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 add r3 , r3 , num ldr r2 , [ fp , - hexvar ] add r3 , r2 , r3 str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldr r2 , [ pc , hexvar ] sub r3 , r3 , r2 mov r2 , r3 ldr r3 , [ pc , hexvar ] cmp r2 , r3 bls hexvar mov r3 , num mov r0 , r3 sub sp , fp , num pop { fp , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lui v0 , hexvar addiu v0 , v0 , - hexvar sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( sp ) addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lw a3 , hexvar ( fp ) lw a2 , hexvar ( fp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp push r14 push rbx sub rsp , hexvar cmp esi , - num je hexvar mov r14d , edx mov ebp , esi mov rbx , rdi lea ecx , [ rbp - num ] cmp ecx , num ja hexvar movsxd rax , ecx lea rax , [ rax + rax * num ] lea rdi , [ rax * num + hexvar ] mov rsi , rbx mov edx , r14d call qword ptr [ rdi + num ] jmp hexvar mov eax , num jmp hexvar mov dword ptr [ rsp + num ] , ebp mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar lea rsi , [ rsp + num ] call hexvar cmp eax , - num je hexvar lea ecx , [ rax + num ] cmp ecx , - num je hexvar test ecx , ecx js hexvar cmp ecx , num jle hexvar mov rdi , qword ptr [ rip + hexvar ] mov esi , eax call hexvar mov rdi , rax jmp hexvar mov edi , ebp mov rsi , rbx mov edx , r14d call qword ptr [ rip + hexvar ] add rsp , hexvar pop rbx pop r14 pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , num lea eax , [ ebx - hexvar ] push hexvar push eax mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax ] push hexvar call hexvar add esp , hexvar pop ebx ret
push { r4 , r5 , r6 , lr } ldr r4 , [ sp , hexvar ] tst r3 , num bne hexvar add ip , r3 , num cmp r3 , num movlt r3 , ip asr ip , r3 , num cmp ip , num pople { r4 , r5 , r6 , pc } mov r3 , num sub r5 , ip , num cmp r4 , num subne lr , r5 , r3 moveq lr , r3 strb r0 , [ r2 , lr ] lsr r0 , r0 , num orr r0 , r0 , r1 , lsl num lsr r1 , r1 , num add r3 , r3 , num cmp ip , r3 bne hexvar pop { r4 , r5 , r6 , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , esi mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ ebp + num ] mov edi , dword ptr [ edi + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar cmp eax , num je hexvar mov dword ptr [ ebp - hexvar ] , num jmp hexvar mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move a2 , a1 move a1 , a0 lw a0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push r15 push r14 mov rax , rdx push r13 push r12 mov r13d , hexvar push rbp push rbx mov rbx , rsi sub rsp , hexvar mov qword ptr [ rsp ] , rdx mov qword ptr [ rsp + hexvar ] , rdi mov rdx , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rdx xor edx , edx cmp rax , hexvar mov qword ptr [ rsp + hexvar ] , rcx jbe hexvar nop word ptr [ rax + rax ] mov r15 , qword ptr [ rsp + hexvar ] shr rax , num mov qword ptr [ rsp + num ] , rax shl rax , num mov qword ptr [ rsp + hexvar ] , rax mov r12 , r15 mov rbp , r15 add r12 , rax nop dword ptr [ rax + rax ] lea rdi , [ rsp + hexvar ] call hexvar mov rcx , qword ptr [ rsp + hexvar ] cmp rbx , hexvar mov rsi , r13 cmovbe rsi , rbx mov r14 , rax mov rdi , rbp mov r8 , rax mov edx , hexvar sub rbx , rsi add r15 , num sub rbp , - hexvar call hexvar mov qword ptr [ r15 - num ] , r14 cmp r12 , r15 jne hexvar mov r15 , qword ptr [ rsp + num ] mov rbp , qword ptr [ rsp ] mov ecx , hexvar mov rdi , qword ptr [ rsp + hexvar ] mov r12 , r15 mov rax , r15 shl r15 , num shl r12 , num and eax , hexvar sub rcx , rax sub rbp , r12 cmp rbp , rcx ja hexvar mov rax , qword ptr [ rsp + hexvar ] lea rdx , [ rbp * num ] lea rsi , [ rax + r15 ] add rdi , rax call hexvar mov rax , qword ptr [ rsp + num ] mov r14 , rax add rbx , rax sub r14 , r12 add qword ptr [ rsp ] , r14 mov rax , qword ptr [ rsp ] cmp rax , hexvar ja hexvar mov r15 , qword ptr [ rsp + hexvar ] mov r14 , qword ptr [ rsp + hexvar ] mov rsi , rbx mov rdx , qword ptr [ rsp ] mov rcx , r15 mov rdi , r14 call hexvar xor ecx , ecx mov rdx , rax mov r8 , r15 mov rsi , rbx mov rdi , r14 call hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push dword ptr [ esp + hexvar ] push num lea eax , [ esp + hexvar ] push eax push ecx call hexvar mov edi , dword ptr [ esp + hexvar ] add esp , hexvar test edx , edx mov ecx , edx mov dword ptr [ edi + hexvar ] , eax je hexvar sub esp , hexvar mov edx , eax lea eax , [ ebp - hexvar ] push num mov ebx , ebp call hexvar mov esi , eax lea eax , [ ebp - hexvar ] add esp , hexvar push num push eax push num call hexvar lea edx , [ ebp - hexvar ] push esi push hexvar push edx push eax call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] add edi , dword ptr [ esp + hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , edi mov esi , dword ptr [ eax ] test esi , esi jne hexvar mov eax , dword ptr [ esp + hexvar ] xor edx , edx mov eax , dword ptr [ eax + hexvar ] call hexvar sub esp , num push eax lea eax , [ ebp - hexvar ] jmp hexvar
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ ebp + num ] mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx mov eax , dword ptr [ ebp - num ] cmp eax , num je hexvar mov al , byte ptr [ hexvar ] mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar mov al , byte ptr [ ebp - num ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ hexvar ] , num mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx ecx , al mov dword ptr [ esp ] , ecx call hexvar mov dword ptr [ hexvar ] , eax mov dl , byte ptr [ ebp - num ] mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] and al , num mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ hexvar ] , al mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push rbp push rbx mov rbp , rsi mov rbx , rdi sub rsp , num call hexvar test rax , rax mov rcx , rax je hexvar imul rbx , rbp test rbx , rbx jne hexvar add rsp , num mov rax , rcx pop rbx pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sltu v0 , a1 , a0 sw s6 , hexvar ( sp ) sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a3 , hexvar ( sp ) beqz v0 , hexvar lw s6 , hexvar ( sp ) addiu s0 , a0 , - num sw s6 , hexvar ( sp ) sra s4 , s6 , hexvar sltu v0 , s0 , a0 addiu v0 , v0 , - num mult s4 , s0 madd v0 , s6 move s7 , zero move s3 , a0 move s2 , a2 mflo v0 multu s0 , s6 move fp , a0 mfhi s0 mflo s1 addu s0 , v0 , s0 lw t9 , - hexvar ( gp ) addiu v0 , fp , - num addiu t0 , s7 , - num move a2 , zero move a1 , s1 move a0 , s0 sltu v1 , v0 , fp move a3 , s3 addu s7 , v1 , t0 bal hexvar move fp , v0 lw gp , hexvar ( sp ) subu a1 , s6 , v1 lw v0 , hexvar ( sp ) move s5 , v1 lbu a2 , ( s2 ) move s6 , s5 lw a0 , hexvar ( sp ) addiu s2 , s2 , num lw t9 , - hexvar ( gp ) bal hexvar addu a1 , a1 , v0 subu a1 , s0 , s4 lw v0 , hexvar ( sp ) lw gp , hexvar ( sp ) subu v0 , s1 , v0 sltu a0 , s1 , v0 subu s0 , a1 , a0 bnez s7 , hexvar move s1 , v0 lw v0 , hexvar ( sp ) bne fp , v0 , hexvar lw t9 , - hexvar ( gp ) lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) lw s7 , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , esi mov eax , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax cmp dword ptr [ ecx ] , num setne bl mov byte ptr [ ebp - hexvar ] , bl xor eax , eax mov cl , al mov dl , byte ptr [ ebp - hexvar ] test dl , num mov byte ptr [ ebp - hexvar ] , cl jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] sub esp , hexvar mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , hexvar call hexvar add esp , hexvar cmp eax , num sete bl mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , al jmp hexvar mov al , byte ptr [ ebp - hexvar ] and al , num mov ecx , dword ptr [ ebp - hexvar ] mov byte ptr [ ecx ] , al mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , esi call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov al , byte ptr [ ecx ] and al , num movzx eax , al lea esp , [ ebp - num ] pop esi pop ebx pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar pop edx pop ecx push dword ptr [ esp + hexvar ] push num push num push num push num push eax call hexvar add esp , hexvar add esp , num pop ebx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , eax xor edx , edx lea esi , [ ebp - hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar xor ecx , ecx cmp ecx , eax jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax imul eax , dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ecx + num ] , eax jmp hexvar xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , - num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + num ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret num
push { r4 , r5 , r6 , r7 , r8 , sb , lr } ldr r7 , [ pc , hexvar ] sub sp , sp , hexvar ldr ip , [ r7 ] mov r5 , r0 ldr r0 , [ pc , hexvar ] mov sb , r1 mov r4 , r2 mov r8 , r3 str ip , [ sp , hexvar ] bl hexvar subs r6 , r0 , num beq hexvar mov r0 , sp blx r4 mov r4 , num b hexvar rsb r2 , r4 , hexvar add r0 , r6 , r4 mov r3 , r5 mov r1 , num bl hexvar add r4 , r4 , r0 cmp r4 , hexvar beq hexvar cmp r0 , num beq hexvar ldr r3 , [ r5 ] tst r3 , hexvar beq hexvar cmp r4 , num bne hexvar mov r1 , sb mov r0 , sp blx r8 mov r0 , r6 bl hexvar mov r0 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ r7 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc }
push { r4 , r5 , r6 , r7 , r8 , lr } sub sp , sp , hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar mov r4 , r0 mov r8 , r1 ldr r5 , [ r1 , hexvar ] ldr r3 , [ r5 , hexvar ] cmp r3 , num bne hexvar cmp r5 , num bne hexvar ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar mov r5 , num ldr r3 , [ r5 , hexvar ] cmp r3 , num beq hexvar ldr r1 , [ pc , hexvar ] ldr r0 , [ r5 , hexvar ] bl hexvar subs r7 , r0 , num beq hexvar ldr r3 , [ r7 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ r7 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ r4 , hexvar ] ldr r6 , [ r3 , hexvar ] ldr r3 , [ r6 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ r5 , hexvar ] ldr r2 , [ r4 , hexvar ] ldr r2 , [ r2 , hexvar ] ldr r1 , [ r4 , num ] add r0 , sp , hexvar str r0 , [ sp , hexvar ] str r7 , [ sp , num ] ldr r0 , [ r4 , hexvar ] ldr r0 , [ r0 , hexvar ] ldr ip , [ r6 , hexvar ] add r0 , r0 , ip ldr ip , [ r6 , hexvar ] ldr ip , [ ip , hexvar ] add r0 , r0 , ip str r0 , [ sp , num ] str r6 , [ sp ] mov r0 , r8 bl hexvar cmp r0 , num beq hexvar mov r0 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov ecx , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov eax , ecx or eax , ebp je hexvar mov eax , edi or eax , ebp je hexvar test ecx , ecx jne hexvar test ebp , ebp jne hexvar imul ebp , esi mov eax , esi imul ecx , edi mul edi add ecx , ebp add ecx , edx mov ebp , eax test ecx , ecx jne hexvar test eax , eax js hexvar sub esp , hexvar push eax call hexvar add esp , hexvar test eax , eax mov edx , eax jne hexvar test ebp , ebp je hexvar sub esp , hexvar push num call hexvar add esp , hexvar xor edx , edx add esp , hexvar mov eax , edx pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ ebp - num ] , ecx mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx ] , ecx mov dword ptr [ edx + num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov eax , dword ptr [ ebp - num ] test eax , eax setne bl movzx eax , bl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx xor eax , eax mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) sw zero , hexvar ( fp ) sb zero , hexvar ( fp ) sw zero , hexvar ( fp ) b hexvar nop lw v0 , hexvar ( fp ) lw v0 , ( v0 )
push ebp mov ebp , esp push edi push esi push eax mov eax , dword ptr [ ebp + num ] mov ecx , eax mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ esi + hexvar ] mov dword ptr [ eax ] , edi mov esi , dword ptr [ esi + hexvar ] mov dword ptr [ eax + num ] , esi mov eax , ecx mov dword ptr [ ebp - hexvar ] , edx add esp , num pop esi pop edi pop ebp ret num
sw a0 , ( sp ) sw a1 , num ( sp ) lw v1 , num ( sp ) addiu v0 , zero , - num bne v1 , v0 , hexvar nop lw v0 , ( sp ) lw v0 , hexvar ( v0 )
push rbp mov rbp , rsp mov dword ptr [ rbp - num ] , edi cmp dword ptr [ rbp - num ] , num jne hexvar movzx eax , byte ptr [ rip + hexvar ] xor eax , num test al , al je hexvar mov eax , dword ptr [ rbp - num ] mov dword ptr [ rip + hexvar ] , eax nop pop rbp ret
push rbp push rbx xor ebp , ebp mov rbx , rdi sub rsp , num cmp byte ptr [ rdi ] , hexvar sete bpl call hexvar mov rcx , rax sub rcx , rbx cmp rcx , rbp jbe hexvar cmp byte ptr [ rax - num ] , hexvar lea rdx , [ rcx - num ] je hexvar jmp hexvar nop cmp byte ptr [ rbx + rdx - num ] , hexvar lea rax , [ rdx - num ] jne hexvar mov rdx , rax cmp rbp , rdx jne hexvar add rsp , num mov rax , rdx pop rbx pop rbp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] mov r3 , r2 strb r3 , [ fp , - hexvar ] ldrb r3 , [ fp , - hexvar ] eor r3 , r3 , num and r3 , r3 , hexvar cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] b hexvar ldr r3 , [ pc , hexvar ] ldrb r3 , [ r3 ] cmp r3 , num bne hexvar ldr r0 , [ fp , - num ] bl hexvar mov r3 , r0 b hexvar mov r3 , num ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - num ] mov r0 , r3 bl hexvar mov r0 , r0 sub sp , fp , num pop { fp , pc }
push r12 push rbp push rbx mov ebp , edi mov rdx , qword ptr [ rip + hexvar ] test rdx , rdx je hexvar mov rcx , qword ptr [ rip + hexvar ] cmp dword ptr [ rcx ] , num je hexvar mov ebx , num add ebx , num mov esi , ebx cmp rsi , rdx jae hexvar lea rax , [ rcx + rsi * num ] cmp dword ptr [ rax ] , num jne hexvar jmp hexvar mov r12 , rsi cmp rsi , rdx jne hexvar jmp hexvar mov rax , r12 shr rax , num lea rsi , [ r12 + rax + num ] jmp hexvar mov r12 , rsi jmp hexvar mov r12d , num mov ebx , num mov esi , hexvar mov qword ptr [ rip + hexvar ] , rsi shl rsi , num call hexvar mov qword ptr [ rip + hexvar ] , rax mov edx , ebx mov rsi , qword ptr [ rip + hexvar ] cmp rdx , rsi jae hexvar mov ecx , ebx mov dword ptr [ rax + rdx * num ] , num add ecx , num mov edx , ecx cmp rdx , rsi jb hexvar mov rax , qword ptr [ rip + hexvar ] lea rax , [ rax + r12 * num ] cmp dword ptr [ rax ] , num je hexvar mov ecx , hexvar mov edx , hexvar mov esi , hexvar mov edi , hexvar call hexvar cmp rsi , rdx jne hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar mov r12 , rsi jmp hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar mov r12d , num mov ebx , num jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov ebx , num mov dword ptr [ rax ] , ebp add qword ptr [ rip + hexvar ] , num mov byte ptr [ rip + hexvar ] , num mov eax , ebx pop rbx pop rbp pop r12 ret
push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ eax ] mov edx , dword ptr [ eax ] test edx , edx je hexvar mov eax , dword ptr [ eax + num ] test eax , eax je hexvar sub esp , num push eax push edx call hexvar add esp , hexvar add esp , num pop ebx ret
push edi push esi sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar pop esi pop edi ret
push { r4 , r5 , r6 , lr } mov r4 , r1 mov r5 , r2 cmp r0 , num beq hexvar mov r2 , r5 mov r1 , r4 bl hexvar cmp r0 , num movne r3 , num strne r3 , [ r0 , hexvar ] strne r3 , [ r0 , hexvar ] strne r3 , [ r0 , hexvar ] strne r3 , [ r0 , hexvar ] pop { r4 , r5 , r6 , pc }
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] add r3 , sp , hexvar mov r1 , r3 ldr r0 , [ sp , num ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num blt hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ sp ] mov r3 , r2 mov r2 , hexvar mov r1 , hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r3 , num str r3 , [ sp , hexvar ] b hexvar mov r0 , r0 b hexvar mov r0 , r0 ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] mov r0 , r3 bl hexvar ldr r3 , [ sp , hexvar ] mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { pc }
push edi push esi push ebx mov eax , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar test eax , eax je hexvar lea edi , [ ebx - hexvar ] sub esp , num push hexvar push edi push hexvar call hexvar add esp , hexvar test eax , eax mov esi , eax je hexvar mov dword ptr [ eax ] , num mov eax , dword ptr [ ebx + hexvar ] test eax , eax je hexvar mov dword ptr [ esi + hexvar ] , eax mov dword ptr [ esi + num ] , num call hexvar test eax , eax mov dword ptr [ esi + num ] , eax je hexvar sub esp , hexvar push eax call hexvar add esp , hexvar test eax , eax mov dword ptr [ esi + hexvar ] , eax je hexvar mov eax , dword ptr [ eax + num ] sub esp , num mov dword ptr [ esi + num ] , eax lea eax , [ esi + hexvar ] push eax push esi push hexvar call hexvar add esp , hexvar mov eax , esi pop ebx pop esi pop edi ret
push rbx mov rbx , rdi mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar movabs rcx , hexvar mov qword ptr [ rax ] , rcx mov dword ptr [ rax + num ] , num mov qword ptr [ rbx + hexvar ] , rax add rax , hexvar mov qword ptr [ rbx + hexvar ] , rax mov dword ptr [ rbx + hexvar ] , num mov eax , num pop rbx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a3 , hexvar ( sp ) lw a2 , hexvar ( sp ) lui v0 , hexvar addiu a1 , v0 , - hexvar lw a0 , - hexvar ( gp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx call hexvar and al , num mov byte ptr [ ebp - num ] , al test byte ptr [ ebp - num ] , num je hexvar test byte ptr [ ebp - num ] , num jne hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar test byte ptr [ ebp - num ] , num jne hexvar test byte ptr [ ebp - num ] , num je hexvar mov dword ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a0 lw s1 , - hexvar ( gp ) lw v0 , ( s0 )
push rbp push rbx mov rbp , rdi mov rbx , rsi sub rsp , num mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar cmp rdx , hexvar jbe hexvar mov rdi , rbx mov esi , num call qword ptr [ rip + hexvar ] lea rdi , [ rbx + num ] mov dword ptr [ rbp ] , eax mov esi , num call qword ptr [ rip + hexvar ] lea rdi , [ rbx + num ] mov qword ptr [ rbp + num ] , rax mov esi , num call qword ptr [ rip + hexvar ] mov qword ptr [ rbp + hexvar ] , rax add rsp , num mov eax , hexvar pop rbx pop rbp ret
sub esp , hexvar lea eax , [ esp + hexvar ] sub esp , hexvar push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar ret
push { r4 , lr } ldr r3 , [ r1 , hexvar ] ldr lr , [ r1 , hexvar ] mov ip , r0 cmp lr , r3 ble hexvar ldr lr , [ r1 , num ] ldr r4 , [ r1 , hexvar ] ldrb r0 , [ lr , r3 ] cmp r4 , num strb r0 , [ ip ] ble hexvar ldr r4 , [ r1 , hexvar ] cmp r3 , r4 beq hexvar ldr r4 , [ r1 , num ] ldr r4 , [ r4 , r3 , lsl num ] cmn r4 , num beq hexvar cmp r0 , hexvar beq hexvar cmp r0 , hexvar beq hexvar cmp r0 , hexvar beq hexvar cmp r0 , hexvar beq hexvar cmp r0 , hexvar bne hexvar mov r3 , hexvar mov r0 , num strb r3 , [ ip , num ] pop { r4 , pc }
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r7 , [ pc , hexvar ] sub sp , sp , hexvar ldr ip , [ r7 ] mov fp , r3 ldrb r3 , [ sp , hexvar ] mov r6 , r0 mov sl , r2 ldr r1 , [ pc , hexvar ] mov r2 , num mov r0 , num ldr r4 , [ sp , hexvar ] str ip , [ sp , hexvar ] str r3 , [ sp , hexvar ] bl hexvar ldr r2 , [ pc , hexvar ] mov sb , r0 ldr ip , [ r2 , hexvar ] ldr r0 , [ pc , hexvar ] add r1 , ip , num ldr r3 , [ pc , hexvar ] add r8 , sp , hexvar and r1 , r1 , hexvar str r0 , [ sp , num ] str r3 , [ sp ] add r5 , r2 , hexvar str r1 , [ r2 , hexvar ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , num mov r0 , r8 add r5 , r5 , ip , lsl num bl hexvar mov r3 , hexvar mov r2 , num mov r1 , r3 str sl , [ sp , num ] str fp , [ sp , hexvar ] str r8 , [ sp ] mov r0 , r5 bl hexvar mov r3 , r5 ldr r2 , [ sp , hexvar ] mov r1 , sb mov r0 , num bl hexvar cmp r6 , r4 movhi r0 , r4 bhi hexvar sub r4 , r4 , r6 asr r5 , r4 , hexvar cmp r5 , fp cmpeq r4 , sl movhi r4 , sl movhi r5 , fp subs sl , r4 , num sbc r3 , r5 , num orrs r2 , r4 , r5 moveq r0 , r6 beq hexvar mov r8 , sl mov r5 , r6 mov sb , r3 ldr fp , [ pc , hexvar ] ldr r4 , [ pc , hexvar ] mov r1 , num ldr r3 , [ fp ] mov r0 , r5 add r5 , r5 , r1 blx r3 mov r1 , r4 mov r2 , r0 mov r0 , num bl hexvar mvn r3 , num mvn r2 , num subs r8 , r8 , num sbc sb , sb , num cmp sb , r3 cmpeq r8 , r2 bne hexvar add r0 , sl , num add r0 , r6 , r0 ldr r2 , [ sp , hexvar ] ldr r3 , [ r7 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r15 , rsi mov r14 , rdi mov rax , qword ptr [ rsi ] mov qword ptr [ rsp + num ] , rax lea rsi , [ rsp + num ] mov ecx , hexvar xor edi , edi call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax call hexvar mov r12 , rax mov esi , hexvar mov rdi , rbx call hexvar test r12 , r12 je hexvar mov r13 , qword ptr [ rsp + num ] mov rdi , r12 call hexvar mov rbx , rax mov rdi , r12 call hexvar test rbx , rbx je hexvar mov qword ptr [ r15 ] , r13 test r14 , r14 je hexvar mov rdi , qword ptr [ r14 ] call hexvar mov qword ptr [ r14 ] , rbx jmp hexvar xor ebx , ebx mov rax , rbx add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 ret
push { r4 , lr } mov r4 , r1 mov r2 , hexvar mov r1 , num bl hexvar cmp r4 , hexvar beq hexvar str r4 , [ r0 ] pop { r4 , pc }
push rbp push rbx mov rbp , rsi mov rbx , rdi sub rsp , num mov rsi , qword ptr [ rdi + num ] cmp qword ptr [ rdi ] , rsi je hexvar mov rax , qword ptr [ rdi + hexvar ] lea rdx , [ rsi + num ] mov qword ptr [ rbx + num ] , rdx mov qword ptr [ rax + rsi * num ] , rbp mov eax , num add rsp , num pop rbx pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) lw s2 , - hexvar ( gp ) sw fp , hexvar ( sp ) move fp , sp sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s2 ) sw v0 , hexvar ( fp ) beqz a0 , hexvar nop beqz a1 , hexvar move s3 , a1 beqz a2 , hexvar move s4 , a2 lw t9 , - hexvar ( gp ) move s1 , a0 bal hexvar move s5 , a3 beq s1 , v0 , hexvar lw gp , hexvar ( fp ) sw zero , hexvar ( fp ) bnez s5 , hexvar lw t9 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , s1 move s0 , v0 beqz s0 , hexvar lw gp , hexvar ( fp ) addiu a1 , fp , hexvar jal hexvar move a0 , s0 move a0 , s0 lw gp , hexvar ( fp ) lw t9 , - hexvar ( gp ) jalr t9 move s5 , v0 beqz s5 , hexvar lw gp , hexvar ( fp ) addiu a1 , fp , hexvar jal hexvar move a0 , s3 lw gp , hexvar ( fp ) beqz v0 , hexvar move s3 , v0 lw v0 , hexvar ( fp ) lw s7 , hexvar ( fp ) addiu v0 , v0 , - num bne v0 , s7 , hexvar sw v0 , hexvar ( fp ) blez s7 , hexvar move s6 , s5 move s0 , zero b hexvar move s1 , s3 addiu s0 , s0 , num addiu s6 , s6 , num beq s0 , s7 , hexvar addiu s1 , s1 , num lw t9 , - hexvar ( gp ) lw a1 , ( s1 )
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov byte ptr [ ebp - hexvar ] , al mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , edi mov bl , byte ptr [ ebp - hexvar ] and bl , num mov byte ptr [ edx ] , bl mov bl , byte ptr [ edx ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar test byte ptr [ hexvar ] , num je hexvar xor eax , eax mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx ] mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ esi ] sub esp , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , edi call hexvar lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
cmp r2 , num push { r4 , r5 , r6 , r7 , r8 , lr } mov r6 , r1 beq hexvar ldr r4 , [ r2 , hexvar ] cmp r4 , num beq hexvar ldr r7 , [ r1 , hexvar ] ldr r8 , [ pc , hexvar ] b hexvar ldr r1 , [ r6 , hexvar ] cmp r1 , num beq hexvar mov r0 , r5 bl hexvar cmp r0 , num beq hexvar mov r0 , r5 mov r2 , hexvar mov r1 , r8 bl hexvar cmp r0 , num beq hexvar ldr r4 , [ r4 , hexvar ] cmp r4 , num beq hexvar ldr r5 , [ r4 ] mov r1 , r7 mov r0 , r5 bl hexvar cmp r0 , num bne hexvar mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rdi , qword ptr [ rbp - hexvar ] lea rsi , [ rbp - hexvar ] call hexvar mov rsi , qword ptr [ rbp - num ] cmp dword ptr [ rsi + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rax , qword ptr [ rax + rcx * num ] add rax , hexvar mov rdi , rax lea rsi , [ rbp - hexvar ] call hexvar cmp eax , num jne hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rax , qword ptr [ rax + rcx * num ] add rax , hexvar lea rcx , [ rbp - hexvar ] mov rdi , rax mov rsi , rcx mov edx , hexvar call hexvar mov rdi , qword ptr [ rbp - num ] movabs rsi , hexvar mov al , num call hexvar mov rdi , qword ptr [ rbp - num ] lea rsi , [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax call hexvar mov rdi , qword ptr [ rbp - num ] movabs rsi , hexvar call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , lr } ldr lr , [ r2 ] ldr ip , [ r2 , num ] ldm r1 , { r2 , r3 } adds r4 , r2 , lr adc r5 , r3 , ip cmp r4 , r2 sbcs r3 , r5 , r3 movlt r3 , num movge r3 , num cmp r3 , ip , lsr num bne hexvar stm r0 , { r4 , r5 } pop { r4 , r5 , r6 , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov cl , byte ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] test edx , edx sete ch movzx edx , ch mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , cl jmp edx movzx eax , byte ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx movzx eax , byte ptr [ ebp + num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar sub esp , num push dword ptr [ esp + hexvar ] lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax sub esp , num push dword ptr [ esp + hexvar ] lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) move a2 , a1 move a1 , a0 move a0 , zero jal hexvar nop lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push { r4 , r5 , r6 , lr } mov r4 , r1 mov r1 , num mov r2 , r4 mov r5 , r0 bl hexvar cmp r0 , num subne r0 , r0 , r5 addne r0 , r0 , num moveq r0 , r4 pop { r4 , r5 , r6 , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sdc1 f20 , hexvar ( sp ) mtc1 a3 , f20 beqz a1 , hexvar mthc1 a2 , f20 addiu a3 , zero , num addiu a2 , zero , num jal hexvar nop beqz v0 , hexvar nop sdc1 f20 , hexvar ( v0 )
push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r0 bl hexvar mov r4 , r0 ldrb r0 , [ r5 , num ] ldr r6 , [ r4 ] cmp r0 , num addne r0 , r5 , num bl hexvar cmp r0 , num beq hexvar mov r7 , num ldr r6 , [ r4 ] mov r0 , r5 bl hexvar str r6 , [ r4 ] mov r0 , r7 pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] lea esi , [ ebp - hexvar ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp mov dword ptr [ eax + num ] , esi mov dword ptr [ eax + num ] , ebx mov dword ptr [ eax ] , edi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar lea ecx , [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] sub eax , ecx mov ecx , hexvar sub ecx , eax sub ecx , num mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp + hexvar ] jae hexvar mov eax , dword ptr [ hexvar ] mov ecx , eax add ecx , num mov dword ptr [ hexvar ] , ecx mov byte ptr [ eax ] , hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , dword ptr [ hexvar ] mov dword ptr [ hexvar ] , eax add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov eax , dword ptr [ ebp - num ] sub eax , num setl cl movzx edx , cl mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp edx mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov edx , dword ptr [ eax + ecx * num ] not edx mov dword ptr [ eax + ecx * num ] , edx mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] inc eax mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax add esp , hexvar pop ebp ret
mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] cmp ecx , eax jle hexvar mov esi , dword ptr [ esp + hexvar ] movzx edx , byte ptr [ esi + eax ] add eax , num mov edi , dword ptr [ esp + hexvar ] cmp byte ptr [ edi + edx ] , num jne hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov ebx , eax cmp eax , ecx je hexvar movzx edx , byte ptr [ edi + eax ] add eax , num cmp byte ptr [ esi + edx ] , num je hexvar mov dword ptr [ esp + hexvar ] , ebx jmp hexvar
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov dl , cl mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ecx ] , num mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , dl jne hexvar xor eax , eax mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx + num ] setl dl mov byte ptr [ ebp - num ] , dl mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
push r14 push r13 push r12 push rbp push rbx mov rbp , rdi mov rbx , rdx mov r13 , rcx test sil , sil je hexvar mov r12 , qword ptr [ rdi + num ] mov eax , num cmp byte ptr [ rip + hexvar ] , num jne hexvar mov ebp , eax and ebp , num test rbx , rbx je hexvar cmp byte ptr [ rip + hexvar ] , num je hexvar mov rax , qword ptr [ rbx + hexvar ] add rax , num cmp qword ptr [ rbx + hexvar ] , rax jb hexvar mov rax , qword ptr [ rbx + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rax ] , rdx add qword ptr [ rbx + hexvar ] , num mov ecx , num mov rdx , qword ptr [ rip + hexvar ] mov rsi , r12 mov rdi , qword ptr [ rip + hexvar ] call hexvar mov r12 , rax add qword ptr [ rip + hexvar ] , rax cmp byte ptr [ rip + hexvar ] , num je hexvar mov rax , qword ptr [ rbx + hexvar ] add rax , num cmp qword ptr [ rbx + hexvar ] , rax jb hexvar mov rax , qword ptr [ rbx + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rax ] , rdx add qword ptr [ rbx + hexvar ] , num call hexvar test bpl , bpl jne hexvar mov rax , r12 pop rbx pop rbp pop r12 pop r13 pop r14 ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r7 , r0 mov r0 , r1 mov r6 , r2 bl hexvar ldr r3 , [ r7 , num ] mov r8 , r0 ldrb r5 , [ r3 , hexvar ] bl hexvar cmp r5 , r0 blo hexvar mov r4 , r0 mov r2 , r0 mov r1 , r8 mov r0 , r6 bl hexvar cmp r5 , r4 ldrhi r3 , [ r7 , num ] ldrbhi r3 , [ r3 , hexvar ] strbhi r3 , [ r6 , r4 ] pop { r4 , r5 , r6 , r7 , r8 , pc }
sub esp , hexvar push dword ptr [ esp + hexvar ] lea eax , [ esp + hexvar ] push eax push num push dword ptr [ esp + hexvar ] push esi call hexvar add esi , dword ptr [ esp + hexvar ] add esp , hexvar test edx , edx mov edi , eax mov eax , dword ptr [ esp + hexvar ] je hexvar or eax , num mov dword ptr [ esp + hexvar ] , eax test al , num jne hexvar test al , num jne hexvar mov eax , dword ptr [ esp + hexvar ] lea ebp , [ esi + eax ] mov eax , dword ptr [ esp + num ] cmp ebp , eax jb hexvar xor edx , edx cmp eax , esi jbe hexvar sub eax , esi lea edx , [ eax - num ] cmp edx , num ja hexvar sub esp , num push eax push esi mov eax , dword ptr [ esp + hexvar ] call dword ptr [ eax ] add esp , hexvar mov edx , eax mov dword ptr [ esp + hexvar ] , edx sub esp , num lea eax , [ ebx - hexvar ] push num jmp hexvar mov esi , esi lea edi , [ edi ]
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] cmp dword ptr [ edx + num ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov byte ptr [ ebp - num ] , al add esp , hexvar pop ebp ret
push ebp mov ebp , esp push edi push esi push ebx sub esp , hexvar call hexvar add ecx , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ecx ] mov edi , dword ptr [ ecx + num ] mov ecx , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ecx + num ] mov ecx , dword ptr [ ecx ] mov eax , esi xor eax , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , edi xor eax , ebx mov dword ptr [ ebp - hexvar ] , eax mov edx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov eax , edx or eax , ecx test eax , eax sete al add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jae hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov rdi , rax movabs rsi , num mov edx , num call hexvar cmp eax , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar cmp qword ptr [ rbp - hexvar ] , num jae hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov rdi , rax movabs rsi , num mov edx , num call hexvar cmp eax , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
ldr r2 , [ r0 , hexvar ] ldr r0 , [ r2 , hexvar ] clz r3 , r2 lsr r3 , r3 , num cmp r0 , num orrne r3 , r3 , num cmp r3 , num bxne lr
push rbx mov edx , esi mov rbx , rdi and edx , hexvar sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax and esi , hexvar je hexvar mov rcx , rsp mov eax , hexvar xor r8d , r8d mov rdi , rcx test dl , num je hexvar test r8d , r8d mov rsi , rdi je hexvar add rsi , num mov byte ptr [ rdi ] , hexvar lea rdi , [ rsi + num ] mov byte ptr [ rsi ] , hexvar mov byte ptr [ rsi + num ] , al mov r8d , num add eax , num shr edx , num cmp al , hexvar jne hexvar lea rdx , [ rip + hexvar ] lea rsi , [ rip + hexvar ] mov byte ptr [ rdi ] , num xor eax , eax mov edi , num call hexvar mov rax , rbx mov rbx , qword ptr [ rsp + hexvar ] xor rbx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx lea esi , [ hexvar ] mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
mov eax , dword ptr [ rip ] test eax , eax je hexvar mov dword ptr [ rip ] , num mov dword ptr [ rip ] , num add dword ptr [ rax ] , eax add byte ptr [ rax ] , al add byte ptr [ rbx - hexvar ] , al mov word ptr [ rsi ] , ss add byte ptr [ rax ] , al or edx , hexvar mov eax , num cmp edx , hexvar jne hexvar push rbp push r15 push r14 push rbx mov r8d , dword ptr [ rdi ] mov r9d , dword ptr [ rdi + num ] bswap r8d bswap r9d mov r10d , dword ptr [ rdi + num ] bswap r10d mov r11d , dword ptr [ rdi + hexvar ] bswap r11d lea r15 , [ rcx + hexvar ] xor eax , eax nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] lea ebx , [ r10 + r8 ] mov r14d , dword ptr [ rax * num ] sub ebx , r14d mov edx , ebx movzx ebp , bh mov esi , ebx shr esi , hexvar shr edx , hexvar movzx edx , dl mov edx , dword ptr [ rdx * num ] xor edx , dword ptr [ rsi * num ] xor edx , dword ptr [ rbp * num ] movzx esi , bl xor edx , dword ptr [ rsi * num ] mov dword ptr [ rcx + rax * num ] , edx mov ebx , r9d sub ebx , r11d add ebx , r14d mov esi , ebx movzx ebp , bh movzx edi , bl shr ebx , hexvar shr esi , hexvar movzx esi , sil mov esi , dword ptr [ rsi * num ] xor esi , dword ptr [ rbx * num ] xor esi , dword ptr [ rbp * num ] xor esi , dword ptr [ rdi * num ] mov dword ptr [ rcx + rax * num + num ] , esi test al , num jne hexvar mov esi , r9d shld esi , r8d , hexvar shrd r9d , r8d , num mov r8d , esi jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] mov esi , r10d shld esi , r11d , num shld r11d , r10d , num mov r10d , esi mov dword ptr [ r15 - num ] , edx mov edx , dword ptr [ rcx + rax * num + num ] mov dword ptr [ r15 ] , edx add rax , num add r15 , - num cmp rax , hexvar jne hexvar xor eax , eax pop rbx pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp sub esp , num mov al , byte ptr [ hexvar ] and al , num shr al , num movzx ecx , al mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx mov eax , dword ptr [ hexvar ] not eax shr eax , hexvar mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ hexvar ] , hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax add esp , num pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) beqz v0 , hexvar nop lw v0 , hexvar ( sp ) lw v0 , ( v0 )
push r15 push r14 push r13 push r12 mov r13 , rdi push rbp push rbx add rdi , hexvar mov rbx , rsi mov r12 , rdx sub rsp , hexvar mov rax , qword ptr [ rdi ] mov dword ptr [ rsp + hexvar ] , ecx mov r14d , dword ptr [ rax + hexvar ] call hexvar mov rbp , rax mov rax , qword ptr [ r13 + hexvar ] mov rdi , qword ptr [ rax + hexvar ] test rdi , rdi je hexvar call hexvar mov rdi , rbx mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rdi , rbp mov r15 , rax call hexvar mov rdi , r12 mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rcx , qword ptr [ rsp + hexvar ] lea rdi , [ rcx + r15 + hexvar ] mov r15 , qword ptr [ rsp + hexvar ] add r15 , rdi lea rdi , [ r15 + rax ] call hexvar mov r15 , rax mov eax , dword ptr [ rsp + hexvar ] cmp eax , num je hexvar jb hexvar cmp eax , num jne hexvar lea rdx , [ rip + hexvar ] mov rax , qword ptr [ r13 + hexvar ] sub rsp , num lea rcx , [ rip + hexvar ] push r12 push rbp mov r9 , rbx push rdx mov esi , num mov rdx , - num mov r8 , qword ptr [ rax + hexvar ] mov rdi , r15 xor eax , eax call hexvar mov rax , qword ptr [ r13 + hexvar ] add rsp , hexvar mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ r13 + hexvar ] test r14d , r14d mov qword ptr [ rax + hexvar ] , r15 je hexvar mov dword ptr [ rax + hexvar ] , num add rsp , hexvar mov eax , num pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r6 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] ldr r7 , [ r6 ] ldr r4 , [ r6 , num ] ldr r5 , [ r7 , r4 , lsl num ] add r8 , r7 , r4 , lsl num mov r0 , r5 bl hexvar cmp r0 , num beq hexvar ldrb r3 , [ r5 ] cmp r3 , hexvar bne hexvar ldrb r3 , [ r5 , num ] cmp r3 , num beq hexvar ldrb r3 , [ r5 , num ] cmp r3 , num bne hexvar mov r0 , r5 bl hexvar cmp r0 , num beq hexvar pop { r4 , r5 , r6 , r7 , r8 , lr } b hexvar ldr r3 , [ r8 , num ] add r4 , r4 , num ldrb r0 , [ r3 ] str r4 , [ r6 , num ] clz r0 , r0 lsr r0 , r0 , num pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0
push rax mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rip + hexvar ] , num mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar test eax , eax je hexvar mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov eax , num pop rcx ret
push ebp mov ebp , esp sub esp , hexvar mov byte ptr [ ebp - num ] , num call hexvar and al , num movzx ecx , al mov al , byte ptr [ ebp - num ] and al , num movzx edx , al and edx , ecx cmp edx , num setne al and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ hexvar ] cmp ecx , dword ptr [ hexvar ] jge hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] mov eax , dword ptr [ eax + ecx * num ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar cmp eax , num je hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) sltiu v0 , v0 , num andi v0 , v0 , hexvar move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push edi push esi push ebx call hexvar add ebx , hexvar mov edi , dword ptr [ esp + hexvar ] test edi , edi je hexvar mov ecx , num mov edx , hexvar mov eax , dword ptr [ esp + hexvar ] call hexvar mov esi , eax test eax , eax je hexvar sub esp , hexvar push hexvar call hexvar mov dword ptr [ eax ] , edi mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ eax + num ] , edx mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ eax + num ] , edx mov dword ptr [ esi + hexvar ] , eax add esp , hexvar mov eax , esi pop ebx pop esi pop edi ret
push rbp mov rbp , rsp sub rsp , hexvar mov eax , edi mov byte ptr [ rbp - num ] , al movsx eax , byte ptr [ rbp - num ] sub eax , hexvar cmp eax , hexvar ja hexvar mov eax , eax lea rdx , [ rax * num ] lea rax , [ rip + hexvar ] mov eax , dword ptr [ rdx + rax ] movsxd rdx , eax lea rax , [ rip + hexvar ] add rax , rdx jmp rax mov edi , num call hexvar jmp hexvar mov edi , num call hexvar jmp hexvar mov edi , num call hexvar mov edi , hexvar call hexvar jmp hexvar mov edi , hexvar call hexvar jmp hexvar mov edi , hexvar call hexvar jmp hexvar mov edi , hexvar call hexvar jmp hexvar mov edi , num call hexvar jmp hexvar mov edi , hexvar call hexvar jmp hexvar movsx eax , byte ptr [ rbp - num ] mov edi , eax call hexvar nop nop leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax je hexvar cmp dword ptr [ ebp + num ] , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar cmp eax , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rcx mov eax , hexvar mov rcx , qword ptr [ rbp - hexvar ] cmp rcx , rax jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , ecx mov eax , dword ptr [ rbp - hexvar ] cmp eax , num je hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , qword ptr [ rbp - hexvar ] mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rax , qword ptr [ rax + rcx * num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , ecx mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov fp , r0 sub sp , sp , hexvar ldr r0 , [ r0 , num ] ldr r4 , [ sp , hexvar ] ldr r0 , [ r0 , hexvar ] add r6 , r4 , num ldr r5 , [ r0 , hexvar ] ldr lr , [ r2 ] bic r6 , r6 , num ldr ip , [ pc , hexvar ] add r6 , r6 , hexvar cmp r5 , num mov r0 , r1 add r1 , r6 , lr moveq sl , num movne sl , num moveq r8 , num movne r8 , num str r2 , [ sp , num ] ldr sb , [ pc , hexvar ] mov r7 , r3 movne sb , ip bl hexvar subs r5 , r0 , num beq hexvar ldr r2 , [ sp , num ] ldr ip , [ fp , num ] ldr r0 , [ r2 ] add r3 , r6 , r0 add r6 , r5 , r0 str r3 , [ r2 ] mov r1 , r6 ldr r3 , [ ip , hexvar ] mov r0 , r8 blx r3 ldr r3 , [ fp , num ] add r1 , r6 , num ldr r3 , [ r3 , hexvar ] mov r0 , r4 blx r3 ldr r3 , [ fp , num ] add r1 , r6 , num ldr r3 , [ r3 , hexvar ] add r6 , r6 , hexvar ldr r0 , [ pc , hexvar ] blx r3 mov r1 , sb mov r0 , r6 mov r2 , r8 bl hexvar add r0 , r6 , r8 cmp sl , num mov r3 , r0 beq hexvar mov r1 , num strb r1 , [ r3 ] , num add r2 , r3 , r8 sub r2 , r2 , r0 tst r2 , num bne hexvar mov r2 , r4 mov r1 , r7 mov r0 , r3 bl hexvar tst r4 , num add r2 , r0 , r4 beq hexvar mov r1 , r2 mov r0 , num strb r0 , [ r1 ] , num add r3 , r1 , r4 sub r3 , r3 , r2 tst r3 , num bne hexvar mov r0 , r5 add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
mov rdx , qword ptr [ rsi ] cmp qword ptr [ rdi ] , rdx mov eax , num ja hexvar jb hexvar mov rcx , qword ptr [ rsi + num ] cmp qword ptr [ rdi + num ] , rcx ja hexvar sbb eax , eax ret
push { r4 , r5 , r6 , r7 , lr } ldr r5 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r5 ] mov r1 , r0 mov r2 , sp mov r0 , num str r3 , [ sp , hexvar ] bl hexvar subs r4 , r0 , num bne hexvar ldr r0 , [ sp , hexvar ] and r0 , r0 , hexvar cmp r0 , hexvar cmpne r0 , hexvar moveq r0 , num movne r0 , num beq hexvar mov r4 , r0 ldr r2 , [ sp , hexvar ] ldr r3 , [ r5 ] mov r0 , r4 cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc }
test rdi , rdi je hexvar push rbx mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] call hexvar mov rax , qword ptr [ rbx ] cmp rax , hexvar je hexvar cmp rax , hexvar jne hexvar cmp byte ptr [ rbx + hexvar ] , num je hexvar cmp dword ptr [ rbx + hexvar ] , num je hexvar lea rsi , [ rbx + hexvar ] lea rdi , [ rbx + hexvar ] call hexvar mov rdi , qword ptr [ rbx + hexvar ] call hexvar pop rbx ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ ebx + hexvar ] push num push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } add fp , sp , hexvar sub sp , sp , hexvar mov r6 , num clz lr , r2 mov r5 , r0 ldr sb , [ fp , num ] lsr lr , lr , num ldr r0 , [ sb , hexvar ] mov r4 , r1 bic r0 , r0 , hexvar bic r0 , r0 , hexvar subs ip , r0 , r6 ldr r0 , [ pc , hexvar ] movne ip , num ldr r0 , [ r0 ] cmp lr , r5 str r0 , [ fp , - hexvar ] strb r6 , [ fp , - hexvar ] bge hexvar cmp r3 , num mov sl , r2 beq hexvar cmp r2 , num bne hexvar cmp r5 , num bgt hexvar sub r5 , r5 , hexvar ldr r0 , [ r1 , r5 , lsl num ] mov r3 , ip sub r2 , fp , hexvar sub r1 , fp , hexvar bl hexvar ldr r6 , [ pc , hexvar ] ldr r5 , [ r4 ] ldrb r3 , [ r6 , hexvar ] ldr r4 , [ r4 , num ] cmp r3 , num bne hexvar ldrb r3 , [ sb , hexvar ] cmp r3 , num beq hexvar ldr r7 , [ sb ] cmp r7 , num beq hexvar mov r1 , r4 mov r0 , r5 bl hexvar cmp r0 , num bne hexvar ldrb r8 , [ fp , - hexvar ] cmp r8 , num bne hexvar ldr r3 , [ fp , - hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar bne hexvar mov r1 , r7 mov r0 , r4 bl hexvar mov r1 , sb mov sb , r6 mov r4 , r0 mov r2 , hexvar add r0 , r6 , num bl hexvar str r8 , [ sb , num ] ! mov r2 , num sub ip , fp , hexvar mov r3 , sb mov r1 , r4 mov r0 , r5 str r2 , [ sp , num ] str ip , [ sp ] bl hexvar mov r8 , r0 ldr r3 , [ pc , hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ r3 ] mov r0 , r8 cmp r2 , r3 bne hexvar sub sp , fp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
addiu sp , sp , - hexvar lui gp , hexvar sw fp , hexvar ( sp ) lui fp , hexvar sw s7 , hexvar ( sp ) lui s7 , hexvar sw s6 , hexvar ( sp ) lui s6 , hexvar sw s5 , hexvar ( sp ) lui s5 , hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) addiu s5 , s5 , - hexvar sw s4 , hexvar ( sp ) move s2 , zero sw s3 , hexvar ( sp ) addiu fp , fp , hexvar sw s0 , hexvar ( sp ) addiu s7 , s7 , - hexvar sw ra , hexvar ( sp ) addiu s6 , s6 , hexvar sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) move s4 , a1 move s0 , a2 move s3 , a3 lw t9 , - hexvar ( gp ) jalr t9 move a0 , s4 move a1 , s5 lw gp , hexvar ( sp ) slt v0 , s2 , v0 move a0 , s0 beqz v0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop move a1 , s2 lw gp , hexvar ( sp ) move a0 , s4 lw t9 , - hexvar ( gp ) jalr t9 addiu s2 , s2 , num move a3 , s3 move s1 , v0 lw v0 , ( v0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + hexvar ] mov dword ptr [ esp ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar cmp eax , num jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub ecx , hexvar sbb eax , num setb dl movzx esi , dl movsd xmm0 , qword ptr [ esi * num + hexvar ] cvtsd2ss xmm0 , xmm0 mov esi , dword ptr [ ebp - hexvar ] movss dword ptr [ esi + hexvar ] , xmm0 mov byte ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax ] add ecx , - num mov dword ptr [ eax ] , ecx mov byte ptr [ ebp - hexvar ] , num mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a0 move s1 , a1 move s2 , a2 lui v0 , hexvar lw v0 , - hexvar ( v0 ) beqz v0 , hexvar move s3 , a3 lui v0 , hexvar lw v0 , - hexvar ( v0 ) lw v1 , hexvar ( sp ) sw v1 , hexvar ( sp ) lw v1 , hexvar ( sp ) sw v1 , hexvar ( sp ) lw t9 , num ( v0 ) move a3 , s3 move a2 , s2 move a1 , s1 move a0 , s0 jalr t9 nop lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar jal hexvar nop b hexvar lui v0 , hexvar
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi movss dword ptr [ rbp - hexvar ] , xmm0 mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rdx + hexvar ] mov esi , dword ptr [ rbp - hexvar ] mov edi , esi shl rdi , num add rdx , rdi cmp dword ptr [ rdx + num ] , num je hexvar movss xmm0 , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx shl rsi , num add rcx , rsi mov rcx , qword ptr [ rcx + num ] movss dword ptr [ rax + rcx * num ] , xmm0 pop rbp ret
test rsi , rsi je hexvar push rbx mov rbx , rsi mov edx , num mov esi , hexvar call hexvar test rax , rax je hexvar mov qword ptr [ rax + hexvar ] , rbx pop rbx ret
beqz a0 , hexvar lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar lui a3 , hexvar addiu v0 , zero , hexvar sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) addiu a3 , a3 , - hexvar sw v0 , hexvar ( sp ) addiu a2 , zero , num lw t9 , - hexvar ( gp ) addiu a1 , zero , - num jalr t9 addiu a0 , a0 , hexvar blez v0 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw a0 , num ( s0 )
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jae hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax ] sub ecx , hexvar setne dl movzx esi , dl cmp esi , num mov dword ptr [ rbp - hexvar ] , ecx jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar fstp qword ptr [ ebp - hexvar ] movsd xmm0 , qword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] sub eax , ecx cvtsi2sd xmm1 , eax movsd xmm2 , qword ptr [ hexvar ] mulsd xmm1 , xmm2 addsd xmm0 , xmm1 movsd qword ptr [ ebp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ ebp - hexvar ] movsd qword ptr [ ebp - hexvar ] , xmm0 fld qword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) bnez v0 , hexvar nop addiu a0 , zero , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) lw a2 , hexvar ( fp ) lui v0 , hexvar addiu a1 , v0 , hexvar lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) sw zero , hexvar ( fp ) lw v0 , hexvar ( fp ) beqz v0 , hexvar nop lw v0 , hexvar ( fp ) bnez v0 , hexvar nop lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] test edi , edi je hexvar test esi , esi je hexvar cmp dword ptr [ edi ] , esi je hexvar lea ebp , [ ebx - hexvar ] sub esp , num push esi push ebp call hexvar add esp , hexvar test eax , eax mov esi , eax je hexvar sub esp , num push ebp push dword ptr [ edi ] call hexvar mov dword ptr [ edi ] , esi add esp , hexvar xor eax , eax test esi , esi setne al add esp , hexvar pop ebx pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , hexvar ( fp ) addiu v1 , zero , num beq v0 , v1 , hexvar nop addiu v1 , zero , num beq v0 , v1 , hexvar nop addiu v1 , zero , num bne v0 , v1 , hexvar nop lui v0 , hexvar lbu v0 , - hexvar ( v0 ) xori v0 , v0 , num andi v0 , v0 , hexvar beqz v0 , hexvar nop b hexvar nop lui v0 , hexvar lbu v0 , - hexvar ( v0 ) xori v0 , v0 , num andi v0 , v0 , hexvar bnez v0 , hexvar nop lui v0 , hexvar lbu v0 , - hexvar ( v0 ) beqz v0 , hexvar nop lui v0 , hexvar lw v1 , - hexvar ( v0 ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) lw a3 , hexvar ( fp ) move a2 , v0 addiu a1 , zero , num move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) b hexvar nop lui v0 , hexvar lbu v0 , - hexvar ( v0 ) xori v0 , v0 , num andi v0 , v0 , hexvar bnez v0 , hexvar nop lui v0 , hexvar lbu v0 , - hexvar ( v0 ) beqz v0 , hexvar nop lui v0 , hexvar lw v1 , - hexvar ( v0 ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) lw a3 , hexvar ( fp ) move a2 , v0 addiu a1 , zero , num move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lui v0 , hexvar lbu v0 , - hexvar ( v0 ) beqz v0 , hexvar nop lui v0 , hexvar lw v1 , - hexvar ( v0 ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) lw a3 , hexvar ( fp ) move a2 , v0 addiu a1 , zero , num move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) b hexvar nop nop b hexvar nop nop b hexvar nop nop lw v0 , hexvar ( fp ) lw v1 , num ( v0 )
push rbx mov rbx , rdi cmp qword ptr [ rip + hexvar ] , num jne hexvar call hexvar mov qword ptr [ rip + hexvar ] , rax test rax , rax je hexvar mov rdi , rbx call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , qword ptr [ rip + hexvar ] mov rsi , rax call hexvar test eax , eax je hexvar add eax , hexvar pop rbx ret
ldr r3 , [ pc , hexvar ] push { r4 , r5 , r6 , r7 , r8 , lr } ldr r4 , [ r3 , hexvar ] ldr r5 , [ pc , hexvar ] subs r8 , r2 , num add r2 , r4 , num and r2 , r2 , hexvar str r2 , [ r3 , hexvar ] ldr r2 , [ r5 ] sub sp , sp , hexvar add r3 , r3 , hexvar mov r6 , r0 mov r7 , r1 add r4 , r3 , r4 , lsl num str r2 , [ sp , hexvar ] bne hexvar ldr r3 , [ pc , hexvar ] add r8 , sp , hexvar str r3 , [ sp ] mov r2 , hexvar ldr r3 , [ pc , hexvar ] mov r1 , num mov r0 , r8 bl hexvar mov r3 , hexvar str r8 , [ sp ] str r6 , [ sp , num ] str r7 , [ sp , hexvar ] mov r1 , r3 mov r2 , num mov r0 , r4 bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r5 ] mov r0 , r4 cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , esi mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rax mov rdi , qword ptr [ rip + hexvar ] call hexvar test rax , rax je hexvar pop rax ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu v0 , zero , - num sw s0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v1 , ( s0 ) sw v1 , hexvar ( sp ) beq a2 , v0 , hexvar andi v1 , a2 , hexvar lw v0 , - hexvar ( gp ) move s1 , a0 sll a0 , v1 , num addu v0 , v0 , a0 lhu v0 , ( v0 ) andi v0 , v0 , hexvar beqz v0 , hexvar move s2 , a1 addiu s3 , sp , hexvar sb a2 , hexvar ( sp ) sb zero , hexvar ( sp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) lui a0 , hexvar addiu a2 , zero , num addiu a1 , a1 , - hexvar jalr t9 addiu a0 , a0 , - hexvar move a3 , s3 lw gp , hexvar ( sp ) move a0 , v0 move a2 , s2 lw t9 , - hexvar ( gp ) bal hexvar move a1 , s1 lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar addiu a0 , zero , hexvar lw gp , hexvar ( sp ) lw v1 , hexvar ( sp ) lw v0 , ( s0 ) bne v1 , v0 , hexvar lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) addiu s3 , sp , hexvar sw v1 , hexvar ( sp ) addiu a3 , a3 , - hexvar addiu a2 , zero , hexvar addiu a1 , zero , num jalr t9 move a0 , s3 b hexvar lw gp , hexvar ( sp ) jal hexvar move a0 , a3 b hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp )
push rbx mov rbx , qword ptr [ rdi ] call hexvar test rbx , rbx je hexvar mov rdi , rbx pop rbx jmp hexvar nop word ptr [ rax + rax ] xor eax , eax pop rbx ret
push { r4 , fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar ldr r3 , [ fp , - hexvar ] cmp r3 , num beq hexvar ldr r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] str r2 , [ r3 ] mov r3 , num mov r4 , num b hexvar ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] sub r4 , fp , hexvar ldm r4 , { r3 , r4 } mov r0 , r3 mov r1 , r4 sub sp , fp , num pop { r4 , fp , pc }
push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r15 , rsi mov r12 , rdi call hexvar mov r14 , rax mov edx , hexvar mov edi , num mov esi , hexvar mov ecx , hexvar call hexvar mov rax , qword ptr [ r12 ] mov rdi , qword ptr [ rax + num ] lea rcx , [ rsp + hexvar ] mov esi , num mov rdx , r15 call hexvar mov edx , hexvar mov edi , hexvar mov esi , hexvar mov ecx , hexvar call hexvar lea rcx , [ rsp + hexvar ] mov rdi , r12 mov esi , num mov rdx , r15 call hexvar test eax , eax je hexvar mov eax , dword ptr [ rsp + hexvar ] cmp eax , num je hexvar cmp eax , num jne hexvar mov rdi , qword ptr [ rsp + hexvar ] call hexvar jmp hexvar mov rdi , qword ptr [ rsp + hexvar ] call hexvar mov edx , hexvar mov edi , num mov esi , hexvar mov ecx , hexvar call hexvar mov rax , qword ptr [ r12 ] mov rdi , qword ptr [ rax + num ] lea rcx , [ rsp + hexvar ] mov esi , num mov rdx , r15 call hexvar test eax , eax js hexvar cmp dword ptr [ rsp + hexvar ] , num jle hexvar mov r15d , eax xor ebx , ebx nop dword ptr [ rax + rax ] lea esi , [ r15 + rbx ] mov rax , qword ptr [ r12 ] mov rdi , qword ptr [ rax + num ] call hexvar mov r13 , qword ptr [ rax + num ] lea rdi , [ r13 + hexvar ] mov ecx , hexvar mov esi , num mov edx , num mov r8d , hexvar call hexvar mov rdi , r14 mov rsi , r13 call hexvar test eax , eax je hexvar add ebx , num cmp ebx , dword ptr [ rsp + hexvar ] jl hexvar mov edx , hexvar mov edi , hexvar mov esi , hexvar mov ecx , hexvar call hexvar jmp hexvar mov edx , hexvar mov edi , hexvar mov esi , hexvar mov ecx , hexvar call hexvar mov rdi , r14 call hexvar xor r14d , r14d mov rax , r14 add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 ret
sub rsp , num call hexvar mov qword ptr [ rax ] , hexvar mov dword ptr [ rax + hexvar ] , num mov dword ptr [ rax + hexvar ] , num mov byte ptr [ rax + hexvar ] , num mov byte ptr [ rax + hexvar ] , num mov eax , num add rsp , num ret
sltiu v0 , a0 , hexvar beqz v0 , hexvar nop sll v0 , a0 , num addu a0 , v0 , a0 lui v0 , hexvar sll a0 , a0 , num addiu v0 , v0 , - hexvar addu a0 , a0 , v0 jr ra lw v0 , num ( a0 )
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbp , rdi mov r13 , rsi mov r12 , rdx mov r14 , rcx mov r15 , r8 mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax mov rdx , rsp mov rsi , r12 call hexvar mov rbx , rax cmp r12 , rax jbe hexvar cmp rax , num ja hexvar shl rbx , num mov rbx , qword ptr [ rbp + rbx ] mov edx , num mov esi , hexvar mov edi , num call hexvar mov rsi , rbx mov rdi , rax call hexvar mov r9 , qword ptr [ rsp ] mov r8 , r15 mov rcx , r14 mov rdx , rbx mov rsi , r13 mov rdi , rbp call hexvar mov rax , rbx mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
sub rsp , hexvar mov rcx , rsi mov rdx , rdi xorps xmm0 , xmm0 movups xmmword ptr [ rsp + num ] , xmm0 mov dword ptr [ rsp ] , num mov edi , hexvar mov esi , hexvar xor r8d , r8d xor r9d , r9d call hexvar add rsp , hexvar ret
push { r4 , r5 , r6 , lr } mov r5 , r0 ldr r0 , [ r0 , hexvar ] mov r6 , r1 bl hexvar cmp r0 , num popeq { r4 , r5 , r6 , pc } ldr r2 , [ r5 , hexvar ] cmp r2 , num lsreq r4 , r0 , num beq hexvar lsr r4 , r0 , num cmp r4 , hexvar bhs hexvar cmp r6 , num beq hexvar cmp r0 , hexvar movlo r4 , r0 movhs r4 , hexvar add r4 , r2 , r4 mov r3 , r4 ldr r1 , [ r5 , hexvar ] ldr r0 , [ r5 , hexvar ] bl hexvar str r4 , [ r5 , hexvar ] str r0 , [ r5 , hexvar ] mov r0 , num pop { r4 , r5 , r6 , pc }
lea rax , [ rip - hexvar ] cmp qword ptr [ rip + hexvar ] , rax je hexvar mov eax , dword ptr [ rdi + num ] mov qword ptr [ rsi ] , rax mov eax , dword ptr [ rdi ] mov qword ptr [ rdx ] , rax ret
test rdi , rdi je hexvar mov eax , dword ptr [ rdi ] add eax , - num cmp eax , num ja hexvar mov rax , qword ptr [ rdi + hexvar ] ret
push rbx cmp esi , hexvar jl hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rbx ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar xor ecx , ecx mov dword ptr [ eax ] , hexvar mov eax , ecx add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rsi ] mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi ] call hexvar cmp eax , num setne cl mov dl , cl xor dl , hexvar and dl , num mov r8b , num mov r9b , r8b xor r9b , num and cl , r9b xor r8b , num and r8b , hexvar and r9b , num or dl , cl or r8b , r9b xor dl , r8b and dl , num movzx eax , dl add rsp , hexvar pop rbp ret
push ebp mov ebp , esp call hexvar add eax , hexvar cmp dword ptr [ ebp + num ] , hexvar ja hexvar mov edx , dword ptr [ ebp + num ] shl edx , num mov edx , dword ptr [ edx + eax - hexvar ] add edx , eax jmp edx
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ hexvar ] jmp eax add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar call hexvar add eax , hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , hexvar leave ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , num mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov cl , byte ptr [ eax ] mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] movsx ecx , al cmp ecx , hexvar jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] add eax , num mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , eax add ecx , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp byte ptr [ eax ] , num jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov esp , ebp pop ebp ret
push { r4 , r5 , r6 , lr } mov r4 , r0 ldr r0 , [ r0 ] mov r5 , r1 bl hexvar ldr r3 , [ r4 , num ] mov r2 , r5 eor r0 , r0 , r3 ldr r1 , [ r4 , hexvar ] mov r3 , num bl hexvar mov r0 , r2 pop { r4 , r5 , r6 , pc }
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , hexvar mov dword ptr [ ecx ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov dword ptr [ ecx + num ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , num mov dword ptr [ ecx + hexvar ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , num mov dword ptr [ ecx + hexvar ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , num mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ esp + hexvar ] lea edx , [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , num call hexvar test eax , eax js hexvar mov edx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ edx + num ] mov dword ptr [ esp + hexvar ] , edx push edi push eax lea eax , [ esp + hexvar ] push eax push esi call hexvar add esp , hexvar mov edx , dword ptr [ esp + hexvar ] test edx , edx je hexvar mov dword ptr [ esp + hexvar ] , eax sub esp , hexvar push edx call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx + num ] , eax mov dword ptr [ edx ] , num call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ hexvar ] add edx , eax adc ecx , num mov dword ptr [ hexvar ] , edx mov dword ptr [ hexvar ] , ecx mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ hexvar ] je hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov edx , dword ptr [ ebp - num ] mov dword ptr [ esp + num ] , edx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ hexvar ] add eax , num adc dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , eax mov dword ptr [ esp ] , num call hexvar mov eax , dword ptr [ hexvar ] add eax , num adc dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , eax mov dword ptr [ hexvar ] , num add esp , hexvar pop ebp ret
push { r4 , lr } mov r4 , r0 bl hexvar adds r4 , r4 , num movne r4 , num cmp r0 , num movne r4 , num cmp r4 , num popeq { r4 , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , esp mov dword ptr [ ebx + num ] , edi mov dword ptr [ ebx ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] test eax , eax setne al movzx ecx , al mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar test eax , eax setne bl movzx eax , bl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
mov esi , dword ptr [ rip + hexvar ] push rbx mov rdx , rdi xor edi , edi call hexvar mov edx , num mov rbx , rax mov esi , hexvar xor edi , edi call hexvar mov rcx , rbx mov rdx , rax xor esi , esi pop rbx mov edi , num xor eax , eax jmp hexvar nop word ptr [ rax + rax ]
push rbp push r15 push r14 push rbx push rax mov ebx , ecx mov r14 , rdx mov r15d , esi mov rbp , rdi cmp ecx , hexvar jl hexvar mov edi , hexvar mov edx , hexvar mov esi , hexvar call hexvar mov dword ptr [ rbp + hexvar ] , num mov rdi , rbp mov esi , r15d mov rdx , r14 mov ecx , ebx xor r8d , r8d add rsp , num pop rbx pop r14 pop r15 pop rbp jmp hexvar nop
push rbx sub rsp , hexvar mov qword ptr [ rsp ] , num test rsi , rsi je hexvar mov rbx , rdi mov rax , rsp mov rdi , rsi mov rsi , rax mov rdx , rbx call hexvar mov rcx , qword ptr [ rsp ] test rcx , rcx je hexvar movsxd rdx , eax mov qword ptr [ rsp + num ] , rcx lea rsi , [ rsp + num ] xor edi , edi mov rcx , rbx call hexvar mov rbx , rax mov rdi , qword ptr [ rsp ] call hexvar mov rax , rbx add rsp , hexvar pop rbx ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r5 , r1 sub sp , sp , hexvar ldr r7 , [ pc , hexvar ] ldr r6 , [ sp , hexvar ] ldr r1 , [ r7 ] mov r8 , r3 ldr r3 , [ r5 , hexvar ] cmp r6 , num mov r4 , r2 str r1 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr sb , [ r5 , hexvar ] str r0 , [ sp , hexvar ] beq hexvar mov r3 , num mvn ip , num mvn fp , num cmp r2 , num str r3 , [ r6 ] mov r2 , hexvar mov r1 , sb moveq sl , num movne sl , num str fp , [ sp , hexvar ] str ip , [ sp , hexvar ] bl hexvar subs r3 , r0 , num str r3 , [ sp , hexvar ] blt hexvar bl hexvar subs r4 , r0 , num ldr r3 , [ sp , hexvar ] beq hexvar bl hexvar mov r3 , num mov fp , r0 str r3 , [ r0 ] b hexvar ldrb r3 , [ r0 , hexvar ] add r2 , r0 , hexvar cmp r3 , hexvar bne hexvar ldrb r3 , [ r0 , hexvar ] cmp r3 , hexvar movne r3 , num moveq r3 , num ldrb r3 , [ r2 , r3 ] cmp r3 , hexvar cmpne r3 , num bne hexvar mov r0 , r4 bl hexvar cmp r0 , num bne hexvar ldr r3 , [ fp ] mov r0 , r4 str r3 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] cmp r3 , num moveq r4 , num moveq r3 , num beq hexvar mov r4 , num mov r3 , num str r3 , [ r6 ] ldr r3 , [ r5 , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ r8 , num ] cmp r3 , num beq hexvar ldrb r2 , [ r8 ] cmp r2 , num bne hexvar cmp r3 , num beq hexvar ldrb r3 , [ r8 , hexvar ] cmp r3 , num beq hexvar bl hexvar cmp r0 , num beq hexvar ldr r3 , [ r8 , num ] cmp r3 , num beq hexvar mov r0 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ r7 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r3 andeq r0 , r0 , r0
push ebp mov ebp , esp sub esp , num call hexvar add eax , hexvar sub esp , num push dword ptr [ ebp + hexvar ] push dword ptr [ ebp + num ] push num call hexvar add esp , hexvar leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , - num sete cl and cl , num movzx edx , cl mov dword ptr [ ebp - num ] , eax mov eax , edx add esp , num pop ebp ret
push dword ptr [ esp + hexvar ] push num lea eax , [ esp + hexvar ] push eax push esi call hexvar add esi , dword ptr [ esp + hexvar ] mov ebp , esi movzx ecx , byte ptr [ esp + hexvar ] add esp , hexvar cmp cl , num je hexvar movzx edx , byte ptr [ ebx + hexvar ] add eax , edx movzx ecx , cl mov edx , num div ecx
push rbp push r14 push rbx mov ebp , esi mov eax , dword ptr [ rdi + hexvar ] cmp eax , esi jae hexvar mov rbx , rdi mov r14 , qword ptr [ rdi + hexvar ] nop word ptr cs : [ rax + rax ] nop mov dword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rbx + hexvar ] mov esi , eax add rsi , r14 mov edx , ebp sub edx , eax call hexvar mov ecx , eax test eax , eax jle hexvar mov dword ptr [ rbx + hexvar ] , num mov eax , dword ptr [ rbx + hexvar ] add eax , ecx mov dword ptr [ rbx + hexvar ] , eax cmp eax , ebp jb hexvar pop rbx pop r14 pop rbp ret
lw v0 , hexvar ( a0 ) ext v0 , v0 , hexvar , num bnez v0 , hexvar nop lw v1 , hexvar ( a0 ) addiu v0 , zero , - num beq v1 , v0 , hexvar nop lw v0 , ( a1 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp push r14 push rbx sub rsp , hexvar mov ebp , ecx mov ebx , edx mov rax , rsi mov r14 , rdi mov dword ptr [ rsp + num ] , num lea rsi , [ rsp + num ] mov rdi , rax call hexvar test eax , eax je hexvar xorps xmm0 , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 mov word ptr [ rsp + hexvar ] , num rol bx , num mov word ptr [ rsp + hexvar ] , bx mov eax , dword ptr [ rsp + num ] mov dword ptr [ rsp + hexvar ] , eax mov edi , num cmp ebp , num jne hexvar mov esi , num mov edx , num call hexvar mov ebx , eax cmp eax , - num je hexvar cmp ebp , num jne hexvar mov dword ptr [ rsp + hexvar ] , num lea rcx , [ rsp + hexvar ] mov edi , ebx mov esi , num mov edx , num mov r8d , num call hexvar mov dword ptr [ rsp + hexvar ] , eax test eax , eax js hexvar lea rsi , [ rsp + hexvar ] mov edi , ebx mov edx , hexvar call hexvar cmp eax , - num je hexvar mov dword ptr [ r14 ] , ebx mov eax , num jmp hexvar mov esi , num mov edx , hexvar call hexvar mov ebx , eax cmp eax , - num jne hexvar mov edi , hexvar jmp hexvar mov edi , ebx call hexvar mov edi , hexvar jmp hexvar mov edi , hexvar call hexvar xor eax , eax add rsp , hexvar pop rbx pop r14 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rdx mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rcx , qword ptr [ rbp - num ] add rcx , - hexvar mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx ] , rcx cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi movabs rdi , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov al , num call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar xor eax , eax mov ecx , eax mov qword ptr [ rbp - hexvar ] , rcx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] mov rsi , qword ptr [ rcx ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov byte ptr [ rcx + hexvar ] , num mov rdi , qword ptr [ rax ] call hexvar mov rsp , rbp pop rbp ret
push edi push esi push ebx call hexvar add ebx , hexvar mov edi , dword ptr [ esp + hexvar ] sub esp , hexvar push edi call hexvar add esp , hexvar cmp byte ptr [ eax ] , num je hexvar mov esi , eax sub esp , hexvar push eax call hexvar add esp , num cmp byte ptr [ esi + eax ] , hexvar sete dl movzx edx , dl add eax , edx push eax push esi call hexvar add esp , hexvar pop ebx pop esi pop edi ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] shl eax , num add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , ecx sub edx , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jb hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax jne hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] lea edx , [ hexvar ] cmp dword ptr [ ecx ] , edx mov dword ptr [ ebp - num ] , eax je hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar movzx eax , word ptr [ hexvar ] cmp eax , num jle hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp dword ptr [ eax ] , ecx jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx + hexvar ] sete dl and dl , num mov byte ptr [ ebp - num ] , dl jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar jmp hexvar mov eax , num mov qword ptr [ rbp - hexvar ] , rax mov r8 , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov r9 , r8 mov r8 , rdi mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar mov r8 , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov r9 , r8 mov r8 , rdi mov rdi , rax call hexvar test rax , rax jne hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] leave ret
mov r3 , num push { r4 , r5 , r6 , r7 , lr } ldr r4 , [ pc , hexvar ] subs r5 , r2 , num ldr r2 , [ r4 ] sub sp , sp , hexvar str r3 , [ sp , num ] mov r6 , r0 mov r7 , r1 str r2 , [ sp , hexvar ] moveq r3 , r5 beq hexvar mov r0 , r5 bl hexvar mov r3 , r0 mov lr , num add ip , sp , num mov r2 , r5 mov r1 , r7 mov r0 , r6 stm sp , { ip , lr } bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] ldr r0 , [ sp , num ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc } blgt hexvar andeq r0 , r0 , r0
lea ecx , [ edi + num ] cmp ecx , ebp mov dword ptr [ esp + hexvar ] , ecx jb hexvar cmp esi , ebp jae hexvar mov eax , ebp sub eax , esi lea edx , [ eax - num ] cmp edx , num ja hexvar sub esp , num add edi , num push eax push esi lea esi , [ ebx - hexvar ] mov eax , dword ptr [ esp + hexvar ] call dword ptr [ eax ] add esp , hexvar push eax push esi push num call hexvar add esp , hexvar xor eax , eax cmp ebp , edi mov ecx , dword ptr [ esp + hexvar ] jbe hexvar lea esi , [ esi ] sub esp , num push dword ptr [ esp + hexvar ] push ecx mov eax , dword ptr [ esp + hexvar ] call dword ptr [ eax ] add esp , hexvar sub esp , num push eax push esi push num call hexvar add esp , hexvar jmp hexvar lea esi , [ esi ]
push edi push esi push ebx mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar sub esp , hexvar push esi call hexvar mov dword ptr [ esp ] , esi call hexvar add esp , hexvar test eax , eax je hexvar sub esp , num mov edi , eax push dword ptr [ esp + hexvar ] push eax call hexvar add esp , hexvar test eax , eax je hexvar mov ecx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov edx , edi call hexvar mov edi , eax jmp hexvar nop lea esi , [ esi ] xor edi , edi sub esp , hexvar push esi call hexvar add esp , hexvar mov eax , edi pop ebx pop esi pop edi ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] mov r3 , num ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - num ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - num ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r3 , num b hexvar mov r3 , num and r3 , r3 , num and r3 , r3 , hexvar mov r0 , r3 sub sp , fp , num pop { fp , pc }
addiu sp , sp , - num sw a0 , num ( sp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) sw v0 , num ( sp ) lui v0 , hexvar lw v1 , hexvar ( v0 ) lw v0 , num ( sp ) addu v1 , v1 , v0 lui v0 , hexvar sw v1 , hexvar ( v0 ) lw v0 , num ( sp ) addiu sp , sp , num jr ra nop
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov dword ptr [ ebp - num ] , eax mov eax , edx mov dword ptr [ ebp - num ] , ecx add esp , num pop ebp ret
push esi push ebx mov esi , eax call hexvar add ebx , hexvar sub esp , num push hexvar push edx push dword ptr [ eax ] call hexvar add esp , hexvar test eax , eax js hexvar mov ebx , eax mov eax , esi call hexvar mov dword ptr [ esi ] , ebx xor eax , eax add esp , num pop ebx pop esi ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax test rdi , rdi je hexvar mov r14 , rsi mov rbx , rdi call hexvar sar eax , num mov esi , hexvar mov edi , eax mov edx , hexvar call hexvar test rax , rax je hexvar mov r15 , rax mov r12 , rax jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar nop shl al , num or al , cl mov byte ptr [ r12 ] , al add r12 , num add rbx , num nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] movzx ebp , byte ptr [ rbx - num ] test rbp , rbp je hexvar add rbx , num cmp bpl , hexvar je hexvar movzx r13d , byte ptr [ rbx - num ] test r13 , r13 je hexvar mov qword ptr [ rsp ] , r14 call hexvar mov r14 , qword ptr [ rax ] test byte ptr [ r14 + rbp * num + num ] , num jne hexvar test byte ptr [ r14 + r13 * num + num ] , num jne hexvar lea eax , [ rbp - hexvar ] cmp al , hexvar mov r14 , qword ptr [ rsp ] jae hexvar lea ecx , [ r13 - hexvar ] cmp cl , hexvar jb hexvar lea ecx , [ r13 - hexvar ] cmp cl , num ja hexvar add r13b , hexvar mov ecx , r13d jmp hexvar call hexvar mov rax , qword ptr [ rax ] mov bpl , byte ptr [ rax + rbp * num ] test byte ptr [ r14 + r13 * num + num ] , num je hexvar call hexvar mov rax , qword ptr [ rax ] mov r13b , byte ptr [ rax + r13 * num ] lea eax , [ rbp - hexvar ] cmp al , hexvar mov r14 , qword ptr [ rsp ] jb hexvar lea eax , [ rbp - hexvar ] cmp al , num ja hexvar add bpl , hexvar mov eax , ebp lea ecx , [ r13 - hexvar ] cmp cl , hexvar jb hexvar jmp hexvar test r14 , r14 je hexvar sub r12 , r15 mov qword ptr [ r14 ] , r12 jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor r15d , r15d mov rax , r15 add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
ldrb r2 , [ r0 , hexvar ] and r3 , r2 , num cmp r3 , num beq hexvar mov r2 , num ldr r3 , [ pc , hexvar ] mov r0 , num str r2 , [ r3 , num ] bx lr tst r2 , num bne hexvar ldr r2 , [ r0 , num ] str r1 , [ r0 , hexvar ] ldr r2 , [ r2 , hexvar ] bics r2 , r1 , r2 beq hexvar mov r2 , num ldr r3 , [ pc , hexvar ] mov r0 , num str r2 , [ r3 , num ] bx lr mov r0 , r3 bx lr ldrsbeq r6 , [ r1 ] , -r8
ldr r2 , [ r1 , hexvar ] ldr r3 , [ r0 , hexvar ] cmp r2 , num cmpne r2 , num moveq r2 , num movne r2 , num cmp r3 , num cmpne r3 , num moveq r3 , num movne r3 , num mov ip , r1 eor r1 , r2 , num tst r3 , r1 bne hexvar eor r3 , r3 , num tst r2 , r3 bne hexvar ldr r1 , [ r0 ] ldr r0 , [ ip ] b hexvar mov r0 , num bx lr mvn r0 , num bx lr
push { r4 , r5 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r4 ] mov r5 , r0 str r3 , [ sp , hexvar ] bl hexvar subs r1 , r0 , num beq hexvar ldr r0 , [ r1 ] bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] sub edi , ebx mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] cmp eax , dword ptr [ ebp + hexvar ] jae hexvar mov eax , dword ptr [ ebp + num ] mov ecx , eax add ecx , num mov dword ptr [ ebp + num ] , ecx movsx eax , byte ptr [ eax ] cmp eax , num sete dl and dl , num movzx eax , dl add eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
ldr r2 , [ r0 , num ] push { r4 , lr } cmp r2 , num beq hexvar ldr r3 , [ r0 , num ] cmp r3 , num bls hexvar ldr r4 , [ r2 , num ] sub r3 , r3 , num str r3 , [ r0 , num ] mov r0 , r4 bl hexvar sub r0 , r0 , num ldrb r2 , [ r4 , r0 ] add r3 , r4 , r0 cmp r2 , hexvar bne hexvar ldrb r2 , [ r3 , num ] cmp r2 , hexvar bne hexvar ldrb r2 , [ r3 , num ] cmp r2 , num bne hexvar mov r1 , hexvar strb r1 , [ r4 , r0 ] mov r0 , num strb r2 , [ r3 , num ] pop { r4 , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] xor edi , edi mov ebx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ebx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp push r15 push r14 push r12 push rbx sub rsp , hexvar mov ebp , edx mov rbx , rsi mov r14 , rdi mov qword ptr [ rsp + num ] , num call hexvar mov r12 , rax movsxd rdx , ebp lea rdi , [ rsp + num ] mov rsi , rbx call hexvar xor ebp , ebp test rax , rax je hexvar mov rdi , qword ptr [ rsp + num ] call hexvar mov r15d , eax mov rdi , qword ptr [ rsp + num ] call hexvar test r12 , r12 jne hexvar call hexvar mov r12 , rax mov rdi , r14 mov esi , hexvar mov rdx , rax call hexvar test eax , eax je hexvar mov rdi , r12 mov esi , r15d call hexvar xor ebp , ebp test eax , eax setne bpl mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r14 pop r15 pop rbp ret
mov eax , dword ptr [ rip ] test eax , eax jne hexvar movaps xmm0 , xmmword ptr [ rip ] xorps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rip ] , xmm0 movaps xmmword ptr [ rip ] , xmm0 add byte ptr [ rsi ] , bh add byte ptr [ rax ] , al add byte ptr [ rax ] , al add byte ptr [ rcx ] , al add byte ptr [ rax ] , al add byte ptr [ rax ] , al add byte ptr [ rax ] , al jg hexvar add byte ptr [ rax ] , al add byte ptr [ rax ] , al mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al adc dword ptr [ rip ] , eax adc dword ptr [ rip ] , eax pop r9 cwde mov al , byte ptr [ rax ] add byte ptr [ rax ] , al add byte ptr [ rdx + num ] , cl add byte ptr [ rsi + rbx ] , dh mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al fild word ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al
push rax mov edi , dword ptr [ rip + hexvar ] test edi , edi je hexvar cmp byte ptr [ rip + hexvar ] , num je hexvar pop rax ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , esp lea ecx , [ ebp - hexvar ] mov dword ptr [ eax + num ] , ecx mov dword ptr [ eax ] , num call hexvar test eax , eax sete dl movzx eax , dl mov eax , dword ptr [ eax * num + hexvar ] jmp eax movzx eax , word ptr [ ebp - hexvar ] test eax , eax setg cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax movzx eax , word ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , esp mov dword ptr [ eax ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp lea edx , [ ebp - hexvar ] mov dword ptr [ ecx + hexvar ] , edx mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + hexvar ] , hexvar mov dword ptr [ ecx + num ] , num mov dword ptr [ ecx + num ] , num call hexvar test eax , eax sete bl movzx eax , bl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] test eax , eax setg cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebx pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] str r2 , [ r3 , hexvar ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] str r2 , [ r3 , hexvar ] mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ eax - hexvar ] mov eax , dword ptr [ eax - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num jmp hexvar
test dil , dil push r12 push rbp push rbx je hexvar test sil , sil je hexvar pop rbx pop rbp pop r12 lea rdi , [ rip + hexvar ] jmp hexvar test sil , sil jne hexvar lea rsi , [ rip + hexvar ] xor edi , edi mov ebx , edx mov edx , num call hexvar mov rdi , rax call hexvar test bl , bl mov r12 , rax mov edx , num lea rsi , [ rip + hexvar ] jne hexvar lea rsi , [ rip + hexvar ] xor edi , edi call hexvar lea rdi , [ rip + hexvar ] mov rdx , rax mov rsi , r12 xor eax , eax call hexvar mov rdi , r12 mov rbp , rax call hexvar lea rsi , [ rip + hexvar ] mov edx , num xor edi , edi call hexvar lea rdi , [ rip + hexvar ] mov rdx , rax mov rsi , rbp xor eax , eax call hexvar mov rdi , rbp mov rbx , rax call hexvar lea rsi , [ rip + hexvar ] mov edx , num xor edi , edi call hexvar lea rdi , [ rip + hexvar ] mov rdx , rax mov rsi , rbx xor eax , eax call hexvar mov rdi , rbx mov rbp , rax call hexvar mov rax , rbp pop rbx pop rbp pop r12 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] cmp dword ptr [ rdi + num ] , hexvar jne hexvar movsd xmm0 , qword ptr [ rip + hexvar ] movsd xmm1 , qword ptr [ rip + hexvar ] movsd xmm2 , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mulsd xmm2 , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mulsd xmm1 , qword ptr [ rax + hexvar ] addsd xmm2 , xmm1 mov rax , qword ptr [ rbp - hexvar ] mulsd xmm0 , qword ptr [ rax + hexvar ] addsd xmm2 , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm2 movsd xmm0 , qword ptr [ rbp - hexvar ] movsd qword ptr [ rbp - num ] , xmm0 jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] call hexvar movsd xmm1 , qword ptr [ rip + hexvar ] mulsd xmm1 , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] movsd qword ptr [ rbp - hexvar ] , xmm1 call hexvar movsd xmm1 , qword ptr [ rip + hexvar ] mulsd xmm1 , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] addsd xmm0 , xmm1 mov rax , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rax + hexvar ] movsd qword ptr [ rbp - hexvar ] , xmm0 movaps xmm0 , xmm1 call hexvar movsd xmm1 , qword ptr [ rip + hexvar ] mulsd xmm1 , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] addsd xmm0 , xmm1 movsd qword ptr [ rbp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] movsd qword ptr [ rbp - num ] , xmm0 movsd xmm0 , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr sb , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ sb ] subs r8 , r2 , num str r3 , [ sp , hexvar ] beq hexvar cmp r0 , num mov r5 , r0 beq hexvar mov sl , r1 mov r2 , hexvar ldr r1 , [ r0 , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar subs r7 , r0 , num bne hexvar mov r2 , hexvar ldr r1 , [ r5 , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar cmp r0 , num beq hexvar mov r6 , num ldr r3 , [ r5 , hexvar ] str r7 , [ sp , hexvar ] add fp , r5 , hexvar cmp r8 , r7 bhi hexvar cmp r3 , num moveq r6 , num cmp r6 , num beq hexvar mov r6 , num ldr r2 , [ r5 , hexvar ] sub r4 , r8 , r7 sub r2 , r2 , r3 cmp r4 , r2 movhs r4 , r2 add r0 , fp , r3 mov r2 , r4 add r1 , sl , r7 add r7 , r7 , r4 bl hexvar orr r6 , r6 , r4 cmp r8 , r7 movls r2 , num movhi r2 , num cmp r6 , num movne r2 , num ldr r3 , [ r5 , hexvar ] cmp r2 , num add r3 , r4 , r3 str r3 , [ r5 , hexvar ] bne hexvar ldr r2 , [ r5 , hexvar ] sub r2 , r2 , num cmp r2 , num ldrls pc , [ pc , r2 , lsl num ] b hexvar andeq r1 , r0 , r0 , ror num andeq r1 , r0 , r4 , lsr num andeq r1 , r0 , r4 , lsr num strdeq r1 , r2 , [ r0 ] , -r0 mov r0 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ sb ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0
sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rsi , rsp call hexvar mov edx , num test eax , eax jne hexvar mov rdx , qword ptr [ rsp + hexvar ] mov rax , rdx mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov dword ptr [ rbp - num ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov esi , dword ptr [ rbp - num ] lea rdi , [ rbp - hexvar ] call hexvar lea rdx , [ rbp - hexvar ] mov rdi , rdx lea rax , [ rbp - hexvar ] mov rsi , rax mov eax , hexvar mov qword ptr [ rbp - hexvar ] , rdx mov rdx , rax call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar mov edx , num call hexvar mov edi , dword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , - num lea rcx , [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax call hexvar add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ edi ] mov edi , dword ptr [ edi + num ] xor edx , edi xor esi , ebx or esi , edx sete dl and dl , num movzx edi , dl mov dword ptr [ ebp - hexvar ] , eax mov eax , edi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi add esp , hexvar pop esi pop edi pop ebx pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , num ] sub r3 , r2 , r3 sub r3 , r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bge hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , num bl hexvar mvn r3 , num b hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ sp , hexvar ] add r2 , r3 , num str r2 , [ sp , hexvar ] mov r2 , hexvar strb r2 , [ r3 ] b hexvar ldr r3 , [ sp , hexvar ] add r2 , r3 , num str r2 , [ sp , hexvar ] mov r2 , hexvar strb r2 , [ r3 ] ldr r3 , [ sp , hexvar ] cmp r3 , num ble hexvar ldr r3 , [ sp , hexvar ] sub r3 , r3 , num mov r2 , r3 mov r1 , hexvar ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] sub r3 , r3 , num ldr r2 , [ sp , hexvar ] add r3 , r2 , r3 str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r2 , r3 , num str r2 , [ sp , hexvar ] mvn r2 , hexvar strb r2 , [ r3 ] ldr r3 , [ sp , num ] mov r2 , r3 ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] add r3 , r2 , r3 str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] mvn r2 , hexvar strb r2 , [ r3 ] mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebx + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi lea esi , [ hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , ebx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , ecx add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] add eax , hexvar mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , num movzx eax , byte ptr [ hexvar ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax call hexvar mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov byte ptr [ hexvar ] , num mov eax , dword ptr [ hexvar ] jmp eax add esp , num pop ebp ret
push { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r3 , [ r0 , hexvar ] mov r4 , r0 cmp r3 , num beq hexvar ldr r2 , [ r0 , hexvar ] ldr r0 , [ pc , hexvar ] ldr r3 , [ r2 , num ] add r1 , r4 , hexvar cmp r3 , r0 str r2 , [ r4 , hexvar ] str r1 , [ r4 , num ] bhi hexvar mvn r1 , num add r0 , r3 , num add r3 , r2 , r3 str r0 , [ r2 , num ] strb r1 , [ r3 , num ] ldr r2 , [ r4 , hexvar ] ldr r3 , [ r4 , hexvar ] cmp r2 , num beq hexvar cmp r3 , num beq hexvar ldr r3 , [ r4 , hexvar ] ldr r1 , [ pc , hexvar ] ldr r2 , [ r3 , num ] add r5 , r4 , hexvar cmp r2 , r1 str r3 , [ r4 , hexvar ] str r5 , [ r4 , num ] bhi hexvar mvn r0 , num add r1 , r2 , num add r2 , r3 , r2 str r1 , [ r3 , num ] strb r0 , [ r2 , num ] ldr r2 , [ pc , hexvar ] cmp r1 , r2 bhi hexvar mov r0 , num add r2 , r1 , num add r1 , r3 , r1 str r2 , [ r3 , num ] strb r0 , [ r1 , num ] ldr r1 , [ pc , hexvar ] cmp r2 , r1 bhi hexvar mov r1 , num add r0 , r2 , num add r2 , r3 , r2 str r0 , [ r3 , num ] strb r1 , [ r2 , num ] ldr r1 , [ pc , hexvar ] mov r0 , r4 bl hexvar cmp r0 , num bne hexvar mov r0 , num pop { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 stc2l p6 , c7 , [ pc ] , - hexvar
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx + num ] mov esi , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ esi + num ] mov edi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ edi + hexvar ] mov ebx , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebx + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ esp + hexvar ] , ebx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar xor eax , eax add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push r15 push r14 push r13 push r12 mov r13 , rsi push rbp push rbx mov r12 , rdi mov rbp , rdx mov ebx , ecx sub rsp , num jmp hexvar nop dword ptr [ rax + rax ] mov rdx , rax mov esi , ebx mov rdi , rbp call hexvar xor edx , edx mov esi , ebx mov rdi , rbp call hexvar test rax , rax jne hexvar xor edx , edx mov rdi , r12 mov rsi , r13 call hexvar mov r12 , rax xor eax , eax test r12 , r12 je hexvar lea r13 , [ rip + hexvar ] mov r14 , r12 nop dword ptr [ rax + rax ] movsx eax , byte ptr [ r14 ] test al , al je hexvar xor r15d , r15d mov rdx , r12 jmp hexvar nop dword ptr [ rax ] cmp eax , hexvar jne hexvar movsx eax , byte ptr [ r14 + num ] lea rsi , [ r14 + num ] test eax , eax mov byte ptr [ rdx - num ] , al mov r14 , rsi cmove r15 , rdx movsx eax , byte ptr [ rsi ] test al , al je hexvar cmp al , hexvar je hexvar add rdx , num cmp eax , hexvar lea rsi , [ r14 + num ] jne hexvar mov byte ptr [ rdx - num ] , num mov r15 , rdx mov r14 , rsi jmp hexvar nop cmp al , hexvar mov byte ptr [ rdx ] , num sete al movzx eax , al add r14 , rax test r15 , r15 cmove r15 , rdx cmp ebx , hexvar jne hexvar mov esi , hexvar mov rdi , r12 call hexvar test rax , rax je hexvar mov rdi , r12 call hexvar mov esi , hexvar mov r15 , rax mov rdi , rax call hexvar mov rcx , r13 mov byte ptr [ rax ] , hexvar mov rdx , r15 mov esi , hexvar mov rdi , rbp call hexvar mov rdi , r15 call hexvar movsx eax , byte ptr [ r14 ] test al , al jne hexvar mov rdi , r12 call hexvar mov eax , num add rsp , num pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbp , qword ptr [ rsi + hexvar ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax test rbp , rbp je hexvar lea r12 , [ rip + hexvar ] lea r14 , [ rsp + hexvar ] mov r13 , rsi mov r15d , hexvar mov rax , qword ptr [ rbp + num ] cmp dword ptr [ rax + num ] , num jne hexvar mov rbx , qword ptr [ rbp + hexvar ] test rbx , rbx je hexvar movzx edx , word ptr [ rbx + hexvar ] and dx , hexvar cmp dx , hexvar je hexvar mov r10 , qword ptr [ rbp + hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov qword ptr [ rsp + hexvar ] , rbp mov rax , qword ptr [ r10 + hexvar ] mov rcx , qword ptr [ rdx + hexvar ] mov qword ptr [ rsp + hexvar ] , rax movzx eax , byte ptr [ r10 + hexvar ] shr al , num and eax , num test eax , eax mov dword ptr [ rsp + hexvar ] , eax je hexvar movzx esi , byte ptr [ rcx + num ] mov rax , qword ptr [ r10 + hexvar ] xor edx , edx div rsi
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar slti v0 , a0 , hexvar beqz v0 , hexvar sw gp , hexvar ( sp ) slti v0 , a0 , hexvar beqz v0 , hexvar addiu v1 , zero , num addiu v0 , a0 , - hexvar sltu v0 , v1 , v0 beqz v0 , hexvar addiu v0 , zero , num move a1 , a0 lui a0 , hexvar addiu a0 , a0 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sltu v0 , zero , v0 lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu v0 , a0 , - hexvar addiu v1 , zero , hexvar sltu v0 , v1 , v0 bnez v0 , hexvar move a1 , a0 b hexvar addiu v0 , zero , num
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar leave ret
push r13 push r12 push rbp push rbx sub rsp , num test rdx , rdx je hexvar mov r13d , edi mov rbp , rsi mov rbx , rdx xor r12d , r12d jmp hexvar nop dword ptr [ rax ] test rax , rax je hexvar add r12 , rax add rbp , rax sub rbx , rax je hexvar mov rdx , rbx mov rsi , rbp mov edi , r13d call hexvar cmp rax , - num jne hexvar add rsp , num mov rax , r12 pop rbx pop rbp pop r12 pop r13 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) lw s0 , - hexvar ( gp ) lw v0 , ( s0 ) sw v0 , hexvar ( sp ) addiu a1 , sp , hexvar sw a1 , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v1 , ( s0 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar leave ret
push rax mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rip + hexvar ] , num mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar test eax , eax je hexvar mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov eax , num pop rcx ret
push rbp mov rbp , rsp sub rsp , hexvar mov edi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov edi , hexvar mov qword ptr [ rax + hexvar ] , rdi mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push edi push esi push ebx call hexvar add eax , hexvar mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebx ] test eax , eax je hexvar sub esp , num push esi push eax call edi add esp , hexvar test eax , eax jne hexvar add ebx , num mov eax , dword ptr [ ebx ] test eax , eax jne hexvar jmp hexvar mov eax , dword ptr [ ebx ] pop ebx pop esi pop edi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , ecx xor eax , eax mov cl , al mov eax , dword ptr [ ebp - hexvar ] movsx edx , byte ptr [ eax ] sub edx , hexvar cmp edx , num mov byte ptr [ ebp - hexvar ] , cl ja hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] cmp eax , ecx sete dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r3 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r3 , r1 , lsl num ] subs r6 , r0 , num str r3 , [ sp ] beq hexvar mov r5 , num bl hexvar mov fp , r5 mov r7 , r0 str r5 , [ sp , hexvar ] mov sb , r5 str r5 , [ sp , num ] mov sl , r5 mov r8 , r5 b hexvar ldrb r1 , [ r4 , hexvar ] add r3 , r4 , hexvar cmp r1 , hexvar bne hexvar ldrb r1 , [ r4 , hexvar ] cmp r1 , hexvar ldrbeq r1 , [ r4 , hexvar ] cmp r1 , num bne hexvar str r8 , [ r7 ] mov r0 , r6 bl hexvar subs r4 , r0 , num bne hexvar ldr r6 , [ r7 ] cmp r6 , num bne hexvar ldr r3 , [ sp ] cmp r3 , num beq hexvar cmp fp , num add r5 , r5 , num bne hexvar mov r0 , r5 bl hexvar mov sl , r0 mov r5 , r0 mov r0 , sb bl hexvar mov r3 , num strb r3 , [ r5 ] mov r0 , sl add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] add rsi , - hexvar mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] sub rax , num setb cl movzx edx , cl mov esi , edx mov rsi , qword ptr [ rsi * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rsi mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + rcx * num + hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax add rsp , hexvar pop rbp ret
push ebp push edi push esi push ebx call hexvar add ecx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov ebx , ecx mov dword ptr [ esp + hexvar ] , ecx mov ebp , dword ptr [ esp + hexvar ] lea edi , [ esi + num ] mov eax , dword ptr [ edx ] mov dword ptr [ esp + hexvar ] , edx and edi , hexvar add edi , hexvar add eax , edi push eax push dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , ecx call hexvar add esp , hexvar test eax , eax mov ecx , eax je hexvar mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , ecx sub esp , num mov eax , dword ptr [ edx ] lea ebx , [ ecx + eax ] add edi , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ edx ] , edi push ebx push num push num call dword ptr [ eax + hexvar ] lea eax , [ ebx + num ] add esp , hexvar mov edi , dword ptr [ ebp + num ] push eax mov eax , esi cdq push edx push esi call dword ptr [ edi + hexvar ] lea edx , [ ebx + num ] add esp , hexvar mov eax , dword ptr [ ebp + num ] lea edi , [ ebx + hexvar ] push edx push num push hexvar call dword ptr [ eax + hexvar ] add esp , hexvar xor edx , edx mov eax , hexvar mov dword ptr [ ebx + hexvar ] , hexvar mov word ptr [ ebx + hexvar ] , ax mov word ptr [ ebx + hexvar ] , dx push esi push dword ptr [ esp + hexvar ] push edi mov ebx , dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test esi , num mov ecx , dword ptr [ esp + hexvar ] je hexvar nop mov byte ptr [ edi + esi ] , num add esi , num test esi , num jne hexvar add esp , hexvar mov eax , ecx pop ebx pop esi pop edi pop ebp ret
push rbp push r14 push rbx mov rbx , rdi cmp dword ptr [ rdi + hexvar ] , esi jge hexvar mov ebp , esi mov rdi , rbx call hexvar test rax , rax je hexvar mov r14 , rax mov rdi , qword ptr [ rbx ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx ] , r14 mov dword ptr [ rbx + hexvar ] , ebp jmp hexvar xor ebx , ebx mov rax , rbx pop rbx pop r14 pop rbp ret
push r15 push r14 mov r14 , rdi push r13 push r12 mov r13 , rdx push rbp push rbx add rdi , num mov r12 , rsi sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rax , qword ptr [ rdi + hexvar ] lea rcx , [ rsp + hexvar ] lea rbx , [ rsp + hexvar ] mov qword ptr [ rsp ] , rdi mov rsi , rbx mov qword ptr [ rsp + num ] , rcx movdqu xmm0 , xmmword ptr [ rax ] mov r15 , qword ptr [ rax + hexvar ] mov rbp , qword ptr [ rax + hexvar ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 mov qword ptr [ rsp + hexvar ] , rax movdqu xmm0 , xmmword ptr [ rax + hexvar ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 movdqu xmm0 , xmmword ptr [ rax + hexvar ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 movdqu xmm0 , xmmword ptr [ rax + hexvar ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 movdqu xmm0 , xmmword ptr [ rax + hexvar ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 mov rdx , qword ptr [ rax + hexvar ] mov qword ptr [ rsp + hexvar ] , num mov qword ptr [ rsp + hexvar ] , rdx mov rdx , rcx mov qword ptr [ rsp + hexvar ] , num call hexvar mov rcx , qword ptr [ rsp + num ] mov rdx , r13 mov esi , hexvar mov rdi , rcx call r12
mov eax , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ eax ] test eax , eax je hexvar sub esp , hexvar lea edx , [ ebx + hexvar ] push edx lea ecx , [ ebx + hexvar ] mov edx , hexvar call hexvar add esp , hexvar mov byte ptr [ ebx + hexvar ] , num jmp hexvar
push r15 push r14 mov r10 , rdx push r13 push r12 lea rdx , [ rcx + rcx * num ] push rbp push rbx mov r15d , esi sub rsp , hexvar mov r13 , qword ptr [ rdi + hexvar ] mov qword ptr [ rsp + num ] , rdi mov rax , qword ptr [ r13 + hexvar ] lea r14 , [ rax + rdx * num ] mov rsi , qword ptr [ r14 + num ] test rsi , rsi jle hexvar mov eax , r15d mov r11 , rcx mov ecx , r10d and eax , num mov dword ptr [ rsp + hexvar ] , r15d mov r9 , r8 mov dword ptr [ rsp + num ] , eax mov eax , r15d xor ebx , ebx and eax , num mov r15 , r10 mov qword ptr [ rsp + hexvar ] , r11 mov dword ptr [ rsp + hexvar ] , eax lea rax , [ r8 + r8 * num ] shl rax , num mov qword ptr [ rsp + hexvar ] , rax mov eax , num shl rax , cl mov qword ptr [ rsp + hexvar ] , rax not rax mov qword ptr [ rsp + hexvar ] , rax jmp hexvar nop dword ptr [ rax ] cmp dl , num je hexvar cmp dl , num je hexvar add rbx , num cmp rbx , rsi jge hexvar mov rax , qword ptr [ r14 + hexvar ] mov rbp , qword ptr [ rax + rbx * num ] mov rax , rbp shl rax , num add rax , qword ptr [ r13 ] movzx edx , byte ptr [ rax + num ] cmp dl , num jne hexvar mov ecx , dword ptr [ rsp + hexvar ] test ecx , ecx je hexvar cmp qword ptr [ rax ] , r15 jne hexvar add rsp , hexvar mov eax , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] lea esi , [ ebx + hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp + hexvar ] , eax mov ecx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx xor ecx , ecx mov ecx , dword ptr [ eax + hexvar ] mov dword ptr [ esp + hexvar ] , ecx add ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ esi ] test eax , eax mov ebp , ecx jne hexvar mov dword ptr [ esi ] , num sub esp , hexvar mov ecx , ebp push dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] call hexvar mov dword ptr [ esp + hexvar ] , eax add esp , hexvar test byte ptr [ esi ] , num jne hexvar mov edx , dword ptr [ esp + hexvar ] xor eax , eax test edx , edx setne al jmp hexvar lea esi , [ esi ] test al , num jne hexvar test al , num jne hexvar mov eax , num mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push r13 push r12 push rbp push rbx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rax , qword ptr [ rdi + hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar xor eax , eax mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar test rdx , rdx je hexvar cmp qword ptr [ rip ] , num je hexvar mov r15 , rdi test rdi , rdi je hexvar mov r14 , rsi test rsi , rsi je hexvar mov rbx , rdx lea rdi , [ rdx + num ] lea rsi , [ rdx + hexvar ] lea r12 , [ rdx + hexvar ] lea r13 , [ rdx + hexvar ] mov rdx , r12 mov rcx , r13 xor r8d , r8d xor eax , eax call hexvar test eax , eax jne hexvar mov r8 , qword ptr [ r13 ] mov rax , qword ptr [ r12 ] xorps xmm0 , xmm0 movups xmmword ptr [ rsp + hexvar ] , xmm0 mov qword ptr [ rsp + num ] , rax mov dword ptr [ rsp + hexvar ] , num mov qword ptr [ rsp ] , num mov ecx , num mov rdi , r15 mov rsi , r14 mov edx , num mov r9d , num xor eax , eax call hexvar mov ebp , eax mov eax , num test ebp , ebp je hexvar mov rdi , rbx call hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp sub esp , num movzx eax , byte ptr [ hexvar ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , esp mov dword ptr [ eax ] , num call hexvar movzx ecx , al mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx mov eax , esp mov dword ptr [ eax ] , hexvar call hexvar mov eax , esp mov dword ptr [ eax ] , hexvar call hexvar mov eax , esp mov dword ptr [ eax ] , hexvar call hexvar mov eax , dword ptr [ hexvar ] jmp eax add esp , num pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rsi mov rdi , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + num ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax ] mov rdi , qword ptr [ rbp - hexvar ] mov edx , hexvar call hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsp , rbp pop rbp ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , num mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar cmp eax , num je hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx + num ] add ecx , num shl ecx , num mov edx , dword ptr [ ebp - num ] add edx , num mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ ebp - num ] mov edx , dword ptr [ edx + num ] mov dword ptr [ ecx + edx * num ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax + num ] add ecx , num mov dword ptr [ eax + num ] , ecx mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - hexvar ] , eax jne hexvar mov eax , dword ptr [ hexvar ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] sub eax , ecx cmp eax , num jl hexvar mov eax , dword ptr [ ebp - num ] add eax , - num mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , num call hexvar cmp eax , num jne hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , num call hexvar cmp eax , num jne hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] sub eax , ecx setl bl movzx ecx , bl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] sub eax , ecx setg dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , num mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] sub eax , ecx mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar move a0 , a1 sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar move s0 , a1 addiu v0 , v0 , - num sltiu v0 , v0 , num beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a0 , s0 bal hexvar lui s0 , hexvar lw gp , hexvar ( sp ) move a0 , v0 lw t9 , - hexvar ( gp ) jalr t9 lw a1 , hexvar ( s0 ) lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw a0 , hexvar ( s0 ) lw ra , hexvar ( sp ) addiu v0 , zero , num lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ hexvar ] , num mov dword ptr [ ebp - num ] , eax je hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jne hexvar cmp dword ptr [ hexvar ] , num mov al , num mov byte ptr [ ebp - num ] , al je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] movsx ecx , byte ptr [ ecx + num ] cmp ecx , hexvar sete dl and dl , num movzx ecx , dl add ecx , num cmp byte ptr [ eax + ecx ] , num mov dl , num mov byte ptr [ ebp - num ] , dl je hexvar cmp dword ptr [ hexvar ] , num jne hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar test al , num mov al , num mov byte ptr [ ebp - num ] , al jne hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 move s2 , a1 move a0 , a1 jal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s1 , zero move s0 , zero move v0 , s0 move v1 , s1 lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar sltiu v0 , s0 , hexvar bnez v0 , hexvar addiu v0 , zero , num srl s0 , s0 , num sltiu v1 , s0 , hexvar beqz v1 , hexvar addiu v0 , v0 , num move s1 , v0 lw a0 , ( s2 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rdx mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdi mov qword ptr [ rcx ] , num mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rcx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] cmp rax , num setl cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rcx ] mov esi , dword ptr [ rax + rdx * num ] mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rcx ] mov edi , dword ptr [ rax + rdx * num ] mov dword ptr [ rbp - hexvar ] , esi mov dword ptr [ rbp - hexvar ] , edi mov eax , dword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rbp - hexvar ] xor eax , ecx mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rdx ] mov rdi , qword ptr [ rbp - hexvar ] mov r8 , qword ptr [ rdi ] mov dword ptr [ rsi + r8 * num ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] add rcx , num mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rcx jmp hexvar mov rsp , rbp pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov rbx , rcx mov r15 , rdx mov r12 , rsi mov r14 , rdi mov rdi , rcx call hexvar xor r13d , r13d cmp rax , num jb hexvar mov esi , hexvar mov edx , num mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar cmp rax , num jb hexvar mov rbp , rax mov esi , hexvar mov edx , num mov rdi , rbx call hexvar test eax , eax je hexvar cmp rbp , num jb hexvar mov esi , hexvar mov edx , num mov rdi , rbx call hexvar test eax , eax jne hexvar mov ebp , num mov r14d , num jmp hexvar call hexvar mov rax , qword ptr [ rax ] add rbx , num nop word ptr cs : [ rax + rax ] nop movzx ecx , byte ptr [ rbx + num ] add rbx , num test byte ptr [ rax + rcx * num + num ] , hexvar jne hexvar mov r13d , num mov rdi , rbx call hexvar cmp rax , num jae hexvar mov rdi , r15 call hexvar mov rdi , r14 mov rsi , r12 mov edx , eax mov ecx , r13d mov r8 , rbx call hexvar mov rbp , rax test rax , rax jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebp , ebp mov esi , hexvar mov ecx , hexvar mov edi , num mov rdx , r15 mov r8 , rbx xor eax , eax call hexvar mov rax , rbp add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax cmp dword ptr [ hexvar ] , num sete al mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar jmp hexvar add esp , hexvar pop ebp ret
mov rax , qword ptr [ rdi + hexvar ] cmp qword ptr [ rsi + hexvar ] , rax mov rdx , rsi jg hexvar jl hexvar mov rax , qword ptr [ rdi + hexvar ] sub eax , dword ptr [ rsi + hexvar ] jne hexvar mov rsi , qword ptr [ rdi ] mov rdi , qword ptr [ rdx ] jmp hexvar nop dword ptr [ rax + rax ] mov eax , num ret nop mov eax , hexvar ret
push ebp mov ebp , esp sub esp , num call hexvar add eax , hexvar sub esp , num push num push dword ptr [ ebp + num ] call hexvar add esp , hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - num ] mov eax , dword ptr [ rdx + hexvar ] cmp eax , num mov edx , num mov esi , hexvar cmove rsi , rdx mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jge hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + rcx * num ] , num je hexvar mov rdi , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax + rcx * num ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rcx + hexvar ] jge hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rcx , qword ptr [ rbp - hexvar ] mov rdi , rax mov rsi , rcx mov edx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] add rcx , hexvar mov qword ptr [ rax ] , rcx mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar jmp hexvar add rsp , hexvar pop rbp ret
str fp , [ sp , - num ] ! add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] mov r3 , num mov r0 , r3 add sp , fp , num pop { fp } bx lr
push r15 push r14 mov r15 , rsi push r13 push r12 push rbp push rbx lea rbx , [ rdi + hexvar ] sub rsp , hexvar mov rax , qword ptr [ rdi + hexvar ] mov rdi , rbx mov qword ptr [ rsp + num ] , rdx mov r12d , dword ptr [ rax + hexvar ] mov r13d , dword ptr [ rax + hexvar ] call hexvar mov rdi , rax mov rbp , rax call hexvar lea rdi , [ rax + hexvar ] call hexvar sub rsp , num lea rcx , [ rip + hexvar ] mov r9 , r15 mov rdx , qword ptr [ rsp + hexvar ] mov r8 , rbp mov esi , num mov rdi , rax mov r14 , rax xor eax , eax push rdx mov rdx , - num call hexvar mov rdi , rbp call hexvar xor edx , edx mov ecx , r12d mov r8d , r13d mov rsi , r14 mov rdi , rbx call hexvar test eax , eax pop rdx pop rcx je hexvar mov rdi , r14 call hexvar mov eax , num add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push r15 push r14 push r13 push r12 mov r13 , rdx push rbp push rbx mov r12 , rdi mov rbx , rsi sub rsp , hexvar cmp byte ptr [ rip + hexvar ] , num jne hexvar mov r13 , qword ptr [ rdi + hexvar ] mov eax , dword ptr [ rip + hexvar ] mov ebp , hexvar test eax , eax cmovns ebp , eax test r13 , r13 je hexvar test rbx , rbx lea rcx , [ r12 + hexvar ] movsx r15d , bpl setne al xor r14d , r14d movzx r15d , r15b test al , al mov qword ptr [ rsp + num ] , rcx jne hexvar jmp hexvar nop mov rsi , qword ptr [ rsp + num ] mov rdi , r14 call hexvar add r14 , num cmp rbx , r14 jbe hexvar cmp r13 , r14 jbe hexvar mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + hexvar ] cmp rax , qword ptr [ rdi + hexvar ] jae hexvar lea rcx , [ rax + num ] mov qword ptr [ rdi + hexvar ] , rcx mov byte ptr [ rax ] , bpl cmp qword ptr [ r12 + hexvar ] , r14 ja hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar mov rsi , qword ptr [ rip + hexvar ] add r14 , num call hexvar cmp rbx , r14 ja hexvar nop dword ptr [ rax + rax ] add rbx , num movsx r15d , bpl lea r14 , [ r12 + hexvar ] cmp r13 , rbx movzx r15d , r15b ja hexvar jmp hexvar mov rsi , r14 mov rdi , rbx call hexvar add rbx , num cmp r13 , rbx jbe hexvar mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + hexvar ] cmp rax , qword ptr [ rdi + hexvar ] jae hexvar lea rdx , [ rax + num ] mov qword ptr [ rdi + hexvar ] , rdx mov byte ptr [ rax ] , bpl cmp qword ptr [ r12 + hexvar ] , rbx ja hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar mov rsi , qword ptr [ rip + hexvar ] add rbx , num call hexvar cmp r13 , rbx ja hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jmp edx mov eax , dword ptr [ ebp + num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ ebp + hexvar ] mov edx , esp mov dword ptr [ edx ] , ecx call hexvar mov byte ptr [ ebp - num ] , al movzx ecx , byte ptr [ ebp - num ] and ecx , num mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx movzx eax , byte ptr [ ebp - num ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov dword ptr [ ebp - num ] , hexvar mov eax , dword ptr [ hexvar ] jmp eax movzx eax , byte ptr [ ebp - num ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax movzx eax , byte ptr [ ebp - num ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax mov dword ptr [ edx + num ] , hexvar call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
xor eax , eax lea rdx , [ rip + hexvar ] cmp qword ptr [ rdi + hexvar ] , rdx je hexvar ret nop dword ptr [ rax ] cmp qword ptr [ rdi + hexvar ] , num je hexvar sub rsp , num call hexvar add rsp , num sub eax , num ret
push ebp mov ebp , esp sub esp , num mov dword ptr [ ebp - num ] , num mov byte ptr [ ebp - num ] , num mov byte ptr [ ebp - num ] , num mov byte ptr [ ebp - num ] , num mov byte ptr [ ebp - num ] , num cmp dword ptr [ ebp - num ] , num sete al and al , num movzx eax , al add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , num mov al , byte ptr [ ebp + num ] and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ hexvar ] test ecx , ecx setne al movzx ecx , al mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx movzx eax , byte ptr [ hexvar ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax movzx eax , byte ptr [ ebp - num ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ hexvar ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax movzx eax , byte ptr [ ebp - num ] and eax , num mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ hexvar ] , eax mov dl , byte ptr [ ebp - num ] and dl , num mov byte ptr [ hexvar ] , dl mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] add esp , num pop ebp ret
addiu sp , sp , - hexvar sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw s2 , ( v0 )
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , r9 mov r12 , r8 mov rbp , rcx mov r13 , rdx mov rbx , rsi mov r14d , edi call hexvar mov r15d , eax test eax , eax je hexvar mov eax , r15d add rsp , hexvar jmp hexvar mov r15 , rbx mov qword ptr [ rsp ] , rbp mov qword ptr [ rsp + num ] , r12 mov r10d , dword ptr [ rsp + hexvar ] mov rbp , qword ptr [ rsp + hexvar ] movsxd rax , r14d lea rax , [ rax + rax * num ] shl rax , num mov rax , qword ptr [ rax ] test rax , rax je hexvar mov rdi , r15 mov rsi , r13 mov rdx , qword ptr [ rsp ] mov rcx , qword ptr [ rsp + num ] mov r8 , qword ptr [ rsp + hexvar ] mov r9 , rbp push r10 push qword ptr [ rsp + hexvar ] push qword ptr [ rsp + hexvar ] push qword ptr [ rsp + hexvar ] push qword ptr [ rsp + hexvar ] push qword ptr [ rsp + hexvar ] call rax add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw s0 , ( v0 ) lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move a2 , v0 move a1 , s0 addiu a0 , zero , num lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp )
movzx eax , byte ptr [ rdi ] mov al , byte ptr [ rax + hexvar ] mov byte ptr [ rdi ] , al movzx eax , byte ptr [ rdi + num ] mov al , byte ptr [ rax + hexvar ] mov byte ptr [ rdi + num ] , al movzx eax , byte ptr [ rdi + num ] mov al , byte ptr [ rax + hexvar ] mov byte ptr [ rdi + num ] , al movzx eax , byte ptr [ rdi + num ] mov al , byte ptr [ rax + hexvar ] mov byte ptr [ rdi + num ] , al movzx eax , byte ptr [ rdi + num ] mov al , byte ptr [ rax + hexvar ] mov byte ptr [ rdi + num ] , al movzx eax , byte ptr [ rdi + num ] mov al , byte ptr [ rax + hexvar ] mov byte ptr [ rdi + num ] , al movzx eax , byte ptr [ rdi + num ] mov al , byte ptr [ rax + hexvar ] mov byte ptr [ rdi + num ] , al movzx eax , byte ptr [ rdi + num ] mov al , byte ptr [ rax + hexvar ] mov byte ptr [ rdi + num ] , al ret
sub rsp , hexvar mov rax , qword ptr [ rsp + hexvar ] mov r10 , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar add rsp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movsx ecx , byte ptr [ rax ] cmp ecx , num je hexvar call hexvar mov rax , qword ptr [ rax ] mov rcx , qword ptr [ rbp - hexvar ] movzx edx , byte ptr [ rcx ] movsxd rcx , edx movzx edx , word ptr [ rax + rcx * num ] and edx , hexvar cmp edx , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi mov edi , dword ptr [ ecx ] cmp eax , dword ptr [ edi ] setle bl mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov ecx , dword ptr [ ecx ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar cmp eax , num setne dl and dl , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax ] , dl mov dl , byte ptr [ eax ] mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar jmp hexvar lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num jne hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + hexvar ] mov eax , hexvar cmp rdx , rax je hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar nop leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lw a3 , hexvar ( fp ) lw a2 , hexvar ( fp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) beqz v0 , hexvar nop lw v0 , hexvar ( fp ) addiu v1 , v0 , - num lw v0 , hexvar ( fp ) addiu v0 , v0 , - num sw v0 , hexvar ( sp ) lw a3 , hexvar ( fp ) move a2 , v1 lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) lw v0 , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r0 ldr r0 , [ r0 , num ] sub sp , sp , num cmp r0 , num beq hexvar mov r8 , r3 ldr r3 , [ r0 ] cmp r3 , num beq hexvar ldr r4 , [ r0 , num ] str r3 , [ r5 , num ] mov r7 , r2 bl hexvar cmp r4 , num beq hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , r4 bl hexvar cmp r0 , num beq hexvar mov r0 , hexvar bl hexvar mov r2 , hexvar mov r1 , num mov r6 , r0 bl hexvar mov r0 , r4 bl hexvar mov r2 , num mov r1 , num ldr r3 , [ r5 , num ] cmp r7 , r2 stmib r6 , { r0 , r1 , r2 } str r3 , [ r6 ] str r6 , [ r5 , num ] bne hexvar cmp r8 , num bls hexvar ldr r7 , [ pc , hexvar ] mov r0 , r7 bl hexvar mov r4 , r0 ldr r0 , [ r6 , num ] bl hexvar add r0 , r4 , r0 add r0 , r0 , num bl hexvar ldr r2 , [ r5 , num ] mov r1 , num ldr r2 , [ r2 , num ] ldr r3 , [ pc , hexvar ] str r2 , [ sp , num ] str r7 , [ sp ] mvn r2 , num mov r6 , r0 bl hexvar ldr r3 , [ r5 , num ] ldr r0 , [ r3 , num ] bl hexvar ldr r0 , [ r5 , num ] ldr r3 , [ r0 ] str r3 , [ r5 , num ] bl hexvar ldr r4 , [ r5 , num ] ldr r3 , [ r4 , hexvar ] cmp r3 , num beq hexvar ldr r7 , [ r4 , hexvar ] cmp r7 , num beq hexvar mov r0 , r7 bl hexvar mov r8 , r0 add r1 , r0 , num mov r0 , r7 bl hexvar ldr r3 , [ r5 , num ] str r0 , [ r4 , hexvar ] ldr r0 , [ r3 , hexvar ] mov r2 , num add r0 , r0 , r8 ldr r1 , [ pc , hexvar ] bl hexvar ldr r4 , [ r5 , num ] cmp r4 , num bne hexvar bl hexvar adds r4 , r4 , num bne hexvar mov r0 , r4 add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) beqz a0 , hexvar lw v0 , ( a1 )
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp + hexvar ] mov ecx , eax add ecx , - num mov dword ptr [ ebp + hexvar ] , ecx cmp eax , num je hexvar mov eax , dword ptr [ ebp + num ] mov cl , byte ptr [ eax ] mov byte ptr [ ebp - num ] , cl mov dword ptr [ ebp - hexvar ] , num cmp dword ptr [ ebp - hexvar ] , num jge hexvar movzx eax , byte ptr [ ebp - num ] and eax , hexvar cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dl , cl mov eax , dword ptr [ ebp + hexvar ] mov ecx , eax add ecx , num mov dword ptr [ ebp + hexvar ] , ecx mov byte ptr [ eax ] , dl movzx eax , byte ptr [ ebp - num ] shl eax , num mov dl , al mov byte ptr [ ebp - num ] , dl mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] sub eax , num mov dword ptr [ ebp + hexvar ] , eax mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp + num ] , eax jmp hexvar add esp , hexvar pop esi pop ebp ret
push rbp push rbx sub rsp , hexvar mov rbx , rdi mov qword ptr [ rsp + hexvar ] , num mov rdi , qword ptr [ rsi + hexvar ] lea rsi , [ rsp + hexvar ] call hexvar test eax , eax jle hexvar mov ebp , eax mov edi , num call hexvar mov r9 , qword ptr [ rsp + hexvar ] mov dword ptr [ rsp ] , ebp mov rdi , rbx mov rsi , rax xor edx , edx mov ecx , num xor r8d , r8d call hexvar mov ecx , eax mov eax , num test ecx , ecx je hexvar add rsp , hexvar pop rbx pop rbp ret
push r13 push r12 mov r13 , rdx push rbp push rbx mov rbp , rdi mov r12 , rsi sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov eax , dword ptr [ rdi + num ] test eax , eax je hexvar xor ebx , ebx nop dword ptr [ rax ] mov rsi , qword ptr [ rbp ] mov edi , hexvar add ebx , num call hexvar cmp ebx , dword ptr [ rbp + num ] jb hexvar mov rbx , rsp lea rcx , [ rip + hexvar ] mov r8 , r13 mov edx , hexvar mov esi , num mov rdi , rbx xor eax , eax call hexvar mov rdi , qword ptr [ rbp ] lea rdx , [ rip + hexvar ] mov rcx , r12 xor eax , eax mov r8 , rbx mov esi , num call hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov eax , num jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jge hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar cmp eax , num jne hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , lr } mov r4 , r0 bl hexvar cmp r0 , num bne hexvar ldr r3 , [ r4 , hexvar ] add r2 , r3 , hexvar ldr r0 , [ r2 , hexvar ] lsl r0 , r0 , hexvar ldr r2 , [ r3 , num ] ldr r1 , [ pc , hexvar ] cmp r2 , r1 ldreq r3 , [ r3 , hexvar ] beq hexvar ldr r1 , [ pc , hexvar ] cmp r2 , r1 addeq r2 , r3 , hexvar ldreq r2 , [ r2 , hexvar ] ldreq r3 , [ r3 , hexvar ] subeq r3 , r2 , r3 movne r3 , num add r0 , r0 , r3 pop { r4 , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] cmp edi , num lea edi , [ hexvar ] lea ebx , [ hexvar ] cmovne ebx , edi mov edi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi lea esi , [ hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop esi pop edi pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move s0 , v0 beq s0 , v0 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu v0 , zero , num lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp )
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] add ecx , - num adc esi , - num mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi + num ] , ecx mov dword ptr [ edi ] , eax mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar beqz a0 , hexvar sw gp , hexvar ( sp ) bnez a1 , hexvar move s0 , a0 lw v0 , hexvar ( a0 ) addiu v0 , v0 , - num sw v0 , hexvar ( a0 ) blez v0 , hexvar addiu v0 , zero , num lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , - hexvar addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) b hexvar move v0 , zero addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , - hexvar addiu a2 , zero , hexvar addiu a1 , zero , - num addiu a0 , a0 , hexvar lw t9 , - hexvar ( gp )
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] lea esi , [ ebp - hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax lea eax , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar sub esp , num mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar fstp dword ptr [ ebp - hexvar ] movss xmm0 , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] movss dword ptr [ eax + hexvar ] , xmm0 mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ ebp + num ] movsx ecx , byte ptr [ ebp + num ] add ecx , - hexvar mov edx , ecx sub edx , hexvar mov byte ptr [ ebp - num ] , al mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 move s1 , a1 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) move a0 , a1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a2 , v0 move a1 , s1 addiu a0 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz s0 , hexvar addiu a2 , zero , num addiu a1 , sp , hexvar move a0 , s0 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) move s0 , v0 addiu a2 , zero , num lui a1 , hexvar addiu a1 , a1 , - hexvar addiu a0 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a2 , v0 move a1 , s0 addiu a0 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) addiu a2 , zero , num lui a1 , hexvar addiu a1 , a1 , - hexvar addiu a0 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) addiu a0 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop
push { r4 , r5 , r6 , lr } mov r6 , r1 mov r5 , r2 ldr r3 , [ r2 , hexvar ] cmp r3 , num beq hexvar ldr r4 , [ r3 , num ] mov r2 , r1 mov r3 , num mov r1 , r0 mov r0 , r5 blx r4 mov r4 , r0 cmn r0 , num beq hexvar add r3 , r5 , hexvar ldm r3 , { r2 , r3 } adds r0 , r2 , r4 adc r1 , r3 , num str r0 , [ r5 , hexvar ] str r1 , [ r5 , hexvar ] cmp r6 , r4 beq hexvar bl hexvar mov r3 , hexvar str r3 , [ r0 ] mov r0 , num bl hexvar mov r0 , r4 pop { r4 , r5 , r6 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rax , qword ptr [ rax + rcx * num ] movsd xmm0 , qword ptr [ rax + hexvar ] add rsp , hexvar pop rbp ret
push ebx sub esp , num mov ebx , dword ptr [ esp + hexvar ] test ebx , ebx je hexvar mov ecx , num mov edx , hexvar mov eax , dword ptr [ esp + hexvar ] call hexvar test eax , eax je hexvar mov dword ptr [ eax + hexvar ] , ebx add esp , num pop ebx ret
test rdi , rdi mov eax , hexvar mov edx , hexvar cmove edx , eax mov ecx , hexvar mov r8d , hexvar mov esi , hexvar jmp hexvar mov ecx , hexvar mov eax , hexvar nop dword ptr [ rax ] cmp ecx , hexvar jg hexvar cmp ecx , hexvar jg hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov ecx , hexvar mov eax , hexvar jmp hexvar nop dword ptr [ rax ] cmp ecx , hexvar jle hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov ecx , edx jmp hexvar nop dword ptr [ rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar mov ecx , dword ptr [ rsp - num ] cmp ecx , num mov ecx , hexvar cmove ecx , r8d jmp hexvar mov ecx , hexvar mov eax , hexvar jmp hexvar mov rcx , qword ptr [ rdi + hexvar ] shr rcx , hexvar mov dword ptr [ rsp - num ] , ecx mov ecx , dword ptr [ rsp - num ] cmp ecx , num mov ecx , hexvar cmove ecx , esi jmp hexvar mov ecx , hexvar mov eax , hexvar jmp hexvar ret
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar cmp rdi , rsi mov qword ptr [ rsp + num ] , rcx mov dword ptr [ rsp + hexvar ] , r8d jbe hexvar lea rcx , [ rdi - num ] movsxd rbp , r9d mov rax , rdi sub rax , rsi mov rbx , rdi mov r12 , rdx imul rcx , rbp mov qword ptr [ rsp + hexvar ] , rax xor r15d , r15d mov r13 , rcx nop mov rax , r13 xor edx , edx mov rdi , qword ptr [ rsp + num ] div rbx movzx edx , word ptr [ r12 + r15 * num ] sub r13 , rbp add r15 , num sub r9d , eax mov r14 , rax mov eax , dword ptr [ rsp + hexvar ] lea esi , [ r9 + rax ] xor eax , eax call hexvar cmp qword ptr [ rsp + hexvar ] , r15 mov r9d , r14d jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov byte ptr [ ebp - num ] , num movsd xmm0 , qword ptr [ hexvar ] movsd qword ptr [ ebp - num ] , xmm0 mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - num ] or eax , ecx mov ecx , hexvar mov edx , hexvar cmovne edx , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov byte ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar movsd xmm0 , qword ptr [ ebp + num ] movsd qword ptr [ hexvar ] , xmm0 mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
sub rsp , hexvar mov dword ptr [ rsp + hexvar ] , num mov rax , qword ptr [ rip ] jmp rax mov eax , dword ptr [ rsp + hexvar ] sub eax , num setl cl movzx edx , cl mov esi , edx mov rsi , qword ptr [ rsi * num ] mov dword ptr [ rsp + hexvar ] , eax jmp rsi lea rax , [ rsp + hexvar ] mov rdi , rax mov qword ptr [ rsp + hexvar ] , rax call hexvar movsxd rdi , dword ptr [ rsp + hexvar ] imul rdi , rdi , hexvar lea rsi , [ rdi ] movsxd rdx , dword ptr [ rdi ] mov rdi , qword ptr [ rsp + hexvar ] mov dword ptr [ rsp + hexvar ] , eax call hexvar lea rdx , [ rsp + hexvar ] mov rdi , qword ptr [ rsp + hexvar ] mov rsi , rdx mov dword ptr [ rsp + hexvar ] , eax mov qword ptr [ rsp + hexvar ] , rdx call hexvar movsxd rdx , dword ptr [ rsp + hexvar ] mov ecx , edx imul rdx , rdx , hexvar lea rdx , [ rdx ] mov r8d , num mov esi , hexvar mov rdi , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + num ] , rsi mov r9 , qword ptr [ rsp + num ] mov dword ptr [ rsp + num ] , ecx mov rcx , r9 mov r10d , dword ptr [ rsp + num ] mov r9d , r10d mov dword ptr [ rsp ] , eax call hexvar test eax , eax setne r11b movzx eax , r11b mov ecx , eax mov rcx , qword ptr [ rcx * num ] jmp rcx mov dword ptr [ rsp + hexvar ] , num mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rip ] jmp rax mov eax , dword ptr [ rsp + hexvar ] add eax , num mov dword ptr [ rsp + hexvar ] , eax mov rcx , qword ptr [ rip ] jmp rcx mov dword ptr [ rsp + hexvar ] , num mov rax , qword ptr [ rip ] jmp rax mov eax , dword ptr [ rsp + hexvar ] add rsp , hexvar ret
push { r4 , r5 , r6 , lr } mov r5 , r0 mov r0 , hexvar bl hexvar cmp r5 , num mov r4 , r0 beq hexvar mov r0 , r5 bl hexvar mov r5 , r0 mov r3 , num str r5 , [ r4 ] str r3 , [ r4 , num ] str r3 , [ r4 , num ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] mov r0 , r4 pop { r4 , r5 , r6 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] add eax , hexvar push eax call hexvar test eax , eax setne al add esp , hexvar movzx eax , al pop ebx ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + num ] mov eax , dword ptr [ eax ] sub esp , num lea ecx , [ ebp - hexvar ] push ecx push edx push eax call hexvar add esp , hexvar sub esp , hexvar push eax call hexvar add esp , hexvar mov edx , dword ptr [ ebp - hexvar ] xor edx , dword ptr gs : [ hexvar ] je hexvar call hexvar mov ebx , dword ptr [ ebp - num ] leave ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx ] mov esi , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ esi ] mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar lw v0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) bal hexvar sw v0 , hexvar ( sp ) lw gp , hexvar ( sp ) bltz v0 , hexvar move s0 , v0 lw ra , hexvar ( sp ) move v0 , s0 lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop addiu v1 , zero , hexvar lw v0 , ( v0 ) bne v0 , v1 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) move a2 , a1 move a1 , a0 move a0 , zero jal hexvar nop lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) beqz a1 , hexvar sw gp , hexvar ( sp ) lb v1 , ( a1 ) addiu v0 , zero , num beq v1 , v0 , hexvar nop lw v1 , num ( a1 )
push rbp push rbx mov rbp , rdi sub rsp , num mov rbx , qword ptr [ rip + hexvar ] test rbx , rbx je hexvar mov rdx , qword ptr [ rbx + hexvar ] cmp rdx , rbp jbe hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdx , qword ptr [ rax + hexvar ] mov rbx , rax mov rax , rdx add rax , qword ptr [ rbx + hexvar ] cmp rbp , rax jb hexvar mov rax , qword ptr [ rbx + hexvar ] test rax , rax jne hexvar cmp byte ptr [ rip + hexvar ] , num jne hexvar call hexvar test al , al je hexvar mov rax , qword ptr [ rbx + hexvar ] test rax , rax jne hexvar mov ecx , hexvar mov edx , hexvar mov esi , hexvar mov edi , hexvar call hexvar sub rbp , rdx mov rax , qword ptr [ rbx + hexvar ] cmp rbp , hexvar jbe hexvar nop dword ptr [ rax ] sub rbp , hexvar mov rax , qword ptr [ rax + hexvar ] cmp rbp , hexvar ja hexvar add rbp , num add rsp , num shl rbp , num lea rax , [ rax + rbp + num ] pop rbx pop rbp ret
mov eax , edi lea rdx , [ rip + hexvar ] mov ecx , edi shr al , num and ecx , hexvar and eax , num mov eax , dword ptr [ rdx + rax * num ] shr eax , cl and eax , num ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , num ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] add r0 , r3 , hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mvn r1 , num bl hexvar str r0 , [ sp , hexvar ] b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] sub r2 , r3 , num ldr r3 , [ sp , hexvar ] str r2 , [ r3 , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num ble hexvar mov r3 , num b hexvar ldr r0 , [ sp , hexvar ] bl hexvar ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r0 , [ sp , hexvar ] blx r3 ldr r3 , [ sp , hexvar ] add r3 , r3 , hexvar mov r2 , r3 ldr r1 , [ sp , hexvar ] mov r0 , num bl hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbx test rdi , rdi je hexvar mov rbx , rdi mov edx , hexvar mov edi , num mov esi , hexvar mov ecx , hexvar call hexvar mov ecx , hexvar nop dword ptr [ rax + rax ] mov rax , qword ptr [ rcx ] cmp rax , rbx je hexvar lea rcx , [ rax + hexvar ] test rax , rax jne hexvar test rax , rax je hexvar mov rcx , qword ptr [ rbx + hexvar ] test rcx , rcx je hexvar mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbx + hexvar ] test rax , rax je hexvar mov qword ptr [ rax + hexvar ] , rcx cmp qword ptr [ rip + hexvar ] , rbx je hexvar cmp qword ptr [ rip + hexvar ] , rbx je hexvar mov rdi , rbx xor esi , esi call hexvar mov ebx , num jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx mov eax , ebx pop rbx ret
push { r4 , r5 } mov r4 , num mov r5 , num ldr r3 , [ pc , hexvar ] str r4 , [ r0 , hexvar ] str r5 , [ r0 , hexvar ] pop { r4 , r5 } str r3 , [ r0 , hexvar ] bx lr addseq pc , r5 , r6 , lsl r6
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov dword ptr [ esp + hexvar ] , eax lea eax , [ esp + hexvar ] mov edx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , edx xor edx , edx push eax call hexvar add esp , hexvar test eax , eax je hexvar lea esi , [ ebx + hexvar ] push eax push dword ptr [ ebx + hexvar ] push hexvar push esi call hexvar add esp , hexvar mov eax , esi mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , fp , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r4 ] add r1 , sp , num mov r0 , num str r3 , [ sp , hexvar ] bl hexvar cmp r0 , num beq hexvar add r0 , sp , num bl hexvar ldr r0 , [ sp , num ] ldr r2 , [ sp , num ] ldr r3 , [ pc , hexvar ] asr r1 , r0 , hexvar smlal r0 , r1 , r3 , r2 ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , fp , pc }
push { r4 , r5 , r6 , lr } mov r4 , r3 ldrb r3 , [ r2 ] and r3 , r3 , num cmp r3 , num beq hexvar mov r3 , num str r3 , [ r4 ] mov r0 , num pop { r4 , r5 , r6 , pc }
push rax call hexvar test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num jne hexvar xor eax , eax pop rcx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] cmp dword ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp eax , dword ptr [ ebp - num ] jbe hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp + num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp + hexvar ] add ecx , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ esp ] , ecx call hexvar cmp eax , num sete dl and dl , num movzx eax , dl add esp , hexvar pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ esp ] , num call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ hexvar ] mov esi , dword ptr [ ebp - num ] mov dword ptr [ esi + num ] , edx mov edx , dword ptr [ ebp - num ] mov dword ptr [ hexvar ] , edx add esp , hexvar pop esi pop ebp ret
push edi mov eax , dword ptr [ esp + num ] mov ecx , dword ptr [ eax + hexvar ] test ecx , ecx je hexvar mov dword ptr [ ecx ] , num mov dword ptr [ ecx + hexvar ] , num lea edi , [ ecx + num ] and edi , hexvar sub ecx , edi add ecx , hexvar shr ecx , num mov eax , num rep stosd dword ptr es : [ edi ] , eax mov eax , num pop edi ret
test rdi , rdi je hexvar mov ecx , dword ptr [ rdi ] mov eax , num cmp ecx , hexvar jl hexvar xor eax , eax cmp ecx , hexvar setg al lea eax , [ rax * num + hexvar ] mov dword ptr [ rdi ] , eax xor eax , eax ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] cmp eax , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx ] mov edx , dword ptr [ edx + hexvar ] mov edx , dword ptr [ edx + hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call edx add esp , hexvar pop esi pop edi pop ebp ret
push r12 push rbp mov r12 , rdx push rbx mov rbx , rcx mov rdx , rdi mov rbp , rdi sub rsp , hexvar mov rsi , qword ptr [ rbx + num ] mov rdi , qword ptr [ rbx ] mov rcx , rsp mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar test eax , eax js hexvar mov rdx , qword ptr [ rsp + num ] xor eax , eax cmp rdx , r12 je hexvar lea rdi , [ rip + hexvar ] mov rcx , r12 mov rsi , rbp call hexvar mov eax , num mov rdi , qword ptr [ rsp + hexvar ] xor rdi , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
push r15 push r14 push r13 push r12 push rbp push rbx mov rbp , rdi sub rsp , hexvar mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi je hexvar mov rbx , qword ptr [ rdi + hexvar ] test rbx , rbx je hexvar mov rax , qword ptr [ rdi ] mov r10 , qword ptr [ rdi + hexvar ] mov r13 , qword ptr [ rdi + num ] mov r15d , dword ptr [ rdi + hexvar ] mov r14d , dword ptr [ rdi + hexvar ] mov qword ptr [ rbp + hexvar ] , rax mov qword ptr [ rsp + num ] , r10 call hexvar mov rdi , r13 call hexvar mov rdi , rbx mov r12 , rax call hexvar lea rdi , [ r12 + rax + num ] call hexvar lea rcx , [ rip + hexvar ] mov r9 , rbx mov r8 , r13 mov rdx , - num mov esi , num mov r12 , rax mov rdi , rax xor eax , eax call hexvar mov rdi , r13 call hexvar mov rdi , rbx call hexvar mov edi , hexvar call hexvar mov rdi , r12 mov rbx , rax call hexvar mov r10 , qword ptr [ rsp + num ] mov qword ptr [ rbx + num ] , rax mov rdi , r12 mov rax , qword ptr [ rbp + hexvar ] mov dword ptr [ rbx + hexvar ] , r15d mov dword ptr [ rbx + hexvar ] , r14d mov qword ptr [ rbp + hexvar ] , rbx mov qword ptr [ rbx + hexvar ] , r10 mov qword ptr [ rbx + hexvar ] , num mov qword ptr [ rbx ] , rax mov qword ptr [ rbx + hexvar ] , num mov qword ptr [ rbx + hexvar ] , num mov qword ptr [ rbx + hexvar ] , num call hexvar add rsp , hexvar mov eax , num pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , ecx mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx + num ] mov dword ptr [ esp ] , ecx call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp call hexvar add eax , hexvar cmp dword ptr [ ebp + num ] , hexvar ja hexvar mov edx , dword ptr [ ebp + num ] lea ecx , [ eax + hexvar ] mov eax , edx add eax , eax add eax , edx shl eax , num add eax , ecx mov eax , dword ptr [ eax ] jmp hexvar mov eax , hexvar pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r4 , num ldr r2 , [ pc , hexvar ] mov r3 , r0 ldrb r1 , [ r2 ] , num ldr r5 , [ r0 ] cmp r1 , r4 moveq r2 , r4 add r1 , r0 , hexvar str r1 , [ r0 , hexvar ] str r2 , [ r0 , hexvar ] sub sp , sp , num str r4 , [ r3 , num ] str r4 , [ r3 , num ] mov r0 , r5 add r6 , r3 , num bl hexvar mov r2 , r6 mov r1 , r0 mov r0 , r5 bl hexvar subs r7 , r0 , num beq hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , r4 bl hexvar mov r8 , r0 mov r0 , r5 bl hexvar mov r2 , r8 str r0 , [ sp ] mov r3 , r7 mov r1 , r4 mov r0 , num bl hexvar mov r0 , r6 add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , lr } b hexvar andeq fp , r3 , r4 , asr num andeq sb , r2 , ip , ror r3
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx cmp dword ptr [ rbp - hexvar ] , num je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov esi , ecx mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] lea rdx , [ rip + hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov eax , num leave ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push num push num push num push num push num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push eax push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sltiu v0 , v0 , num lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar movsd xmm0 , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rax , qword ptr [ rax + rcx * num ] movsd xmm1 , qword ptr [ rax + hexvar ] subsd xmm1 , qword ptr [ rbp - hexvar ] movaps xmm2 , xmmword ptr [ rip + hexvar ] pand xmm1 , xmm2 ucomisd xmm1 , xmm0 jb hexvar movsd xmm0 , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rax , qword ptr [ rax + rcx * num ] movsd qword ptr [ rax + hexvar ] , xmm0 mov rdi , qword ptr [ rbp - num ] movsd xmm0 , qword ptr [ rbp - hexvar ] movabs rsi , hexvar mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx + num ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ edi + num ] mov edi , dword ptr [ edi + num ] sub esi , ebx sbb edx , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edx jae hexvar jmp hexvar mov eax , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + num ] mov eax , dword ptr [ eax + num ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx + num ] mov edx , dword ptr [ edx + num ] sub esi , ecx sbb edx , eax setb bl and bl , num movzx eax , bl mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r4 , r1 ldr sb , [ pc , hexvar ] ldr ip , [ r1 , hexvar ] ldr r1 , [ sb ] sub sp , sp , hexvar cmp ip , num mov r7 , r0 mov r8 , r2 mov sl , r3 str r1 , [ sp , hexvar ] ldr r5 , [ r4 , hexvar ] ldrb r6 , [ sp , hexvar ] beq hexvar mov r1 , r5 mov r0 , r4 bl hexvar cmp r0 , num ble hexvar mov r1 , num add r3 , r0 , r5 mov r0 , num ldr r2 , [ r4 , num ] ldr r2 , [ r2 , r5 , lsl num ] stm r7 , { r1 , r2 } str r3 , [ r4 , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sb ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx mov ecx , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , ecx mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw ra , hexvar ( sp ) sltiu v0 , v0 , num jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi mov edi , dword ptr [ eax ] mov bl , byte ptr [ edi + hexvar ] and bl , num movzx edi , bl cmp edi , num setne bl mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ eax ] mov edx , dword ptr [ edx + hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ esi ] sub esp , hexvar mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , edi call ecx add esp , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , esi call ecx add esp , hexvar lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push esi sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , eax mov dword ptr [ esi ] , ecx call hexvar add esp , hexvar pop esi ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push { r4 , r5 , r6 , r7 , lr } sub sp , sp , hexvar mov r4 , r0 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] mov r3 , hexvar str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r0 , [ r0 , hexvar ] cmn r0 , num beq hexvar ldrb r3 , [ r4 , hexvar ] cmp r3 , num movne r0 , num beq hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc } andeq r0 , r0 , r0
push rbp push rbx sub rsp , num mov ebp , edi mov ebx , dword ptr [ rip + hexvar ] cmp byte ptr [ rip + hexvar ] , num jne hexvar add ebx , num cmp ebx , ebp jg hexvar mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + hexvar ] cmp rax , qword ptr [ rdi + hexvar ] jae hexvar lea rdx , [ rax + num ] mov qword ptr [ rdi + hexvar ] , rdx mov byte ptr [ rax ] , hexvar jmp hexvar sub ebp , ebx mov dword ptr [ rip + hexvar ] , ebp jmp hexvar mov esi , hexvar call hexvar jmp hexvar mov dword ptr [ rip + hexvar ] , ebp add rsp , num pop rbx pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , hexvar cmp edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx jae hexvar call hexvar mov dword ptr [ eax ] , hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] shl ecx , num mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
cmp rsi , rcx jne hexvar mov rax , rsi mov rsi , rdx mov rdx , rax jmp hexvar setbe al movzx eax , al lea eax , [ rax + rax ] add eax , - num ret
test rdi , rdi je hexvar mov word ptr [ rdi + hexvar ] , num xorps xmm0 , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 mov qword ptr [ rdi + hexvar ] , num mov qword ptr [ rdi + hexvar ] , num xor eax , eax ret
push { r4 , fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] mvn r3 , num mvn r4 , num str r3 , [ fp , - hexvar ] str r4 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] str r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] mov r4 , num mov r0 , r3 mov r1 , r4 bl hexvar mov r3 , r0 mov r4 , r1 ldr r2 , [ fp , - hexvar ] str r3 , [ r2 , num ] str r4 , [ r2 , hexvar ] ldr r3 , [ fp , - hexvar ] mov r4 , num mov r2 , r3 mov r3 , r4 sub r1 , fp , hexvar ldm r1 , { r0 , r1 } bl hexvar mov r3 , r0 mov r4 , r1 ldr r2 , [ fp , - hexvar ] str r3 , [ r2 , hexvar ] str r4 , [ r2 , hexvar ] mov r0 , r0 sub sp , fp , num pop { r4 , fp , pc }
sub rsp , hexvar mov rax , qword ptr [ rsp + hexvar ] mov r10 , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax call hexvar add rsp , hexvar ret
addiu sp , sp , - hexvar addiu v1 , zero , - num addiu v0 , zero , - num sw s4 , hexvar ( sp ) move s4 , a1 sw s3 , hexvar ( sp ) addiu s3 , zero , num sw s2 , hexvar ( sp ) addiu s2 , zero , - num sw s1 , hexvar ( sp ) move s1 , a0 sw s0 , hexvar ( sp ) move s0 , a2 sw ra , hexvar ( sp ) sw v1 , hexvar ( a0 )
sw a0 , ( sp ) sw a1 , num ( sp ) sw a2 , num ( sp ) sw a3 , hexvar ( sp ) lw v1 , num ( sp ) addiu v0 , zero , num bne v1 , v0 , hexvar nop lw v0 , hexvar ( sp ) addiu v1 , zero , hexvar sw v1 , ( v0 )
push ebx call hexvar add ebx , hexvar sub esp , num mov edx , dword ptr [ esp + hexvar ] cmp edx , hexvar je hexvar cmp edx , hexvar je hexvar cmp edx , hexvar je hexvar xor eax , eax cmp edx , hexvar jne hexvar call hexvar add esp , num pop ebx ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add eax , hexvar mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov ebx , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , ebx xor ebx , ebx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx + hexvar ] lea ecx , [ edx + num ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx + hexvar ] , ecx sub esp , hexvar push dword ptr [ ebp + hexvar ] push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] lea edx , [ eax - hexvar ] push edx lea edx , [ ebp - hexvar ] push edx mov ebx , eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp + hexvar ] add eax , eax sub esp , hexvar push eax push num push dword ptr [ ebp - hexvar ] lea eax , [ ebp - hexvar ] push eax push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] xor ecx , dword ptr gs : [ hexvar ] je hexvar call hexvar mov ebx , dword ptr [ ebp - num ] leave ret
mov rax , rsi mov r8d , num mov edx , dword ptr [ rdi + r8 ] mov ecx , edx shl ecx , hexvar mov r9d , edx shr r9d , hexvar or ecx , r9d mov r9d , edx shl r9d , num and r9d , hexvar or ecx , r9d shr edx , num and edx , hexvar or edx , ecx mov dword ptr [ rax + r8 ] , edx add r8 , num cmp r8 , hexvar jne hexvar ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r13d , r8d mov qword ptr [ rsp ] , rcx mov qword ptr [ rsp + num ] , rdx mov r15 , rsi mov rbp , rdi call hexvar mov rbx , rax call hexvar mov r14 , rax test rbx , rbx je hexvar test r14 , r14 je hexvar xor r12d , r12d nop word ptr cs : [ rax + rax ] nop lea eax , [ r12 + hexvar ] movsxd rsi , eax mov rdi , rbx call hexvar test eax , eax je hexvar movsxd rsi , r12d add rsi , qword ptr [ rbx + num ] mov rdi , r15 mov edx , hexvar call hexvar add r12d , eax test eax , eax je hexvar jns hexvar mov esi , hexvar mov rdi , rbp mov rdx , qword ptr [ rsp ] mov rcx , qword ptr [ rsp + num ] xor eax , eax call hexvar jmp hexvar mov rax , qword ptr [ rbx + num ] mov qword ptr [ rsp + hexvar ] , rax movsxd rdx , r12d xor r8d , r8d cmp r13d , num sete r8b lea rsi , [ rsp + hexvar ] xor edi , edi xor ecx , ecx call hexvar test rax , rax je hexvar mov rbp , rax mov rdi , rbx call hexvar mov rdi , r14 mov rsi , rbp call hexvar jmp hexvar mov rdi , rbx call hexvar mov rdi , r14 call hexvar xor r14d , r14d mov rax , r14 add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , ebx xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push r13 push r12 push rbp push rbx sub rsp , num mov ecx , dword ptr [ rip + hexvar ] test ecx , ecx jle hexvar mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + hexvar ] cmp rax , qword ptr [ rdi + hexvar ] jae hexvar lea rdx , [ rax + num ] mov qword ptr [ rdi + hexvar ] , rdx mov byte ptr [ rax ] , hexvar mov dword ptr [ rip + hexvar ] , num mov r13 , qword ptr [ rip + hexvar ] lea rsi , [ rip + hexvar ] mov rbx , qword ptr [ rip + hexvar ] xor edi , edi mov r12 , qword ptr [ rip + hexvar ] mov rbp , qword ptr [ rip + hexvar ] mov edx , num call hexvar sub rsp , num mov rdi , qword ptr [ rip + hexvar ] mov rdx , rax push r13 mov rcx , rbx xor eax , eax mov r9 , r12 mov r8 , rbp mov esi , num call hexvar mov rbx , qword ptr [ rip + hexvar ] pop rax pop rdx test rbx , rbx jne hexvar cmp dword ptr [ rip + hexvar ] , num je hexvar add rsp , num xor edi , edi pop rbx pop rbp pop r12 pop r13 jmp hexvar nop word ptr [ rax + rax ] add rsp , num pop rbx pop rbp pop r12 pop r13 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s0 , a0 addiu a0 , zero , num jal hexvar nop lw gp , hexvar ( sp ) move a1 , zero move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
clz r0 , r2 cmp r1 , num lsr r0 , r0 , num push { r4 , r5 , r6 , r7 , r8 , lr } movne r5 , r0 moveq r5 , num cmp r5 , num movne r4 , num bne hexvar mov r0 , hexvar mov r6 , r3 mov r7 , r2 mov r8 , r1 bl hexvar mov r2 , num mov r4 , r0 mov r1 , r5 add r0 , r0 , r2 bl hexvar mov r3 , hexvar mov r0 , hexvar stm r4 , { r3 , r5 } bl hexvar ldr r3 , [ sp , hexvar ] str r8 , [ r0 ] str r3 , [ r0 , hexvar ] ldr r3 , [ sp , hexvar ] str r7 , [ r0 , num ] str r6 , [ r0 , num ] str r3 , [ r0 , hexvar ] str r0 , [ r4 , hexvar ] mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rsi cmp qword ptr [ rax ] , num setne dil mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rcx mov byte ptr [ rbp - hexvar ] , dil mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov edx , hexvar cmp qword ptr [ rcx + hexvar ] , rdx sete sil mov byte ptr [ rbp - hexvar ] , sil mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] cmp dword ptr [ rcx + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] add rcx , num mov edi , hexvar movabs rsi , num movabs rdx , num mov r8d , hexvar mov qword ptr [ rbp - hexvar ] , rcx mov rcx , r8 movabs r8 , num mov r9 , qword ptr [ rbp - hexvar ] mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax ] , num setne cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rdx ] add rsi , hexvar mov rdi , rcx mov edx , hexvar call hexvar mov rsp , rbp pop rbp ret
lui gp , hexvar addiu v1 , zero , num beq a0 , v1 , hexvar addiu gp , gp , hexvar beqz a0 , hexvar addiu v0 , zero , num beq a0 , v0 , hexvar lw v0 , - hexvar ( gp ) jr ra sw a0 , hexvar ( v0 ) sb v1 , hexvar ( v0 ) lui v1 , hexvar sw a0 , hexvar ( v0 ) addiu v1 , v1 , hexvar jr ra sw v1 , hexvar ( v0 ) lw v0 , - hexvar ( gp ) lui v1 , hexvar addiu v1 , v1 , hexvar sw a0 , hexvar ( v0 ) jr ra sw v1 , hexvar ( v0 ) lw v0 , - hexvar ( gp ) lui v1 , hexvar addiu v1 , v1 , hexvar sb a0 , hexvar ( v0 ) sw v1 , hexvar ( v0 ) jr ra sw a0 , hexvar ( v0 )
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , num mov dword ptr [ ebp - num ] , eax mov eax , edx mov dword ptr [ ebp - num ] , ecx add esp , num pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) sw v0 , hexvar ( fp ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) lw v1 , hexvar ( fp ) addu v0 , v1 , v0 sw v0 , hexvar ( fp ) b hexvar nop lui v0 , hexvar lb v0 , - hexvar ( v0 ) move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) subu v0 , v1 , v0 slti v0 , v0 , num bnez v0 , hexvar nop lui v0 , hexvar lw v0 , - hexvar ( v0 ) lui v1 , hexvar lw v1 , - hexvar ( v1 ) lw a0 , hexvar ( fp ) teq v1 , zero , num
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - num ] sub eax , ecx seta dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add eax , num add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar mov r8d , hexvar movabs r9 , hexvar movabs r10 , hexvar mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rax mov edx , hexvar call hexvar mov dword ptr [ rbp - num ] , num mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s1 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw s1 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw v0 , hexvar ( sp ) sw s5 , hexvar ( sp ) move s5 , a1 sw s4 , hexvar ( sp ) move s4 , a0 sw s3 , hexvar ( sp ) move s3 , a2 sw s0 , hexvar ( sp ) move s0 , a3 sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( v0 ) lw s6 , hexvar ( sp ) sw v0 , hexvar ( sp ) beqz s1 , hexvar nop bnez s0 , hexvar nop addiu s0 , zero , hexvar addiu s3 , sp , hexvar lui s2 , hexvar move fp , s3 b hexvar addiu s2 , s2 , num sll s0 , s0 , num lw t9 , ( s1 ) jalr t9 move a0 , s0 lw gp , hexvar ( sp ) beqz v0 , hexvar move fp , v0 move a3 , s0 move a2 , fp move a1 , s5 move t9 , s6 jalr t9 move a0 , s4 lw gp , hexvar ( sp ) bltz v0 , hexvar move s7 , v0 sltu v0 , s7 , s0 bnez v0 , hexvar addu v0 , fp , s7 beq s3 , fp , hexvar sltu v0 , s0 , s2 lw t9 , num ( s1 ) jalr t9 move a0 , fp lw gp , hexvar ( sp ) sltu v0 , s0 , s2 bnez v0 , hexvar nop bltz s0 , hexvar lw t9 , - hexvar ( gp ) lui s0 , hexvar lw t9 , ( s1 ) jalr t9 move a0 , s0 lw gp , hexvar ( sp ) bnez v0 , hexvar move fp , v0 lw t9 , hexvar ( s1 ) beqz t9 , hexvar nop jalr t9 move a0 , s0 lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move fp , zero addiu a0 , zero , hexvar lw gp , hexvar ( sp ) sw a0 , ( v0 )
push { r1 , r2 , r3 } subs r3 , r0 , num push { r4 , r5 , lr } beq hexvar ldr r5 , [ r3 ] cmp r5 , num beq hexvar ldr r2 , [ r5 , hexvar ] cmp r2 , num beq hexvar ldr r2 , [ sp , hexvar ] cmp r2 , num beq hexvar blo hexvar cmp r2 , num bne hexvar ldrb r3 , [ r5 , hexvar ] cmp r3 , num bne hexvar pop { r4 , r5 , lr } mov r0 , num add sp , sp , hexvar bx lr ldrb r2 , [ r3 , num ] cmp r2 , num beq hexvar mov r0 , num pop { r4 , r5 , lr } add sp , sp , hexvar bx lr ldrb r3 , [ r5 , hexvar ] cmp r3 , num bne hexvar ldr r1 , [ sp , hexvar ] ldr r0 , [ r5 , hexvar ] bl hexvar cmp r0 , num bne hexvar ldr r3 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] strb r3 , [ r5 , hexvar ] b hexvar mov r4 , num mov r0 , r5 strb r4 , [ r3 , num ] bl hexvar mov r0 , r4 b hexvar mov r1 , num ldr r0 , [ r5 , hexvar ] bl hexvar cmp r0 , num strbeq r0 , [ r5 , hexvar ] moveq r0 , num beq hexvar b hexvar
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , esp mov dword ptr [ edx + num ] , eax mov dword ptr [ edx ] , ecx call hexvar add esp , hexvar ret
push { r4 , r5 , r6 , r7 , r8 , sb , lr } ldr r6 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r6 ] mov r4 , r0 mov r8 , r2 ldr r0 , [ r0 , num ] mov r2 , num str r3 , [ sp , num ] bl hexvar subs r7 , r0 , num bne hexvar add r5 , r4 , hexvar mov r2 , hexvar mov r1 , num mov r0 , r5 ldr r3 , [ r4 , num ] bl hexvar cmp r0 , hexvar movne r2 , num ldrne r1 , [ pc , hexvar ] bne hexvar ldrb r3 , [ r4 , hexvar ] cmp r3 , hexvar beq hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r1 , [ r4 ] bl hexvar mov r5 , num ldr r2 , [ sp , num ] ldr r3 , [ r6 ] mov r0 , r5 cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc }
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar add esp , num pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax test rdi , rdi je hexvar mov r13 , rsi test rsi , rsi je hexvar mov r12 , rdx test rdx , rdx je hexvar mov r14 , rcx test rcx , rcx je hexvar mov rbx , rdi mov ebp , hexvar cmp dword ptr [ rdi ] , num jne hexvar mov edi , dword ptr [ rbx + num ] call hexvar mov ebp , hexvar test eax , eax je hexvar mov edi , dword ptr [ r13 + num ] call hexvar test eax , eax je hexvar mov rax , qword ptr [ rbx + num ] mov rdi , qword ptr [ rax + num ] mov rax , qword ptr [ r13 + num ] mov rsi , qword ptr [ rax + num ] call hexvar mov ebp , hexvar test eax , eax jne hexvar call hexvar test rax , rax je hexvar mov r15 , rax mov rdi , rsp call qword ptr [ rip ] test eax , eax je hexvar mov ebp , eax jmp hexvar mov ebp , hexvar jmp hexvar mov rdi , qword ptr [ rsp ] mov rax , qword ptr [ rbx + num ] mov rsi , qword ptr [ rax + hexvar ] mov edx , hexvar call qword ptr [ rip ] mov ebp , eax test eax , eax jne hexvar mov rdi , qword ptr [ rbx + hexvar ] add r13 , hexvar mov rcx , qword ptr [ rsp ] mov rsi , r13 mov rdx , r15 mov r8d , num call qword ptr [ rip ] mov ebp , eax test eax , eax jne hexvar mov rdi , qword ptr [ rsp ] call qword ptr [ rip ] mov rbx , rax cmp qword ptr [ r14 ] , rax jae hexvar mov qword ptr [ r14 ] , rbx mov ebp , num jmp hexvar mov rdi , r12 mov rsi , rbx call hexvar mov r13 , qword ptr [ rip ] mov rbp , qword ptr [ r15 ] mov rdi , rbp call qword ptr [ rip ] mov rsi , rbx sub rsi , rax add rsi , r12 mov rdi , rbp call r13
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 mov rdi , qword ptr [ rbp - num ] test rdi , rdi setne al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov rax , qword ptr [ rip + hexvar ] jmp rax movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov ecx , hexvar sub rax , rcx sete dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rip + hexvar ] jmp rax movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] test ecx , ecx setne dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] add rax , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar xor ecx , ecx mov dil , cl mov ecx , hexvar mov r9d , hexvar mov byte ptr [ rbp - hexvar ] , dil mov edi , ecx mov rcx , r9 mov r9 , rax mov al , byte ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rip + hexvar ] mov dword ptr [ rbp - hexvar ] , eax jmp rcx mov rdi , qword ptr [ rbp - num ] movsd xmm0 , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rbp - hexvar ] movabs rsi , hexvar mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
sub rsp , hexvar mov rax , qword ptr [ rsp + hexvar ] mov r10 , qword ptr [ rsp + hexvar ] mov r11 , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp ] , r11 mov qword ptr [ rsp + num ] , r10 mov qword ptr [ rsp + hexvar ] , rax mov al , num call hexvar add rsp , hexvar ret
sub rsp , hexvar mov rcx , rsi mov rdx , rdi xorps xmm0 , xmm0 movups xmmword ptr [ rsp + num ] , xmm0 mov dword ptr [ rsp ] , num mov edi , hexvar mov esi , hexvar xor r8d , r8d xor r9d , r9d call hexvar add rsp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rdi + num ] and eax , num mov edi , eax sub eax , num mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , eax ja hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax * num + hexvar ] jmp rcx mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num jmp hexvar movabs rdi , hexvar mov esi , hexvar movabs rdx , hexvar call hexvar mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] sub esi , edx mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi ] , edx mov dword ptr [ edi + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] sub eax , ecx setb dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov ecx , eax inc ecx mov dword ptr [ ebp + num ] , ecx mov dl , byte ptr [ eax ] sub dl , num sete dh movzx eax , dh mov ecx , dword ptr [ ebp - hexvar ] add ecx , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ hexvar ] mov byte ptr [ ebp - hexvar ] , dl jmp eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , num pop ebp ret
beqz a0 , hexvar nop lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) move s2 , a1 sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal - hexvar sw s3 , hexvar ( sp ) lw gp , hexvar ( sp ) beqz v0 , hexvar move s1 , v0 lw t9 , - hexvar ( gp ) move a1 , s0 move a0 , v0 bal - hexvar lui s3 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar addiu a0 , s3 , - hexvar lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw v0 , hexvar ( s1 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] add rdi , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] cmp rax , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] call hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax ] , num setne cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movss dword ptr [ rbp - hexvar ] , xmm0 mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx movss xmm0 , dword ptr [ rbp - hexvar ] movss dword ptr [ rcx ] , xmm0 mov rsi , qword ptr [ rax ] cmp qword ptr [ rsi + hexvar ] , hexvar sete dil mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rcx mov byte ptr [ rbp - hexvar ] , dil mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] mov rcx , qword ptr [ rbp - hexvar ] movss xmm0 , dword ptr [ rcx ] mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov rdi , qword ptr [ rbp - hexvar ] movzx esi , ax call hexvar mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] mov rcx , qword ptr [ rbp - hexvar ] movss xmm0 , dword ptr [ rcx ] mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov rdi , qword ptr [ rbp - hexvar ] movzx esi , al call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rsp , rbp pop rbp ret
mov edx , dword ptr [ esp + num ] mov eax , dword ptr [ edx + hexvar ] cmp dword ptr [ edx + hexvar ] , eax ja hexvar mov eax , dword ptr [ edx + num ] mov edx , dword ptr [ edx + num ] sub edx , eax je hexvar mov ecx , dword ptr [ esp + num ] mov dword ptr [ ecx ] , edx ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , hexvar mov cl , num mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , cl je hexvar cmp dword ptr [ ebp + num ] , hexvar sete al mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
and edi , hexvar mov edx , num cmp edi , hexvar je hexvar cmp edi , hexvar je hexvar cmp edi , hexvar je hexvar cmp edi , hexvar je hexvar cmp edi , hexvar je hexvar cmp edi , hexvar je hexvar mov esi , hexvar xor edi , edi jmp hexvar nop dword ptr [ rax + rax ] cmp qword ptr [ rsi ] , num jne hexvar mov esi , hexvar xor edi , edi jmp hexvar nop word ptr [ rax + rax ] mov esi , hexvar xor edi , edi jmp hexvar nop dword ptr [ rax ] mov esi , hexvar xor edi , edi jmp hexvar nop dword ptr [ rax ] mov esi , hexvar xor edi , edi jmp hexvar nop dword ptr [ rax ] mov esi , hexvar xor edi , edi jmp hexvar nop dword ptr [ rax ] mov esi , hexvar xor edi , edi jmp hexvar nop dword ptr [ rax ] mov esi , hexvar xor edi , edi jmp hexvar nop nop word ptr cs : [ rax + rax ]
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rax , qword ptr [ rax + rcx * num ] mov edx , dword ptr [ rax + hexvar ] cmp edx , dword ptr [ rbp - hexvar ] je hexvar mov eax , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rdx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rcx + rdx * num ] mov dword ptr [ rcx + hexvar ] , eax mov rdi , qword ptr [ rbp - num ] mov eax , dword ptr [ rbp - hexvar ] mov esi , eax mov eax , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov edi , eax call hexvar mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , hexvar mov rdx , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , lr } mov r5 , r0 mov r6 , r1 ldr r3 , [ pc , hexvar ] ldr r0 , [ r3 ] bl hexvar ldr r4 , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] ldr r2 , [ pc , hexvar ] mov r1 , num ldr r0 , [ r4 ] bl hexvar mov r3 , r6 mov r2 , r5 mov r1 , num ldr r0 , [ r4 ] bl hexvar ldr r1 , [ r4 ] mov r0 , hexvar bl hexvar pop { r4 , r5 , r6 , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) bnez v0 , hexvar nop lui v0 , hexvar lw v0 , - hexvar ( v0 ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( sp ) bnez v0 , hexvar nop addiu v0 , sp , hexvar addiu a1 , zero , hexvar move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) beqz v0 , hexvar nop lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) bnez v0 , hexvar nop lui v0 , hexvar addiu a1 , v0 , - hexvar lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) move v0 , zero b hexvar nop addiu v0 , zero , num lw v1 , - hexvar ( gp ) lw a0 , hexvar ( sp ) lw v1 , ( v1 ) beq a0 , v1 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbx test rdi , rdi je hexvar mov rbx , rdi mov rax , qword ptr [ rdi ] test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num je hexvar mov dword ptr [ rbx + hexvar ] , hexvar mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , rbx call rax test eax , eax jle hexvar pop rbx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov edi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov esi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar xor esi , esi mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] shl rcx , num mov rdi , rax mov rdx , rcx call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jge hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi + rcx * num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + rcx * num ] , num jne hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
sub esp , num push dword ptr [ esp + hexvar ] push esi mov edi , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov ecx , edi call hexvar add esp , hexvar test eax , eax je hexvar test edi , edi jne hexvar test esi , esi jne hexvar mov eax , dword ptr [ esp + hexvar ] test eax , eax je hexvar lea eax , [ esp + hexvar ] push eax push dword ptr [ esp + hexvar ] push ebp push num mov eax , dword ptr [ esp + hexvar ] call eax add esp , hexvar test eax , eax je hexvar cmp eax , num je hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] xor edi , edi mov esi , dword ptr [ eax + num ] mov eax , dword ptr [ eax + hexvar ] add edx , num mov dword ptr [ esp + hexvar ] , edx test eax , eax jg hexvar jmp hexvar sub esp , num push eax mov dword ptr [ esp + hexvar ] , eax push ebp call hexvar pop ecx push dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] push edx push dword ptr [ esp + hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] add edi , num add esi , hexvar cmp edi , dword ptr [ eax + hexvar ] jge hexvar sub esp , num push num push esi push ebp call hexvar add esp , hexvar test eax , eax jne hexvar jmp hexvar lea esi , [ esi ]
push rbp push r15 push r14 push r13 push r12 push rbx push rax test edx , edx je hexvar mov r15 , r8 mov r13d , ecx mov r14d , edx mov r12 , rsi mov rbp , rdi mov edi , edx call hexvar test rax , rax je hexvar mov rbx , rax cmp qword ptr [ rax + hexvar ] , num je hexvar mov dword ptr [ rsp + num ] , r13d cmp byte ptr [ r15 ] , hexvar jne hexvar lea rsi , [ r15 + num ] mov rdi , rbp call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebp , ebp mov rax , rbp add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push r15 push r14 mov r14 , rdi push r13 push r12 lea r12d , [ r8 + num ] push rbp push rbx mov rdi , rsi and r12d , hexvar mov r15 , rdx mov ebx , r8d sub rsp , hexvar movsxd rsi , dword ptr [ rdx ] movsxd r12 , r12d add r12 , hexvar mov qword ptr [ rsp + num ] , rcx add rsi , r12 call hexvar test rax , rax mov r13 , rax je hexvar movsxd rbp , dword ptr [ r15 ] mov edi , num mov rax , rbp add rbp , r13 add r12d , eax mov rax , qword ptr [ r14 + num ] mov rsi , rbp mov dword ptr [ r15 ] , r12d call qword ptr [ rax + hexvar ] mov rax , qword ptr [ r14 + num ] movsxd rdi , ebx lea rsi , [ rbp + num ] mov r12 , rdi call qword ptr [ rax + hexvar ] mov rax , qword ptr [ r14 + num ] lea rsi , [ rbp + num ] mov edi , hexvar call qword ptr [ rax + hexvar ] lea rcx , [ rbp + hexvar ] mov rsi , qword ptr [ rsp + num ] xor edx , edx mov eax , hexvar mov word ptr [ rbp + hexvar ] , dx mov dword ptr [ rbp + hexvar ] , hexvar mov rdi , rcx mov word ptr [ rbp + hexvar ] , ax mov rdx , r12 call hexvar test bl , num lea rdi , [ rax + r12 ] je hexvar add ebx , num add rdi , num mov byte ptr [ rdi - num ] , num test bl , num jne hexvar add rsp , hexvar mov rax , r13 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , hexvar call hexvar add eax , hexvar mov edx , dword ptr [ ebp + num ] mov eax , dword ptr [ ebp + hexvar ] add eax , edx mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ ebp + num ] setge dl mov eax , dword ptr [ ebp + hexvar ] shr eax , hexvar xor eax , edx movzx eax , al leave ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] mov ecx , hexvar mov eax , num mov edi , ebp repne scasb al , byte ptr es : [ edi ] mov edx , ecx not edx mov ecx , edx lea esi , [ edx - num ] add ecx , num mov edx , num push edx push ecx call hexvar mov edi , eax add esp , hexvar test eax , eax je hexvar sub esp , num push esi push ebp push eax call hexvar add esp , hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] cmp eax , hexvar jg hexvar lea ebp , [ ebx - hexvar ] lea edx , [ edi + esi ] mov dword ptr [ esp + hexvar ] , edx jmp hexvar mov eax , esi cmp esi , hexvar jg hexvar lea esi , [ eax + num ] sub esp , hexvar push eax push ebp push - num push num push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar push num push num push edi mov eax , dword ptr [ esp + hexvar ] add eax , hexvar push eax call hexvar add esp , hexvar test eax , eax jne hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax ] , esi mov eax , edi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr r6 , [ pc , hexvar ] mov r7 , r0 ldr r0 , [ r6 ] sub sp , sp , hexvar mov r8 , r3 mov r5 , r1 mov sl , r2 str r0 , [ sp , hexvar ] mov r4 , num bl hexvar add r1 , sp , num str r4 , [ r0 ] mov sb , r0 mov r0 , r7 blx r8 ldr r8 , [ sp , num ] stm sp , { r0 , r1 } cmp r8 , r7 beq hexvar cmp r5 , r4 beq hexvar mov r2 , num mov r3 , num bl hexvar cmp r0 , num movne r0 , num bne hexvar ldr r0 , [ sb ] subs r0 , r0 , hexvar movne r0 , num cmp r5 , num beq hexvar str r8 , [ r5 ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r6 ] ldm sp , { r4 , r5 } cmp r2 , r3 stm sl , { r4 , r5 } bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov edi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jle hexvar mov rax , qword ptr [ rbp - num ] jmp hexvar mov qword ptr [ rbp - num ] , hexvar cmp qword ptr [ rbp - num ] , num jle hexvar mov rax , qword ptr [ rbp - num ] jmp hexvar mov eax , hexvar leave ret
push ebp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esp + hexvar ] mov ebp , esp mov dword ptr [ ebp + hexvar ] , eax mov dword ptr [ ebp + hexvar ] , ecx mov dword ptr [ ebp + hexvar ] , edx mov dword ptr [ ebp + num ] , esi mov dword ptr [ ebp + num ] , edi mov dword ptr [ ebp ] , ebx call hexvar mov ah , al mov byte ptr [ esp + hexvar ] , ah add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push r13 push r12 or edx , hexvar push rbp push rbx xor eax , eax mov r12 , rcx sub rsp , num call hexvar test eax , eax js hexvar mov edi , eax mov ebx , eax call hexvar test rax , rax mov rbp , rax je hexvar mov dword ptr [ r12 ] , ebx add rsp , num mov rax , rbp pop rbx pop rbp pop r12 pop r13 ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , hexvar ja hexvar mov rax , qword ptr [ rbp - num ] lea rdx , [ rax * num ] lea rax , [ rip + hexvar ] mov eax , dword ptr [ rdx + rax ] movsxd rdx , eax lea rax , [ rip + hexvar ] add rax , rdx jmp rax lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar mov eax , num pop rbp ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov bl , dl test byte ptr [ hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , bl je hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar test al , num mov al , num mov byte ptr [ ebp - hexvar ] , al jne hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx mov dl , cl test al , num mov byte ptr [ ebp - hexvar ] , dl jne hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , hexvar mov dword ptr [ esp + num ] , eax call hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) addiu a3 , zero , num lui v0 , hexvar addiu a2 , v0 , hexvar lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) jal hexvar nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp push rbx sub rsp , num mov rax , qword ptr [ rsi + num ] cmp qword ptr [ rdi + num ] , rax jne hexvar mov rax , qword ptr [ rdi + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rbp , qword ptr [ rax + hexvar ] mov eax , num test rbp , rbp je hexvar mov rbx , qword ptr [ rsi ] mov esi , hexvar mov rdi , rbx call hexvar lea rdx , [ rax + num ] test rax , rax cmovne rbx , rdx mov rsi , rbp mov rdi , rbx call hexvar test eax , eax sete al movzx eax , al jmp hexvar mov edi , num call hexvar mov eax , num add rsp , num pop rbx pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] call hexvar add rsp , hexvar pop rbp ret
push rbp push r14 push rbx mov ebp , esi mov r14d , edi mov edi , hexvar call hexvar mov rbx , rax test rax , rax je hexvar movsxd rdx , ebp mov rdi , rbx mov esi , hexvar mov ecx , r14d call hexvar mov rax , rbx pop rbx pop r14 pop rbp ret
push r15 push r14 push rbx mov rbx , qword ptr [ rdi ] mov eax , hexvar cmp rbx , qword ptr [ rcx + hexvar ] je hexvar mov r14 , rsi mov r15 , rbx sar r15 , hexvar xor rbx , r15 mov rdi , rbx call hexvar mov ecx , eax xor edx , edx test cl , num sete dl lea eax , [ rcx + num ] sar eax , num test r14 , r14 je hexvar test cl , num jne hexvar mov byte ptr [ r14 ] , r15b add r14 , num test ecx , ecx jle hexvar movsxd rcx , eax mov esi , ebx xor esi , r15d shr rbx , num mov byte ptr [ r14 + rcx - num ] , sil add rcx , - num jg hexvar add eax , edx pop rbx pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp eax , num setne cl mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar lea eax , [ hexvar ] add eax , hexvar mov dword ptr [ esp ] , eax call hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar lea eax , [ hexvar ] add eax , hexvar mov dword ptr [ esp ] , eax call hexvar lea eax , [ hexvar ] add eax , num mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov ecx , dword ptr [ ebp - num ] mov byte ptr [ ecx + hexvar ] , num mov ecx , dword ptr [ ebp - num ] xorps xmm0 , xmm0 movss dword ptr [ ecx + hexvar ] , xmm0 mov dl , num and dl , num movzx eax , dl add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , num call hexvar mov dword ptr [ ebp - num ] , eax cmp eax , num je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar jmp hexvar add esp , num pop ebp ret
mov edx , dword ptr [ esp + num ] xor eax , eax test edx , edx je hexvar cmp dword ptr [ edx + hexvar ] , hexvar je hexvar ret lea esi , [ esi ] mov eax , dword ptr [ edx + hexvar ] ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] add rax , hexvar mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax ] mov esi , dword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push rbx test rdi , rdi je hexvar mov rbx , rdi call hexvar mov edi , dword ptr [ rbx ] call hexvar mov rdi , rax mov esi , num mov rdx , rbx call hexvar test eax , eax je hexvar mov edi , dword ptr [ rbx ] call hexvar mov edi , dword ptr [ rbx ] call hexvar mov rdi , rax mov esi , num mov rdx , rbx pop rbx jmp hexvar xor eax , eax pop rbx ret
push rbp mov rbp , rsp mov dword ptr [ rbp - num ] , edi mov eax , dword ptr [ rbp - num ] sub eax , hexvar cmp eax , hexvar ja hexvar mov eax , num jmp hexvar mov eax , num pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , lr } add r4 , r1 , num mov r7 , r0 mov r0 , r4 mov r6 , r1 bl hexvar subs r5 , r0 , num beq hexvar cmp r6 , num ble hexvar mov r1 , r7 mov r2 , r6 bl hexvar mov r3 , num add r2 , r5 , r6 cmp r4 , num strb r3 , [ r2 , num ] strb r3 , [ r5 , r6 ] bls hexvar sub r7 , r4 , num ldrb r3 , [ r5 , r7 ] cmp r3 , num bne hexvar add r4 , r5 , r4 ldrb r6 , [ r4 , - num ] cmp r6 , num bne hexvar mov r0 , hexvar bl hexvar subs r4 , r0 , num beq hexvar mov r3 , num str r7 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r5 , [ r4 , num ] str r5 , [ r4 , num ] str r6 , [ r4 , hexvar ] str r6 , [ r4 ] str r7 , [ r4 , hexvar ] str r6 , [ r4 , hexvar ] str r6 , [ r4 , hexvar ] str r6 , [ r4 , hexvar ] bl hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ r3 ] cmp r2 , num beq hexvar ldr r1 , [ r3 , num ] ldr ip , [ r2 , r1 , lsl num ] add r0 , r2 , r1 , lsl num cmp r4 , ip beq hexvar cmp ip , num beq hexvar ldr ip , [ r3 , hexvar ] ldrb r5 , [ r3 , hexvar ] ldr lr , [ r3 , hexvar ] strb r5 , [ ip ] ldr r2 , [ r2 , r1 , lsl num ] str ip , [ r2 , num ] str lr , [ r2 , hexvar ] ldr r2 , [ r4 , num ] ldr r1 , [ r4 ] ldr ip , [ pc , hexvar ] str r4 , [ r0 ] str r1 , [ r3 , hexvar ] str r2 , [ ip ] ldrb r0 , [ r2 ] ldr r1 , [ r4 , hexvar ] str r2 , [ r3 , hexvar ] strb r0 , [ r3 , hexvar ] str r1 , [ r3 , hexvar ] mov r3 , num mov r0 , r4 str r3 , [ r4 , hexvar ] pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 , lsr r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov esi , dword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov r8 , qword ptr [ rax + hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - num ] , eax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push r12 push rbp mov r12 , rsi push rbx mov rax , qword ptr [ rdi + num ] mov rbp , rdi mov rbx , rdx mov rsi , rdx mov rdi , qword ptr [ r12 ] call qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp + num ] lea rsi , [ rbx + num ] mov rdi , qword ptr [ r12 + num ] call qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp + num ] lea rsi , [ rbx + hexvar ] mov rdi , qword ptr [ r12 + hexvar ] pop rbx pop rbp pop r12 mov rax , qword ptr [ rax + hexvar ] jmp rax nop dword ptr [ rax ] nop word ptr cs : [ rax + rax ]
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) sw a3 , hexvar ( sp ) sw a2 , hexvar ( sp ) move a3 , a1 move a2 , a0 lui a1 , hexvar addiu a1 , a1 , - hexvar lw a0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] add rdx , num mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rdx mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] cmp rax , rcx mov edx , hexvar mov esi , hexvar cmova esi , edx mov dword ptr [ rbp - hexvar ] , esi jmp hexvar mov dword ptr [ rbp - hexvar ] , num mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rbp - hexvar ] call rax mov ecx , eax mov dword ptr [ rbp - hexvar ] , ecx mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
mov rax , qword ptr [ rdi + num ] movzx edx , byte ptr [ rsi ] mov rcx , qword ptr [ rax + hexvar ] and edx , num cmp dl , num mov eax , dword ptr [ rcx + hexvar ] mov esi , eax je hexvar mov esi , eax add esi , dword ptr [ rcx + hexvar ] mov eax , dword ptr [ rdi + hexvar ] imul eax , dword ptr [ rcx + hexvar ] add rax , rsi ret
push ebp mov ebp , esp sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax add esp , hexvar pop ebp ret
ldrb r3 , [ r2 , num ] cmp r3 , hexvar beq hexvar ble hexvar cmp r3 , hexvar beq hexvar cmp r3 , hexvar bne hexvar mov r0 , num bx lr mov r0 , num bx lr cmp r3 , hexvar bne hexvar mov r0 , num bx lr mov r0 , num bx lr mov r0 , num bx lr
push { r4 , lr } sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bgt hexvar mov r3 , num b hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r4 , [ r3 ] mov r3 , num str r3 , [ sp ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] mov r0 , num blx r4 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] ldr r0 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] blx r3 str r0 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] ldr r4 , [ r3 ] mov r3 , num str r3 , [ sp ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] blx r4 ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] cmp r3 , hexvar ble hexvar ldr r3 , [ pc , hexvar ] ldrb r2 , [ r3 ] ldr r3 , [ sp , hexvar ] strb r2 , [ r3 ] ldr r3 , [ sp , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { r4 , pc }
push rbp push r15 push r14 push rbx push rax xor r15d , r15d test rsi , rsi je hexvar mov rbp , rsi mov r14 , rdi mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov dword ptr [ rax ] , num mov qword ptr [ rax + num ] , rbp mov edx , hexvar mov edi , num mov esi , hexvar mov ecx , hexvar call hexvar mov eax , dword ptr [ rbx ] cmp eax , num je hexvar cmp eax , num jne hexvar mov rdi , qword ptr [ rbx + num ] add rdi , hexvar mov ecx , hexvar mov esi , num mov edx , num mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar mov rdi , qword ptr [ rbx + num ] add rdi , hexvar mov ecx , hexvar mov esi , num mov edx , num mov r8d , hexvar call hexvar mov rdi , qword ptr [ r14 + num ] mov rsi , rbx call hexvar test rax , rax je hexvar mov eax , dword ptr [ rbx ] cmp eax , num je hexvar cmp eax , num jne hexvar mov rdi , qword ptr [ rbx + num ] call hexvar jmp hexvar mov rdi , qword ptr [ r14 + num ] mov rsi , rbx call hexvar mov r15d , num jmp hexvar mov rdi , qword ptr [ rbx + num ] call hexvar mov rdi , rbx call hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor r15d , r15d mov edx , hexvar mov edi , hexvar mov esi , hexvar mov ecx , hexvar call hexvar mov eax , r15d add rsp , num pop rbx pop r14 pop r15 pop rbp ret
push r15 push r14 push rbx mov rbx , rsi mov r14 , rdi mov rdi , qword ptr [ rdi ] mov rdx , rdi sub rdx , rsi jae hexvar mov rsi , qword ptr [ r14 + hexvar ] cmp rsi , rbx jae hexvar cmp rbx , hexvar jb hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov rdi , qword ptr [ r14 + num ] add rdi , rbx jmp hexvar mov rdx , rbx sub rdx , rdi add rdi , qword ptr [ r14 + num ] jmp hexvar lea eax , [ rbx + num ] mov r15d , hexvar imul r15 , rax shr r15 , hexvar and r15 , hexvar mov rdi , qword ptr [ r14 + num ] test rdi , rdi je hexvar mov ecx , hexvar mov edx , r15d mov r8d , hexvar call hexvar test rax , rax je hexvar mov qword ptr [ r14 + num ] , rax mov qword ptr [ r14 + hexvar ] , r15 mov rcx , qword ptr [ r14 ] add rax , rcx mov rdx , rbx sub rdx , rcx mov rdi , rax xor esi , esi call hexvar mov qword ptr [ r14 ] , rbx mov eax , ebx pop rbx pop r14 pop r15 ret
push { r4 , r5 , r6 , lr } mov r6 , r0 mov r0 , hexvar bl hexvar mov r4 , num mov r5 , num str r6 , [ r0 ] str r4 , [ r0 , hexvar ] str r5 , [ r0 , hexvar ] str r4 , [ r0 , num ] str r5 , [ r0 , hexvar ] pop { r4 , r5 , r6 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] test esi , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , esp mov dword ptr [ eax ] , num call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax mov dword ptr [ edx + num ] , num call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax mov dword ptr [ ebp - hexvar ] , edx jmp hexvar xor eax , eax mov cl , al cmp dword ptr [ ebp + hexvar ] , hexvar mov byte ptr [ ebp - hexvar ] , cl jb hexvar mov eax , dword ptr [ ebp + hexvar ] xor edx , edx div dword ptr [ ebp + hexvar ]
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , hexvar jne hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsp , rbp pop rbp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx ] sub edx , - num setne bl movzx esi , bl mov esi , dword ptr [ esi * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jmp esi mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp + hexvar ] sub eax , ecx setne dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , eax add esp , hexvar pop esi pop ebx pop ebp ret
push rbp push r15 push r14 push r12 push rbx mov rbx , rdx mov r14 , rsi mov r15 , rdi mov rbp , qword ptr [ rdx + num ] mov esi , hexvar mov edx , num mov rdi , rbp call hexvar test eax , eax je hexvar mov esi , hexvar mov rdi , rbp call hexvar xor ebp , ebp test eax , eax jne hexvar call hexvar mov ebp , hexvar test rax , rax je hexvar mov r12 , rax mov rsi , qword ptr [ rbx + hexvar ] mov rdi , r14 call hexvar test rax , rax je hexvar mov rbx , rax mov edx , hexvar mov rdi , r12 mov rsi , rax call hexvar mov ebp , eax mov rdi , r14 mov rsi , rbx call hexvar mov r14 , qword ptr [ r12 ] mov qword ptr [ r12 ] , num mov rdi , r12 call hexvar test ebp , ebp je hexvar mov rdi , r14 call hexvar test eax , eax jle hexvar mov rdi , r14 call hexvar lea esi , [ rax - num ] mov rdi , r14 call hexvar cmp dword ptr [ rax + hexvar ] , num je hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov ebp , hexvar test r14 , r14 jne hexvar jmp hexvar mov rsi , qword ptr [ rbx + hexvar ] mov rdi , r14 call hexvar test rax , rax je hexvar mov rbx , rax xor r14d , r14d cmp qword ptr [ r15 ] , num je hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar test rbx , rbx je hexvar mov esi , hexvar mov rdi , rbx call hexvar mov ebp , hexvar test r14 , r14 je hexvar mov esi , hexvar mov rdi , r14 call hexvar jmp hexvar mov ebp , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar xor ebx , ebx cmp qword ptr [ r15 ] , num jne hexvar mov edi , hexvar call hexvar mov qword ptr [ r15 ] , rax test rax , rax je hexvar test rbx , rbx je hexvar mov dword ptr [ rax ] , num mov qword ptr [ rax + num ] , rbx jmp hexvar mov dword ptr [ rax ] , num mov qword ptr [ rax + num ] , r14 mov ebp , num mov eax , ebp pop rbx pop r12 pop r14 pop r15 pop rbp ret
clz r3 , r1 cmp r0 , num lsr r3 , r3 , num moveq r3 , num cmp r3 , num bne hexvar push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldrb sl , [ r0 ] sub sl , sl , hexvar and r2 , sl , hexvar cmp r2 , num bhi hexvar add sb , pc , hexvar ldm sb , { r8 , sb } mov fp , r0 mov r4 , num mov r5 , num cmp r5 , sb cmpeq r4 , r8 moveq r3 , num movne r3 , num cmp sl , num movls r3 , num andhi r3 , r3 , num lsl ip , r5 , num cmp r3 , num lsl r2 , r4 , num orr ip , ip , r4 , lsr num bne hexvar ldrb lr , [ fp , num ] ! adds r2 , r2 , r4 adc ip , ip , r5 sub lr , lr , hexvar adds r6 , r2 , r2 adc r7 , ip , ip and r2 , lr , hexvar adds r4 , r6 , sl adc r5 , r7 , sl , asr num cmp r2 , num bhi hexvar cmp r5 , sb cmpeq r4 , r8 mov sl , lr bls hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
cmp qword ptr [ rdi + hexvar ] , num je hexvar mov rdx , rdi mov edi , hexvar mov esi , hexvar mov ecx , hexvar mov r8d , num mov r9d , num jmp hexvar mov eax , num ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) addiu v0 , fp , hexvar move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) addiu v0 , fp , hexvar lw a1 , hexvar ( fp ) move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) addiu v0 , fp , hexvar move a2 , zero move a1 , v0 addiu a0 , zero , num lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) beqz v0 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw s0 , ( v0 ) lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move a2 , v0 move a1 , s0 move a0 , zero lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) nop lw v0 , - hexvar ( gp ) lw v1 , hexvar ( fp ) lw v0 , ( v0 ) beq v1 , v0 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) lw s0 , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbx mov rbx , rdi mov rdi , rsi call hexvar test rax , rax je hexvar mov rdi , qword ptr [ rbx + hexvar ] mov rsi , rax pop rbx jmp hexvar xor eax , eax pop rbx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) addiu a2 , zero , hexvar move a1 , zero lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov dword ptr [ ebp - hexvar ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub esp , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov esp , ebp pop ebp ret
push { r4 , lr } ldr ip , [ pc , hexvar ] ldr r4 , [ pc , hexvar ] b hexvar ldr r4 , [ r4 , hexvar ] cmp r4 , num beq hexvar ldr r3 , [ r4 , hexvar ] cmp r1 , r3 bne hexvar ldr r3 , [ r4 , hexvar ] cmp r2 , r3 beq hexvar cmp r2 , num bne hexvar ldr r3 , [ r4 , hexvar ] cmp r3 , num beq hexvar mov r3 , num str r4 , [ r0 , hexvar ] mov r0 , r3 pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
sub esp , hexvar lea eax , [ esp + hexvar ] push eax lea eax , [ esp + hexvar ] push eax push num push dword ptr [ esp + hexvar ] push edi call hexvar mov esi , eax add edi , dword ptr [ esp + hexvar ] mov ebp , edi add esp , hexvar test edx , edx je hexvar or dword ptr [ esp + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] test al , num jne hexvar test al , num jne hexvar mov dword ptr [ ebx + hexvar ] , esi jmp hexvar sub esp , num push num lea eax , [ ebx - hexvar ] push eax push num call hexvar mov dword ptr [ esp ] , eax call hexvar add esp , hexvar jmp hexvar sub esp , num push num lea eax , [ ebx - hexvar ] push eax push num call hexvar mov dword ptr [ esp ] , eax call hexvar add esp , hexvar jmp hexvar
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] sub ecx , hexvar sete dl movzx esi , dl mov esi , dword ptr [ esi * num + hexvar ] mov dl , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , dl jmp esi mov eax , dword ptr [ ebp + num ] sub eax , hexvar sete cl mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , cl jmp edx mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push esi push ebx call hexvar add ebx , hexvar sub esp , num mov edx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] test edx , edx je hexvar sub esp , num push dword ptr [ esp + hexvar ] push esi push edx call hexvar add esp , hexvar test eax , eax je hexvar mov dword ptr [ eax + hexvar ] , num add esp , num pop ebx pop esi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx cmp dword ptr [ ebp - num ] , num setne al mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , num call hexvar cmp eax , num sete dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov al , byte ptr [ ebp - num ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ hexvar ] mov dword ptr [ hexvar ] , eax lea eax , [ hexvar ] mov dword ptr [ hexvar ] , eax test byte ptr [ hexvar ] , num je hexvar movsd xmm0 , qword ptr [ hexvar ] movsd qword ptr [ hexvar ] , xmm0 mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push ebp push edi push esi push ebx mov ebx , dword ptr [ eax + hexvar ] cmp byte ptr [ ebx ] , hexvar jne hexvar mov edi , eax lea eax , [ ebx + num ] mov dword ptr [ edi + hexvar ] , eax movsx ecx , byte ptr [ ebx + num ] cmp cl , hexvar je hexvar lea eax , [ ecx - hexvar ] cmp al , num ja hexvar sub ecx , hexvar add ebx , num xor esi , esi mov ebp , hexvar jmp hexvar nop lea esi , [ esi ] sub ecx , hexvar mov edx , ebp mov eax , hexvar sub edx , ecx add ebx , num mul edx shr edx , num cmp edx , esi jl hexvar lea eax , [ esi + esi * num ] mov dword ptr [ edi + hexvar ] , ebx lea esi , [ ecx + eax * num ] movsx ecx , byte ptr [ ebx ] lea eax , [ ecx - hexvar ] cmp al , num jbe hexvar add esi , num cmp cl , hexvar jne hexvar add ebx , num mov dword ptr [ edi + hexvar ] , ebx jmp hexvar nop lea esi , [ esi ] add ebx , num xor esi , esi mov dword ptr [ edi + hexvar ] , ebx mov edx , dword ptr [ edi + hexvar ] cmp edx , dword ptr [ edi + hexvar ] jge hexvar mov eax , dword ptr [ edi + hexvar ] lea ecx , [ edx + edx * num ] add edx , num lea eax , [ eax + ecx * num ] mov dword ptr [ eax + num ] , num mov dword ptr [ eax + num ] , num mov dword ptr [ edi + hexvar ] , edx mov dword ptr [ eax ] , num mov dword ptr [ eax + hexvar ] , esi pop ebx pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , num ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) lui v0 , hexvar addiu a0 , v0 , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move a2 , v0 move a1 , zero addiu a0 , zero , num lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rcx , rax mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov rdi , rcx call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax jmp hexvar lea rdx , [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rax call hexvar mov rdx , qword ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar cmp rax , hexvar je hexvar mov eax , hexvar jmp hexvar add qword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] lea edx , [ rax - num ] mov dword ptr [ rbp - hexvar ] , edx test eax , eax jne hexvar mov eax , num mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov ecx , dword ptr [ rax + hexvar ] mov dword ptr [ rbp - num ] , ecx mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push edi push esi xor eax , eax push ebx mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar lea edi , [ esi + num ] mov ecx , esi mov dword ptr [ esi ] , num mov dword ptr [ esi + hexvar ] , num and edi , hexvar sub ecx , edi add ecx , hexvar shr ecx , num rep stosd dword ptr es : [ edi ] , eax call hexvar test eax , eax sete al mov byte ptr [ esi + hexvar ] , al mov byte ptr [ esi + hexvar ] , al pop ebx pop esi pop edi ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push hexvar call hexvar add esp , hexvar pop ebx ret
push r13 push r12 push rbp push rbx sub rsp , hexvar lea r8 , [ rsp + hexvar ] lea rcx , [ rsp + hexvar ] lea rdx , [ rsp + hexvar ] lea rsi , [ rsp + num ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
push { r4 , r5 , lr } mov r5 , r0 ldr r4 , [ r1 ] ldr r0 , [ r0 , hexvar ] sub sp , sp , hexvar cmp r4 , r0 bhs hexvar mov r0 , r4 ldrb ip , [ r0 ] , num tst ip , hexvar str r0 , [ r1 ] bne hexvar ldr lr , [ r5 , hexvar ] sub lr , lr , r0 cmp lr , ip blo hexvar ldr lr , [ sp , hexvar ] str r0 , [ r2 ] cmp lr , num add lr , r0 , ip mov r0 , num str ip , [ r3 ] ldrne r3 , [ sp , hexvar ] str lr , [ r1 ] strne r0 , [ r3 ] add sp , sp , hexvar pop { r4 , r5 , pc }
push edi push esi push ebx mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar cmp dword ptr [ esi + hexvar ] , num jne hexvar mov eax , dword ptr [ esi + hexvar ] mov dword ptr [ esi + hexvar ] , num lea edi , [ esi + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ esi + hexvar ] mov edx , dword ptr [ esi + hexvar ] mov dword ptr [ esi + hexvar ] , eax xor ecx , ecx mov dword ptr [ esi + num ] , edi mov eax , esi call hexvar test eax , eax je hexvar mov eax , dword ptr [ esi + hexvar ] lea edi , [ esi + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ esi + hexvar ] mov dword ptr [ esi + hexvar ] , eax xor edx , edx xor ecx , ecx mov dword ptr [ esi + num ] , edi mov eax , esi call hexvar test eax , eax je hexvar mov edi , dword ptr [ esi + hexvar ] test edi , edi je hexvar mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar mov ecx , dword ptr [ esi + hexvar ] test ecx , ecx je hexvar mov edx , dword ptr [ esi + hexvar ] mov dword ptr [ edx ] , eax mov eax , dword ptr [ esi + hexvar ] mov dword ptr [ esi + hexvar ] , eax mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar mov edx , dword ptr [ esi + hexvar ] test edx , edx je hexvar mov edx , dword ptr [ esi + hexvar ] mov dword ptr [ edx ] , eax mov eax , dword ptr [ esi + hexvar ] mov dword ptr [ esi + hexvar ] , eax mov dword ptr [ esi + hexvar ] , num mov dword ptr [ esi + hexvar ] , num mov eax , num mov dword ptr [ esi + hexvar ] , num mov dword ptr [ esi + hexvar ] , num mov dword ptr [ esi + hexvar ] , num mov dword ptr [ esi + hexvar ] , num pop ebx pop esi pop edi ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] movzx eax , byte ptr [ eax ] test al , al jne hexvar sub esp , num push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] movzx eax , byte ptr [ eax ] cmp al , hexvar jne hexvar add dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] movzx eax , byte ptr [ eax ] cmp al , hexvar jne hexvar add dword ptr [ ebp - hexvar ] , num add dword ptr [ ebp - hexvar ] , num jmp hexvar nop jmp hexvar nop sub esp , num push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] lea eax , [ ebp - hexvar ] push eax call hexvar add esp , hexvar test eax , eax jns hexvar call hexvar mov eax , dword ptr [ eax ] cmp eax , hexvar jne hexvar call hexvar mov eax , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] xor edx , dword ptr gs : [ hexvar ] je hexvar call hexvar mov ebx , dword ptr [ ebp - num ] leave ret
push ebx call hexvar add ebx , hexvar sub esp , num lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push { r4 , r5 , r6 , lr } mov r6 , r0 mov r5 , r1 mov r4 , r2 ldr r3 , [ r0 , num ] ldr r3 , [ r3 , hexvar ] mov r0 , r1 blx r3 str r0 , [ r4 ] ldr r3 , [ r6 , num ] ldr r3 , [ r3 , hexvar ] add r0 , r5 , num blx r3 str r0 , [ r4 , num ] mov r3 , num str r3 , [ r4 , num ] pop { r4 , r5 , r6 , pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) move s1 , a0 lw v0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) move s2 , a1 sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw s0 , - hexvar ( gp ) jalr t9 lw a0 , ( v0 ) lui a2 , hexvar lw gp , hexvar ( sp ) addiu a1 , zero , num lw a0 , ( s0 ) addiu a2 , a2 , hexvar lw v0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) jalr t9 lw a3 , ( v0 ) addiu a1 , zero , num lw gp , hexvar ( sp ) move a3 , s2 lw a0 , ( s0 ) lw t9 , - hexvar ( gp ) jalr t9 move a2 , s1 addiu a0 , zero , hexvar lw gp , hexvar ( sp ) lw a1 , ( s0 ) lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jr t9 addiu sp , sp , hexvar
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov dword ptr [ esp + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] test eax , eax jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push num call hexvar add esp , hexvar mov eax , num jmp hexvar call hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , num jmp hexvar sub esp , num push dword ptr [ esp + hexvar ] push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] sub esp , num push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar add esp , hexvar pop ebx ret
lea rdi , [ rdi + num ] lea rdx , [ rdx + rsi ] neg rsi mov rcx , rsi xor eax , eax xor r9 , r9 xor r10 , r10 xor r11 , r11 mov r8d , dword ptr [ rip + hexvar ] bt r8d , hexvar jb hexvar jmp hexvar nop dword ptr [ rax ] mov dword ptr [ rdi + rax * num ] , eax add al , num jae hexvar xor r9 , r9 xor r8 , r8 nop dword ptr [ rax ] mov r10d , dword ptr [ rdi + r9 * num ] add r8b , byte ptr [ rdx + rsi ] add r8b , r10b add rsi , num mov r11d , dword ptr [ rdi + r8 * num ] cmove rsi , rcx mov dword ptr [ rdi + r8 * num ] , r10d mov dword ptr [ rdi + r9 * num ] , r11d add r9b , num jae hexvar jmp hexvar nop word ptr [ rax + rax ] mov byte ptr [ rdi + rax ] , al add al , num jae hexvar xor r9 , r9 xor r8 , r8 nop dword ptr [ rax ] mov r10b , byte ptr [ rdi + r9 ] add r8b , byte ptr [ rdx + rsi ] add r8b , r10b add rsi , num mov r11b , byte ptr [ rdi + r8 ] jne hexvar mov rsi , rcx mov byte ptr [ rdi + r8 ] , r10b mov byte ptr [ rdi + r9 ] , r11b add r9b , num jae hexvar mov dword ptr [ rdi + hexvar ] , hexvar xor eax , eax mov dword ptr [ rdi - num ] , eax mov dword ptr [ rdi - num ] , eax ret nop word ptr [ rax + rax ]
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui a0 , hexvar addiu a0 , a0 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebx sub esp , hexvar call hexvar add ebx , hexvar lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sdc1 f12 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) addiu v0 , fp , hexvar ldc1 f0 , hexvar ( fp ) sdc1 f0 , hexvar ( sp ) move a3 , zero addiu a2 , zero , num addiu a1 , zero , hexvar move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) addiu v0 , fp , hexvar move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) nop lw v0 , - hexvar ( gp ) lw v1 , hexvar ( fp ) lw v0 , ( v0 ) beq v1 , v0 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ hexvar ] cmp eax , - num jne hexvar mov byte ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar xor eax , eax mov dword ptr [ esp ] , num lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ hexvar ] , eax cmp dword ptr [ hexvar ] , num setne dl and dl , num mov byte ptr [ ebp - num ] , dl call hexvar xor ecx , ecx mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov dl , byte ptr [ ebp - num ] and dl , num movzx eax , dl mov esi , dword ptr [ hexvar ] add esi , eax mov dword ptr [ hexvar ] , esi mov dword ptr [ esp ] , num lea eax , [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax test byte ptr [ ebp - num ] , num jne hexvar xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar call hexvar mov dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num add esp , hexvar pop esi pop ebp ret
mov edi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ edi + num ] , eax mov eax , dword ptr [ ebp ] mov dword ptr [ edi + num ] , edx mov byte ptr [ edi + hexvar ] , num mov dword ptr [ edi + hexvar ] , eax mov edi , hexvar jmp hexvar
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r14 , rcx mov r15 , rdx mov r12 , rsi mov r13 , rdi mov eax , hexvar xor ebx , ebx jmp hexvar mov rbx , qword ptr [ rsp ] add rbx , num mov eax , hexvar nop dword ptr [ rax ] cmp eax , hexvar jg hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov rax , qword ptr [ r13 ] mov rcx , qword ptr [ rsp ] mov rsi , qword ptr [ r15 + rcx * num ] mov rdi , r13 mov rdx , r14 call qword ptr [ rax + hexvar ] test eax , eax mov eax , hexvar mov ecx , hexvar cmove eax , ecx jmp hexvar nop dword ptr [ rax ] cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov qword ptr [ rsp ] , rbx mov rax , qword ptr [ rsp ] cmp rax , r12 mov eax , hexvar mov ecx , hexvar cmovb eax , ecx jmp hexvar mov eax , hexvar xor ebp , ebp jmp hexvar mov eax , hexvar mov ebp , num jmp hexvar mov eax , ebp add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov byte ptr [ rbp - hexvar ] , num call hexvar mov dword ptr [ rax ] , num lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rdx call rax movq rax , xmm0 mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - hexvar ] , rax je hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov byte ptr [ rbp - hexvar ] , num jmp hexvar pxor xmm0 , xmm0 ucomisd xmm0 , qword ptr [ rbp - hexvar ] jp hexvar pxor xmm0 , xmm0 ucomisd xmm0 , qword ptr [ rbp - hexvar ] je hexvar call hexvar mov eax , dword ptr [ rax ] cmp eax , hexvar jne hexvar mov byte ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 movzx eax , byte ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - num ] xor rsi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r0 , [ r3 , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] mov r1 , r3 mov r3 , num str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] str r3 , [ sp ] ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
sub esp , num push esi push edi call hexvar add esp , hexvar test eax , eax jne hexvar lea edx , [ ebx - hexvar ] sub esp , hexvar push hexvar push edx push hexvar push hexvar push hexvar call hexvar add esp , hexvar xor eax , eax add esp , hexvar pop ebx pop esi pop edi pop ebp ret
sub esp , hexvar call hexvar add eax , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call eax add esp , hexvar jmp hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar add esp , hexvar ret
addiu sp , sp , - hexvar move v0 , zero move v1 , zero sw v0 , hexvar ( sp ) sw a3 , hexvar ( sp ) addiu a3 , zero , num sw v1 , hexvar ( sp ) sw zero , hexvar ( sp ) sw ra , hexvar ( sp ) lw v0 , hexvar ( sp ) jal hexvar sw v0 , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbp push r15 push r14 push r13 push r12 push rbx push rax test rsi , rsi je hexvar mov rbp , rcx test rcx , rcx je hexvar mov r14d , edx mov r15 , rsi mov r13 , rdi mov dword ptr [ rsp ] , r8d mov dword ptr [ rsp + num ] , r9d mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar mov r12d , hexvar test rax , rax je hexvar mov rbx , rax mov qword ptr [ rax + num ] , r15 mov dword ptr [ rax + hexvar ] , num mov dword ptr [ rax + hexvar ] , r14d mov dword ptr [ rax ] , num mov qword ptr [ rax + hexvar ] , rbp cmp qword ptr [ r13 + num ] , num lea rbp , [ r13 + num ] jne hexvar call hexvar mov qword ptr [ rbp ] , rax test rax , rax je hexvar mov rax , qword ptr [ rsp + hexvar ] mov ecx , dword ptr [ rsp ] mov dword ptr [ rbx + hexvar ] , ecx mov ecx , dword ptr [ rsp + num ] mov dword ptr [ rbx + hexvar ] , ecx mov qword ptr [ rbx + hexvar ] , rax mov rdi , qword ptr [ rbp ] mov rsi , rbx call hexvar mov r12d , eax xor eax , eax test r12d , r12d setle al sub r12d , eax jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov r12d , hexvar mov eax , r12d add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp sub esp , hexvar call hexvar add eax , hexvar mov dword ptr [ ebp - num ] , num sub dword ptr [ ebp + num ] , num jmp hexvar add dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp + num ] shr eax , num mov dword ptr [ ebp + num ] , eax cmp dword ptr [ ebp + num ] , num jne hexvar mov eax , dword ptr [ ebp - num ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov qword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - hexvar ] , rax cmovbe rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rdx , qword ptr [ rbp - hexvar ] lea rcx , [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rcx mov edi , eax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , - num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] sub qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar mov eax , num jmp hexvar mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov esi , num mov rdi , rax call hexvar cmp qword ptr [ rbp - hexvar ] , rax jbe hexvar mov eax , num jmp hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , num mov rsi , qword ptr [ rbp - num ] xor rsi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar add esp , num pop ebx ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar xor ecx , ecx mov dword ptr [ eax ] , hexvar mov eax , ecx add esp , num pop ebp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov dword ptr [ esp + num ] , num sub esp , num lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + num ] , eax cmp dword ptr [ esp + num ] , num jne hexvar call hexvar and eax , hexvar cmp eax , hexvar jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar jmp hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push num push hexvar push hexvar call hexvar add esp , hexvar mov eax , num jmp hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] ldr r3 , [ fp , num ] str r3 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - num ] sub r3 , fp , hexvar mov r2 , r3 ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 bhs hexvar ldr r3 , [ fp , - hexvar ] cmp r3 , num bhi hexvar ldr r0 , [ pc , hexvar ] bl hexvar ldr r3 , [ fp , - hexvar ] lsl r3 , r3 , num ldr r2 , [ fp , - hexvar ] add r3 , r2 , r3 ldr r3 , [ r3 ] mov r1 , r3 bl hexvar ldr r3 , [ fp , - hexvar ] str r3 , [ sp , num ] ldr r3 , [ fp , - hexvar ] str r3 , [ sp ] ldr r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar ldr r3 , [ fp , - hexvar ] mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ fp , - num ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] test byte ptr [ edx + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar movss xmm0 , dword ptr [ hexvar ] movsd xmm1 , qword ptr [ hexvar ] movaps xmm2 , xmm1 movd xmm3 , dword ptr [ ebp + num ] por xmm3 , xmm2 subsd xmm3 , xmm1 cvtsd2ss xmm1 , xmm3 mov eax , dword ptr [ ebp + hexvar ] divss xmm1 , dword ptr [ eax + num ] movss dword ptr [ ebp - num ] , xmm1 movss xmm1 , dword ptr [ ebp - num ] ucomiss xmm1 , xmm0 jb hexvar mov dword ptr [ ebp - num ] , num jmp hexvar movss xmm0 , dword ptr [ ebp - num ] movss xmm1 , dword ptr [ hexvar ] movaps xmm2 , xmm0 subss xmm2 , xmm1 cvttss2si eax , xmm2 xor eax , hexvar cvttss2si ecx , xmm0 ucomiss xmm1 , xmm0 cmova eax , ecx mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp + num ] , eax mov eax , hexvar cmp eax , dword ptr [ ebp + num ] jae hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , esp mov dword ptr [ ebx + num ] , edi mov dword ptr [ ebx + num ] , edx mov dword ptr [ ebx ] , esi mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] cmp dword ptr [ esi + hexvar ] , - num je hexvar add esp , hexvar mov eax , num pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov al , dil and al , num mov byte ptr [ rbp - num ] , al movzx edi , byte ptr [ rbp - num ] and edi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov edi , hexvar call hexvar movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov dword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov edi , hexvar call hexvar movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov dword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov edi , hexvar call hexvar movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov dword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp push r15 push r14 push rbx mov r11 , qword ptr [ rdi ] mov rdx , qword ptr [ rdi + num ] movzx ecx , r11w shr r11 , hexvar movzx eax , dx shr rdx , hexvar lea r10 , [ rsi + hexvar ] mov r9d , num mov r8d , num jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] movzx r11d , r11w add r10 , - hexvar mov ecx , ebx mov eax , r14d mov edx , r15d mov ebx , edx shl ebx , hexvar shr edx , num or edx , ebx mov ebx , eax xor ebx , hexvar and ebx , ecx mov ebp , eax and ebp , r11d add ebp , ebx sub edx , ebp sub edx , dword ptr [ r10 ] movzx r15d , dx mov ebx , eax shl ebx , hexvar shr eax , num or eax , ebx mov ebx , r11d xor ebx , hexvar and ebx , edx mov ebp , r11d and ebp , ecx sub eax , ebp sub eax , dword ptr [ r10 - num ] sub eax , ebx movzx r14d , ax mov ebx , r11d shl ebx , hexvar shr r11d , num or r11d , ebx mov ebx , ecx xor ebx , hexvar and ebx , eax mov ebp , edx and ebp , ecx sub r11d , ebp sub r11d , dword ptr [ r10 - num ] sub r11d , ebx mov ebx , ecx shl ebx , hexvar shr ecx , num or ecx , ebx mov ebx , r15d xor ebx , hexvar and ebx , r11d mov ebp , eax and ebp , edx sub ecx , dword ptr [ r10 - hexvar ] sub ecx , ebp sub ecx , ebx movzx ebx , cx add r9d , - num jne hexvar add r8d , - num je hexvar xor r9d , r9d cmp r8d , num sete r9b add r9d , num mov ebx , eax and ebx , hexvar sub edx , dword ptr [ rsi + rbx * num ] movzx r15d , dx mov ebx , r11d and ebx , hexvar sub eax , dword ptr [ rsi + rbx * num ] movzx r14d , ax mov eax , ecx and eax , hexvar sub r11d , dword ptr [ rsi + rax * num ] and edx , hexvar sub ecx , dword ptr [ rsi + rdx * num ] movzx ebx , cx jmp hexvar shl r11d , hexvar or ebx , r11d mov qword ptr [ rdi ] , rbx shl edx , hexvar or r14d , edx mov qword ptr [ rdi + num ] , r14 pop rbx pop r14 pop r15 pop rbp ret
push r15 push r14 push rbx mov r14 , rdx mov r15 , rdi xor ebx , ebx xor edx , edx mov ecx , hexvar call hexvar test eax , eax je hexvar mov qword ptr [ r15 + hexvar ] , r14 xor ebx , ebx test r14 , r14 setne bl mov eax , ebx pop rbx pop r14 pop r15 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ hexvar ] xor rdx , hexvar mov rsi , - num mov rdi , rsi xor rdi , hexvar movabs rax , hexvar xor rsi , rax or rdx , rdi or rsi , rax xor rdx , hexvar and rdx , rsi cmp rdx , num setne cl mov r8b , cl xor r8b , hexvar and r8b , num mov r9b , num mov r10b , r9b xor r10b , num and cl , r10b or r8b , cl mov cl , r8b xor cl , hexvar and cl , num mov r10b , r9b xor r10b , num and r8b , r10b xor r9b , num and r9b , num and r10b , num or cl , r8b or r9b , r10b xor cl , r9b and cl , num movzx r11d , cl mov rax , qword ptr [ rbp - hexvar ] mov cl , r11b mov r8b , byte ptr [ rax + hexvar ] xor cl , hexvar mov r9b , hexvar mov r10b , r9b xor r10b , num xor r9b , hexvar or cl , r10b or r9b , hexvar xor cl , hexvar and cl , r9b shl cl , num and r8b , hexvar or r8b , cl mov byte ptr [ rax + hexvar ] , r8b mov rax , qword ptr [ rbp - hexvar ] mov cl , byte ptr [ rax + hexvar ] and cl , hexvar or cl , hexvar mov byte ptr [ rax + hexvar ] , cl mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar movsxd rax , dword ptr [ rbp - hexvar ] movabs rcx , hexvar add rcx , qword ptr [ rax * num + hexvar ] mov rdi , rcx call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push esi push ebx call hexvar add ebx , hexvar sub esp , num test byte ptr [ ebx + hexvar ] , num mov eax , dword ptr [ ebx + hexvar ] je hexvar mov edx , dword ptr [ ebx + hexvar ] lea esi , [ ebx + hexvar ] mov ecx , eax and ecx , num cmp dword ptr [ esi ] , num cmovne eax , ecx sub esp , num push dword ptr [ edx + eax * num ] push dword ptr [ ebx + hexvar ] call hexvar mov dword ptr [ ebx + hexvar ] , eax add esp , hexvar pop ebx pop esi ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx xor ecx , ecx mov edx , dword ptr [ esp + hexvar ] test edi , edi je hexvar lea ecx , [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax lea eax , [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , edx xor esi , esi mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp + hexvar ] , eax jmp hexvar lea esi , [ esi ] sub esp , num push esi push edi call hexvar mov ebp , eax pop eax pop edx push dword ptr [ esp + hexvar ] push ebp call hexvar add esp , hexvar test eax , eax je hexvar add esi , num sub esp , hexvar push edi call hexvar add esp , hexvar cmp eax , esi jg hexvar xor ebp , ebp mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] mov eax , ebp jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov ecx , dword ptr [ esp + hexvar ] test ecx , ecx je hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar pop eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax mov ebp , eax jne hexvar sub esp , hexvar xor edi , edi push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar add esp , hexvar mov eax , edi pop ebx pop esi pop edi pop ebp ret
push r13 push r12 lea rcx , [ rip + hexvar ] push rbp push rbx mov r8d , esi mov rbx , rdi mov edx , hexvar mov esi , num sub rsp , hexvar mov rbp , rsp mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rdi , rbp call hexvar mov rax , rbp mov ecx , dword ptr [ rax ] add rax , num lea edx , [ rcx - hexvar ] not ecx and edx , ecx and edx , hexvar je hexvar mov ecx , edx shr ecx , hexvar test edx , hexvar cmove edx , ecx lea rcx , [ rax + num ] mov esi , edx cmove rax , rcx add sil , dl sbb rax , num sub rax , rbp je hexvar mov rdx , qword ptr [ rbx + hexvar ] lea r13 , [ rbp + rax ] cmp rdx , hexvar movzx r12d , byte ptr [ rbp ] jne hexvar add rbp , num mov byte ptr [ rbx + hexvar ] , num mov rdx , qword ptr [ rbx + hexvar ] mov esi , hexvar mov rdi , rbx call qword ptr [ rbx + hexvar ] add qword ptr [ rbx + hexvar ] , num cmp r13 , rbp mov qword ptr [ rbx + hexvar ] , num mov byte ptr [ rbx ] , r12b mov byte ptr [ rbx + hexvar ] , r12b je hexvar movzx r12d , byte ptr [ rbp ] mov eax , num lea rdx , [ rax + num ] add rbp , num cmp r13 , rbp mov qword ptr [ rbx + hexvar ] , rdx mov byte ptr [ rbx + rax ] , r12b mov byte ptr [ rbx + hexvar ] , r12b jne hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
push ebx sub esp , num call hexvar add ebx , hexvar mov eax , dword ptr [ ebx + hexvar ] test eax , eax jne hexvar call hexvar mov eax , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call eax add esp , hexvar add esp , num pop ebx ret
lui gp , num addiu sp , sp , - hexvar addiu gp , gp , num sw s1 , hexvar ( sp ) addiu s1 , a0 , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , ( gp ) jalr t9 move a0 , s1 bnez v0 , hexvar lw gp , hexvar ( sp ) lw v0 , hexvar ( s0 )
sub rsp , hexvar push r9 mov r9 , r8 mov r8 , rcx mov rcx , rdx mov rdx , rsi mov esi , hexvar call hexvar add rsp , hexvar ret
ldr r3 , [ pc , hexvar ] push { r4 , lr } mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num ldr r4 , [ r3 ] bl hexvar ldr r2 , [ pc , hexvar ] mov r3 , r0 mov r1 , num mov r0 , r4 bl hexvar bl hexvar andeq fp , r2 , r8 , ror num andeq sl , r1 , ip , ror num muleq r1 , r4 , pc
ldr r2 , [ r0 ] ldr r3 , [ r1 ] ldr r0 , [ r2 , num ] ldr r1 , [ r3 , num ] cmp r0 , r1 bhi hexvar blo hexvar cmp r2 , r3 bhi hexvar mvnlo r0 , num movhs r0 , num bx lr mov r0 , num bx lr mvn r0 , num bx lr
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov esi , dword ptr [ hexvar ] sub esp , hexvar mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , eax lea esp , [ ebp - num ] pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw zero , hexvar ( sp ) move a3 , zero addiu a2 , zero , num jal hexvar nop lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
addiu sp , sp , - hexvar lui gp , hexvar sw s2 , hexvar ( sp ) lui s2 , hexvar addiu gp , gp , hexvar sw s3 , hexvar ( sp ) sw s1 , hexvar ( sp ) move s3 , a0 sw s0 , hexvar ( sp ) move s1 , a2 sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw gp , hexvar ( sp ) lbu v0 , - hexvar ( s2 ) beqz v0 , hexvar move s0 , a1 beqz s0 , hexvar move v0 , zero lw v0 , ( s1 )
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) sw s1 , hexvar ( sp ) lui s1 , hexvar lw s0 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v1 , ( s0 ) lw v0 , - hexvar ( s1 ) sw v1 , hexvar ( sp ) bnez v0 , hexvar lui v0 , hexvar lw v0 , - hexvar ( v0 ) beqz v0 , hexvar move s4 , a0 lw v1 , hexvar ( sp ) lw v0 , ( s0 ) bne v1 , v0 , hexvar lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) lw s7 , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar move a0 , a1 move s3 , a1 jal hexvar move fp , a2 bnez v0 , hexvar lw gp , hexvar ( sp ) lui v0 , hexvar lw s2 , - hexvar ( v0 ) beqz s2 , hexvar lw t9 , - hexvar ( gp )
push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , esi xor esi , esi mov ecx , num lea edi , [ ebx - hexvar ] mov esi , eax repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta dl sbb dl , num movsx edi , dl test edi , edi jne hexvar cmp byte ptr [ eax + num ] , num je hexvar sub esp , num push num lea edx , [ esp + hexvar ] push edx add eax , num push eax call hexvar add esp , hexvar mov edx , dword ptr [ esp + num ] cmp byte ptr [ edx ] , num je hexvar jmp hexvar mov ecx , num lea edi , [ ebx - hexvar ] mov esi , eax repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta dl sbb dl , num test dl , dl je hexvar mov ecx , num lea edi , [ ebx - hexvar ] mov esi , eax repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta dl sbb dl , num test dl , dl je hexvar mov ecx , num lea edi , [ ebx - hexvar ] mov esi , eax repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta dl sbb dl , num test dl , dl je hexvar mov ecx , num lea edi , [ ebx - hexvar ] mov esi , eax repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta al sbb al , num mov edi , num test al , al jne hexvar mov eax , hexvar jmp hexvar mov eax , hexvar mov dword ptr [ ebx + hexvar ] , eax mov edi , num mov eax , edi mov ebx , dword ptr [ esp + hexvar ] xor ebx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi ret
push r14 push r13 push r12 push rbp push rbx mov r13 , rdi or byte ptr [ rdi + hexvar ] , num cmp dword ptr [ rdi + hexvar ] , num je hexvar mov rbp , rsi mov r12 , rdx mov r14d , num mov eax , r14d mov rdx , qword ptr [ r13 ] mov rbx , qword ptr [ rdx + rax * num ] test rbx , rbx jne hexvar add r14d , num cmp dword ptr [ r13 + hexvar ] , r14d ja hexvar and byte ptr [ r13 + hexvar ] , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
blez a0 , hexvar nop lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s1 , hexvar ( sp ) sw s2 , hexvar ( sp ) addiu s2 , zero , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw s1 , - hexvar ( gp ) lw a0 , ( s1 ) lw v1 , hexvar ( a0 )
push rbp mov rbp , rsp push rbx mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rbx , qword ptr [ rbp - hexvar ] jmp hexvar movzx eax , byte ptr [ rbx ] cmp al , hexvar je hexvar mov rdx , rbx lea rbx , [ rdx + num ] mov rax , qword ptr [ rbp - hexvar ] lea rcx , [ rax + num ] mov qword ptr [ rbp - hexvar ] , rcx movzx edx , byte ptr [ rdx ] mov byte ptr [ rax ] , dl mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax - num ] mov qword ptr [ rbp - hexvar ] , rdx test rax , rax je hexvar movzx eax , byte ptr [ rbx ] test al , al jne hexvar jmp hexvar nop cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax ] , num mov rdx , rbx mov rax , qword ptr [ rbp - hexvar ] sub rdx , rax mov rax , rdx pop rbx pop rbp ret
sub sp , sp , num str r0 , [ sp , num ] ldr r3 , [ sp , num ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , num ] mov r0 , r3 add sp , sp , num bx lr
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) move s2 , a1 sw s3 , hexvar ( sp ) move a1 , a2 sw s1 , hexvar ( sp ) move s1 , a0 sw gp , hexvar ( sp ) move a0 , s2 sw ra , hexvar ( sp ) move s3 , a3 lw t9 , - hexvar ( gp ) bal hexvar sw s0 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) beqz s3 , hexvar move s0 , v0 lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a0 , zero , num addiu a1 , a1 , - hexvar jalr t9 move a2 , s2 lw v1 , ( s1 )
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar addiu a0 , zero , hexvar sw s3 , hexvar ( sp ) move s3 , a1 sw s2 , hexvar ( sp ) move s2 , a2 sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) lw s1 , hexvar ( sp ) jalr t9 lw s0 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw ra , hexvar ( sp ) sw s3 , ( v0 )
push r14 push rbx push rax test rdi , rdi je hexvar mov rbx , rdi xor eax , eax cmp word ptr [ rdi + hexvar ] , num jne hexvar lea r14 , [ rbx + hexvar ] mov edx , hexvar mov rdi , rbx mov rsi , r14 call hexvar test eax , eax jne hexvar lea rsi , [ rbx + hexvar ] mov edx , num mov rdi , rbx call hexvar test eax , eax je hexvar add rsp , num pop rbx pop r14 ret
mov r2 , num ldr ip , [ pc , hexvar ] push { r4 , r5 } mov r3 , r0 strb r2 , [ r1 , hexvar ] add r0 , r1 , hexvar umull r4 , r5 , r3 , ip lsr r2 , r5 , num add r1 , r2 , r2 , lsl num sub r3 , r3 , r1 , lsl num add r1 , r3 , hexvar subs r3 , r2 , num strb r1 , [ r0 , - num ] ! bne hexvar pop { r4 , r5 } bx lr stclgt p12 , c12 , [ ip ] , { hexvar }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - num ] , eax je hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax call hexvar cmp dword ptr [ eax ] , num jne hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , eax call hexvar call hexvar nop nop nop nop nop nop nop nop
push r12 push rbp mov r12 , rsi push rbx mov rax , qword ptr [ rdi + num ] mov rbp , rdi mov rbx , rdx mov rdi , qword ptr [ r12 ] mov rsi , rdx call qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp + num ] lea rsi , [ rbx + num ] mov rdi , qword ptr [ r12 + num ] pop rbx pop rbp pop r12 mov rax , qword ptr [ rax + hexvar ] jmp rax nop dword ptr [ rax + rax ]
push rbp push rbx push rax mov rax , qword ptr [ rdi + hexvar ] mov ebp , num test rax , rax je hexvar mov rbx , rdi mov rdx , rsp xor esi , esi xor ecx , ecx call rax test eax , eax jle hexvar mov rcx , qword ptr [ rsp ] mov edi , hexvar mov esi , hexvar mov rdx , rbx mov r8d , eax mov r9d , num call hexvar mov ebp , eax mov eax , ebp add rsp , num pop rbx pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] cmp dword ptr [ rdx + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num jne hexvar mov rdi , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov r8d , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov r9d , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov r10d , dword ptr [ rax + hexvar ] mov dword ptr [ rsp ] , r10d call hexvar mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rdi , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rax + hexvar ] call hexvar mov rdi , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rdx ] mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rcx + hexvar ] mov r8 , qword ptr [ rbp - hexvar ] mov r8d , dword ptr [ r8 + hexvar ] mov r9 , qword ptr [ rbp - hexvar ] mov r9d , dword ptr [ r9 + hexvar ] mov r10 , qword ptr [ rbp - hexvar ] mov r11d , dword ptr [ r10 + hexvar ] mov dword ptr [ rsp ] , r11d mov dword ptr [ rbp - hexvar ] , eax call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , hexvar jae hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , num mov edx , hexvar call hexvar cmp eax , num sete cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov eax , dword ptr [ rbp - num ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp push rbx mov rbp , rdx mov rbx , rdi sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax cmp esi , num je hexvar mov edi , esi mov rsi , rbx and edi , num call hexvar mov rbx , rax mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] mov rax , rbx jne hexvar add rsp , hexvar pop rbx pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar ldr r4 , [ r0 , hexvar ] ldr r3 , [ r4 , num ] ldr r3 , [ r3 , num ] cmp r3 , num movne r4 , num beq hexvar mov r0 , r4 add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r15d , r8d mov r14 , rcx mov rbp , rdx mov rbx , rsi mov r13 , rdi call hexvar test rax , rax je hexvar mov r12 , rax mov rdi , rax call hexvar test eax , eax je hexvar test rbx , rbx je hexvar mov rdi , r12 mov rsi , r13 mov rdx , rbx xor ecx , ecx mov r8d , r15d call hexvar test rax , rax je hexvar mov rdi , rbp call hexvar test eax , eax jle hexvar xor ebx , ebx nop word ptr [ rax + rax ] mov rdi , rbp mov esi , ebx call hexvar mov rdi , r12 mov rsi , rax call hexvar test eax , eax je hexvar add ebx , num mov rdi , rbp call hexvar cmp ebx , eax jl hexvar test r15b , hexvar jne hexvar mov rdi , r12 xor esi , esi call hexvar test r15d , hexvar jne hexvar mov rdi , r12 mov rsi , r14 xor edx , edx mov ecx , r15d call hexvar test eax , eax jne hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov rdi , r12 call hexvar xor r12d , r12d mov rax , r12 add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , num lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push rbp push r15 push r14 push rbx push rax mov r14d , num test rdi , rdi je hexvar mov r15 , rdi cmp dword ptr [ rdi ] , num jne hexvar mov rbp , qword ptr [ r15 + num ] mov rdi , rsi call hexvar mov qword ptr [ r15 + hexvar ] , rax test rax , rax je hexvar mov rdi , rbp call hexvar test eax , eax jle hexvar xor ebx , ebx nop word ptr cs : [ rax + rax ] nop mov rdi , rbp mov esi , ebx call hexvar mov rdi , qword ptr [ r15 + hexvar ] xor ecx , ecx test ebx , ebx sete cl mov rsi , rax mov edx , hexvar call hexvar test eax , eax je hexvar add ebx , num mov rdi , rbp call hexvar cmp ebx , eax jl hexvar mov rdi , qword ptr [ r15 + hexvar ] xor esi , esi call hexvar test eax , eax jns hexvar mov rdi , qword ptr [ r15 + hexvar ] call hexvar mov qword ptr [ r15 + hexvar ] , num xor r14d , r14d mov eax , r14d add rsp , num pop rbx pop r14 pop r15 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar cmp dword ptr [ num ] , num jne hexvar mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , num mov byte ptr [ num ] , al movabs rdx , num movabs rax , num mov dword ptr [ rip ] , num mov dword ptr [ rip ] , num add dword ptr [ rax ] , eax add byte ptr [ rax ] , al add ecx , - hexvar mov rsp , rcx mov rdi , rax mov rsi , rax mov qword ptr [ rbp - num ] , rcx call hexvar mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rcx ] , rax mov rax , qword ptr [ rcx ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rdi , qword ptr [ rcx ] call hexvar mov ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rcx mov rsp , rbp pop rbp ret
sub esp , hexvar call hexvar add eax , hexvar cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax jne hexvar call hexvar mov edx , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] add esp , hexvar ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push rbx mov rbx , rdi mov qword ptr [ rdi + hexvar ] , num mov qword ptr [ rdi + hexvar ] , num mov dword ptr [ rdi + hexvar ] , num mov edx , dword ptr [ rdi + hexvar ] shl rdx , num mov rdi , qword ptr [ rdi + hexvar ] mov esi , num call hexvar mov dword ptr [ rbx + hexvar ] , num pop rbx ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] str r3 , [ sp ] ldr r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] mov r1 , hexvar ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] ldr r1 , [ pc , hexvar ] mov r0 , r3 bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] add r2 , r3 , num str r2 , [ sp , hexvar ] mov r2 , num strb r2 , [ r3 ] ldr r3 , [ sp , num ] cmp r3 , num beq hexvar ldr r1 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar ldr r3 , [ sp , num ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] str r2 , [ r3 ] ldr r1 , [ sp ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r3 , num b hexvar mov r0 , r0 b hexvar mov r0 , r0 mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - num ] sub r3 , fp , hexvar mov r0 , r3 bl hexvar sub r3 , fp , hexvar mov r2 , r3 ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar sub r3 , fp , hexvar ldr r1 , [ fp , - hexvar ] mov r0 , r3 bl hexvar mov r3 , r0 mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ fp , - num ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar sub sp , fp , num pop { fp , pc }
ldr r3 , [ pc , hexvar ] sub r2 , r3 , hexvar cmp r1 , r2 cmpne r1 , r3 bxeq lr push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr r7 , [ r1 , hexvar ] tst r7 , hexvar popne { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push ebx sub esp , num call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] cmp dword ptr [ esp + hexvar ] , num jne hexvar sub esp , num push dword ptr [ ebx + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push ecx push edx push eax call hexvar add esp , hexvar add esp , num pop ebx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw a0 , ( a1 ) bnez v0 , hexvar lw gp , hexvar ( sp ) lui a2 , hexvar lw ra , hexvar ( sp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) move a0 , s0 lw s0 , hexvar ( sp ) addiu a2 , a2 , - hexvar addiu a1 , a1 , hexvar jr t9 addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 move a0 , v0 lui a1 , hexvar lw gp , hexvar ( sp ) move a0 , s0 lw ra , hexvar ( sp ) addiu a1 , a1 , hexvar lw s0 , hexvar ( sp ) addiu sp , sp , hexvar lw t9 , - hexvar ( gp )
push rbp mov rbp , rsp sub rsp , hexvar xor eax , eax mov edx , eax mov edi , num mov esi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] add rax , hexvar mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rdx + hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + num ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov byte ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) addiu s7 , zero , num sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) move s5 , a1 sw s4 , hexvar ( sp ) addiu s4 , zero , - num sw s3 , hexvar ( sp ) addiu s3 , zero , num sw s2 , hexvar ( sp ) addiu s2 , zero , num sw s1 , hexvar ( sp ) move s1 , a0 sw s0 , hexvar ( sp ) move a0 , a1 sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw fp , hexvar ( sp ) addiu a1 , zero , hexvar lw gp , hexvar ( sp ) move a0 , s1 lw t9 , - hexvar ( gp ) bal hexvar move s6 , v0 lw s0 , hexvar ( s1 ) lw gp , hexvar ( sp ) addiu v0 , s0 , hexvar sw v0 , hexvar ( sp ) lw a0 , hexvar ( s1 ) bnez a0 , hexvar lw t9 , - hexvar ( gp ) lw v0 , ( s0 )
push ebx sub esp , num call hexvar add eax , hexvar lea edx , [ eax - hexvar ] push edx push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov ebx , eax call hexvar add esp , hexvar add esp , num pop ebx ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar mov edi , eax mov dword ptr [ esp ] , esi call hexvar mov ebp , eax mov dword ptr [ esp ] , esi call hexvar mov dword ptr [ esp + hexvar ] , eax add esp , num push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar cmp dword ptr [ esp + hexvar ] , eax jne hexvar test ebp , ebp je hexvar test edi , edi je hexvar sub esp , hexvar push ebp call hexvar add esp , num push eax push edi call hexvar mov dword ptr [ esp ] , edi call hexvar mov edx , eax add esp , hexvar mov eax , num test edx , edx je hexvar sub esp , hexvar push edi call hexvar add esp , hexvar mov eax , num jmp hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar call hexvar add esp , hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
mov rcx , qword ptr [ rdi + hexvar ] mov rdx , qword ptr [ rsi + hexvar ] cmp rcx , rdx jg hexvar mov eax , num jl hexvar mov rax , qword ptr [ rsi + hexvar ] sub eax , dword ptr [ rdi + hexvar ] jne hexvar sub rsp , num mov rsi , qword ptr [ rsi ] mov rdi , qword ptr [ rdi ] call hexvar add rsp , num ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) beqz a3 , hexvar lw s1 , hexvar ( sp ) move s4 , a0 move s6 , a1 move s7 , a2 beqz s1 , hexvar move s3 , a3 lb a1 , ( a3 ) beqz a1 , hexvar addiu s5 , zero , hexvar move s0 , a3 lui s2 , hexvar b hexvar addiu s2 , s2 , hexvar addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) b hexvar addiu v0 , zero , - num addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) b hexvar addiu v0 , zero , - num addiu s0 , s0 , num lb a1 , ( s0 ) beqz a1 , hexvar lw v0 , hexvar ( sp ) move a0 , s1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move a3 , s2 sw s5 , hexvar ( sp ) addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) b hexvar addiu s0 , s0 , num lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a3 , hexvar ( sp ) lw a2 , hexvar ( sp ) move a1 , s6 move a0 , s4 jal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw v0 , num ( s4 )
ldrb r3 , [ r0 , hexvar ] and r3 , r3 , num cmp r3 , num bne hexvar ldr r3 , [ r0 , num ] ldr r3 , [ r3 , hexvar ] bx r3 push { r4 , lr } mov r0 , num bl hexvar mov r0 , num pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] cmp eax , num je hexvar cmp eax , num jb hexvar cmp eax , num je hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , num ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , num ] sub r3 , r3 , num ldr r2 , [ sp , num ] add r3 , r2 , r3 str r3 , [ sp , hexvar ] b hexvar ldr r3 , [ sp , hexvar ] add r3 , r3 , num str r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r2 , r3 bhs hexvar mov r2 , num ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num ble hexvar ldr r3 , [ sp , hexvar ] ldrb r3 , [ r3 ] cmp r3 , hexvar bne hexvar ldr r3 , [ sp , hexvar ] mov r2 , num strb r2 , [ r3 ] ldr r3 , [ sp , num ] ldrb r3 , [ r3 ] cmp r3 , num beq hexvar ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { pc }
call hexvar add eax , hexvar sub esp , hexvar lea ecx , [ eax + hexvar ] cmp byte ptr [ ecx + num ] , num je hexvar mov edx , dword ptr [ ecx + num ] xor eax , eax test edx , edx je hexvar cmp byte ptr [ ecx + num ] , num mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] jne hexvar and edx , hexvar cmp edx , eax sete al add esp , hexvar ret
push { r4 , r5 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar sub sp , sp , hexvar ldr r3 , [ r4 ] add ip , sp , hexvar mov r2 , hexvar add ip , ip , num add r1 , sp , num str r3 , [ ip ] mov r5 , r0 bl hexvar cmp r0 , num moveq r0 , r5 bl hexvar add r3 , sp , hexvar add r3 , r3 , num ldr r2 , [ r3 ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar add sp , sp , hexvar pop { r4 , r5 , pc }
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , eax mov eax , edx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , ecx mov edi , dword ptr [ ebp ] call hexvar mov esi , eax lea eax , [ edi + eax ] mov dword ptr [ esp + num ] , eax cmp eax , dword ptr [ esp + hexvar ] jae hexvar cmp esi , num ja hexvar test esi , esi je hexvar test byte ptr [ esp + num ] , num jne hexvar sub esp , num push esi push edi lea eax , [ ebx + hexvar ] call dword ptr [ eax ] add esp , hexvar mov ecx , dword ptr [ esp + num ] and ecx , hexvar cmp ecx , hexvar je hexvar mov edi , dword ptr [ esp + num ] mov dword ptr [ ebp ] , edi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp eax , num setne cl mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ esp ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar pop ebp ret
ldr r2 , [ r0 , num ] push { r4 , lr } cmp r2 , num beq hexvar ldr r2 , [ r0 , hexvar ] mov r3 , r0 cmp r2 , num beq hexvar ldr r4 , [ r2 , num ] cmp r4 , num beq hexvar str r1 , [ r2 , hexvar ] mov r0 , num str r4 , [ r3 , hexvar ] pop { r4 , pc } andeq r0 , r0 , r0 sbcshs r6 , r1 , hexvar
push r15 push r14 push r13 push r12 push rbx mov r15 , rdi xor ebx , ebx mov rdi , rsi xor esi , esi xor edx , edx call hexvar test rax , rax je hexvar mov r14 , rax cmp byte ptr [ rax ] , num je hexvar lea rsi , [ r14 + num ] mov r12 , r14 add r12 , num lea r13 , [ r12 - num ] mov al , byte ptr [ r12 - num ] test al , al jne hexvar jmp hexvar nop word ptr [ rax + rax ] add r12 , num lea r13 , [ r12 - num ] mov al , byte ptr [ r12 - num ] test al , al je hexvar cmp al , hexvar jne hexvar mov al , byte ptr [ r12 ] add al , hexvar cmp al , hexvar ja hexvar mov al , byte ptr [ r12 + num ] cmp al , hexvar jne hexvar nop dword ptr [ rax ] mov ebx , r13d sub ebx , esi mov rdi , r15 mov edx , ebx call hexvar cmp eax , ebx jne hexvar mov ebx , num cmp byte ptr [ r13 ] , num je hexvar mov esi , hexvar mov rdi , r15 mov edx , num call hexvar cmp eax , num jne hexvar cmp byte ptr [ r13 ] , num mov rsi , r12 jne hexvar jmp hexvar add al , hexvar cmp al , hexvar ja hexvar cmp byte ptr [ r12 + num ] , hexvar jne hexvar jmp hexvar mov rdi , r14 call hexvar mov ebx , num jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar xor ebx , ebx mov rdi , r14 call hexvar mov eax , ebx pop rbx pop r12 pop r13 pop r14 pop r15 ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) beqz a1 , hexvar sw gp , hexvar ( sp ) move a3 , a1 lw ra , hexvar ( sp ) move a0 , s0 lw t9 , - hexvar ( gp ) addiu a2 , zero , hexvar lw s0 , hexvar ( sp ) addiu a1 , zero , hexvar b hexvar addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 move a0 , zero lw gp , hexvar ( sp ) bnez v0 , hexvar move a3 , v0 lui a3 , hexvar lw t9 , - hexvar ( gp )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num setne al mov byte ptr [ rbp - num ] , al mov al , byte ptr [ rbp - num ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov eax , hexvar mov rcx , qword ptr [ rbp - hexvar ] cmp rcx , rax jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
ldr r3 , [ r1 , hexvar ] mov r2 , r1 cmp r3 , num cmpne r3 , num ldr r1 , [ r0 , hexvar ] moveq r3 , num movne r3 , num cmp r1 , num cmpne r1 , num beq hexvar ldr r1 , [ r0 , hexvar ] cmp r3 , num and r1 , r1 , hexvar beq hexvar cmp r1 , hexvar beq hexvar mov r3 , num mov r0 , r3 bx lr cmp r3 , num bne hexvar ldr r3 , [ r2 , hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar beq hexvar mvn r3 , num mov r0 , r3 bx lr ldr r3 , [ r2 , hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar beq hexvar cmp r1 , hexvar beq hexvar ldr r1 , [ r0 , hexvar ] ldr r3 , [ r2 , hexvar ] cmp r1 , r3 blt hexvar bgt hexvar ldr r3 , [ r0 , hexvar ] ldr r1 , [ r2 , hexvar ] subs r3 , r3 , r1 bne hexvar ldr r1 , [ r0 ] ldr r0 , [ r2 ] b hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw a3 , hexvar ( sp ) lw a2 , hexvar ( sp ) lw a1 , hexvar ( sp ) lui v0 , hexvar addiu a0 , v0 , hexvar jal hexvar nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , esp lea edi , [ ebp - hexvar ] mov dword ptr [ esi + num ] , edi mov dword ptr [ esi ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar fstp xword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] cmp byte ptr [ eax ] , num je hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , esp lea edx , [ ebp - hexvar ] mov dword ptr [ ecx + num ] , edx mov dword ptr [ ecx ] , eax call hexvar fstp xword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - hexvar ] jae hexvar fld xword ptr [ ebp - hexvar ] fstp xword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx jmp hexvar cmp dword ptr [ ebp + hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx ] , eax fld xword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax test rsi , rsi je hexvar movsxd rax , dword ptr [ rdx ] mov r15 , rsi mov rbx , rdx mov r12 , qword ptr [ rsi + rax * num ] test r12 , r12 je hexvar mov r13 , rdi mov rdi , r12 call hexvar test eax , eax mov rbp , rax je hexvar movsxd rbp , ebp lea rdx , [ r12 + rbp - num ] movzx ebp , byte ptr [ rdx ] lea eax , [ rbp - hexvar ] cmp al , hexvar ja hexvar movzx eax , al jmp qword ptr [ rax * num + hexvar ] nop mov edx , num mov esi , hexvar xor edi , edi call hexvar xor esi , esi mov rdx , rax mov edi , num xor eax , eax call hexvar movsxd rax , dword ptr [ rbx ] mov r12 , qword ptr [ r15 + rax * num ] jmp hexvar nop dword ptr [ rax + rax ] mov rdi , r12 mov qword ptr [ rsp + num ] , hexvar mov r14d , hexvar nop word ptr [ rax + rax ] test rdi , rdi je hexvar movzx eax , byte ptr [ rdi ] cmp al , hexvar je hexvar cmp al , hexvar jne hexvar add rdi , num mov r12d , num lea rcx , [ rsp + hexvar ] lea rsi , [ rsp + hexvar ] mov r8d , hexvar mov edx , hexvar call hexvar test eax , eax jne hexvar mov rdi , r13 call hexvar mov rdx , qword ptr [ rsp + hexvar ] test r12d , r12d mov dword ptr [ rax + hexvar ] , r12d mov dword ptr [ rax + hexvar ] , r14d mov byte ptr [ rax + hexvar ] , num mov byte ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , rdx jne hexvar mov r15 , qword ptr [ rsp + num ] movss xmm0 , dword ptr [ rip + hexvar ] imul r15 , rdx cmp r15 , hexvar jbe hexvar movss xmm0 , dword ptr [ rip + hexvar ] movss dword ptr [ rax + hexvar ] , xmm0 add dword ptr [ rbx ] , num mov eax , num mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push rbp push r15 push r14 push rbx push rax mov r14 , rdi test rdi , rdi mov eax , hexvar mov r15d , hexvar cmove r15d , eax test esi , esi js hexvar mov ebp , esi mov ecx , hexvar jmp hexvar mov ecx , r15d cmp ecx , hexvar jle hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov rdi , qword ptr [ rsp ] mov esi , ebp call hexvar mov rbx , rax mov ecx , hexvar jmp hexvar mov ecx , hexvar xor ebx , ebx jmp hexvar mov qword ptr [ rsp ] , r14 mov rdi , qword ptr [ rsp ] call hexvar mov ecx , hexvar cmp eax , ebp jg hexvar mov ecx , hexvar jmp hexvar mov eax , hexvar jmp hexvar mov eax , r15d nop word ptr cs : [ rax + rax ] nop cmp eax , hexvar jle hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar nop word ptr [ rax + rax ] cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar mov qword ptr [ rsp ] , r14 mov rdi , qword ptr [ rsp ] call hexvar mov eax , hexvar jmp hexvar mov eax , hexvar jmp hexvar xor ebx , ebx mov rax , rbx add rsp , num pop rbx pop r14 pop r15 pop rbp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] cmp esi , hexvar mov edi , hexvar cmovbe edi , esi test esi , esi je hexvar mov eax , dword ptr [ esp + hexvar ] add eax , hexvar mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ esp + hexvar ] add eax , hexvar mov dword ptr [ esp + hexvar ] , eax cmp esi , edi jb hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax + num ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax + hexvar ] push esi push dword ptr [ esp + hexvar ] push ebp call hexvar sub esi , edi add ebp , edi add dword ptr [ esp + hexvar ] , edi add esp , hexvar cmp edi , esi cmova edi , esi test esi , esi setne dl cmp esi , edi setae al test dl , al jne hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi lea rax , [ rip + hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + num ] jmp hexvar add qword ptr [ rbp - num ] , hexvar mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + num ] test eax , eax jne hexvar mov eax , num leave ret
test rdi , rdi je hexvar mov qword ptr [ rdi + hexvar ] , num xorps xmm0 , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 mov dword ptr [ rdi + hexvar ] , hexvar mov eax , num ret
ldrb r3 , [ r0 ] cmp r3 , hexvar beq hexvar cmp r3 , num beq hexvar cmp r3 , hexvar beq hexvar ldrb r3 , [ r0 , num ] ! cmp r3 , num cmpne r3 , hexvar bne hexvar cmp r3 , hexvar bne hexvar ldrb r3 , [ r0 , num ] ! cmp r3 , hexvar beq hexvar cmp r3 , num bne hexvar mov r0 , num bx lr ldrb r3 , [ r0 , num ] cmp r3 , hexvar beq hexvar cmp r3 , num cmpne r3 , hexvar add r0 , r0 , num bne hexvar b hexvar ldrb r3 , [ r0 , num ] add r0 , r0 , num cmp r3 , num cmpne r3 , hexvar beq hexvar cmp r3 , num cmpne r3 , hexvar bne hexvar b hexvar mov r0 , num bx lr
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov eax , edx mov dword ptr [ rbp - hexvar ] , eax mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ] movsxd rsi , dword ptr [ rbp - hexvar ] add rdx , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ] mov qword ptr [ rbp - num ] , rdx mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] cmp rax , rcx mov edx , hexvar mov esi , hexvar cmova esi , edx mov dword ptr [ rbp - hexvar ] , esi jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , dword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rsi , qword ptr [ rbp - hexvar ] movsxd rdx , dword ptr [ rbp - hexvar ] call hexvar mov ecx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] movsxd rsi , ecx add rdx , rsi mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov ecx , eax mov eax , ecx add rsp , hexvar pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov rbp , r8 mov r12 , rcx mov r13d , edx mov rbx , rsi mov r15 , rdi mov qword ptr [ r8 ] , num mov dword ptr [ rdi + hexvar ] , num xor r14d , r14d mov esi , hexvar xor edx , edx xor ecx , ecx call hexvar test eax , hexvar jne hexvar test r12 , r12 je hexvar mov ecx , dword ptr [ r15 ] cmp ecx , hexvar jl hexvar movsxd rsi , r13d lea rax , [ rbx + rsi ] cmp rax , r12 jae hexvar cmp ecx , hexvar jne hexvar movzx ecx , byte ptr [ rax ] add rax , rcx add rax , num cmp rax , r12 jae hexvar movzx ecx , byte ptr [ rax ] shl rcx , num movzx edx , byte ptr [ rax + num ] or rdx , rcx add rax , rdx add rax , num cmp rax , r12 jae hexvar movzx ecx , byte ptr [ rax ] add rax , rcx add rax , num cmp rax , r12 jbe hexvar mov r14d , hexvar mov eax , r14d add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , num mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ hexvar ] mov eax , hexvar mov ecx , hexvar cmovle ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov eax , dword ptr [ ebp + num ] cdq idiv dword ptr [ hexvar ]
addiu v1 , zero , hexvar sltiu v0 , a0 , hexvar movz v1 , a0 , v0 move v0 , v1 addiu v1 , zero , - num ori v0 , v0 , num beq v0 , v1 , hexvar lui t1 , hexvar addiu t2 , zero , - num ori t1 , t1 , hexvar multu v0 , t1 sltiu v1 , v0 , hexvar mfhi a2 srl a2 , a2 , num sll a0 , a2 , num addu a2 , a0 , a2 bnez v1 , hexvar subu a2 , v0 , a2 beqz a2 , hexvar nop addiu a1 , zero , hexvar addiu a0 , zero , num b hexvar addiu v1 , zero , num beqz a3 , hexvar nop addiu v1 , v1 , num addu a0 , a0 , a1 teq v1 , zero , num divu zero , v0 , v1 sltu t0 , a0 , v0 addiu a1 , a1 , num mfhi a3 bnez t0 , hexvar move a2 , a3 bnez a2 , hexvar nop addiu v0 , v0 , num bne v0 , t2 , hexvar multu v0 , t1 jr ra nop
push { r4 , r5 , fp , lr } add fp , sp , hexvar sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 cmp r3 , num moveq r3 , num movne r3 , num strb r3 , [ fp , - hexvar ] ldrb r3 , [ fp , - hexvar ] cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] mov r2 , num strb r2 , [ r3 ] mov r3 , num str r3 , [ fp , - hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar str r0 , [ fp , - hexvar ] mov r1 , num mov r0 , num bl hexvar b hexvar mov r1 , num ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bge hexvar bl hexvar mov r3 , r0 ldr r4 , [ r3 ] ldr r0 , [ pc , hexvar ] bl hexvar mov r5 , r0 ldr r1 , [ fp , - hexvar ] mov r0 , num bl hexvar mov r3 , r0 mov r2 , r5 mov r1 , r4 mov r0 , num bl hexvar mov r3 , num b hexvar ldrb r3 , [ fp , num ] str r3 , [ sp , num ] ldrb r3 , [ fp , num ] str r3 , [ sp ] sub r3 , fp , hexvar ldm r3 , { r2 , r3 } ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 strb r3 , [ fp , - hexvar ] ldrb r3 , [ fp , - hexvar ] eor r3 , r3 , num and r3 , r3 , hexvar cmp r3 , num beq hexvar ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar bl hexvar mov r3 , r0 ldr r4 , [ r3 ] ldr r0 , [ pc , hexvar ] bl hexvar mov r5 , r0 ldr r1 , [ fp , - hexvar ] mov r0 , num bl hexvar mov r3 , r0 mov r2 , r5 mov r1 , r4 mov r0 , num bl hexvar mov r3 , num b hexvar ldrb r3 , [ fp , - hexvar ] mov r0 , r3 sub sp , fp , hexvar pop { r4 , r5 , fp , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw zero , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , ( v0 ) move a1 , v0 lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) bgtz v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( sp ) lw v0 , ( v0 ) move a2 , v0 lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar nop lw v0 , hexvar ( sp ) addiu v0 , v0 , num sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sltiu v0 , v0 , hexvar bnez v0 , hexvar nop lw v0 , hexvar ( sp ) sltiu v0 , v0 , hexvar beqz v0 , hexvar nop addiu v0 , zero , num b hexvar nop move v0 , zero lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
lea eax , [ rdi - hexvar ] cmp al , num setbe al sub edi , hexvar cmp dil , num setbe dl or eax , edx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) jalr t9 lw a0 , ( v0 ) lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lui a1 , hexvar lw gp , hexvar ( sp ) addiu a2 , zero , num addiu a1 , a1 , - hexvar lw s0 , ( v0 ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , zero addiu a0 , zero , num lw gp , hexvar ( sp ) move a2 , v0 lw t9 , - hexvar ( gp ) jalr t9 move a1 , s0
push ebx sub esp , hexvar call hexvar add ebx , hexvar push hexvar lea eax , [ ebx + hexvar ] push eax call hexvar mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebx + hexvar ] , num add esp , num push hexvar lea eax , [ ebx + hexvar ] push eax call hexvar mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebx + hexvar ] , num fldz fstp qword ptr [ ebx + hexvar ] mov dword ptr [ ebx + hexvar ] , num add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , ( v0 ) lw v0 , hexvar ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar movabs rax , hexvar mov rdi , rax mov rsi , rax movabs rdx , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] movabs rdx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] xor ecx , num mov dword ptr [ rax + hexvar ] , ecx mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] or ecx , hexvar mov dword ptr [ rax + hexvar ] , ecx mov rdi , qword ptr [ rbp - num ] call hexvar mov edx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rdx add rsp , hexvar pop rbp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] add eax , hexvar push eax call hexvar test eax , eax setne al movzx eax , al add esp , hexvar pop ebx ret
push r12 push rbp push rbx mov r12d , edi mov rbp , rsi call hexvar mov rdx , rbp mov esi , r12d mov edi , num call hexvar mov ebx , eax test eax , eax jns hexvar call hexvar cmp dword ptr [ rax ] , num je hexvar mov eax , ebx pop rbx pop rbp pop r12 ret
push rbp push rbx push rax mov rbx , rdi cmp dword ptr [ rdi + hexvar ] , esi jne hexvar mov rax , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rax + num ] mov byte ptr [ rax ] , num mov qword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx + hexvar ] , edx mov ecx , num xor edx , edx jmp hexvar movsxd rdx , dword ptr [ rbx + hexvar ] mov ecx , dword ptr [ rbx + hexvar ] mov rax , qword ptr [ rbx + hexvar ] add rdx , qword ptr [ rax + num ] mov rdi , rbx mov esi , hexvar call hexvar test eax , eax js hexvar mov ecx , dword ptr [ rbx + hexvar ] sub ecx , eax jne hexvar mov r10 , qword ptr [ rbx + hexvar ] test r10 , r10 je hexvar mov esi , dword ptr [ rbx ] mov rcx , qword ptr [ rbx + hexvar ] mov rcx , qword ptr [ rcx + num ] mov edx , dword ptr [ rbx + hexvar ] add edx , eax movsxd r8 , edx mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rsp ] , rax mov ebp , num mov edi , num mov edx , hexvar mov r9 , rbx call r10 add byte ptr [ rax ] , al add byte ptr [ rax ] , al
mov eax , dword ptr [ ebx + hexvar ] cmp eax , dword ptr [ ebx + hexvar ] jge hexvar mov edx , dword ptr [ ebx + hexvar ] lea esi , [ eax + eax * num ] add eax , num lea esi , [ edx + esi * num ] mov dword ptr [ esi + num ] , num mov dword ptr [ esi + num ] , num mov dword ptr [ ebx + hexvar ] , eax lea eax , [ ecx - hexvar ] mov dword ptr [ esi ] , hexvar mov dword ptr [ esi + hexvar ] , eax add dword ptr [ ebx + hexvar ] , num jmp hexvar
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , esp mov dword ptr [ edi ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax movsd xmm0 , qword ptr [ ebp + hexvar ] mov eax , dword ptr [ ebp - hexvar ] movsd qword ptr [ eax ] , xmm0 movsd xmm0 , qword ptr [ ebp + num ] mov eax , dword ptr [ ebp - hexvar ] movsd qword ptr [ eax + num ] , xmm0 mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar call hexvar mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - hexvar ] setne cl and cl , num mov byte ptr [ ebp - hexvar ] , cl test byte ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
lea eax , [ ecx + num ] mov dword ptr [ edi ] , eax mov eax , dword ptr [ esp + hexvar ] mov edi , dword ptr [ eax + num ] cmp dword ptr [ eax ] , edi je hexvar lea edx , [ ebx - hexvar ] call hexvar mov eax , dword ptr [ esp + hexvar ] lea edx , [ ebx - hexvar ] call hexvar mov ebp , dword ptr [ esp + hexvar ] test ebp , ebp je hexvar jmp hexvar
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r4 , r0 mov sb , r1 ldr r6 , [ pc , hexvar ] ldr r7 , [ pc , hexvar ] ldr r8 , [ pc , hexvar ] add r5 , r0 , hexvar b hexvar mov r0 , r4 bl hexvar ldr r3 , [ r4 , hexvar ] cmp r3 , r6 cmpls sb , num beq hexvar cmp r3 , num bne hexvar ldr r2 , [ r4 , hexvar ] add r3 , r4 , hexvar cmp r2 , num movlo r1 , r2 movhs r1 , num str r1 , [ r3 , hexvar ] cmp sb , num beq hexvar add r3 , r4 , hexvar ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r0 , [ r4 , hexvar ] cmp r0 , num ldrge r1 , [ r4 , hexvar ] addge r1 , r1 , r0 movlt r1 , num mov r3 , num sub r2 , r2 , r0 mov r0 , r4 bl hexvar ldr r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] ldr r0 , [ r4 ] bl hexvar ldr r3 , [ r4 ] ldr r0 , [ r3 , hexvar ] adds r0 , r0 , num movne r0 , num pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push r13 push r12 mov r13 , rsi push rbp push rbx mov rbp , rdx mov r12 , rdi mov ebx , hexvar sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar mov rdi , rsp test eax , eax mov eax , hexvar cmove rbx , rax call hexvar mov rsi , rsp mov rdi , qword ptr [ rip + hexvar ] call rbx test eax , eax je hexvar call hexvar test eax , eax je hexvar call hexvar cmp dword ptr [ rax ] , num je hexvar call hexvar mov rsi , r12 mov rbx , rax xor edi , edi call hexvar mov esi , dword ptr [ rbx ] mov rcx , rax mov edx , hexvar xor edi , edi xor eax , eax call hexvar mov dword ptr [ rip + hexvar ] , num xor eax , eax jmp hexvar cmp byte ptr [ rip + hexvar ] , num je hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar cmp byte ptr [ rip + hexvar ] , num cmovne eax , dword ptr [ rsp + hexvar ] and eax , hexvar cmp dword ptr [ rbp + hexvar ] , eax sete al mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
push rbp push rbx sub rsp , num mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar mov rbx , qword ptr [ rip + hexvar ] lea rax , [ rbx - num ] cmp rax , qword ptr [ rip + hexvar ] jbe hexvar add rsp , num pop rbx pop rbp ret
test rdi , rdi je hexvar mov rdi , qword ptr [ rdi ] test rdi , rdi je hexvar add rdi , hexvar jmp hexvar xor eax , eax ret
push rax test rdi , rdi je hexvar test rdx , rdx je hexvar xor eax , eax xor r8d , r8d test rsi , rsi je hexvar xor r9d , r9d mov ecx , dword ptr [ rdi + r9 * num ] cmp ecx , hexvar ja hexvar mov r10d , num cmp ecx , hexvar jl hexvar mov r10d , num cmp ecx , hexvar jl hexvar xor r11d , r11d cmp ecx , hexvar setl r11b mov r10d , num sub r10 , r11 add r8 , r10 add r9 , num cmp r9 , rsi jb hexvar cmp r8 , hexvar ja hexvar add r8 , num mov qword ptr [ rdx ] , r8 pop rcx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar call hexvar nop word ptr [ eax + eax ]
push r15 push r14 push rbx sub rsp , hexvar mov r14 , rdi mov rax , qword ptr [ rdi + num ] lea r9 , [ rsp + hexvar ] mov r8d , hexvar mov ecx , hexvar call qword ptr [ rax + hexvar ] mov rbx , rax cmp dword ptr [ rsp + hexvar ] , num je hexvar mov rsi , qword ptr [ r14 + hexvar ] cmp dword ptr [ rsi + hexvar ] , num je hexvar mov dword ptr [ rsi + hexvar ] , num movsxd r15 , dword ptr [ rsi + hexvar ] cmp rbx , r15 jne hexvar mov rdi , qword ptr [ r14 + hexvar ] add rsi , hexvar mov rdx , rbx call hexvar test eax , eax je hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov edx , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov edx , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov edx , hexvar mov rdi , r14 mov esi , num call hexvar xor ebx , ebx mov eax , ebx add rsp , hexvar pop rbx pop r14 pop r15 ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] movzx eax , byte ptr [ rdi ] mov cx , ax movzx eax , cx mov rdi , qword ptr [ rbp - num ] movzx edx , byte ptr [ rdi + num ] mov cx , dx movzx edx , cx shl edx , num mov esi , eax xor esi , hexvar mov r8d , edx xor r8d , hexvar mov r9d , hexvar xor r9d , hexvar mov r10d , esi and r10d , hexvar and eax , r9d mov r11d , r8d and r11d , hexvar and edx , r9d or r10d , eax or r11d , edx xor r10d , r11d or esi , r8d xor esi , hexvar or r9d , hexvar and esi , r9d or r10d , esi mov cx , r10w movzx eax , cx pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu v0 , zero , - num sw s1 , hexvar ( sp ) sw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw s1 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s3 , hexvar ( sp ) move s3 , a0 sw s2 , hexvar ( sp ) move a0 , a1 sw s0 , hexvar ( sp ) move s2 , a1 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw v0 , ( s1 ) sw v0 , hexvar ( sp ) bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw t9 , - hexvar ( gp ) addiu a1 , sp , hexvar jalr t9 move a0 , s2 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a1 , v0 lw a2 , hexvar ( sp ) bal hexvar move a0 , s0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) addiu a1 , sp , hexvar jalr t9 move a0 , s2 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a1 , v0 lw a2 , hexvar ( sp ) bal hexvar move a0 , s0 bnez v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a0 , s0 bal hexvar move s0 , zero lw gp , hexvar ( sp ) lw a0 , hexvar ( sp ) move v0 , s0 lw v1 , ( s1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar beqz s3 , hexvar nop lw a0 , ( s3 )
push rbp mov rbp , rsp sub rsp , hexvar lea rax , [ rbp + hexvar ] mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov edi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rcx , qword ptr [ rbp - hexvar ] mov edi , dword ptr [ rcx ] mov esi , edi mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rcx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rcx + hexvar ] mov rdi , rsp mov qword ptr [ rdi + hexvar ] , rsi movups xmm0 , xmmword ptr [ rcx ] movups xmm1 , xmmword ptr [ rcx + hexvar ] movups xmm2 , xmmword ptr [ rcx + hexvar ] movups xmmword ptr [ rdi + hexvar ] , xmm2 movups xmmword ptr [ rdi + hexvar ] , xmm1 movups xmmword ptr [ rdi ] , xmm0 mov rdi , rax call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov byte ptr [ rbp - hexvar ] , al mov rax , rcx add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] cmp ecx , dword ptr [ ebp + num ] mov dl , num mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , dl je hexvar lea eax , [ hexvar ] cmp eax , dword ptr [ ebp + num ] sete cl mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + hexvar ] mov esi , esp mov dword ptr [ esi ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , esp mov dword ptr [ esi + hexvar ] , edx mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , ecx mov dword ptr [ esi ] , eax mov dword ptr [ esi + hexvar ] , num mov dword ptr [ esi + hexvar ] , num call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] shr eax , hexvar mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push rbp push rbx sub rsp , num mov rbx , qword ptr [ rip + hexvar ] mov rbp , qword ptr [ rip + hexvar ] test rbx , rbx jne hexvar jmp hexvar nop dword ptr [ rax + rax ] lea rdx , [ rax + num ] sub rbx , num mov qword ptr [ rdi + hexvar ] , rdx mov byte ptr [ rax ] , sil je hexvar mov rdi , qword ptr [ rip + hexvar ] add rbp , num movzx esi , byte ptr [ rbp - num ] mov rax , qword ptr [ rdi + hexvar ] cmp rax , qword ptr [ rdi + hexvar ] jb hexvar call hexvar sub rbx , num jne hexvar add rsp , num pop rbx pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , num ( a0 )
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] test rdi , rdi mov qword ptr [ rbp - hexvar ] , rdi je hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] sub rax , num mov qword ptr [ rbp - hexvar ] , rax je hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] sub rax , num mov qword ptr [ rbp - hexvar ] , rax je hexvar jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] pop rbp ret
movzx eax , byte ptr [ rdi ] cmp al , byte ptr [ rax + hexvar ] jne hexvar movzx eax , byte ptr [ rdi + num ] cmp al , byte ptr [ rax + hexvar ] jne hexvar movzx eax , byte ptr [ rdi + num ] cmp al , byte ptr [ rax + hexvar ] jne hexvar movzx eax , byte ptr [ rdi + num ] cmp al , byte ptr [ rax + hexvar ] jne hexvar movzx eax , byte ptr [ rdi + num ] cmp al , byte ptr [ rax + hexvar ] jne hexvar movzx eax , byte ptr [ rdi + num ] cmp al , byte ptr [ rax + hexvar ] jne hexvar movzx eax , byte ptr [ rdi + num ] cmp al , byte ptr [ rax + hexvar ] jne hexvar movzx ecx , byte ptr [ rdi + num ] xor eax , eax cmp cl , byte ptr [ rcx + hexvar ] sete al ret
cmp r0 , num sbcs r3 , r1 , num mov r3 , num push { r4 , r5 , r6 , lr } mov r4 , r0 mov r5 , r1 add r6 , r2 , hexvar strb r3 , [ r2 , hexvar ] blt hexvar mov r0 , r4 mov r1 , r5 mov r2 , hexvar mov r3 , num bl hexvar add r2 , r2 , hexvar strb r2 , [ r6 , - num ] ! mov r0 , r4 mov r1 , r5 mov r3 , num mov r2 , hexvar bl hexvar mov r4 , r0 mov r5 , r1 orrs r3 , r4 , r5 bne hexvar mov r0 , r6 pop { r4 , r5 , r6 , pc }
push ebx mov eax , dword ptr [ esp + num ] mov edx , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ edx + hexvar ] mov dword ptr [ eax ] , ebx mov ecx , dword ptr [ edx + hexvar ] lea ebx , [ ecx + num ] mov dword ptr [ edx + hexvar ] , ebx mov dword ptr [ eax + num ] , ecx pop ebx ret num
mov rax , qword ptr [ rdi + hexvar ] cmp byte ptr [ rax ] , hexvar jne hexvar lea rdx , [ rax + num ] push rbx mov rbx , rdi mov qword ptr [ rdi + hexvar ] , rdx movzx eax , byte ptr [ rax + num ] cmp al , hexvar je hexvar cmp al , hexvar je hexvar call hexvar test rax , rax mov r9 , rax je hexvar cmp dword ptr [ rax ] , hexvar je hexvar mov rsi , qword ptr [ rbx + hexvar ] mov r10d , hexvar movzx eax , byte ptr [ rsi ] cmp al , hexvar jne hexvar lea rdx , [ rsi + num ] mov r10d , hexvar mov qword ptr [ rbx + hexvar ] , rdx movzx eax , byte ptr [ rsi + num ] mov rsi , rdx cmp al , hexvar je hexvar test al , al je hexvar lea rdx , [ rsi + num ] jmp hexvar nop dword ptr [ rax + rax ] add rdx , num test al , al je hexvar mov qword ptr [ rbx + hexvar ] , rdx movzx eax , byte ptr [ rdx ] cmp al , hexvar jne hexvar sub edx , esi mov rdi , rbx call hexvar mov rdx , r9 mov rcx , rax mov esi , r10d call hexvar mov rdx , qword ptr [ rbx + hexvar ] cmp byte ptr [ rdx ] , hexvar je hexvar xor eax , eax pop rbx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov ecx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov edx , num mov esi , ecx mov rdi , rax call hexvar leave ret
movzx eax , byte ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov byte ptr [ esp + hexvar ] , bl mov dword ptr [ edx + num ] , ecx mov byte ptr [ edx ] , al mov eax , edi mov byte ptr [ edx + num ] , al mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ edx + num ] , eax mov edi , eax jmp hexvar lea esi , [ esi ]
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov ecx , eax sub eax , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] test eax , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax jne hexvar jmp hexvar mov dword ptr [ ebp - hexvar ] , num jmp hexvar jmp hexvar jmp hexvar jmp hexvar jmp hexvar mov dword ptr [ ebp - hexvar ] , num jmp hexvar mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] mov r2 , num str r2 , [ r3 , hexvar ] mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar leave ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , hexvar mov ecx , dword ptr [ ebp - num ] mov edx , dword ptr [ eax ] xor edx , hexvar and ecx , edx cmp ecx , num setne bl xor bl , hexvar xor bl , hexvar and bl , num movzx eax , bl lea esp , [ ebp - num ] pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw a2 , hexvar ( fp ) lw a1 , hexvar ( fp ) lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push { r4 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r4 ] mov r1 , sp ldr r2 , [ pc , hexvar ] str r3 , [ sp , hexvar ] bl hexvar cmp r0 , num movne r0 , num bne hexvar ldr r1 , [ pc , hexvar ] mov r0 , sp bl hexvar cmp r0 , num bne hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , pc }
push ebp mov ebp , esp push esi push ebx call hexvar add ebx , hexvar lea eax , [ ebx + hexvar ] mov esi , dword ptr [ eax ] sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar sub esp , num push esi push eax push dword ptr [ ebp + num ] call hexvar add esp , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar sub esp , num push eax push dword ptr [ ebp + num ] call hexvar add esp , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar sub esp , num push eax push dword ptr [ ebp + num ] call hexvar add esp , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar sub esp , num push eax push dword ptr [ ebp + num ] call hexvar add esp , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar sub esp , num push eax push dword ptr [ ebp + num ] call hexvar add esp , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar sub esp , num push eax push dword ptr [ ebp + num ] call hexvar add esp , hexvar lea eax , [ ebx + hexvar ] mov eax , dword ptr [ eax ] sub esp , num push dword ptr [ ebp + num ] push eax call hexvar add esp , hexvar mov eax , hexvar test al , al je hexvar cmp dword ptr [ ebp + hexvar ] , num jne hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar mov edx , eax sub esp , num lea eax , [ ebx - hexvar ] push eax push edx push dword ptr [ ebp + num ] call hexvar add esp , hexvar sub esp , hexvar push dword ptr [ ebp + hexvar ] call hexvar
push ebp mov ebp , esp push edi push esi sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , esi shl edx , cl mov esi , dword ptr [ ebp + num ] mov edi , hexvar sub edi , dword ptr [ ebp + hexvar ] mov ecx , edi shr esi , cl or edx , esi mov dword ptr [ ebp - hexvar ] , eax mov eax , edx add esp , num pop esi pop edi pop ebp ret
push rbp mov rbp , rsp push r15 push r14 push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov dword ptr [ rbp - hexvar ] , r8d mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , rsp add rdx , - hexvar mov rsp , rdx mov rsi , rsp add rsi , - hexvar mov rsp , rsi mov rdi , rsp add rdi , - hexvar mov rsp , rdi mov r8 , rsp add r8 , - hexvar mov rsp , r8 mov r9 , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , r9 mov r10 , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , r10 mov r11 , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx ] , r11 mov rbx , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi ] , rbx mov r14d , dword ptr [ rbp - hexvar ] mov dword ptr [ rdi ] , r14d movabs r15 , hexvar mov qword ptr [ r8 ] , r15 mov rax , qword ptr [ rax ] mov rcx , qword ptr [ rcx ] mov rdx , qword ptr [ rdx ] mov r8 , qword ptr [ r8 ] mov r9 , qword ptr [ rsi ] mov r12d , dword ptr [ rdi ] sub rsp , hexvar mov rdi , rax mov rsi , rcx mov rcx , r8 mov r8d , hexvar mov dword ptr [ rsp ] , r12d call hexvar add rsp , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] lea rsp , [ rbp - hexvar ] pop rbx pop r12 pop r14 pop r15 pop rbp ret
lea rax , [ rip + hexvar ] cmp qword ptr [ rdi + hexvar ] , rax je hexvar mov eax , num ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movabs rcx , hexvar sub rax , rcx add rax , - num add rax , rcx mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - num ] call hexvar movabs rax , hexvar cmp qword ptr [ rbp - hexvar ] , rax setbe r8b and r8b , num movzx r9d , r8b cmp r9d , num setne r8b and r8b , num movzx r9d , r8b movsxd rax , r9d cmp rax , num je hexvar mov rdi , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , - num xor rdx , num mov rsi , rcx xor rsi , rdx and rsi , rcx add rax , rsi mov rcx , qword ptr [ rbp - hexvar ] shr rcx , num imul rax , rcx mov rsi , rax call hexvar jmp hexvar lea rdi , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , - num xor rdx , num mov rsi , rcx xor rsi , rdx and rsi , rcx add rax , rsi mov rsi , rax call hexvar lea rax , [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] shr rcx , num mov rdi , rax mov rsi , rax mov rdx , rcx call hexvar lea rdx , [ rbp - hexvar ] mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - num ] call hexvar lea rdi , [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
mov edx , dword ptr [ esp + num ] mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ edx + hexvar ] test cl , num je hexvar test byte ptr [ edx + hexvar ] , hexvar je hexvar test eax , eax jne hexvar test cl , num je hexvar xor eax , eax test byte ptr [ edx + hexvar ] , hexvar je hexvar and ecx , num mov eax , num je hexvar xor eax , eax test byte ptr [ edx + hexvar ] , hexvar setne al ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] movsx ecx , byte ptr [ rax + num ] cmp ecx , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar xor eax , eax mov ecx , eax mov qword ptr [ rbp - hexvar ] , rcx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar cmp eax , num je hexvar mov byte ptr [ rbp - num ] , num jmp hexvar call hexvar mov byte ptr [ rbp - num ] , num jmp hexvar mov al , byte ptr [ rbp - num ] mov byte ptr [ rbp - hexvar ] , al mov al , byte ptr [ rbp - hexvar ] and al , num movzx eax , al add rsp , hexvar pop rbp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ eax + num ] push dword ptr [ ebx + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ ebx + hexvar ] push eax call dword ptr [ edx + hexvar ] mov esi , eax mov eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ eax + num ] push dword ptr [ ebx + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ ebx + hexvar ] push eax call dword ptr [ edx + hexvar ] add esp , hexvar test esi , esi je hexvar mov edx , eax test eax , eax je hexvar mov ebp , dword ptr [ esi + hexvar ] mov edi , dword ptr [ eax + hexvar ] lea eax , [ ebx + hexvar ] lea eax , [ eax + hexvar ] cmp ebp , eax je hexvar mov eax , num lea ecx , [ ebx + hexvar ] lea ecx , [ ecx + hexvar ] cmp edi , ecx je hexvar mov ecx , dword ptr [ esi + num ] mov ebx , dword ptr [ esi + hexvar ] add ecx , dword ptr [ ebp + hexvar ] adc ebx , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ edx + num ] mov edx , dword ptr [ edx + hexvar ] add eax , dword ptr [ edi + hexvar ] adc edx , dword ptr [ edi + hexvar ] mov esi , ecx xor esi , eax mov edi , ebx xor edi , edx or edi , esi je hexvar cmp ebx , edx jb hexvar ja hexvar cmp ecx , eax jb hexvar mov eax , num jmp hexvar sub esp , hexvar mov eax , dword ptr [ ebx + hexvar ] push dword ptr [ eax ] call hexvar lea eax , [ ebx + hexvar ] lea eax , [ eax + hexvar ] cmp edi , eax jne hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp push edi mov ebp , ecx push esi push ebx mov edi , edx call hexvar add ebx , hexvar sub esp , hexvar mov esi , eax push edx push dword ptr [ eax + hexvar ] call hexvar add esp , hexvar test ebp , ebp mov edx , eax jne hexvar test eax , eax je hexvar add esp , hexvar mov eax , edx pop ebx pop esi pop edi pop ebp ret
add edi , num cmp byte ptr [ esp + hexvar ] , num jne hexvar sub esp , hexvar add edx , num mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] push edx call dword ptr [ eax + hexvar ] shl eax , num mov dword ptr [ esp ] , eax push ebp lea eax , [ ebx - hexvar ] jmp hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , rsp add rdx , - hexvar mov rsp , rdx mov rsi , rsp add rsi , - hexvar mov rsp , rsi mov rdi , rsp add rdi , - hexvar mov rsp , rdi mov r8 , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , r8 mov r9 , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , r9 mov r10 , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , r10 mov rax , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rax mov rsi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi ] , rax mov rdi , qword ptr [ rsi ] call hexvar add rax , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi ] mov rdi , rax call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi ] , rax mov rdi , qword ptr [ rsi ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax ] call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi ] , rax mov rdi , qword ptr [ rsi ] mov rsi , qword ptr [ rsi ] mov rdx , qword ptr [ rbp - num ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rsp , rbp pop rbp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] mov r1 , hexvar ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] cmp r3 , num beq hexvar ldr r3 , [ fp , - num ] mov r2 , num strb r2 , [ r3 ] ldr r3 , [ fp , - num ] mov r0 , r3 sub sp , fp , num pop { fp , pc }
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } and r4 , r2 , hexvar ldr sb , [ pc , hexvar ] mov r7 , r2 lsl r8 , r4 , num ldr r2 , [ r0 ] add r4 , r8 , r4 ldr r3 , [ sb ] sub sp , sp , hexvar add r4 , r0 , r4 , lsl num cmp r2 , r1 mov r5 , r0 mov r6 , r1 add r4 , r4 , hexvar str r3 , [ sp , hexvar ] beq hexvar ldr sl , [ r6 , num ] ldr r0 , [ r6 , hexvar ] ldr r3 , [ sl , num ] cmp r3 , num bne hexvar ldr fp , [ r0 , hexvar ] cmp fp , num beq hexvar mov r2 , fp ldr lr , [ r0 , hexvar ] ldr r1 , [ r0 , hexvar ] add ip , r0 , hexvar ldr r3 , [ r2 , hexvar ] cmp r3 , r1 bhs hexvar ldr r3 , [ lr , r3 , lsl num ] cmp ip , r3 beq hexvar ldr r2 , [ r2 , hexvar ] cmp r2 , num bne hexvar str fp , [ sp , num ] mov r1 , num add r3 , r0 , hexvar ldm r3 , { r2 , r3 } ldr fp , [ sl , hexvar ] ldr r0 , [ fp , hexvar ] ldrb sl , [ r0 , num ] str r1 , [ sp ] mul r1 , sl , r7 adds r2 , r2 , r1 adc r3 , r3 , num mov r0 , r6 bl hexvar subs r3 , r0 , num str r3 , [ sp , hexvar ] beq hexvar mov r4 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ sb ] mov r0 , r4 cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
beqz a2 , hexvar nop lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s4 , hexvar ( sp ) move s4 , a1 sw s3 , hexvar ( sp ) move s3 , a0 sw s2 , hexvar ( sp ) move s2 , a3 sw s1 , hexvar ( sp ) move s1 , zero sw s0 , hexvar ( sp ) move s0 , a2 sw ra , hexvar ( sp ) b hexvar sw gp , hexvar ( sp ) lw a3 , num ( s0 )
push rbx mov rbx , rdi mov dword ptr [ rdi + hexvar ] , num mov dword ptr [ rdi + hexvar ] , hexvar mov dword ptr [ rdi + hexvar ] , num mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar xorps xmm0 , xmm0 movups xmmword ptr [ rax + hexvar ] , xmm0 movups xmmword ptr [ rax + hexvar ] , xmm0 movups xmmword ptr [ rax ] , xmm0 mov dword ptr [ rax + hexvar ] , hexvar mov dword ptr [ rax + hexvar ] , num mov qword ptr [ rbx + hexvar ] , rax mov dword ptr [ rax ] , num mov dword ptr [ rbx + hexvar ] , num mov eax , num pop rbx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu a2 , zero , hexvar sw s1 , hexvar ( sp ) addiu a0 , zero , hexvar sw s2 , hexvar ( sp ) move s2 , a1 lw s1 , - hexvar ( gp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a1 , a1 , hexvar sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw v0 , ( s1 ) sw v0 , hexvar ( sp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw v0 , ( s2 ) addiu a3 , sp , hexvar lw t9 , - hexvar ( gp ) move a2 , zero addiu a1 , zero , hexvar sw v0 , hexvar ( sp ) lui v0 , hexvar move a0 , s0 addiu v0 , v0 , hexvar bal hexvar sw v0 , hexvar ( sp ) bltz v0 , hexvar lw gp , hexvar ( sp ) addu v0 , s0 , v0 sb zero , ( v0 ) lw a0 , hexvar ( sp ) move v0 , s0 lw v1 , ( s1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw v0 , - hexvar ( gp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a1 , a1 , - hexvar jalr t9 lw a0 , ( v0 ) b hexvar lw gp , hexvar ( sp ) lw v0 , - hexvar ( gp )
push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r1 ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r4 ] mov r8 , r0 ldr r1 , [ r2 ] mov r0 , r5 mov r6 , r2 str r3 , [ sp , hexvar ] bl hexvar subs r7 , r0 , num bne hexvar add r1 , sp , hexvar ldr r0 , [ r6 ] bl hexvar ldrb r2 , [ r8 , hexvar ] ldr r3 , [ pc , hexvar ] cmp r2 , num strb r7 , [ sp , hexvar ] mov r2 , num ldr r7 , [ r3 ] bne hexvar ldr r0 , [ r8 , hexvar ] bic r0 , r0 , hexvar bic r0 , r0 , hexvar cmp r0 , num beq hexvar ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar mov r8 , r0 ldr r3 , [ pc , hexvar ] mov r1 , r5 mov r0 , num ldr r5 , [ r3 ] bl hexvar ldr r1 , [ r6 ] add ip , sp , hexvar lsl r1 , r1 , hexvar lsr r1 , r1 , hexvar stm sp , { r0 , r1 } mov r3 , r5 mov r2 , r8 mov r0 , r7 str ip , [ sp , num ] mov r1 , num bl hexvar b hexvar ldr r3 , [ pc , hexvar ] mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num ldr r6 , [ r3 ] bl hexvar ldr r3 , [ pc , hexvar ] mov r1 , r5 mov r7 , r0 mov r0 , num ldr r5 , [ r3 ] bl hexvar mov r3 , r5 str r0 , [ sp ] mov r2 , r7 mov r0 , r6 mov r1 , num bl hexvar bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi ] , edx mov dword ptr [ edi + num ] , num call hexvar mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax mov dword ptr [ edx + num ] , num call hexvar mov ecx , dword ptr [ ebp - hexvar ] add ecx , eax mov eax , dword ptr [ ebp - hexvar ] adc eax , edx mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp - hexvar ] or edx , esi and edx , num add ecx , edx adc eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , ecx mov edx , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov esi , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , num jge hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] cmp eax , - num jae hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - num ] pop esi pop ebp ret
push ebp push edi mov ebp , edx push esi push ebx mov esi , eax call hexvar add ebx , hexvar sub esp , hexvar mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , ecx mov byte ptr [ esp + hexvar ] , cl mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax call hexvar sub esp , hexvar mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ eax ] , num push esi call hexvar mov dword ptr [ esp + hexvar ] , eax add esp , hexvar test eax , eax je hexvar mov edi , dword ptr [ ebx + hexvar ] test edi , edi je hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax js hexvar sub esp , num lea edx , [ esp + hexvar ] push edx push eax push num call hexvar shr eax , hexvar add esp , hexvar test al , al je hexvar lea eax , [ ebx - hexvar ] sub esp , num push num push eax push num call hexvar mov edx , eax movzx eax , byte ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] call hexvar pop esi push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] xor eax , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov cl , byte ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] and cl , num mov byte ptr [ ebp - num ] , cl test byte ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi je hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push ebx sub esp , num call hexvar add ebx , hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar mov eax , num add esp , num pop ebx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax je hexvar cmp dword ptr [ ebp + num ] , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar cmp eax , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp push rbx sub rsp , num mov rbx , rdi mov ebp , esi mov rdx , qword ptr [ rdi + hexvar ] mov eax , dword ptr [ rdx + num ] cmp eax , hexvar ja hexvar lea ecx , [ rax + num ] mov dword ptr [ rdx + num ] , ecx mov eax , eax mov ecx , esi movzx ecx , ch mov byte ptr [ rdx + rax + hexvar ] , cl mov rdx , qword ptr [ rbx + hexvar ] mov eax , dword ptr [ rdx + num ] cmp eax , hexvar ja hexvar lea ecx , [ rax + num ] mov dword ptr [ rdx + num ] , ecx mov eax , eax mov byte ptr [ rdx + rax + hexvar ] , bpl mov eax , num add rsp , num pop rbx pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi mov edi , edx lea ebx , [ ebp + hexvar ] mov dword ptr [ edi ] , ebx mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ esp ] , num call hexvar add esp , hexvar xor eax , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi mov edi , edx lea ebx , [ ebp + hexvar ] mov dword ptr [ edi ] , ebx mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ esp ] , num call hexvar add esp , hexvar jmp hexvar nop word ptr cs : [ eax + eax ]
movzx eax , byte ptr [ rdi + num ] shl rax , hexvar movzx edx , byte ptr [ rdi ] shl rdx , hexvar or rax , rdx movzx edx , byte ptr [ rdi + num ] or rdx , rax movzx eax , byte ptr [ rdi + num ] shl rax , num or rax , rdx mov edx , hexvar xor rax , rdx add rax , - hexvar ret
push { r4 , r5 , r6 , lr } mov r4 , r1 mov r1 , num mov r2 , r4 mov r5 , r0 bl hexvar cmp r0 , num subne r0 , r0 , r5 addne r0 , r0 , num moveq r0 , r4 pop { r4 , r5 , r6 , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , edx call hexvar cmp eax , num jge hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] lea edx , [ hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ esp ] , num mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar jmp hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
mov r3 , num mov r2 , num str r1 , [ r0 ] str r1 , [ r0 , num ] str r1 , [ r0 , num ] str r1 , [ r0 , hexvar ] str r1 , [ r0 , hexvar ] strb r2 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] bx lr
push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov edx , dword ptr [ eax + hexvar ] test edx , edx je hexvar cmp eax , dword ptr [ ecx ] jne hexvar add esp , num pop ebx jmp edx lea esi , [ esi ] lea eax , [ ebx - hexvar ] sub esp , hexvar push hexvar push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar xor eax , eax add esp , num pop ebx ret
push ebp mov ebp , esp sub esp , hexvar call hexvar add eax , hexvar lea eax , [ eax - hexvar ] mov dword ptr [ ebp - hexvar ] , eax sub esp , num push dword ptr [ ebp + hexvar ] push dword ptr [ ebp + hexvar ] push hexvar push dword ptr [ ebp - hexvar ] push dword ptr [ ebp + hexvar ] push dword ptr [ ebp + hexvar ] push dword ptr [ ebp + num ] call hexvar add esp , hexvar leave ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax ] cmp edx , eax jae hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] mov eax , eax shl rax , num add rax , rdx mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx jmp hexvar nop pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rsi ] call hexvar call hexvar movzx ecx , al sar ecx , num shl ecx , num mov rsi , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rsi + num ] mov dword ptr [ rbp - hexvar ] , ecx call hexvar call hexvar movzx ecx , al sar ecx , num shl ecx , num mov edx , dword ptr [ rbp - hexvar ] or edx , ecx mov rsi , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rsi + hexvar ] mov dword ptr [ rbp - hexvar ] , edx call hexvar call hexvar movzx ecx , al sar ecx , num shl ecx , hexvar mov edx , dword ptr [ rbp - hexvar ] or edx , ecx movsxd rsi , edx mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rsi + hexvar ] mov dword ptr [ rbp - num ] , ecx mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ rbp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ rbp - hexvar ] , ecx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] call hexvar call hexvar movzx ecx , al sar ecx , num shl ecx , hexvar movsxd rdx , ecx or rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp push rbx mov ebp , edi mov ebx , esi mov esi , num sub rsp , num mov rdi , qword ptr [ rip + hexvar ] call hexvar add dword ptr [ rip + hexvar ] , num test ebx , ebx jne hexvar mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + hexvar ] cmp rax , qword ptr [ rdi + hexvar ] jae hexvar lea rdx , [ rax + num ] mov qword ptr [ rdi + hexvar ] , rdx mov byte ptr [ rax ] , hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar test ebp , ebp jne hexvar add rsp , num pop rbx pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , lr } sub sp , sp , hexvar ldr r7 , [ r1 , hexvar ] ldr ip , [ r7 , hexvar ] cmp ip , num movne r0 , num beq hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc }
test rdi , rdi je hexvar test rsi , rsi je hexvar test byte ptr [ rdi + hexvar ] , num jne hexvar mov rax , qword ptr [ rdi + hexvar ] test rax , rax jne hexvar mov rax , qword ptr [ rdi ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar jmp rax push rax mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar add rsp , num xor eax , eax ret
push r12 push rbp push rbx sub rsp , hexvar mov r12 , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax cmp esi , num je hexvar mov edi , esi cmp esi , num je hexvar mov rsi , r12 call hexvar mov rbx , rax mov rax , rbx mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
test rdi , rdi push rbx mov rbx , rdi je hexvar mov rdi , qword ptr [ rdi ] call hexvar mov rdi , rbx pop rbx jmp hexvar nop word ptr [ rax + rax ]
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx + num ] jae hexvar mov eax , dword ptr [ ebp - num ] cmp dword ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] jbe hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
cmp r2 , num cmpne r0 , num beq hexvar push { r4 , r5 , r6 , r7 , r8 , lr } mov r4 , r0 mov r6 , r2 ldr r2 , [ r0 , hexvar ] cmp r2 , num beq hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , pc }
push r13 push r12 mov r13 , rdi push rbp push rbx mov r12 , rsi mov rbx , rdx sub rsp , num mov rax , qword ptr [ rdx + num ] mov rbp , qword ptr [ rdx + hexvar ] mov edx , dword ptr [ rdx + hexvar ] lea rax , [ rsi + rax + num ] cmp rax , rbp ja hexvar test edx , edx je hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) move a0 , zero jal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw a3 , hexvar ( sp ) lw a2 , hexvar ( sp ) move a1 , v0 move a0 , s1 jal hexvar nop lw gp , hexvar ( sp ) move s1 , v0 move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move v0 , s1 lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar move s1 , zero
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rcx mov edi , eax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , - num je hexvar cmp qword ptr [ rbp - num ] , num jne hexvar call hexvar mov dword ptr [ rax ] , num jmp hexvar mov rax , qword ptr [ rbp - num ] add qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - num ] add qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - num ] sub qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar jmp hexvar nop mov rax , qword ptr [ rbp - hexvar ] leave ret
mov ebp , dword ptr [ edi + hexvar ] mov edi , dword ptr [ edi + hexvar ] mov eax , edi movzx ecx , al sub esp , num mov eax , edi shrd eax , ebp , hexvar mov al , num or eax , ecx mov edx , num push edx push eax mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov esi , num jmp hexvar
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp dword ptr [ hexvar ] , num jne hexvar mov dword ptr [ rbp - hexvar ] , num cmp dword ptr [ rbp - hexvar ] , hexvar jae hexvar mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax mov qword ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num jge hexvar mov eax , dword ptr [ rbp - hexvar ] and eax , num cmp eax , num je hexvar mov eax , dword ptr [ rbp - hexvar ] shr eax , num xor eax , hexvar mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ rbp - hexvar ] shr eax , num mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rbp - hexvar ] mov edx , ecx mov dword ptr [ rdx * num + hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] add eax , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov dword ptr [ hexvar ] , num mov dword ptr [ rbp - hexvar ] , hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jge hexvar mov eax , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] movzx esi , byte ptr [ rcx + rdx ] xor eax , esi and eax , hexvar mov eax , eax mov ecx , eax mov eax , dword ptr [ rcx * num + hexvar ] mov esi , dword ptr [ rbp - hexvar ] shr esi , num xor eax , esi mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov eax , dword ptr [ rbp - hexvar ] xor eax , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx lea ecx , [ ebp - num ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , hexvar call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] jae hexvar mov eax , dword ptr [ ebp - hexvar ] movsx eax , byte ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar movzx ecx , al mov byte ptr [ ecx + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar test byte ptr [ hexvar ] , num jne hexvar mov byte ptr [ hexvar ] , num mov byte ptr [ hexvar ] , num mov byte ptr [ hexvar ] , num mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop ebp ret
blez a2 , hexvar lui gp , hexvar addiu sp , sp , - hexvar sw s3 , hexvar ( sp ) lui s3 , hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) addiu s3 , s3 , hexvar sw s2 , hexvar ( sp ) addu s1 , a1 , a2 sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) move s2 , a0 sw gp , hexvar ( sp ) move s0 , a1 lw t9 , - hexvar ( gp ) addiu s0 , s0 , num lbu a2 , - num ( s0 ) move a1 , s3 jalr t9 move a0 , s2 bne s0 , s1 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar jr ra nop nop
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax test esi , esi je hexvar call hexvar test eax , eax mov edi , eax je hexvar sub esp , num push num push dword ptr [ eax ] call hexvar add esp , hexvar test eax , eax jne hexvar sub esp , hexvar push edi call hexvar add esp , hexvar xor edi , edi mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] mov eax , edi jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw a2 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp push edi push esi push eax mov eax , dword ptr [ ebp + num ] mov ecx , eax mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ esi + hexvar ] mov dword ptr [ eax ] , edi mov esi , dword ptr [ esi + hexvar ] mov dword ptr [ eax + num ] , esi mov eax , ecx mov dword ptr [ ebp - hexvar ] , edx add esp , num pop esi pop edi pop ebp ret num
push { r4 , r5 , r6 , r7 , r8 , lr } ldr lr , [ pc , hexvar ] ldr ip , [ lr , hexvar ] ldr r0 , [ lr , hexvar ] cmp ip , num beq hexvar ldm r0 , { r6 , r7 } orrs r3 , r6 , r7 mov r4 , r6 mov r5 , r7 addne r0 , r0 , num movne r1 , num bne hexvar b hexvar ldm r0 ! , { r2 , r3 } orrs r8 , r2 , r3 beq hexvar cmp r5 , r3 cmpeq r4 , r2 bhs hexvar mov r4 , r2 mov r5 , r3 add r1 , r1 , num cmp ip , r1 bne hexvar add r1 , lr , num ldm r1 , { r0 , r1 } orrs r3 , r0 , r1 beq hexvar ldm lr , { r2 , r3 } orrs r3 , r2 , r3 bne hexvar cmp ip , num beq hexvar mov r2 , num mov r3 , num str r2 , [ lr , hexvar ] str r3 , [ lr , hexvar ] pop { r4 , r5 , r6 , r7 , r8 , pc } smulttgt sb , sp , ip andeq r0 , r0 , r0
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) lui s0 , hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , hexvar ( s0 ) beqz v0 , hexvar lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui s1 , hexvar lw t9 , - hexvar ( gp ) addiu a3 , zero , hexvar addiu a2 , s1 , - hexvar addiu a1 , zero , num jalr t9 addiu a0 , zero , num lw v0 , hexvar ( s0 ) beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp )
mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar test byte ptr [ rax + hexvar ] , num je hexvar sub rsp , num call hexvar add rsp , num ret
addiu sp , sp , - hexvar lui gp , hexvar sw s3 , hexvar ( sp ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw s3 , hexvar ( sp ) beqz s3 , hexvar move s2 , a0 move s4 , a2 beqz a0 , hexvar move s1 , a3 move s0 , a0 sltiu v0 , s1 , num beqz v0 , hexvar sll v1 , s1 , num lui v0 , hexvar addiu v0 , v0 , hexvar addu v0 , v0 , v1 lw v0 , ( v0 ) jr v0 nop lw t9 , - hexvar ( gp ) move a1 , zero jalr t9 move a0 , s3 beqz v0 , hexvar lw gp , hexvar ( sp ) sw v0 , num ( s0 )
push ebp mov ebp , esp sub esp , num call hexvar call hexvar call hexvar add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + num ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , num add esp , num pop ebp ret
sub esp , hexvar mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ edx + hexvar ] test eax , eax je hexvar mov edx , dword ptr [ edx + hexvar ] xor ecx , ecx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp ] , edx fild qword ptr [ esp ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num fild qword ptr [ esp ] add esp , hexvar fdivp st ( num ) ret
addiu v0 , zero , hexvar beq a0 , v0 , hexvar nop slti v0 , a0 , hexvar bnez v0 , hexvar addiu v0 , zero , hexvar beq a0 , v0 , hexvar nop addiu v0 , zero , hexvar bne a0 , v0 , hexvar nop jr ra addiu v0 , zero , hexvar jr ra addiu v0 , zero , hexvar addiu v0 , zero , hexvar bne a0 , v0 , hexvar nop jr ra addiu v0 , zero , hexvar jr ra addiu v0 , zero , - num jr ra addiu v0 , zero , hexvar
push rbp mov rbp , rsp mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov ecx , dword ptr [ rbp - hexvar ] mov edx , hexvar mov eax , ecx mul edx mov eax , ecx sub eax , edx shr eax , num add eax , edx shr eax , num imul eax , eax , hexvar sub ecx , eax mov eax , ecx mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax ] cmp dword ptr [ rbp - hexvar ] , eax jne hexvar mov rax , qword ptr [ rbp - num ] jmp hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , num pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r12d , edx mov r14 , rsi mov r15 , rdi test edx , edx js hexvar mov rbx , qword ptr [ r15 + num ] cmp dword ptr [ r15 ] , r12d jge hexvar lea rbp , [ r15 + num ] lea eax , [ r12 + num ] test rbx , rbx je hexvar mov edx , hexvar mov rdi , rbx mov esi , eax mov ecx , hexvar call hexvar mov r13 , rbx mov rbx , rax mov qword ptr [ rbp ] , rbx test rbx , rbx jne hexvar jmp hexvar test r14 , r14 je hexvar mov rdi , r14 call hexvar mov r12 , rax mov rbx , qword ptr [ r15 + num ] cmp dword ptr [ r15 ] , r12d jl hexvar test rbx , rbx jne hexvar lea rbp , [ r15 + num ] lea eax , [ r12 + num ] mov esi , hexvar mov edi , eax mov edx , hexvar call hexvar mov rbx , rax xor r13d , r13d mov qword ptr [ rbp ] , rbx test rbx , rbx je hexvar mov dword ptr [ r15 ] , r12d mov ebp , num test r14 , r14 je hexvar movsxd r12 , r12d mov rdi , rbx mov rsi , r14 mov rdx , r12 call hexvar mov rax , qword ptr [ r15 + num ] mov byte ptr [ rax + r12 ] , num jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov qword ptr [ rbp ] , r13 xor ebp , ebp mov eax , ebp add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push eax lea eax , [ ebx - hexvar ] push num push eax push num call hexvar mov dword ptr [ esp ] , num push eax mov eax , dword ptr [ ebx + hexvar ] push dword ptr [ ebp - hexvar ] push num push - num push num push num push num push dword ptr [ eax ] call hexvar add esp , hexvar mov dword ptr [ ebx + hexvar ] , eax jmp hexvar
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp - hexvar ] and edi , hexvar and ebx , hexvar or ebx , edi mov dword ptr [ ebp - hexvar ] , ebx mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + num ] , eax lea eax , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebx sub esp , num call hexvar add ebx , hexvar lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ hexvar ] test eax , eax mov dword ptr [ ebp - num ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar cmp dword ptr [ hexvar ] , num sete al and al , num mov byte ptr [ ebp - num ] , al jmp hexvar jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push r15 push r14 mov r15 , rdi push r13 push r12 mov r14 , rdx push rbp push rbx mov r12 , rsi xor ebx , ebx sub rsp , hexvar call hexvar mov r13 , rax mov rdi , rax mov rbp , r13 sub rbp , r15 call hexvar add rbp , rax test rax , rax je hexvar xor ebx , ebx cmp byte ptr [ r13 + rax - num ] , hexvar setne bl cmp byte ptr [ r12 ] , hexvar mov rcx , r12 je hexvar mov rdi , rcx mov qword ptr [ rsp + num ] , rcx call hexvar lea rdi , [ rbx + rbp + num ] mov qword ptr [ rsp ] , rax add rdi , rax call hexvar mov rdx , rbp mov rdi , rax mov rsi , r15 mov r13 , rax call hexvar test r14 , r14 mov byte ptr [ rax ] , hexvar lea rdi , [ rax + rbx ] mov r8 , qword ptr [ rsp ] mov rcx , qword ptr [ rsp + num ] je hexvar xor eax , eax cmp byte ptr [ r12 ] , hexvar mov rdx , rdi sete al sub rdx , rax mov qword ptr [ r14 ] , rdx mov rdx , r8 mov rsi , rcx call hexvar mov byte ptr [ rax ] , num add rsp , hexvar mov rax , r13 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r3 , [ r0 , hexvar ] mov r6 , r0 ldrb r4 , [ r3 ] cmp r4 , num beq hexvar add r2 , r3 , num str r2 , [ r0 , hexvar ] ldrb r2 , [ r3 , num ] ldrb r4 , [ r3 ] cmp r2 , num bne hexvar mov r7 , num mov r1 , hexvar mov r2 , num ldr ip , [ pc , hexvar ] sub r3 , r1 , r2 add r3 , r3 , r3 , lsr num add r3 , r2 , r3 , asr num ldr r0 , [ ip , r3 , lsl num ] add r5 , ip , r3 , lsl num ldrb lr , [ r0 ] cmp lr , r4 beq hexvar movhi r1 , r3 addls r2 , r3 , num cmp r2 , r1 bne hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r6 , lsr r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov edx , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] add edx , dword ptr [ ebp - hexvar ] add edx , - num mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esi xor esi , esi mov dword ptr [ ebp - hexvar ] , edx mov edx , esi div dword ptr [ ebp - hexvar ]
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , ecx sub edx , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax jne hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi + hexvar ] mov rsi , qword ptr [ rsi + hexvar ] mov qword ptr [ rbp - num ] , rsi mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] cmp rax , num mov ecx , hexvar mov edx , hexvar cmovne edx , ecx mov dword ptr [ rbp - hexvar ] , edx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov qword ptr [ rbp - hexvar ] , num mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r7 , r1 mov r1 , hexvar mov r4 , r2 mov r6 , r0 bl hexvar subs r5 , r0 , num beq hexvar mov r0 , hexvar bl hexvar sub r1 , r5 , r6 mov r4 , r0 mov r0 , r6 bl hexvar mov r3 , num add r5 , r5 , num str r0 , [ r4 , num ] str r7 , [ r4 ] str r5 , [ r4 , num ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] shr eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] lea edx , [ eax + num ] mov dword ptr [ ebp - hexvar ] , edx movzx eax , word ptr [ eax ] movzx eax , ax sub esp , num push eax push dword ptr [ ebp + hexvar ] call hexvar add esp , hexvar sub dword ptr [ ebp - hexvar ] , num cmp dword ptr [ ebp - hexvar ] , num jne hexvar nop mov ebx , dword ptr [ ebp - num ] leave ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] lea edx , [ hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar mov byte ptr [ hexvar ] , num add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov ecx , eax add ecx , - num mov dword ptr [ ebp + hexvar ] , ecx cmp eax , num je hexvar mov eax , dword ptr [ ebp - hexvar ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jl hexvar mov eax , dword ptr [ ebp - hexvar ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jg hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] movsx eax , byte ptr [ eax ] sub eax , hexvar mov cl , byte ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax ] , cl mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r2 , [ r0 , num ] ldr r6 , [ r0 ] mov r5 , r0 cmp r6 , r2 bhs hexvar mov r7 , num add r6 , r6 , num ldr r3 , [ r6 , - num ] mov r8 , r6 cmp r3 , num beq hexvar ldr r4 , [ r6 , - num ] ldr r3 , [ r5 , hexvar ] cmp r4 , num beq hexvar cmp r3 , num beq hexvar ldr r0 , [ r4 ] blx r3 ldr r3 , [ r5 , hexvar ] ldr r2 , [ r4 , num ] ldr r1 , [ r5 , hexvar ] str r7 , [ r4 ] str r1 , [ r4 , num ] str r4 , [ r5 , hexvar ] subs r4 , r2 , num bne hexvar cmp r3 , num beq hexvar ldr r0 , [ r6 , - num ] blx r3 str r7 , [ r6 , - num ] str r7 , [ r6 , - num ] ldr r2 , [ r5 , num ] cmp r2 , r8 add r6 , r6 , num bhi hexvar mov r3 , num str r3 , [ r5 , hexvar ] str r3 , [ r5 , hexvar ] pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp sub esp , num movzx eax , byte ptr [ hexvar ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax call hexvar mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov byte ptr [ hexvar ] , num mov eax , dword ptr [ hexvar ] jmp eax add esp , num pop ebp ret
push rbx xor ebx , ebx test rdi , rdi je hexvar cmp qword ptr [ rdi + hexvar ] , num setne bl mov rdi , qword ptr [ rdi + num ] test rdi , rdi je hexvar call hexvar add ebx , eax mov eax , ebx pop rbx ret
addiu sp , sp , - hexvar lui gp , hexvar addiu v0 , sp , hexvar addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) sw zero , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw zero , hexvar ( sp ) sw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) addiu v0 , zero , - num sw ra , hexvar ( sp ) sw v0 , hexvar ( sp ) sb zero , hexvar ( sp ) lw v0 , ( s0 ) sw v0 , hexvar ( sp ) jal hexvar nop lw a0 , hexvar ( sp ) lw v1 , ( s0 ) bne a0 , v1 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
push r13 push r12 push rbp push rbx mov rbp , rsi mov rbx , rdi sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax test rdi , rdi je hexvar test rbp , rbp je hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx call hexvar test rax , rax mov r12 , rax je hexvar mov rdx , rsp mov rsi , rax mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , qword ptr [ rsp ] test rdi , rdi je hexvar call hexvar xor r13d , r13d mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] mov rax , r13 jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) beqz a0 , hexvar sw gp , hexvar ( sp ) nor s0 , zero , a0 lui s1 , hexvar lw v0 , - hexvar ( s1 ) beqz v0 , hexvar lui s2 , hexvar lui s3 , hexvar addiu a0 , zero , num addiu a3 , zero , hexvar addiu a2 , s2 , hexvar jal hexvar addiu a1 , zero , hexvar lw a0 , - hexvar ( s3 ) beqz a0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop slt v0 , s0 , v0 bnez v0 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu a2 , s2 , hexvar lw s4 , hexvar ( sp ) addiu a3 , zero , hexvar lw s3 , hexvar ( sp ) addiu a1 , zero , hexvar lw s2 , hexvar ( sp ) addiu a0 , zero , hexvar lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) j hexvar addiu sp , sp , hexvar lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) move a1 , s0 jalr t9 lw a0 , - hexvar ( s3 )
push ebp push edi mov ebp , edx push esi push ebx mov edi , eax call hexvar add ebx , hexvar sub esp , hexvar mov esi , ecx push - num push ecx push eax call hexvar add esp , hexvar test eax , eax js hexvar sub esp , num push eax mov dword ptr [ esp + hexvar ] , eax push esi push edi call hexvar add esp , hexvar cmp eax , - num mov edx , dword ptr [ esp + hexvar ] je hexvar xor eax , eax add esp , hexvar pop ebx pop esi pop edi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] add r0 , sp , hexvar mov r3 , num ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , num ] bl hexvar add r3 , sp , hexvar mov r0 , r3 bl hexvar mov r3 , r0 cmp r3 , num bgt hexvar add r3 , sp , hexvar mov r0 , r3 bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mvn r3 , num str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] b hexvar add r3 , sp , hexvar mov r0 , r3 bl hexvar str r0 , [ sp , hexvar ] add r3 , sp , hexvar mov r0 , r3 bl hexvar ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] str r2 , [ r3 ] ldr r3 , [ sp , hexvar ] mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { pc }
movzx eax , byte ptr [ ebx + hexvar ] mov byte ptr [ ebp - hexvar ] , al mov byte ptr [ ebp - hexvar ] , al test al , al jne hexvar mov eax , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ eax ] test eax , eax je hexvar call hexvar mov byte ptr [ ebp - hexvar ] , num mov byte ptr [ ebp - hexvar ] , num jmp hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov rax , rsp add rax , - hexvar mov rsp , rax movabs rcx , hexvar mov rdi , rcx mov rsi , rcx movabs rdx , hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rcx ] , rax mov rax , qword ptr [ rcx ] movabs rdx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rcx ] mov r8d , dword ptr [ rax + hexvar ] xor r8d , num mov dword ptr [ rax + hexvar ] , r8d mov rax , qword ptr [ rcx ] mov dword ptr [ rax + hexvar ] , num mov rdi , qword ptr [ rcx ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , hexvar mov rsp , rbp pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r5 , r0 ldr r0 , [ r0 , hexvar ] sub sp , sp , num cmp r0 , num beq hexvar ldr r4 , [ r0 , hexvar ] cmp r4 , num beq hexvar ldr r3 , [ r0 ] ldr sl , [ r0 , num ] ldr r7 , [ r0 , hexvar ] ldr r8 , [ r0 , num ] ldr r6 , [ r0 , hexvar ] str r3 , [ r5 , hexvar ] bl hexvar mov r0 , sl bl hexvar mov sb , r0 mov r0 , r4 bl hexvar add r0 , sb , r0 add r0 , r0 , num bl hexvar mov r1 , num ldr r3 , [ pc , hexvar ] mvn r2 , num str r4 , [ sp , num ] str sl , [ sp ] mov sb , r0 bl hexvar mov r0 , sl bl hexvar mov r0 , r4 bl hexvar mov r0 , hexvar bl hexvar mov r4 , r0 mov r0 , sb bl hexvar mov r3 , num ldr r2 , [ r5 , hexvar ] str r0 , [ r4 , num ] str r4 , [ r5 , hexvar ] mov r0 , sb str r8 , [ r4 , num ] str r7 , [ r4 , hexvar ] str r6 , [ r4 , hexvar ] str r2 , [ r4 ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] bl hexvar mov r0 , num add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
subs r2 , r1 , num bxeq lr ldr r0 , [ r2 , hexvar ] ldr r3 , [ r0 , hexvar ] cmp r3 , num bxne lr
ldr r3 , [ pc , hexvar ] str r0 , [ r3 ] cmp r0 , hexvar bxls lr push { r4 , lr } ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar andeq ip , ip , r0 , ror r0 andeq r5 , sb , r4 , lsr num strdeq r0 , r1 , [ r0 ] , -sp strdeq r5 , r6 , [ sb ] , -ip
push rbp push rbx sub rsp , num mov rbx , rdi mov rbp , rsi call hexvar mov rsi , rbp mov rdi , rbx call hexvar add rsp , num pop rbx pop rbp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov cl , byte ptr [ rax + hexvar ] and cl , hexvar or cl , num mov byte ptr [ rax + hexvar ] , cl mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx + num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx + hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] mov cl , byte ptr [ rax + hexvar ] xor cl , hexvar mov dl , hexvar mov sil , dl xor sil , hexvar xor dl , hexvar or cl , sil or dl , hexvar xor cl , hexvar and cl , dl mov byte ptr [ rax + hexvar ] , cl mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , num pop rbp ret
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbp , rdi mov r14 , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov edi , hexvar call hexvar mov r12 , rax mov eax , num test r12 , r12 je hexvar mov rdi , rsp call hexvar mov r15 , rsp mov ebx , num mov r13d , hexvar mov rdx , r13 sub rdx , rbx lea rdi , [ r12 + rbx ] mov rcx , rbp mov esi , num call hexvar add rbx , rax cmp rbx , hexvar je hexvar test rax , rax je hexvar test byte ptr [ rbp ] , hexvar je hexvar test rbx , rbx jne hexvar mov rdi , rsp mov rsi , r14 call hexvar mov rdi , r12 call hexvar mov eax , num mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] cmp rax , num setne cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rcx mov eax , hexvar mov rcx , qword ptr [ rbp - hexvar ] cmp rcx , rax jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push ebp push edi push esi push ebx call hexvar add eax , hexvar sub esp , hexvar mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , edx xor edx , edx mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , edi cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar mov eax , num mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp push rbx sub rsp , num mov rdx , qword ptr [ rip + hexvar ] test rdx , rdx je hexvar mov eax , num cmp rdx , rdi jbe hexvar mov eax , num cmp qword ptr [ rip + hexvar ] , rdi jb hexvar mov rax , rdi shr rax , num mov rdx , qword ptr [ rip + hexvar ] movzx eax , byte ptr [ rdx + rax ] mov ecx , edi and ecx , num sar eax , cl and eax , num and eax , num cmp byte ptr [ rip + hexvar ] , al setne bpl test rsi , rsi je hexvar test bpl , bpl je hexvar mov rbx , rsi mov rsi , rdi mov rdi , qword ptr [ rip + hexvar ] call hexvar test rax , rax setne byte ptr [ rbx ] mov eax , ebp add rsp , num pop rbx pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar move a0 , a1 sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw a2 , hexvar ( sp ) addiu a0 , zero , num lw gp , hexvar ( sp ) move a1 , v0 lw a2 , hexvar ( sp ) lw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jr t9 addiu sp , sp , hexvar
mov eax , dword ptr [ esp + num ] mov dword ptr [ eax ] , hexvar mov dword ptr [ eax + num ] , hexvar mov dword ptr [ eax + num ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , num ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] movzx ecx , byte ptr [ hexvar ] and ecx , num mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov byte ptr [ hexvar ] , num mov eax , esp mov dword ptr [ eax ] , num call hexvar not eax shr eax , hexvar mov eax , dword ptr [ eax * num + hexvar ] jmp eax call hexvar mov eax , dword ptr [ hexvar ] jmp eax call hexvar mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + hexvar ] , edx call hexvar mov dword ptr [ ebp - num ] , eax add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s3 , a0 move s2 , a1 move s5 , a3 move s4 , a2 lw s1 , - hexvar ( gp ) lw v0 , ( s1 ) sw v0 , hexvar ( sp ) jal hexvar nop lw gp , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , - hexvar addiu a2 , zero , hexvar addiu a1 , zero , num addiu s0 , sp , hexvar move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw a0 , ( s3 ) sw s0 , hexvar ( sp ) move a3 , s2 lui a2 , hexvar addiu a2 , a2 , - hexvar addiu a1 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v1 , ( s1 ) bne a0 , v1 , hexvar addiu v0 , zero , num lw ra , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop
push { r4 , r5 , lr } sub sp , sp , hexvar mov r4 , r0 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] mov r2 , r0 mov r1 , num mov r0 , sp bl hexvar cmp r0 , num bne hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , sp bl hexvar ldrb r3 , [ r4 , hexvar ] bic r3 , r3 , num cmp r0 , num movne r0 , r3 orreq r0 , r3 , num strb r0 , [ r4 , hexvar ] mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , sp bl hexvar cmp r0 , num beq hexvar ldrb r3 , [ r4 , hexvar ] tst r3 , num beq hexvar ldr r5 , [ r4 , hexvar ] mov r1 , hexvar mov r0 , r4 bl hexvar str r0 , [ r4 , hexvar ] cmp r0 , num streq r5 , [ r4 , hexvar ] beq hexvar mov r2 , num mov r3 , num stm r0 , { r2 , r3 } ldr r3 , [ r4 , num ] ldr r3 , [ r3 , hexvar ] mov r0 , r4 blx r3 cmp r0 , num beq hexvar ldr r3 , [ r4 , num ] ldr r3 , [ r3 , hexvar ] mov r0 , r4 blx r3 cmp r0 , num beq hexvar ldrb r3 , [ r4 , hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar beq hexvar ldr r0 , [ r4 , num ] ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] xor edx , edx mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi ] , ecx mov dword ptr [ esi + num ] , hexvar mov dword ptr [ ebp - num ] , eax call hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar cmp dword ptr [ eax ] , num je hexvar call hexvar mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ hexvar ] , num jmp hexvar mov eax , dword ptr [ ebp + hexvar ] cmp byte ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp + num ] cmp eax , dword ptr [ ebp + hexvar ] jne hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ hexvar ] , num jmp hexvar add esp , hexvar pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar add esp , hexvar cmp eax , dword ptr [ ebx + hexvar ] je hexvar cmp eax , dword ptr [ ebx + hexvar ] je hexvar cmp eax , dword ptr [ ebx + hexvar ] je hexvar cmp eax , dword ptr [ ebx + hexvar ] je hexvar cmp eax , dword ptr [ ebx + hexvar ] je hexvar cmp eax , dword ptr [ ebx + hexvar ] je hexvar add esp , num xor eax , eax pop ebx ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - num ] mov r3 , num str r3 , [ fp , - hexvar ] b hexvar ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] add r3 , r2 , r3 ldrb r3 , [ r3 ] mov r0 , r3 bl hexvar mov r3 , r0 mov r1 , r3 ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] add r3 , r2 , r3 ldr r2 , [ pc , hexvar ] ldrb r2 , [ r2 , r1 ] strb r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] add r3 , r3 , num str r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - num ] cmp r2 , r3 blo hexvar ldr r3 , [ fp , - num ] mov r0 , r3 sub sp , fp , num pop { fp , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar xor edx , edx mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax + hexvar ] and ecx , hexvar cmp ecx , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , lr } mov r6 , r0 sub sp , sp , num mov r0 , hexvar bl hexvar subs r4 , r0 , num beq hexvar ldr r2 , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] str r2 , [ sp ] mov r1 , num ldr r2 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar cmp r0 , num movne r3 , num mov r5 , r0 str r0 , [ r4 ] strne r6 , [ r4 , num ] strne r3 , [ r4 , num ] beq hexvar mov r0 , r4 add sp , sp , num pop { r4 , r5 , r6 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp push r14 push rbx mov r14 , rdi mov rdi , rsi call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax mov esi , hexvar call hexvar test rax , rax je hexvar mov byte ptr [ rax ] , num add rax , num jmp hexvar mov eax , hexvar pop rbx pop r14 pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , esp add esi , - hexvar mov esp , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , edi mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ebx mov edx , dword ptr [ edx ] mov dword ptr [ esi ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi call hexvar cmp eax , num sete al mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , esi call hexvar add esp , hexvar xor ecx , ecx cmp ecx , eax setne bl mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r6 , r0 mov r7 , r2 mov r8 , r3 subs r5 , r1 , num beq hexvar add sl , r5 , num ldrb r3 , [ r5 ] cmp r3 , num moveq r2 , num beq hexvar mov r2 , num add r3 , r3 , r3 , lsl num add r3 , r3 , r2 eor r2 , r3 , r3 , lsr num ldrb r3 , [ sl ] , num cmp r3 , num bne hexvar sub sl , sl , r5 sub sl , sl , num add sb , sl , r2 add sb , sb , sl , lsl num eor sb , sb , sb , lsr num ldr r1 , [ r6 , hexvar ] mov r0 , sb bl hexvar ldr r3 , [ r6 ] ldr r4 , [ r3 , r1 , lsl num ] cmp r4 , num bne hexvar cmp r7 , num beq hexvar cmp r8 , num beq hexvar ldr r0 , [ r6 , num ] adds r7 , sl , num beq hexvar add r1 , sl , num bics r1 , r1 , num bne hexvar bl hexvar mov r4 , r0 cmp r4 , num beq hexvar mov r2 , r7 mov r1 , r5 mov r0 , r4 bl hexvar mov r5 , r4 mov r2 , sb mov r1 , r5 mov r0 , r6 bl hexvar mov r4 , r0 mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r15 , rdx mov rbx , rsi mov rbp , rdi call hexvar mov r12d , num test eax , eax je hexvar mov eax , r12d add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] test eax , eax setne bl movzx eax , bl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov ecx , esp lea edx , [ ebp - hexvar ] mov dword ptr [ ecx + num ] , edx mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + num ] , num call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) move s2 , a0 sw s1 , hexvar ( sp ) move a0 , a1 sw s0 , hexvar ( sp ) move s0 , a1 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s3 , hexvar ( sp ) move s1 , v0 ori v0 , zero , hexvar sltu v0 , s1 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu s3 , s1 , num addiu a2 , zero , hexvar addiu a1 , a1 , hexvar jalr t9 move a0 , s3 beqz v0 , hexvar lw gp , hexvar ( sp ) move v1 , zero move t0 , zero addiu t1 , zero , hexvar b hexvar move a1 , s0 sb a3 , num ( a0 ) sltu a3 , s1 , a2 move v1 , a2 bnez a3 , hexvar addiu a1 , a1 , num beq s1 , v1 , hexvar addu a0 , v0 , v1 lb a3 , ( a1 ) bne a3 , t1 , hexvar addiu a2 , v1 , num subu a0 , v1 , t0 addu a2 , v0 , t0 addiu t0 , v1 , num sltiu v1 , a0 , hexvar beqz v1 , hexvar sltu a3 , s1 , t0 sb a0 , ( a2 ) move a2 , t0 move v1 , a2 beqz a3 , hexvar addiu a1 , a1 , num lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) sh s3 , ( s2 ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 move a0 , v0 lw ra , hexvar ( sp ) move v0 , zero lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx call hexvar and al , num mov byte ptr [ ebp - num ] , al test byte ptr [ ebp - num ] , num je hexvar test byte ptr [ ebp - num ] , num jne hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar test byte ptr [ ebp - num ] , num jne hexvar test byte ptr [ ebp - num ] , num je hexvar mov dword ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov bl , num and bl , num movzx esi , bl mov dword ptr [ ebp - hexvar ] , eax mov eax , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx add esp , hexvar pop esi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] add rdi , hexvar call hexvar mov rdi , qword ptr [ rbp - num ] add rdi , hexvar call hexvar mov rdi , qword ptr [ rbp - num ] mov byte ptr [ rdi + hexvar ] , num mov rdi , qword ptr [ rbp - num ] movabs rax , hexvar mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - num ] movabs rdi , hexvar mov qword ptr [ rax + hexvar ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - num ] add rax , hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + hexvar ] , rax add rsp , hexvar pop rbp ret
clz r3 , r2 cmp r1 , num lsr r3 , r3 , num push { r4 , r5 , r6 , r7 , r8 , lr } movne r4 , r3 moveq r4 , num cmp r4 , num movne r5 , num bne hexvar mov r0 , hexvar mov r6 , r2 mov r7 , r1 bl hexvar mov r2 , num mov r5 , r0 mov r1 , r4 add r0 , r0 , r2 bl hexvar mov r3 , hexvar mov r0 , num stm r5 , { r3 , r4 } bl hexvar str r7 , [ r0 ] str r6 , [ r0 , num ] str r0 , [ r5 , hexvar ] mov r0 , r5 pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
mov eax , dword ptr [ rip ] test eax , eax jne hexvar movaps xmm0 , xmmword ptr [ rip ] xorps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rip ] , xmm0 movaps xmmword ptr [ rip ] , xmm0 add byte ptr [ rsi ] , bh add byte ptr [ rax ] , al add byte ptr [ rax ] , al test dword ptr [ rax + hexvar ] , ebp push rbp lea eax , [ rax ] add byte ptr [ rax ] , al add byte ptr [ rsi + rbp * num ] , dh mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al test dword ptr [ rip ] , eax xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al jmp hexvar add byte ptr [ rsp + rsi * num ] , dh mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al jmp hexvar add byte ptr [ rsp + rsi * num ] , dh mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al jmp hexvar add byte ptr [ rbp * num + hexvar ] , dh add byte ptr [ rax ] , al mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al xchg eax , ebp add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al
push { r4 , lr } ldr r4 , [ pc , hexvar ] ldr r0 , [ r4 , num ] cmp r0 , num popeq { r4 , pc }
push rbx mov rbx , rsi mov esi , num test byte ptr [ rbx + hexvar ] , num jne hexvar mov rax , qword ptr [ rbx + num ] mov rsi , qword ptr [ rax ] call hexvar test rax , rax je hexvar movzx ecx , byte ptr [ rbx + hexvar ] and ecx , hexvar movzx edx , byte ptr [ rax + hexvar ] and edx , hexvar or edx , ecx mov byte ptr [ rax + hexvar ] , dl movzx ecx , byte ptr [ rbx + hexvar ] and ecx , hexvar movzx edx , byte ptr [ rax + hexvar ] and edx , hexvar or edx , ecx mov byte ptr [ rax + hexvar ] , dl mov qword ptr [ rax + hexvar ] , rbx pop rbx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 move s7 , a1 move s1 , a2 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) andi v0 , v0 , hexvar beqz v0 , hexvar nop lw v0 , hexvar ( s0 )
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar add esp , num pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar cmp dword ptr [ hexvar ] , num jne hexvar mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al movabs rdi , hexvar mov dword ptr [ rip + hexvar ] , num call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx ] mov esi , dword ptr [ edx + hexvar ] mov edx , dword ptr [ edx + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ edi ] mov ebx , dword ptr [ edi + hexvar ] mov edi , dword ptr [ edi + hexvar ] sub esi , ebx sbb edx , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edx jae hexvar jmp hexvar mov eax , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx ] mov esi , dword ptr [ edx + hexvar ] mov edx , dword ptr [ edx + hexvar ] sub ecx , esi sbb eax , edx setb bl movzx edx , bl mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] cmp ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax jne hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , num call hexvar mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ hexvar ] mov esi , edx add esi , num mov dword ptr [ hexvar ] , esi mov dword ptr [ ecx + edx * num ] , eax add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) lui v0 , hexvar addiu a0 , v0 , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move v1 , v0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) move a1 , v0 move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] test esi , esi sete cl test edx , edx sete al or cl , al jne hexvar test edi , edi je hexvar test ebp , ebp je hexvar sub esp , num push ebp push edx push esi call hexvar add esp , hexvar test eax , eax je hexvar lea eax , [ edi + hexvar ] push ebp push eax push esi push esi call dword ptr [ edi + hexvar ] add esp , hexvar test eax , eax setne al add esp , hexvar pop ebx movzx eax , al pop esi pop edi pop ebp ret
push { r4 , r5 , r6 , lr } mov r4 , r0 mov r6 , r2 subs r5 , r1 , num bne hexvar cmp r0 , num popeq { r4 , r5 , r6 , pc } mov r1 , r2 bl hexvar cmp r0 , num ldrne r3 , [ r0 , hexvar ] orrne r3 , r3 , hexvar strne r3 , [ r0 , hexvar ] pop { r4 , r5 , r6 , pc }
add ecx , num mov dword ptr [ ebx + hexvar ] , ecx sub esp , hexvar push ebx call hexvar mov esi , eax add esp , hexvar test eax , eax je hexvar sub esp , hexvar push ebx call hexvar add esp , hexvar test eax , eax je hexvar sub esp , hexvar push eax mov ecx , esi mov edx , hexvar mov eax , ebx call hexvar mov esi , eax add esp , hexvar mov dword ptr [ esp + hexvar ] , esi jmp hexvar mov esi , eax jmp hexvar
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num jge hexvar mov eax , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar cmp dword ptr [ ebp - num ] , num mov al , num mov byte ptr [ ebp - hexvar ] , al jne hexvar cmp dword ptr [ ebp - num ] , num setne al mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , al jmp hexvar mov al , byte ptr [ ebp - hexvar ] and al , num movzx ecx , al mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] add rdi , - hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdi + num ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdi + hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdi + hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdi + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] movsxd rsi , dword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax mov esi , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar add rsp , hexvar pop rbp ret
addiu sp , sp , - num sw a0 , num ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , num ( sp ) b hexvar nop lw v0 , num ( sp ) lw v0 , ( v0 )
push ebp push edi mov ebp , edx push esi push ebx mov esi , eax call hexvar add ebx , hexvar sub esp , hexvar cmp edx , hexvar mov dword ptr [ esp + hexvar ] , ecx lea edi , [ ebx + hexvar ] jg hexvar jmp hexvar mov esi , esi lea edi , [ edi ] sub ebp , hexvar cmp ebp , hexvar jle hexvar sub esp , num push hexvar push edi push esi call hexvar add esp , hexvar cmp eax , hexvar je hexvar xor eax , eax add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push r14 push rbx push rax mov rbx , rdi mov rdi , qword ptr [ rdi + num ] xor r14d , r14d mov ecx , hexvar mov r8d , hexvar mov esi , num xor edx , edx call hexvar test eax , eax je hexvar mov r14d , num cmp dword ptr [ rbx ] , num je hexvar mov rdi , qword ptr [ rbx + num ] mov edx , hexvar mov ecx , hexvar mov r8d , hexvar mov esi , num call hexvar test eax , eax jne hexvar mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbx + num ] mov rdx , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov r8 , qword ptr [ rax + hexvar ] xor r14d , r14d mov esi , hexvar jmp hexvar mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbx + num ] mov rdx , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov r8 , qword ptr [ rax + hexvar ] mov esi , hexvar xor eax , eax call hexvar mov eax , r14d add rsp , num pop rbx pop r14 ret
sub esp , hexvar mov al , byte ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , ecx movsx ecx , al mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar ret
str fp , [ sp , - num ] ! add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] mov r3 , num str r3 , [ fp , - hexvar ] b hexvar ldr r3 , [ fp , - hexvar ] ldr r2 , [ r3 , num ] ldr r3 , [ fp , - hexvar ] lsl r3 , r3 , num add r3 , r2 , r3 ldr r3 , [ r3 ] str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldr r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] lsl r3 , r3 , num add r3 , r2 , r3 str r3 , [ fp , - num ] ldr r3 , [ fp , - num ] ldrb r3 , [ r3 , num ] mov r2 , r3 ldr r3 , [ fp , - hexvar ] cmp r3 , r2 bne hexvar ldr r3 , [ fp , - num ] ldr r3 , [ r3 ] ldr r2 , [ fp , - hexvar ] cmp r2 , r3 bne hexvar ldr r3 , [ fp , - hexvar ] b hexvar ldr r3 , [ fp , - hexvar ] add r3 , r3 , num str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] ldr r2 , [ fp , - hexvar ] cmp r2 , r3 blt hexvar mvn r3 , num mov r0 , r3 add sp , fp , num pop { fp } bx lr
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar test rcx , rcx je hexvar mov rbx , rcx mov r14 , rdx mov r15 , rsi mov r12 , rdi mov rax , rcx shr rax , hexvar movabs r13 , hexvar cmove r13 , rcx lea rax , [ rdi + hexvar ] mov qword ptr [ rsp + hexvar ] , rax lea rbp , [ rdi + hexvar ] nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] mov rcx , qword ptr [ r12 + hexvar ] mov eax , dword ptr [ r12 + hexvar ] mov dword ptr [ rsp ] , eax mov rdi , r14 mov rsi , r15 mov rdx , rbx mov r8 , qword ptr [ rsp + hexvar ] mov r9 , rbp call hexvar sub rbx , r13 add r14 , r13 add r15 , r13 cmp rbx , r13 cmovb r13 , rbx test rbx , rbx jne hexvar mov eax , num add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
test r8 , r8 je hexvar cmp byte ptr [ r8 + hexvar ] , num je hexvar mov eax , num ret
sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rdi mov qword ptr [ rsp + num ] , rsi mov rsi , qword ptr [ rsp + hexvar ] mov eax , dword ptr [ rsi + num ] mov rsi , qword ptr [ rsp + num ] add eax , dword ptr [ rsi + hexvar ] mov eax , eax mov esi , eax mov edi , hexvar and rsi , rdi mov eax , esi mov dword ptr [ rsp + num ] , eax mov edi , dword ptr [ rsp + num ] mov esi , num call hexvar add eax , dword ptr [ rsp + num ] add eax , num mov eax , eax mov ecx , eax mov edx , hexvar and rcx , rdx mov eax , ecx mov dword ptr [ rsp + num ] , eax mov eax , dword ptr [ rsp + num ] mov rcx , qword ptr [ rsp + hexvar ] xor eax , dword ptr [ rcx ] mov dword ptr [ rcx ] , eax add rsp , hexvar ret
mov eax , dword ptr [ rdi + hexvar ] mov edx , dword ptr [ rsi + hexvar ] mov r8 , rsi cmp eax , num sete cl cmp eax , num sete al or ecx , eax cmp edx , num sete al cmp edx , num sete dl or dl , al jne hexvar test cl , cl jne hexvar test cl , cl jne hexvar test dl , dl mov eax , num je hexvar ret mov rax , qword ptr [ rdi + hexvar ] cmp qword ptr [ r8 + hexvar ] , rax jg hexvar jl hexvar mov rax , qword ptr [ rdi + hexvar ] sub eax , dword ptr [ r8 + hexvar ] jne hexvar mov rsi , qword ptr [ rdi ] mov rdi , qword ptr [ r8 ] jmp hexvar nop dword ptr [ rax ] mov eax , num ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r12d , num cmp dword ptr [ rsi + hexvar ] , num jne hexvar mov r14 , rdx mov rbx , rsi mov r13 , rdi call hexvar test eax , eax jne hexvar xor r12d , r12d test r14 , r14 je hexvar xor eax , eax jmp hexvar call hexvar mov r14 , rax test rax , rax je hexvar mov qword ptr [ rsp ] , rax mov rdi , r14 call hexvar mov rdi , r14 call hexvar mov rbp , rax mov rdi , r14 call hexvar test rax , rax je hexvar mov r15 , rax mov rdi , r13 mov rsi , rbx mov rdx , rbp mov rcx , rax mov r8 , r14 call hexvar test eax , eax je hexvar mov rdi , r13 mov rsi , rbx mov rdx , rbp mov rcx , r15 mov r8 , r14 call hexvar test eax , eax je hexvar mov r12d , num cmp dword ptr [ rbx + hexvar ] , num mov rbx , qword ptr [ rsp ] jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor r12d , r12d mov rdi , r14 call hexvar test rbx , rbx jne hexvar jmp hexvar mov rbx , qword ptr [ rsp ] mov rdi , r14 call hexvar test rbx , rbx jne hexvar jmp hexvar mov rbx , qword ptr [ rsp ] mov rdi , r14 call hexvar test rbx , rbx je hexvar mov rdi , rbx call hexvar jmp hexvar xor r12d , r12d mov eax , r12d add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push { r0 , r1 , r2 , r3 } push { r4 , r5 , r6 , r7 , lr } sub sp , sp , hexvar ldr r4 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , num ] add r7 , sp , hexvar str r7 , [ sp ] ldr r3 , [ pc , hexvar ] ldr r5 , [ r3 ] cmp r4 , num beq hexvar add r7 , sp , hexvar mov r0 , r4 bl hexvar mov r6 , r0 mov r2 , r0 mov r1 , r4 mov r0 , r5 bl hexvar add r5 , r5 , r6 ldr r4 , [ r7 , num ] ! cmp r4 , num bne hexvar mov r3 , num strb r3 , [ r5 ] ldr r3 , [ pc , hexvar ] ldr r0 , [ r3 ] ldr r2 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , lr } add sp , sp , hexvar bx lr bl hexvar andeq pc , sl , r8 , lsl num
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar pop ebx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s3 , hexvar ( sp ) lw s3 , - hexvar ( gp ) sw s2 , hexvar ( sp ) move s2 , a2 sw s1 , hexvar ( sp ) move s1 , a1 sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s3 ) sw v0 , hexvar ( sp ) beqz a1 , hexvar lui s6 , hexvar beqz a2 , hexvar lw t9 , - hexvar ( gp ) addiu fp , sp , hexvar addiu a2 , zero , hexvar move a1 , zero jalr t9 move a0 , fp addiu v0 , zero , - num lw gp , hexvar ( sp ) lui s6 , hexvar lui s5 , hexvar sw s0 , hexvar ( sp ) sw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) beqz s0 , hexvar lw t9 , - hexvar ( gp ) move a2 , zero lw a0 , num ( s0 )
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ hexvar ] , num mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , num lea esi , [ hexvar ] mov dword ptr [ esp + num ] , esi lea esi , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax + hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num jne hexvar cmp dword ptr [ ebp + hexvar ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ eax ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar jmp hexvar cmp dword ptr [ ebp + hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov eax , dword ptr [ eax ] mov ecx , eax sub ecx , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ hexvar ] and eax , num cmp eax , num je hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 ) ext v0 , v0 , hexvar , num andi v0 , v0 , hexvar addiu v1 , zero , num beq v0 , v1 , hexvar nop addiu v1 , zero , num beq v0 , v1 , hexvar nop b hexvar nop lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) b hexvar nop lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) b hexvar nop addiu a0 , zero , num lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move v0 , zero move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
cmp dword ptr [ esp + num ] , num ja hexvar mov eax , dword ptr [ esp + num ] add eax , esi cmp dword ptr [ esp ] , eax ja hexvar mov edi , num mov eax , dword ptr [ esp ] cmp esi , eax jae hexvar sub eax , esi jmp hexvar sub esp , hexvar push num mov edi , dword ptr [ esp + hexvar ] push edi lea eax , [ ebx - hexvar ] push eax lea eax , [ ebx - hexvar ] push eax push num call hexvar add esp , hexvar push num push edi push eax call hexvar lea eax , [ ebp + num ] add esp , hexvar cmp dword ptr [ esp ] , eax jbe hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + num ] lea edx , [ eax - num ] cmp edx , num ja hexvar sub esp , num push eax push esi lea eax , [ ebx + hexvar ] call dword ptr [ eax ] mov edi , eax add esp , hexvar mov eax , dword ptr [ esp + num ] lea ebp , [ esi + eax ] sub esp , num push num lea eax , [ ebx - hexvar ] push eax push num call hexvar add esp , hexvar push edi push eax push num call hexvar add esp , hexvar jmp hexvar mov edi , num jmp hexvar
push r12 push rbp push rbx mov rbp , rdi mov rbx , rsi mov r12 , rdx mov rdi , rsi call hexvar mov edx , eax mov eax , num cmp edx , - num je hexvar mov rdi , qword ptr [ rbx ] mov rcx , - num repne scasb al , byte ptr [ rdi ] mov rsi , rcx not rsi mov rcx , rsi sub rcx , num mov eax , num cmp edx , ecx jle hexvar pop rbx pop rbp pop r12 ret
push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov dword ptr [ rsp + num ] , num xor r13d , r13d add esi , - num cmp esi , hexvar ja hexvar mov r12 , rcx mov rbx , rdx mov r15 , rdi mov r14 , qword ptr [ rdi + hexvar ]
push { r4 , r5 , r6 , lr } mov r5 , r3 ldrb r3 , [ r1 , hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar beq hexvar ldr r4 , [ r2 , hexvar ] cmp r4 , num bne hexvar ldr r4 , [ r2 , hexvar ] bl hexvar cmp r4 , r5 blo hexvar add r0 , r0 , r5 cmp r0 , r4 movhi r0 , num movls r0 , num pop { r4 , r5 , r6 , pc }
push rax test rdi , rdi je hexvar lea rax , [ rdi + hexvar ] lea rsi , [ rdi + hexvar ] lea rdx , [ rdi + hexvar ] lea rcx , [ rdi + hexvar ] lea r8 , [ rdi + hexvar ] lea r9 , [ rdi + hexvar ] lea r10 , [ rdi + hexvar ] lea r11 , [ rdi + num ] sub rsp , num mov rdi , rax mov eax , num push num push r11 push r10 call hexvar add rsp , hexvar pop rax ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , num mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push edi push esi push ebx call hexvar add ebx , hexvar call hexvar test eax , eax lea edi , [ ebx - hexvar ] je hexvar mov edx , dword ptr [ eax + num ] mov esi , eax test edx , edx je hexvar sub esp , hexvar push dword ptr [ eax ] call hexvar add esp , hexvar cmp eax , hexvar jne hexvar mov eax , dword ptr [ esi + num ] test eax , eax je hexvar push num push num push dword ptr [ esp + hexvar ] push dword ptr [ eax + hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar mov eax , esi pop ebx pop esi pop edi ret
push edi push esi push ebx mov ecx , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov edx , dword ptr [ esp + hexvar ] movzx eax , byte ptr [ ecx + hexvar ] and eax , num cmp al , num jne hexvar test byte ptr [ edx + hexvar ] , hexvar jne hexvar mov eax , dword ptr [ ecx + hexvar ] cmp dword ptr [ eax + hexvar ] , edx je hexvar cmp dword ptr [ eax + num ] , edx je hexvar cmp dword ptr [ eax + hexvar ] , edx jne hexvar mov eax , num pop ebx pop esi pop edi ret
push rax test rdi , rdi je hexvar test rsi , rsi je hexvar mov eax , dword ptr [ rdi ] not eax mov dword ptr [ rsp + num ] , eax cmp rdx , num mov eax , num cmovb rax , rdx test rax , rax je hexvar mov cl , byte ptr [ rsp + rax + num ] mov byte ptr [ rsi ] , cl cmp rax , num jbe hexvar mov cl , byte ptr [ rsp + rax + num ] mov byte ptr [ rsi + num ] , cl cmp rax , num je hexvar mov cl , byte ptr [ rsp + rax + num ] mov byte ptr [ rsi + num ] , cl cmp rax , num jb hexvar mov al , byte ptr [ rsp + rax ] mov byte ptr [ rsi + num ] , al pop rax ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 move s0 , a1 move s2 , a2 lw s3 , hexvar ( a0 ) addiu a1 , zero , hexvar lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw v0 , ( s3 )
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax sub esp , num push num push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar cmp eax , - num je hexvar push num push num push num push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax jne hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar mov edx , num jmp hexvar mov edx , num mov eax , dword ptr [ esp + num ] mov dword ptr [ eax + num ] , edx jmp hexvar lea eax , [ ebx + hexvar ] mov eax , dword ptr [ eax ] sub esp , num lea edx , [ ebx - hexvar ] push edx push eax call hexvar add esp , hexvar mov eax , num add esp , hexvar pop ebx ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , hexvar ] add r1 , sp , hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] str r3 , [ sp , num ] mov r3 , num str r3 , [ sp ] mov r3 , num ldr r2 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbx xor esi , esi mov r8d , hexvar mov edx , hexvar mov rbx , rdi sub rsp , hexvar mov rcx , rsp mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax call hexvar cmp eax , num je hexvar test eax , eax jne hexvar mov rax , qword ptr [ rsp ] test rax , rax je hexvar sub rax , num mov rdx , qword ptr [ rsp + num ] xor rdx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] lea edi , [ ebp - hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , hexvar lea eax , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , num mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx + num ] jae hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call eax test al , num jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - num ] , eax je hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx ] jge hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] imul ecx , dword ptr [ ebp - num ] , hexvar add eax , ecx mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] imul ecx , dword ptr [ ebp - num ] , hexvar add eax , ecx mov eax , dword ptr [ eax + num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ esp ] , eax call hexvar xor eax , eax add esp , hexvar pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , r9 mov r15d , r8d mov r12 , rcx mov r13 , rdx mov rbx , rsi mov rbp , rdi lea rax , [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] mov rax , qword ptr [ rsi + hexvar ] mov qword ptr [ rsp + num ] , rax mov ecx , hexvar jmp hexvar mov rax , qword ptr [ rsp + num ] mov rcx , qword ptr [ rax + hexvar ] mov esi , hexvar mov edx , hexvar lea r14 , [ rsp + hexvar ] mov rdi , r14 xor eax , eax call hexvar sub rsp , num mov edi , hexvar mov rsi , r14 mov rdx , rbp mov rcx , rbx mov r8 , r13 mov r9 , r12 push qword ptr [ rsp + hexvar ] push qword ptr [ rsp + hexvar ] push r15 call hexvar add rsp , hexvar mov ecx , hexvar nop word ptr cs : [ rax + rax ] cmp ecx , hexvar jle hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar cmp qword ptr [ rsp + num ] , num mov ecx , hexvar mov edx , hexvar cmove ecx , edx jmp hexvar nop dword ptr [ rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar sub rsp , num mov rdi , rbp mov rsi , rbx mov rdx , r13 mov rcx , r12 mov r8d , r15d mov r9 , qword ptr [ rsp + hexvar ] push qword ptr [ rsp + hexvar ] call hexvar add rsp , hexvar mov ecx , hexvar jmp hexvar mov rcx , qword ptr [ rsp + num ] cmp qword ptr [ rcx + hexvar ] , num mov ecx , hexvar mov edx , hexvar cmove ecx , edx jmp hexvar mov rcx , qword ptr [ rsp + hexvar ] add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar mov r4 , r0 bl hexvar add r0 , r0 , num bl hexvar mov sb , hexvar mov r6 , r0 mov r5 , r0 mov r7 , hexvar mov r8 , num mov sl , num mov fp , num ldrb r3 , [ r4 ] cmp r3 , num beq hexvar mov r2 , r4 cmp r3 , hexvar ldrb r1 , [ r2 , num ] ! beq hexvar strb r3 , [ r5 ] mov r3 , r1 cmp r3 , num mov r4 , r2 add r5 , r5 , num bne hexvar mov r3 , num mov r0 , r6 strb r3 , [ r5 ] add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar nop word ptr cs : [ eax + eax ] nop dword ptr [ eax + eax ]
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx xor eax , eax mov esp , ebp pop ebp ret
xorps xmm0 , xmm0 movups xmmword ptr [ rsi + hexvar ] , xmm0 movups xmmword ptr [ rsi + hexvar ] , xmm0 movups xmmword ptr [ rsi + hexvar ] , xmm0 movups xmmword ptr [ rsi + hexvar ] , xmm0 movups xmmword ptr [ rsi ] , xmm0 mov qword ptr [ rsi + hexvar ] , num mov al , byte ptr [ rdi ] mov byte ptr [ rsi ] , al movzx eax , byte ptr [ rdi + num ] shl rax , hexvar movzx ecx , byte ptr [ rdi + num ] shl rcx , num or rcx , rax movzx eax , byte ptr [ rdi + num ] or rax , rcx mov qword ptr [ rsi + num ] , rax movzx eax , word ptr [ rdi + num ] rol ax , num mov word ptr [ rsi + hexvar ] , ax movzx eax , byte ptr [ rdi + num ] shl rax , hexvar movzx ecx , byte ptr [ rdi + num ] shl rcx , num or rcx , rax movzx eax , byte ptr [ rdi + num ] or rax , rcx mov qword ptr [ rsi + hexvar ] , rax movzx eax , byte ptr [ rdi + num ] shl rax , hexvar movzx ecx , byte ptr [ rdi + hexvar ] shl rcx , num or rcx , rax movzx eax , byte ptr [ rdi + hexvar ] or rax , rcx mov qword ptr [ rsi + hexvar ] , rax ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp byte ptr [ eax ] , num jne hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] add ecx , eax mov dword ptr [ ebp - num ] , ecx mov eax , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax ] cmp eax , num setne dl and dl , num mov byte ptr [ ebp - num ] , dl mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax ] , num mov dl , byte ptr [ ebp - num ] and dl , num movzx eax , dl add esp , hexvar pop ebp ret
mov eax , dword ptr [ rip ] test eax , eax jne hexvar mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al cmc add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar addiu a0 , v0 , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr [ eax + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar pop edx pop ecx push esi push eax call hexvar test eax , eax sete al add esp , hexvar pop ebx pop esi ret
push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ ebx + hexvar ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar mov dword ptr [ ebx + hexvar ] , num add esp , hexvar add esp , num pop ebx ret
push ebx sub esp , num call hexvar add eax , hexvar mov edx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ edx ] mov edx , dword ptr [ edx + hexvar ] test edx , edx jne hexvar sub esp , hexvar push hexvar lea edx , [ eax - hexvar ] push edx push hexvar push hexvar push hexvar mov ebx , eax call hexvar add esp , hexvar mov eax , num jmp hexvar mov edx , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ edx ] mov edx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ edx ] cmp ecx , edx je hexvar sub esp , hexvar push hexvar lea edx , [ eax - hexvar ] push edx push hexvar push hexvar push hexvar mov ebx , eax call hexvar add esp , hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov eax , dword ptr [ eax + hexvar ] sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call eax add esp , hexvar add esp , num pop ebx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s4 , hexvar ( sp ) lw s4 , - hexvar ( gp ) sw s6 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) lw v0 , ( s4 ) lw s1 , hexvar ( sp ) lw s6 , hexvar ( sp ) sw v0 , hexvar ( sp ) beqz a0 , hexvar nop beqz a1 , hexvar move fp , a1 beqz a2 , hexvar move s2 , a2 beqz a3 , hexvar move s5 , a3 beqz s1 , hexvar move s0 , a0 addiu s3 , sp , hexvar move a1 , s1 jal hexvar move a0 , s3 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a2 , zero move a1 , v0 jalr t9 move a0 , s3 move a1 , s6 move a0 , s3 jal hexvar move s7 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a2 , zero move a0 , s3 jalr t9 move a1 , v0 lui s3 , hexvar lw s6 , ( s2 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , num mov dword ptr [ rbp - hexvar ] , num mov qword ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num jge hexvar mov rdi , qword ptr [ rbp - num ] call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , - num je hexvar cmp dword ptr [ rbp - hexvar ] , hexvar jne hexvar cmp dword ptr [ rbp - hexvar ] , hexvar jne hexvar mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] and eax , hexvar mov dword ptr [ rbp - hexvar ] , eax call hexvar mov rax , qword ptr [ rax ] movsxd rcx , dword ptr [ rbp - hexvar ] movzx edx , word ptr [ rax + rcx * num ] and edx , hexvar cmp edx , num jne hexvar jmp hexvar movsxd rax , dword ptr [ rbp - hexvar ] shl rax , num mov ecx , eax mov rax , qword ptr [ rbp - hexvar ] movsxd rdx , dword ptr [ rbp - hexvar ] movsx esi , word ptr [ rax + rdx * num ] add ecx , esi mov dword ptr [ rbp - hexvar ] , ecx mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - num ] , eax mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ rbp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ rbp - hexvar ] , ecx jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar cmp eax , num mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ rbp - hexvar ] , ecx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar add rsp , hexvar pop rbp ret
ldr r3 , [ pc , hexvar ] ldr ip , [ r3 , hexvar ] cmp ip , num bxne lr mov r3 , r1 mov r2 , r0 ldr r1 , [ pc , num ] mov r0 , num b hexvar ldrdeq r0 , r1 , [ sp ] , -r0 andeq r8 , sb , r8 , lsr ip
mov eax , dword ptr [ rip ] test eax , eax jne hexvar mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al push rbx add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) move a3 , zero move a2 , zero addiu a1 , zero , num addiu a0 , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sw zero , ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) jal hexvar nop beqz v0 , hexvar lw ra , hexvar ( sp ) sw zero , hexvar ( v0 ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
addiu sp , sp , - num sw fp , num ( sp ) move fp , sp sw a0 , num ( fp ) lw v1 , num ( fp ) lui v0 , hexvar ori v0 , v0 , num bne v1 , v0 , hexvar nop lui v0 , hexvar addiu v0 , v0 , hexvar b hexvar nop move v0 , zero move sp , fp lw fp , num ( sp ) addiu sp , sp , num jr ra nop
cmp dword ptr [ rdi + hexvar ] , num jne hexvar push r13 push r12 push rbp push rbx sub rsp , num mov r12 , rdx mov r13 , rsi mov rbx , rdi mov rax , qword ptr [ rdi + hexvar ] mov rcx , rax sub rcx , qword ptr [ rdi + num ] cmp rdx , rcx jbe hexvar lea rdx , [ rdx + rax ] sub rdx , rcx cmp rax , rdx ja hexvar test rax , rax je hexvar mov rbp , rax cmp rax , rdx jae hexvar lea rbp , [ rax + rax ] cmp rbp , rax jae hexvar jmp hexvar mov dword ptr [ rdi + hexvar ] , num jmp hexvar mov rdi , qword ptr [ rbx ] call hexvar mov qword ptr [ rbx ] , num mov qword ptr [ rbx + num ] , num mov qword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx + hexvar ] , num jmp hexvar mov ebp , num cmp rdx , num jbe hexvar cmp rdx , rbp jbe hexvar add rbp , rbp cmp rax , rbp jbe hexvar mov dword ptr [ rbx + hexvar ] , num jmp hexvar mov ebp , num mov rsi , rbp mov rdi , qword ptr [ rbx ] call hexvar test rax , rax je hexvar mov qword ptr [ rbx ] , rax mov qword ptr [ rbx + hexvar ] , rbp cmp dword ptr [ rbx + hexvar ] , num jne hexvar mov rdi , qword ptr [ rbx + num ] add rdi , qword ptr [ rbx ] mov rdx , r12 mov rsi , r13 call hexvar add qword ptr [ rbx + num ] , r12 add rsp , num pop rbx pop rbp pop r12 pop r13 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al cmp eax , hexvar je hexvar cmp eax , hexvar jg hexvar sub eax , hexvar cmp eax , num ja hexvar jmp hexvar cmp eax , hexvar jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] lea rdx , [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] movzx eax , byte ptr [ rax ] cmp al , hexvar jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] lea rdx , [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov eax , num jmp hexvar mov eax , num test al , al je hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , ( a0 )
push { r4 , r5 , r6 , r7 , r8 , lr } mov r8 , r0 bl hexvar cmp r0 , num sbcs r3 , r1 , num blt hexvar ldr r3 , [ pc , hexvar ] ldr r1 , [ r3 , hexvar ] mov r0 , r8 bl hexvar subs r6 , r0 , num beq hexvar mov r1 , num mov r0 , r6 bl hexvar cmp r0 , num bne hexvar mov r0 , r6 bl hexvar mov r0 , r6 bl hexvar cmp r0 , num popne { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi cmp dword ptr [ eax ] , - num setne bl mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax ] , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar cmp eax , num je hexvar call hexvar mov eax , dword ptr [ eax ] sub esp , hexvar lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx ] sub esp , hexvar mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar add esp , hexvar xor ecx , ecx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , num mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar jmp hexvar lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ hexvar ] cmp edx , dword ptr [ eax ] setl bl mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ hexvar ] , ecx jmp hexvar lea esp , [ ebp - num ] pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov ax , word ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - num ] , hexvar mov word ptr [ ebp - hexvar ] , ax mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] movsx eax , word ptr [ eax * num + hexvar ] cmp eax , - num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ ebp - num ] movsx eax , word ptr [ eax * num + hexvar ] movsx ecx , word ptr [ ebp + num ] cmp eax , ecx mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax * num + hexvar ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar add esp , hexvar pop ebp ret
push ebx mov eax , dword ptr [ esp + num ] mov ebx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ eax ] mov ecx , dword ptr [ eax + num ] xor edx , hexvar xor ecx , hexvar or ecx , edx je hexvar xor eax , eax test ebx , ebx je hexvar mov dword ptr [ ebx ] , hexvar pop ebx ret
push { r4 , r5 , r6 , lr } ldr r4 , [ pc , hexvar ] mov r6 , r1 mov r2 , r0 ldmib r4 , { r0 , r3 } ldr r1 , [ r0 , num ] ldr r5 , [ r1 , hexvar ] ldr r1 , [ r4 , hexvar ] blx r5 mov r5 , r0 ldr r0 , [ r4 , num ] mov r2 , r6 ldr r3 , [ r0 , num ] ldr r1 , [ r4 , hexvar ] ldr r6 , [ r3 , hexvar ] ldr r3 , [ r4 , hexvar ] blx r6 cmp r0 , num cmpne r5 , num beq hexvar ldr r1 , [ r0 , num ] ldr r0 , [ r5 , num ] cmp r1 , num beq hexvar cmp r0 , num beq hexvar ldrb r2 , [ r1 ] ldrb r3 , [ r0 ] cmp r2 , num beq hexvar cmp r3 , num beq hexvar pop { r4 , r5 , r6 , lr } b hexvar adds r0 , r3 , num movne r0 , num pop { r4 , r5 , r6 , pc } andeq r0 , r0 , r0 ldmdalo sb , { r0 , r3 , r7 , r8 , ip , sp }
push rbp mov rbp , rsp sub rsp , hexvar mov edi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rdi , qword ptr [ rbp - num ] call hexvar mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) lw a0 , hexvar ( sp ) move t9 , v0 jalr t9 nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 mov rdi , qword ptr [ rbp - num ] test rdi , rdi setne al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num ] jmp rdi mov rax , qword ptr [ rip ] jmp rax movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov ecx , hexvar sub rax , rcx sete dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rip ] jmp rax movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] test ecx , ecx setne dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num ] jmp rax mov rax , qword ptr [ rbp - num ] add rax , num mov esi , num mov edx , num mov r8d , num xor ecx , ecx mov dil , cl mov ecx , hexvar mov r9d , hexvar mov byte ptr [ rbp - hexvar ] , dil mov edi , ecx mov rcx , r9 mov r9 , rax mov al , byte ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rip ] mov dword ptr [ rbp - hexvar ] , eax jmp rcx movsd xmm0 , qword ptr [ rip ] mulsd xmm0 , qword ptr [ rbp - hexvar ] call hexvar cvtss2sd xmm0 , xmm0 mov rax , qword ptr [ rbp - num ] movsd qword ptr [ rax + hexvar ] , xmm0 add rsp , hexvar pop rbp ret
cmp rdi , hexvar ja hexvar lea rdx , [ rip + hexvar ] movsxd rax , dword ptr [ rdx + rdi * num ] add rax , rdx jmp rax lea rax , [ rip + hexvar ] ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 lw v0 , hexvar ( a0 )
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , hexvar mov dword ptr [ ebp - num ] , ecx mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + num ] , num mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , num mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx cmp dword ptr [ ebp - num ] , num jge hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - num ] shl ecx , num add eax , ecx mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx + edx * num ] shl ecx , hexvar mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp - num ] mov edx , dword ptr [ edx + esi * num ] and edx , hexvar shl edx , num or ecx , edx mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp - num ] mov edx , dword ptr [ edx + esi * num ] shr edx , num and edx , hexvar or ecx , edx mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp - num ] mov edx , dword ptr [ edx + esi * num ] shr edx , hexvar or ecx , edx mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] add esp , hexvar pop esi pop ebp ret
push edi push esi sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov dl , byte ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edi , esp mov dword ptr [ edi + hexvar ] , eax mov dword ptr [ edi + num ] , ecx mov dword ptr [ edi ] , esi movzx eax , dl and eax , num mov dword ptr [ edi + num ] , eax call hexvar add esp , hexvar pop esi pop edi ret
push rbp push r15 push r14 push rbx sub rsp , hexvar mov r14d , hexvar add esi , - num cmp esi , num ja hexvar mov rbx , rcx mov rbp , rdi jmp qword ptr [ rsi * num + hexvar ] mov r14d , num test rdx , rdx jne hexvar mov qword ptr [ rsp + num ] , num mov qword ptr [ rsp + hexvar ] , num mov rdi , rbp call hexvar mov ebp , eax lea rdx , [ rsp + num ] lea rcx , [ rsp + hexvar ] mov rdi , rbx xor esi , esi call hexvar jmp hexvar mov r14d , num test rdx , rdx jne hexvar mov rdi , rbp call hexvar test rax , rax je hexvar mov r15 , rax lea rsi , [ rsp + num ] mov rdi , rbx call hexvar jmp hexvar mov dword ptr [ rbx ] , hexvar mov r14d , num jmp hexvar mov r14d , num test rdx , rdx jne hexvar mov qword ptr [ rsp + num ] , num mov qword ptr [ rsp + hexvar ] , num mov rdi , rbp call hexvar mov ebp , eax lea rcx , [ rsp + num ] lea r8 , [ rsp + hexvar ] mov rdi , rbx xor esi , esi xor edx , edx call hexvar mov rbx , qword ptr [ rsp + num ] mov edi , hexvar call hexvar mov rdi , rbx mov rsi , rax mov edx , num xor ecx , ecx call hexvar test ebp , ebp je hexvar mov rbx , qword ptr [ rsp + hexvar ] mov edi , ebp call hexvar mov rdi , rbx mov rsi , rax mov edx , num xor ecx , ecx jmp hexvar mov r14d , num test rdx , rdx jne hexvar mov rdi , rbp call hexvar test rax , rax je hexvar mov r15 , rax lea rcx , [ rsp + num ] mov rdi , rbx xor esi , esi xor edx , edx call hexvar mov rbx , qword ptr [ rsp + num ] mov edi , dword ptr [ rbp ] call hexvar mov rdi , rbx mov rsi , rax mov edx , hexvar mov rcx , r15 call hexvar jmp hexvar mov r14d , hexvar mov eax , r14d add rsp , hexvar pop rbx pop r14 pop r15 pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr r4 , [ r0 , hexvar ] ldr r7 , [ sp , hexvar ] cmp r4 , num ldr r5 , [ sp , hexvar ] beq hexvar mov sb , r1 mov r6 , r2 mov r8 , r3 ldr r3 , [ r4 , hexvar ] cmp r3 , r5 bne hexvar ldr r3 , [ r4 , num ] cmp r3 , r6 bne hexvar ldr r3 , [ r4 , hexvar ] cmp r3 , r7 bne hexvar mov r2 , r6 ldr r1 , [ r4 , num ] mov r0 , sb bl hexvar cmp r0 , num bne hexvar cmp r8 , num ldr r1 , [ r4 , hexvar ] beq hexvar cmp r1 , num beq hexvar mov r2 , r7 mov r0 , r8 bl hexvar cmp r0 , num bne hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar xor ecx , ecx cmp ecx , eax jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax ] , num mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] movabs rcx , hexvar mov qword ptr [ rax + hexvar ] , rcx mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax movabs rsi , hexvar call hexvar mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rsi + hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax movabs rsi , hexvar call hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] mov dword ptr [ rbp - hexvar ] , ecx mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar cmp dword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
lui v0 , hexvar addiu sp , sp , - hexvar lw v0 , - hexvar ( v0 ) sw ra , hexvar ( sp ) andi v0 , v0 , num bnez v0 , hexvar sw s0 , hexvar ( sp ) lw ra , hexvar ( sp ) move s0 , zero move v0 , s0 lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar jal hexvar nop beqz v0 , hexvar lw ra , hexvar ( sp ) addiu a0 , zero , num jal hexvar move s0 , zero b hexvar nop addiu s0 , s0 , num jal hexvar nop bnez v0 , hexvar nop jal hexvar addiu a0 , zero , num move v0 , s0 lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbx , rdi mov r14d , esi mov ebp , edx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax movzx r13d , byte ptr [ rdi + hexvar ] mov byte ptr [ rdi + hexvar ] , num lea rdi , [ rdi + hexvar ] mov edx , hexvar mov esi , num call hexvar mov r12 , rax mov byte ptr [ rbx + hexvar ] , r13b test rax , rax js hexvar add r12 , num and r12 , hexvar mov rax , qword ptr [ rbx + hexvar ] lea rax , [ r12 + rax + hexvar ] mov qword ptr [ rbx + hexvar ] , rax test ebp , ebp je hexvar cmp r14d , num ja hexvar mov ebp , r14d cmp rbp , r12 ja hexvar lea rdi , [ rsp + hexvar ] mov r8 , qword ptr [ rbx + num ] mov rcx , rbp mov edx , num mov esi , num call hexvar cmp rbp , rax je hexvar mov rbx , qword ptr [ rbx ] mov edx , num lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rsi , rbx mov rdi , rax mov eax , num call hexvar mov eax , num mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebx sub esp , num call hexvar add eax , hexvar sub esp , hexvar lea edx , [ eax + hexvar ] push edx mov ebx , eax call hexvar add esp , hexvar nop add esp , num pop ebx ret
addiu sp , sp , - hexvar lui gp , hexvar sw s1 , hexvar ( sp ) addiu gp , gp , hexvar sw s5 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s5 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , a0 sw s6 , hexvar ( sp ) sw s0 , hexvar ( sp ) addiu s0 , sp , hexvar lw v1 , num ( s1 ) lw s3 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw v0 , ( s5 ) lw s6 , hexvar ( sp ) lw a0 , ( v1 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop sw v1 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop sw v0 , hexvar ( fp ) sw zero , hexvar ( fp ) lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) sltu v0 , v0 , v1 bnez v0 , hexvar nop lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) bne v1 , v0 , hexvar nop lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) sltu v0 , v0 , v1 bnez v0 , hexvar nop lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) lw a3 , hexvar ( fp ) lw a2 , hexvar ( fp ) addu v1 , a1 , a3 sltu t0 , v1 , a1 addu v0 , a0 , a2 addu a0 , t0 , v0 move v0 , a0 lw a0 , hexvar ( fp ) sltu a0 , a0 , v0 bnez a0 , hexvar nop lw a0 , hexvar ( fp ) move a1 , v0 bne a0 , a1 , hexvar nop lw a0 , hexvar ( fp ) sltu v0 , a0 , v1 bnez v0 , hexvar nop addiu v0 , zero , num b hexvar nop move v0 , zero move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp push rbx sub rsp , num cmp r8 , rdi jae hexvar shl r8 , num add r8 , qword ptr [ rsi ] cmp r9 , rdx mov rbp , qword ptr [ r8 + num ] jae hexvar shl r9 , num add r9 , qword ptr [ rcx ] test rbp , rbp mov rsi , qword ptr [ r9 ] mov rbx , qword ptr [ r9 + num ] je hexvar test rbx , rbx je hexvar cmp byte ptr [ rip + hexvar ] , num mov rdi , qword ptr [ r8 ] jne hexvar cmp byte ptr [ rip + hexvar ] , num jne hexvar cmp rbp , rbx mov rdx , rbx cmovbe rdx , rbp call hexvar test eax , eax jne hexvar xor eax , eax cmp rbp , rbx mov edx , hexvar setne al cmovb eax , edx add rsp , num pop rbx pop rbp ret
sltiu v0 , a0 , hexvar beqz v0 , hexvar move v0 , zero sll v0 , a0 , num lui a0 , hexvar addiu a0 , a0 , - hexvar addu a0 , a0 , v0 lw v0 , ( a0 ) jr v0 nop lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar jr ra move v0 , zero lui v0 , hexvar addiu v0 , v0 , hexvar jr ra nop
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp + hexvar ] , num jne hexvar mov dword ptr [ ebp + hexvar ] , num mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax ] mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + num ] , num cmp dword ptr [ ebp + num ] , num je hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + hexvar ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar sub esp , num push eax push ebp push edi call hexvar add esp , hexvar sub esp , num push dword ptr [ esi + hexvar ] push ebp push edi call hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui a1 , hexvar addiu a1 , a1 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
cmp qword ptr [ rdi + hexvar ] , num je hexvar mov rdx , rdi mov edi , hexvar mov esi , hexvar mov ecx , hexvar mov r8d , num mov r9d , num jmp hexvar mov eax , num ret
push ebp mov ebp , esp sub esp , num call hexvar add eax , hexvar lea edx , [ eax + hexvar ] mov edx , dword ptr [ edx ] test edx , edx je hexvar lea eax , [ eax + hexvar ] mov eax , dword ptr [ eax ] sub esp , hexvar push dword ptr [ ebp + num ] call eax add esp , hexvar nop leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] lea rdx , [ rip + hexvar ] mov rsi , rcx mov rdi , rax call hexvar leave ret
push { r4 , r5 , r6 , lr } mov r5 , r0 bl hexvar mov r4 , r0 add r0 , r0 , num bl hexvar mov ip , num strb ip , [ r0 , r4 ] mov r1 , r5 mov r2 , r4 pop { r4 , r5 , r6 , lr } b hexvar
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov ebx , edi mov qword ptr [ rsp + num ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov r14 , rcx call hexvar mov r15d , dword ptr [ rax ] mov rbp , qword ptr [ rip + hexvar ] test ebx , ebx js hexvar mov r13 , rax cmp dword ptr [ rip + hexvar ] , ebx ja hexvar lea r12d , [ rbx + num ] mov eax , r12d mov qword ptr [ rsp + hexvar ] , rax mov rsi , rax shl rsi , num lea rax , [ rip + hexvar ] cmp rbp , rax je hexvar mov rdi , rbp call hexvar mov rbp , rax mov qword ptr [ rip + hexvar ] , rax mov edi , dword ptr [ rip + hexvar ] mov rdx , qword ptr [ rsp + hexvar ] sub rdx , rdi shl rdx , num shl rdi , num add rdi , rbp mov esi , num call hexvar mov dword ptr [ rip + hexvar ] , r12d movsxd rbx , ebx shl rbx , num add rbx , rbp mov r12 , qword ptr [ rbx ] mov rbp , qword ptr [ rbx + num ] mov r8 , r14 mov rcx , qword ptr [ rsp + hexvar ] mov rdx , qword ptr [ rsp + num ] mov rsi , r12 mov rdi , rbp call hexvar cmp r12 , rax ja hexvar lea r12 , [ rax + num ] mov qword ptr [ rbx ] , r12 lea rax , [ rip + hexvar ] cmp rbp , rax je hexvar mov rdi , rbp call hexvar mov rdi , r12 call hexvar mov rbp , rax mov qword ptr [ rbx + num ] , rax mov r8 , r14 mov rcx , qword ptr [ rsp + hexvar ] mov rdx , qword ptr [ rsp + num ] mov rsi , r12 mov rdi , rax call hexvar mov dword ptr [ r13 ] , r15d mov rax , rbp add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push rbp mov rbp , rsp mov al , dil movsd xmm0 , qword ptr [ rip + hexvar ] mov byte ptr [ rbp - num ] , al movzx edi , byte ptr [ rbp - num ] cvtsi2sd xmm1 , edi mulsd xmm0 , xmm1 cvtsd2ss xmm0 , xmm0 pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ edi ] mov edi , dword ptr [ edi + num ] xor edx , edi xor esi , ebx or esi , edx sete dl and dl , num movzx edi , dl mov dword ptr [ ebp - hexvar ] , eax mov eax , edi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar cmp dword ptr [ num ] , num jne hexvar mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al mov al , byte ptr [ num ] xor al , hexvar mov byte ptr [ num ] , al movabs rdi , num mov dword ptr [ rip ] , num mov dword ptr [ rip ] , num add dword ptr [ rax ] , eax add byte ptr [ rax ] , al add byte ptr [ rax - hexvar ] , cl add byte ptr [ rax ] , al add byte ptr [ rax ] , al add byte ptr [ rax ] , al add byte ptr [ rax ] , al mov dword ptr [ rbp - num ] , eax call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] xor ebx , ebx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , ebx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , hexvar mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rdi , qword ptr [ rbp - num ] call hexvar shr rax , num add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ rip + hexvar ] sub rax , rcx setb dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rip + hexvar ] jmp rax movzx eax , byte ptr [ rip + hexvar ] mov ecx , eax mov eax , ecx and eax , num mov ecx , eax mov rcx , qword ptr [ rcx * num + hexvar ] jmp rcx mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rip + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + rcx * num ] mov esi , hexvar xor r8d , r8d mov r9b , r8b mov al , r9b call hexvar mov rcx , qword ptr [ rip + hexvar ] mov dword ptr [ rbp - hexvar ] , eax jmp rcx mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + rcx * num ] call hexvar test eax , eax setne dl movzx eax , dl mov ecx , eax mov rcx , qword ptr [ rcx * num + hexvar ] jmp rcx call hexvar mov esi , dword ptr [ rax ] movabs rdi , hexvar mov dword ptr [ rbp - hexvar ] , esi call hexvar mov rdi , qword ptr [ hexvar ] mov rcx , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + rcx * num ] mov qword ptr [ rbp - hexvar ] , rax call hexvar mov edi , hexvar mov esi , dword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rcx , rax mov al , num call hexvar mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp ] str r3 , [ r1 ] ldr r3 , [ r0 , num ] ldr r3 , [ r3 , num ] cmp r3 , num movne r0 , num beq hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar lui v1 , hexvar sw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) addiu a0 , v1 , - hexvar lw t9 , - hexvar ( gp ) sw fp , hexvar ( sp ) move fp , a1 sw v0 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s2 , hexvar ( sp ) move s2 , a2 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw v1 , hexvar ( sp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s4 , v0 lui v0 , hexvar lui s5 , hexvar addiu v0 , v0 , hexvar move s0 , zero addiu s5 , s5 , hexvar sw v0 , hexvar ( sp ) b hexvar lui s6 , hexvar lb v0 , num ( s1 ) beqz v0 , hexvar lw t9 , - hexvar ( gp ) addiu s1 , s1 , hexvar move s3 , s4 sw s1 , hexvar ( sp ) lw v0 , num ( s7 ) addiu a0 , s6 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 sw v0 , hexvar ( sp ) lw gp , hexvar ( sp ) beqz v0 , hexvar move s1 , v0 lw a0 , ( v0 )
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebx + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ ebx + hexvar ] cmp dword ptr [ ebp + num ] , eax jae hexvar mov eax , dword ptr [ ebx + hexvar ] cmp dword ptr [ ebp + num ] , eax ja hexvar push dword ptr [ ebp + num ] call hexvar add esp , num test al , al je hexvar mov eax , num jmp hexvar mov eax , num mov byte ptr [ ebp - hexvar ] , al and byte ptr [ ebp - hexvar ] , num movzx eax , byte ptr [ ebx + hexvar ] xor al , byte ptr [ ebp - hexvar ] movzx eax , al test eax , eax setne al mov byte ptr [ ebp - num ] , al cmp dword ptr [ ebp + hexvar ] , num je hexvar cmp byte ptr [ ebp - num ] , num je hexvar sub esp , hexvar push dword ptr [ ebp + num ] call hexvar add esp , hexvar mov edx , eax mov eax , dword ptr [ ebp + hexvar ] mov byte ptr [ eax ] , dl movzx eax , byte ptr [ ebp - num ] mov ebx , dword ptr [ ebp - num ] leave ret
test esi , hexvar push r14 push r13 push r12 push rbp push rbx jne hexvar mov rbp , rdi mov r12 , qword ptr [ rdi ] mov r13d , esi call hexvar mov dword ptr [ rax ] , num test byte ptr [ rbp + hexvar ] , hexvar mov r14 , rax jne hexvar movzx eax , word ptr [ r12 + hexvar ] cmp ax , num je hexvar cmp ax , num jne hexvar mov rdi , qword ptr [ rbp + num ] test rdi , rdi je hexvar mov rbx , qword ptr [ rdi + hexvar ] call hexvar test rbx , rbx mov rdi , rbx jne hexvar cmp r13d , hexvar mov ebx , num je hexvar cmp qword ptr [ r12 + hexvar ] , num jne hexvar mov rax , qword ptr [ r12 + hexvar ] cmp byte ptr [ rax ] , hexvar je hexvar mov eax , dword ptr [ rbp + hexvar ] test al , num je hexvar mov esi , ebx mov rdi , rbp call hexvar mov qword ptr [ rbp + num ] , rax pop rbx pop rbp pop r12 pop r13 pop r14 ret
push rax mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rcx ret
push rbp push rbx mov rbp , rdi sub rsp , num call hexvar test rax , rax mov rbx , rax sete al movzx eax , al lea rdi , [ rbx + rax + num ] call hexvar test rax , rax mov rcx , rax je hexvar mov rdx , rbx mov rsi , rbp mov rdi , rax call hexvar test rbx , rbx mov rcx , rax je hexvar mov byte ptr [ rcx + rbx ] , num add rsp , num mov rax , rcx pop rbx pop rbp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] mov r0 , hexvar bl hexvar mov r3 , r0 str r3 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] cmp r3 , num beq hexvar ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 mov r2 , r3 b hexvar mov r2 , num ldr r3 , [ fp , - num ] str r2 , [ r3 ] ldr r3 , [ fp , - num ] mov r2 , num str r2 , [ r3 , num ] ldr r3 , [ fp , - num ] ldr r2 , [ r3 , num ] ldr r3 , [ fp , - num ] str r2 , [ r3 , num ] ldr r3 , [ fp , - num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ fp , - num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ fp , - num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ fp , - num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ fp , - num ] mov r0 , r3 sub sp , fp , num pop { fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
cmp dword ptr [ rdi ] , num je hexvar push rax mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax add rsp , num ret
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw s1 , hexvar ( sp ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw a0 , hexvar ( a0 )
mov rcx , qword ptr [ rsi ] mov rsi , qword ptr [ rdx ] mov r8 , rcx imul r8 , rsi test rcx , rcx je hexvar test rsi , rsi je hexvar mov rax , rcx mov r9 , rsi mov rdx , r8 shr rax , hexvar shr r9 , hexvar shr rdx , hexvar xor eax , r9d cmp al , dl jne hexvar mov rax , r8 cqo idiv rcx cmp rax , rsi jne hexvar mov qword ptr [ rdi ] , r8 ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r6 , num ldr r5 , [ pc , hexvar ] ldr r4 , [ pc , hexvar ] ldr ip , [ r5 ] sub sp , sp , hexvar cmp r0 , num ldr r7 , [ r4 ] str ip , [ sp , hexvar ] ldr sl , [ sp , hexvar ] str r6 , [ r4 ] ldr fp , [ sp , hexvar ] beq hexvar mov r2 , num ldr r0 , [ sp , hexvar ] ldr r1 , [ r5 ] ldr r3 , [ pc , hexvar ] cmp r0 , r1 str r7 , [ r4 ] str r2 , [ r3 ] bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push rbx test rdi , rdi je hexvar mov rbx , rdi cmp dword ptr [ rdi + hexvar ] , num je hexvar cmp dword ptr [ rbx + hexvar ] , num je hexvar mov edi , dword ptr [ rbx + hexvar ] mov esi , num call hexvar mov edi , dword ptr [ rbx + hexvar ] call hexvar mov dword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rbx + hexvar ] mov ebx , num test rdi , rdi je hexvar call hexvar mov eax , ebx pop rbx ret
push { r4 , lr } mov r4 , r0 ldr r3 , [ r0 , hexvar ] mov r0 , r1 ldr r1 , [ r4 , num ] blx r3 ldr r3 , [ r4 , num ] cmp r3 , r0 bls hexvar ldr r3 , [ r4 ] add r0 , r3 , r0 , lsl num pop { r4 , pc }
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ eax + hexvar ] push edi call hexvar add esp , hexvar add dword ptr [ esi + num ] , num adc dword ptr [ esi + hexvar ] , num xor edx , edx add dword ptr [ esi + hexvar ] , eax adc dword ptr [ esi + hexvar ] , edx movzx edx , byte ptr [ edi ] test dl , dl je hexvar mov dword ptr [ esp + hexvar ] , num xor ebp , ebp mov dword ptr [ esp + num ] , num jmp hexvar lea esi , [ esi ] cmp dl , hexvar jne hexvar add edi , num movzx edx , byte ptr [ edi ] mov dword ptr [ esp + hexvar ] , num mov ebp , num test dl , dl je hexvar test dl , dl jns hexvar mov dword ptr [ esp + num ] , num mov byte ptr [ esp + num ] , dl call hexvar movzx edx , byte ptr [ esp + num ] mov eax , dword ptr [ eax ] test byte ptr [ eax + edx * num + num ] , hexvar mov eax , num cmovne ebp , eax add edi , num movzx edx , byte ptr [ edi ] test dl , dl jne hexvar mov edx , dword ptr [ esp + num ] test edx , edx je hexvar add dword ptr [ esi + hexvar ] , num adc dword ptr [ esi + hexvar ] , num test ebp , ebp je hexvar add dword ptr [ esi + hexvar ] , num adc dword ptr [ esi + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] test eax , eax je hexvar add dword ptr [ esi + hexvar ] , num adc dword ptr [ esi + hexvar ] , num add esp , hexvar mov eax , num pop ebx pop esi pop edi pop ebp ret
push { fp , lr } add fp , sp , num sub sp , sp , num mov r3 , num str r3 , [ fp , - hexvar ] b hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] lsl r3 , r3 , num add r3 , r2 , r3 ldr r3 , [ r3 ] str r3 , [ fp , - num ] ldr r0 , [ fp , - num ] bl hexvar ldr r3 , [ fp , - hexvar ] add r3 , r3 , num str r3 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] ldr r2 , [ fp , - hexvar ] cmp r2 , r3 blo hexvar ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num strb r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num strb r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] mov r0 , r0 sub sp , fp , num pop { fp , pc } andeq r0 , r0 , r0
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax add esp , hexvar pop ebp ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 mov qword ptr [ rbp - hexvar ] , r9 mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , rsp add rdx , - hexvar mov rsp , rdx mov rsi , rsp add rsi , - hexvar mov rsp , rsi mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov r8 , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , r8 mov r9d , dword ptr [ rbp - hexvar ] mov dword ptr [ rax ] , r9d mov r10 , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , r10 mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rcx mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx ] , rsi mov rdi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdi + num ] mov rdi , qword ptr [ rdi + hexvar ] mov r8 , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov r9 , qword ptr [ rbp - hexvar ] mov r10d , dword ptr [ r9 ] mov r11 , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ r11 ] mov rbx , qword ptr [ rax ] mov r9 , qword ptr [ rdx ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , r8 mov edx , r10d mov r8 , rbx mov rbx , qword ptr [ rbp - hexvar ] call rbx lea rsp , [ rbp - num ] pop rbx pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax je hexvar mov eax , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax cmp dword ptr [ rbp - hexvar ] , num jns hexvar mov dword ptr [ rbp - hexvar ] , num neg dword ptr [ rbp - hexvar ] jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sar eax , num add eax , num mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , hexvar jg hexvar and dword ptr [ rbp - hexvar ] , hexvar cmp dword ptr [ rbp - hexvar ] , num je hexvar cmp dword ptr [ rbp - hexvar ] , num jle hexvar cmp dword ptr [ rbp - hexvar ] , hexvar jle hexvar mov eax , hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rbp - num ] mov edx , dword ptr [ rax + hexvar ] mov eax , dword ptr [ rbp - hexvar ] cmp edx , eax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rdx + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ] mov rsi , rcx mov rdi , rdx call rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , edx mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar leave ret
sub rsp , num mov rdi , qword ptr [ rip + hexvar ] cmp byte ptr [ rdi ] , hexvar mov ecx , num mov eax , hexvar cmovne rcx , rax setne r8b movzx r8d , r8b add r8 , r8 call hexvar add rsp , num ret
push ebx sub esp , num call hexvar add eax , hexvar sub esp , num lea edx , [ eax - hexvar ] push edx push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov ebx , eax call hexvar add esp , hexvar add esp , num pop ebx ret
push ebp mov ebp , esp push ebx push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx ] , ecx mov bl , num and bl , num movzx ecx , bl mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebx pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] cmp eax , hexvar ja hexvar sub esp , num push num mov eax , dword ptr [ ebx + eax * num - hexvar ] lea eax , [ ebx + eax - hexvar ] push eax push num call hexvar mov edx , eax mov ecx , hexvar mov eax , num mov edi , edx repne scasb al , byte ptr es : [ edi ] not ecx mov esi , ecx add esp , hexvar test ebp , ebp je hexvar mov eax , ecx cmp ecx , ebp ja hexvar sub esp , num push eax push edx push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , esi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
orr r2 , r2 , hexvar push { r4 , r5 , r6 , r7 , r8 , lr } orr r2 , r2 , hexvar mov r6 , r3 bl hexvar subs r5 , r0 , num blt hexvar bl hexvar subs r4 , r0 , num strne r5 , [ r6 ] beq hexvar mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , pc }
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] sub r3 , fp , hexvar ldm r3 , { r2 , r3 } ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar mvn r3 , num b hexvar ldmib fp , { r2 , r3 } ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] cmn r3 , num bne hexvar mvn r3 , num b hexvar ldr r3 , [ fp , - num ] mov r2 , num mov r1 , r3 ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 sub sp , fp , num pop { fp , pc }
push ebx call hexvar add ebx , hexvar sub esp , num mov edx , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ ecx + hexvar ] cmp dword ptr [ edx + hexvar ] , eax jg hexvar mov eax , num jl hexvar mov eax , dword ptr [ ecx + hexvar ] sub eax , dword ptr [ edx + hexvar ] jne hexvar sub esp , num push dword ptr [ ecx ] push dword ptr [ edx ] call hexvar add esp , hexvar add esp , num pop ebx ret
push rbp push rbx mov rbp , rdi mov ebx , esi sub rsp , num mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + hexvar ] cmp rax , qword ptr [ rdi + hexvar ] jae hexvar lea rdx , [ rax + num ] mov qword ptr [ rdi + hexvar ] , rdx mov byte ptr [ rax ] , hexvar mov esi , hexvar mov rdi , rbp call hexvar test bl , bl je hexvar mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + hexvar ] cmp rax , qword ptr [ rdi + hexvar ] jae hexvar lea rdx , [ rax + num ] mov qword ptr [ rdi + hexvar ] , rdx mov byte ptr [ rax ] , bl add rsp , num pop rbx pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r0 ldr r0 , [ r0 , hexvar ] sub sp , sp , num ldr r3 , [ r0 ] ldr r4 , [ r0 , num ] ldr r7 , [ r0 , hexvar ] ldr r8 , [ r0 , hexvar ] str r3 , [ r5 , hexvar ] bl hexvar mov r0 , r4 bl hexvar add r0 , r0 , num bl hexvar mov r3 , hexvar mov r1 , num mvn r2 , num stm sp , { r3 , r4 } ldr r3 , [ pc , hexvar ] mov r6 , r0 bl hexvar mov r0 , r4 bl hexvar mov r0 , hexvar bl hexvar mov r4 , r0 mov r0 , r6 bl hexvar mov r3 , num ldr r2 , [ r5 , hexvar ] str r0 , [ r4 , num ] str r4 , [ r5 , hexvar ] mov r0 , r6 str r8 , [ r4 , hexvar ] str r7 , [ r4 , hexvar ] str r2 , [ r4 ] str r3 , [ r4 , num ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] bl hexvar mov r0 , num add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s3 , a0 sw a1 , hexvar ( sp ) move s1 , a2 move s2 , a3 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) addiu a1 , sp , hexvar addiu a0 , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar lui a3 , hexvar bnez s1 , hexvar move s0 , v0 beqz s2 , hexvar nop move a2 , s2 move a1 , s1 move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move v0 , zero lw v0 , hexvar ( s0 )
push { r4 , lr } bl hexvar mov r4 , hexvar mov r2 , num str r4 , [ r0 ] ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar mov r1 , r4 mov r2 , r0 mov r0 , num bl hexvar andeq r5 , r2 , r8 , lsl num
push rax mov rcx , qword ptr [ rdi ] mov rax , qword ptr [ rcx + hexvar ] test rax , rax je hexvar cmp rcx , qword ptr [ rsi ] je hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rcx ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar lea edx , [ ebx - hexvar ] mov dword ptr [ eax + num ] , num mov dword ptr [ eax + hexvar ] , num mov byte ptr [ eax + hexvar ] , num mov byte ptr [ eax + hexvar ] , num mov dword ptr [ eax ] , edx add esp , hexvar mov eax , num pop ebx ret
push r13 push r12 push rbp push rbx sub rsp , num mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar mov rbx , rdi mov r13 , rsi mov r12d , edx mov ebp , ecx mov rax , qword ptr [ rax ] test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num je hexvar test r8d , r8d jne hexvar test ebp , ebp je hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx call hexvar test eax , eax je hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx call hexvar test eax , eax jne hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rcx mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rcx cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , num jmp hexvar xor eax , eax mov rsp , rbp pop rbp ret
push r15 push r14 mov r14 , rcx push r13 push r12 mov r13 , rdx push rbp push rbx mov r12 , rdi sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax test rsi , rsi je hexvar mov r15 , rsp mov rbp , rsi mov rdi , r15 call hexvar test eax , eax mov ebx , eax je hexvar call hexvar mov dword ptr [ rax ] , ebx xor eax , eax test ebx , ebx sete al mov rdx , qword ptr [ rsp + hexvar ] xor rdx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) addiu gp , gp , hexvar lui s0 , hexvar sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) move s2 , a0 sw ra , hexvar ( sp ) addiu s1 , zero , - num sw gp , hexvar ( sp ) b hexvar addiu s0 , s0 , - hexvar lw s1 , num ( s0 ) beqz s1 , hexvar lw ra , hexvar ( sp ) addiu s0 , s0 , hexvar lw t9 , - hexvar ( gp ) lw a1 , - hexvar ( s0 ) jalr t9 move a0 , s2 bnez v0 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) move v0 , s1 lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lw v0 , hexvar ( fp ) addiu v1 , v0 , num sw v1 , hexvar ( fp ) lbu v0 , ( v0 ) sb v0 , hexvar ( fp ) lbu v0 , hexvar ( fp ) srl v0 , v0 , num andi v0 , v0 , hexvar move a0 , v0 lui v0 , hexvar lw v1 , hexvar ( fp ) sll v1 , v1 , num addu v1 , v1 , a0 sll v1 , v1 , num addiu v0 , v0 , - hexvar addu v0 , v1 , v0 lw v0 , ( v0 )
beqz a1 , hexvar nop addiu sp , sp , - hexvar lui t0 , hexvar lui t1 , hexvar sw s4 , hexvar ( sp ) lui s4 , hexvar sw s0 , hexvar ( sp ) sw fp , hexvar ( sp ) lui fp , hexvar sw s7 , hexvar ( sp ) lui s7 , hexvar sw s6 , hexvar ( sp ) lui s6 , hexvar sw s5 , hexvar ( sp ) lui s5 , hexvar sw s3 , hexvar ( sp ) addu s3 , a0 , a1 sw s2 , hexvar ( sp ) lui s2 , hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw ra , hexvar ( sp ) lw s0 , - hexvar ( s4 ) lb v1 , ( s1 ) lb a0 , - hexvar ( s6 ) beq a0 , v1 , hexvar lw v0 , - hexvar ( s5 ) beq v0 , s0 , hexvar sltu v0 , s0 , v0 beqz v0 , hexvar lw a2 , - hexvar ( s2 ) lw a0 , - hexvar ( t0 ) lw v0 , - hexvar ( fp ) addiu a1 , a2 , num addu a0 , a0 , a2 sltu v0 , a1 , v0 sw a1 , - hexvar ( s2 ) beqz v0 , hexvar sb v1 , ( a0 ) addiu s0 , s0 , num sw s0 , - hexvar ( s4 ) addiu s1 , s1 , num bne s3 , s1 , hexvar lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) lw s7 , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar sltu v1 , s0 , v0 bnez v1 , hexvar lw a3 , - hexvar ( s2 )
sub esp , hexvar lea eax , [ esp + hexvar ] push eax lea eax , [ esp + hexvar ] push eax push num push ebp push esi call hexvar mov edi , dword ptr [ esp + hexvar ] add esp , hexvar mov ecx , eax mov eax , dword ptr [ esp + hexvar ] add edi , esi test edx , edx je hexvar or eax , num mov dword ptr [ esp + hexvar ] , eax test al , num jne hexvar test al , num jne hexvar mov eax , ecx call hexvar cmp dword ptr [ esp + hexvar ] , num lea edx , [ ebx - hexvar ] push edx sbb eax , eax and eax , hexvar add eax , hexvar push eax lea eax , [ ebx - hexvar ] push eax push num call hexvar lea eax , [ ebx - hexvar ] add esp , hexvar push num push eax push num call hexvar pop ecx pop esi push eax push num call hexvar add esp , hexvar jmp hexvar nop
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar cmp eax , num sete bl and bl , num mov byte ptr [ ebp - hexvar ] , bl test byte ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar sub esp , num mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx + num ] , eax mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop ebx pop ebp ret
mov rax , qword ptr [ rdi + num ] mov rcx , qword ptr [ rdi + hexvar ] mov rcx , qword ptr [ rcx + hexvar ] cmp dword ptr [ rax ] , hexvar mov rcx , qword ptr [ rcx + hexvar ] mov eax , hexvar cmovne rax , rcx cmp rcx , hexvar cmovne rax , rcx ret
push ebp push edi mov edi , eax push esi push ebx xor esi , esi call hexvar add ebx , hexvar sub esp , hexvar mov dword ptr [ esp + hexvar ] , edx push eax call hexvar add esp , hexvar lea ebp , [ eax + num ] mov eax , edi nop lea esi , [ esi ] movzx edx , byte ptr [ eax ] add eax , num cmp dl , hexvar je hexvar test dl , dl jne hexvar test esi , esi je hexvar sub esp , hexvar sub ebp , esi push dword ptr [ esp + hexvar ] call hexvar mov edx , esi xor ecx , ecx add esp , hexvar imul edx , eax add ebp , edx setb cl mul esi seto al test ecx , ecx movzx eax , al jne hexvar test eax , eax jne hexvar sub esp , hexvar push ebp call hexvar mov dword ptr [ esp + hexvar ] , eax mov esi , eax movzx eax , byte ptr [ edi ] add esp , hexvar test al , al jne hexvar jmp hexvar lea esi , [ esi ] mov byte ptr [ esi ] , al add esi , num add edi , num movzx eax , byte ptr [ edi ] test al , al je hexvar cmp al , hexvar jne hexvar call hexvar mov ecx , dword ptr [ esp + num ] mov eax , dword ptr [ eax ] movzx ebp , byte ptr [ ecx ] test byte ptr [ eax + ebp * num + num ] , num mov edx , ebp je hexvar call hexvar mov eax , dword ptr [ eax ] mov edx , dword ptr [ esp + num ] add esi , num mov eax , dword ptr [ eax + ebp * num ] lea ecx , [ edx + num ] mov byte ptr [ esi - num ] , al movzx edx , byte ptr [ edx + num ] test dl , dl je hexvar lea esi , [ esi ] add ecx , num add esi , num mov byte ptr [ esi - num ] , dl movzx edx , byte ptr [ ecx ] test dl , dl jne hexvar add edi , num movzx eax , byte ptr [ edi ] test al , al jne hexvar mov byte ptr [ esi ] , num mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { r4 , lr } sub sp , sp , num ldr ip , [ sp , hexvar ] mov r4 , r0 str ip , [ sp ] add r0 , r0 , num bl hexvar ldr r3 , [ r4 , num ] str r3 , [ r4 ] add sp , sp , num pop { r4 , pc }
push edi push esi push ebx mov edi , dword ptr [ esp + hexvar ] call hexvar add ebx , num sub esp , num push num push hexvar push edi call hexvar add esp , hexvar cmp eax , - num mov esi , eax je hexvar mov eax , esi pop ebx pop esi pop edi ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw a0 , hexvar ( sp ) addiu a0 , sp , hexvar lw v0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar sw v0 , hexvar ( sp ) lui v0 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , sp , hexvar addiu a1 , v0 , - hexvar sw v0 , hexvar ( sp ) addiu a0 , zero , num jalr t9 sw a2 , hexvar ( sp ) addiu v1 , zero , num lw gp , hexvar ( sp ) bltz v0 , hexvar sw v1 , hexvar ( sp ) lui v0 , hexvar addiu s0 , zero , hexvar addiu v0 , v0 , - hexvar sw v0 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v1 , hexvar ( sp ) lw v0 , ( a0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
mov r9 , qword ptr [ rdi + num ] mov eax , num cmp dword ptr [ r9 + num ] , num je hexvar ret mov r10 , qword ptr [ rdx + num ] cmp dword ptr [ r10 + num ] , num jne hexvar push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rax , qword ptr [ r9 + hexvar ] mov r11 , qword ptr [ rax + hexvar ] mov rax , qword ptr [ r10 + hexvar ] mov r9 , qword ptr [ rax + hexvar ] mov eax , num movzx ebx , byte ptr [ r9 + hexvar ] cmp byte ptr [ r11 + hexvar ] , bl je hexvar mov qword ptr [ rsp ] , r8 mov r13 , rcx mov rbp , rdx mov r12 , rsi mov rbx , rdi mov rsi , qword ptr [ rsi ] mov ecx , hexvar lea rdi , [ rip + hexvar ] repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] seta al sbb al , num test al , al je hexvar mov eax , num test byte ptr [ rbx + hexvar ] , hexvar jne hexvar mov rsi , r12 mov rdi , rbx call hexvar movsxd r14 , eax mov eax , num test r14 , r14 je hexvar movzx eax , byte ptr [ rbx + hexvar ] and eax , hexvar cmp al , hexvar je hexvar mov r15 , qword ptr [ r12 + hexvar ] test r15 , r15 jne hexvar mov r15 , qword ptr [ r12 + hexvar ] mov rsi , r12 mov rdi , rbx call hexvar mov ecx , eax mov rax , r15 mov edx , num div rcx
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , edx mov esi , dword ptr [ ecx ] mov edi , dword ptr [ ebp - hexvar ] sub esp , hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , hexvar mov dword ptr [ esp + hexvar ] , edi lea esi , [ hexvar ] mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax call hexvar add esp , hexvar cmp eax , num je hexvar sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx sub esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar xor ecx , ecx sub esp , hexvar mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar lea esp , [ ebp - num ] pop esi pop edi pop ebp ret
test dword ptr [ rsi + hexvar ] , hexvar jne hexvar mov rsi , qword ptr [ rsi + num ] test rsi , rsi je hexvar mov rax , qword ptr [ rdi + num ] jmp qword ptr [ rax + hexvar ] nop dword ptr [ rax ] xor eax , eax ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov byte ptr [ hexvar ] , num mov byte ptr [ hexvar ] , num mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu v0 , zero , hexvar sw s2 , hexvar ( sp ) sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) beq a1 , v0 , hexvar lw s2 , hexvar ( a0 )
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar str r0 , [ sp , num ] str r3 , [ sp ] subs fp , r1 , num beq hexvar mov r4 , r2 mov r0 , r3 bl hexvar mov sl , r0 mov sb , hexvar b hexvar add r5 , r5 , num mov r1 , hexvar mov r0 , r5 bl hexvar subs r8 , r0 , num beq hexvar add r7 , r8 , num b hexvar mov r0 , r5 bl hexvar add r0 , r0 , num cmp r0 , fp movlo fp , r0 sub fp , fp , num mov r2 , fp mov r1 , r5 ldr r4 , [ sp , num ] mov r0 , r4 bl hexvar mov r3 , num strb r3 , [ r4 , fp ] b hexvar cmp r7 , num beq hexvar mov r1 , sb mov r0 , r7 bl hexvar cmp r0 , num beq hexvar add r4 , r0 , num ldrb r3 , [ r0 , num ] cmp r3 , hexvar bne hexvar ldrb r3 , [ r4 , num ] ! cmp r3 , hexvar beq hexvar ldrb r3 , [ r4 ] cmp r3 , num beq hexvar mov r1 , hexvar mov r0 , r4 bl hexvar subs r6 , r0 , num beq hexvar add r5 , r6 , num ldrb r3 , [ r6 , num ] cmp r3 , hexvar bne hexvar ldrb r3 , [ r5 , num ] ! cmp r3 , hexvar beq hexvar cmp r3 , hexvar beq hexvar mov r1 , sb mov r0 , r5 bl hexvar mov r8 , r0 mov r7 , r0 mov r2 , sl ldr r1 , [ sp ] mov r0 , r4 bl hexvar cmp r0 , num beq hexvar add r4 , r4 , sl cmp r6 , r4 bne hexvar cmp r8 , num beq hexvar sub r3 , r8 , r5 add r3 , r3 , num cmp r3 , fp movhs r3 , fp sub fp , r3 , num mov r2 , fp mov r1 , r5 ldr r4 , [ sp , num ] mov r0 , r4 bl hexvar mov r3 , num strb r3 , [ r4 , fp ] b hexvar mov fp , num mov r0 , fp add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push r13 push r12 xor eax , eax push rbp push rbx mov r13 , rsi xor esi , esi mov rbp , rdi mov r12 , rdx sub rsp , num call hexvar cmp eax , - num jne hexvar xor ebp , ebp test r12 , r12 je hexvar call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ r12 ] , eax add rsp , num mov rax , rbp pop rbx pop rbp pop r12 pop r13 ret
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , num mov rax , qword ptr [ rdi + hexvar ] mov rcx , qword ptr [ rax + hexvar ] test rcx , rcx je hexvar cmp dword ptr [ rax + hexvar ] , esi jbe hexvar mov esi , esi lea r12 , [ rcx + rsi * num ] mov rax , qword ptr [ r12 ] test rax , rax je hexvar mov rbx , qword ptr [ rax + hexvar ] test rbx , rbx je hexvar add rsp , num mov rax , rbx pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub ecx , hexvar sbb eax , num setb dl movzx esi , dl movsd xmm0 , qword ptr [ esi * num + hexvar ] cvtsd2ss xmm0 , xmm0 mov esi , dword ptr [ ebp - hexvar ] movss dword ptr [ esi + hexvar ] , xmm0 mov byte ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax ] add ecx , - num mov dword ptr [ eax ] , ecx mov byte ptr [ ebp - hexvar ] , num mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbx mov rbx , rdi call hexvar mov eax , dword ptr [ rax ] cmp eax , num sete dl cmp eax , hexvar sete al or al , dl je hexvar movzx eax , byte ptr [ rbx + hexvar ] xor eax , num pop rbx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax ] xor edx , edx div dword ptr [ ebp + hexvar ]
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] test esi , esi je hexvar test edi , edi je hexvar sub esp , num push hexvar lea eax , [ ebx - hexvar ] push eax lea eax , [ edi + edi * num + num ] push eax call hexvar mov ebp , eax add esp , hexvar test eax , eax je hexvar mov ecx , eax test edi , edi jle hexvar lea ecx , [ edi + edi * num ] add ecx , eax movzx edx , byte ptr [ esi ] shr dl , num movzx edx , dl movzx edx , byte ptr [ ebx + edx - hexvar ] mov byte ptr [ eax ] , dl movzx edx , byte ptr [ esi ] and edx , hexvar movzx edx , byte ptr [ ebx + edx - hexvar ] mov byte ptr [ eax + num ] , dl add eax , num mov byte ptr [ eax - num ] , hexvar add esi , num cmp ecx , eax jne hexvar mov byte ptr [ ecx - num ] , num mov eax , ebp add esp , hexvar pop ebx pop esi pop edi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar move a3 , a1 sw a2 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) lbu a2 , hexvar ( a0 ) lw a1 , hexvar ( a0 )
str lr , [ sp , - num ] ! sub sp , sp , hexvar ldr ip , [ sp , hexvar ] str ip , [ sp , num ] str r3 , [ sp , num ] mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , num ] bl hexvar add sp , sp , hexvar pop { pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 beqz a1 , hexvar move s0 , a2 move a0 , a1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar sw v0 , ( s1 )
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ hexvar ] cmp eax , num je hexvar lea eax , [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar sub esp , num call hexvar mov eax , esp mov ecx , hexvar lea esi , [ ebp - hexvar ] mov edi , eax rep movsd dword ptr es : [ edi ] , dword ptr [ esi ] call hexvar call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi ] mov dword ptr [ ebp - num ] , esi mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] add eax , hexvar mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar add esp , hexvar pop esi pop ebp ret
push { r4 , r5 , r6 , lr } subs r5 , r0 , num popeq { r4 , r5 , r6 , pc } ldr r0 , [ r5 ] cmp r0 , num beq hexvar mov r4 , r5 bl hexvar ldr r0 , [ r4 , num ] ! cmp r0 , num bne hexvar mov r0 , r5 bl hexvar pop { r4 , r5 , r6 , pc }
push r15 push r14 push rbx mov rbx , rdi mov rdi , rsi call hexvar test rbx , rbx je hexvar mov r14 , rax test rax , rax je hexvar mov r15 , qword ptr [ rbx + hexvar ] test r15 , r15 jne hexvar mov edi , hexvar call hexvar mov r15 , rax mov qword ptr [ rbx + hexvar ] , rax test rax , rax je hexvar mov rdi , qword ptr [ r15 + num ] test rdi , rdi jne hexvar call hexvar mov rdi , rax mov qword ptr [ r15 + num ] , rax test rax , rax je hexvar mov rsi , r14 pop rbx pop r14 pop r15 jmp hexvar xor eax , eax pop rbx pop r14 pop r15 ret
push r13 push r12 push rbp push rbx sub rsp , num mov r12 , rdi mov rbp , rsi mov rbx , rdx mov r13 , rcx mov rdi , qword ptr [ rsi + hexvar ] mov rax , qword ptr [ r12 + num ] mov rsi , rdx call qword ptr [ rax + hexvar ] lea rsi , [ rbx + num ] mov rax , qword ptr [ r12 + num ] mov rdi , qword ptr [ rbp ] call qword ptr [ rax + hexvar ] lea rsi , [ rbx + num ] mov rdi , qword ptr [ rbp + num ] mov rax , qword ptr [ r12 + num ] call qword ptr [ rax + hexvar ] movzx eax , byte ptr [ rbp + hexvar ] mov byte ptr [ rbx + hexvar ] , al movzx eax , byte ptr [ rbp + hexvar ] mov byte ptr [ rbx + hexvar ] , al mov edi , dword ptr [ rbp + hexvar ] lea eax , [ rdi - hexvar ] cmp eax , hexvar jbe hexvar lea rsi , [ rbx + hexvar ] mov edi , edi mov rax , qword ptr [ r12 + num ] call qword ptr [ rax + hexvar ] add rsp , num pop rbx pop rbp pop r12 pop r13 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( sp ) lw v0 , ( v0 )
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add eax , hexvar mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx ] sub esp , hexvar push edx mov ebx , eax call hexvar add esp , hexvar mov ebx , dword ptr [ ebp - num ] leave ret
mov rax , qword ptr [ rdi + num ] cmp dword ptr [ rax + num ] , num je hexvar sub rsp , num call hexvar cmp eax , hexvar setbe al movzx eax , al add rsp , num ret
beqz a0 , hexvar lui gp , hexvar lui v0 , hexvar addiu sp , sp , - hexvar lw v0 , - hexvar ( v0 ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) beqz v0 , hexvar sw gp , hexvar ( sp ) lui v1 , hexvar lw v1 , - hexvar ( v1 ) sll v1 , v1 , num addu v0 , v0 , v1 lw v1 , ( v0 ) beq a0 , v1 , hexvar nop lw v0 , hexvar ( a0 ) bnez v0 , hexvar move s0 , a0 lw ra , hexvar ( sp ) move a0 , s0 lw t9 , - hexvar ( gp ) lw s0 , hexvar ( sp ) jr t9 addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 lw a0 , num ( a0 ) move a0 , s0 lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) lw t9 , - hexvar ( gp )
push { r4 , lr } sub sp , sp , hexvar mov r4 , r0 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] bl hexvar mov r3 , num str r3 , [ sp ] mov r2 , num mov r3 , num mov r0 , r4 bl hexvar cmp r0 , num movne r0 , num bne hexvar mov r2 , r4 mov r1 , num add r0 , sp , num bl hexvar cmp r0 , num movne r0 , num bne hexvar ldrb r3 , [ sp , num ] cmp r3 , hexvar movne r0 , num bne hexvar ldrb r3 , [ sp , num ] ldr r2 , [ pc , hexvar ] ldrb r3 , [ r2 , r3 ] cmp r3 , hexvar beq hexvar ldrb r3 , [ sp , hexvar ] ldrb r3 , [ r2 , r3 ] cmp r3 , hexvar beq hexvar ldrb r3 , [ sp , hexvar ] ldrb r3 , [ r2 , r3 ] cmp r3 , hexvar beq hexvar mov r0 , r4 bl hexvar ldr r1 , [ pc , hexvar ] mov r0 , r4 bl hexvar cmp r0 , num beq hexvar ldr r0 , [ r4 , num ] ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx je hexvar mov dword ptr [ rbp - num ] , num jmp hexvar jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
movzx eax , byte ptr [ rdi + hexvar ] and eax , num cmp al , num je hexvar ret nop dword ptr [ rax ] mov rax , qword ptr [ rdi + num ] mov eax , dword ptr [ rax + num ] cmp eax , num je hexvar cmp eax , num jne hexvar mov rax , qword ptr [ rdi + hexvar ] mov dword ptr [ rax + hexvar ] , esi ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar push num push num push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
sub r3 , r1 , num push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r1 mov r6 , r0 cmp r3 , hexvar ldrls pc , [ pc , r3 , lsl num ] b hexvar andeq ip , r2 , ip , lsl num andeq ip , r2 , ip , lsl r1 andeq ip , r2 , ip , lsl r1 andeq ip , r2 , ip , lsl r1 andeq ip , r2 , r4 , lsl num andeq ip , r2 , ip , lsl r1 andeq ip , r2 , ip , lsl r1 andeq ip , r2 , ip , lsl r1 andeq ip , r2 , r0 , asr num andeq ip , r2 , ip , lsl r1 andeq ip , r2 , ip , lsl r1 andeq ip , r2 , ip , lsl r1 andeq ip , r2 , r4 , lsl r1 mov r7 , r1 mov r0 , hexvar bl hexvar mov r2 , hexvar mov r4 , r0 mov r1 , num add r0 , r0 , hexvar bl hexvar mov r2 , num ldr r3 , [ r6 , hexvar ] mov r0 , num str r7 , [ r4 , num ] str r5 , [ r4 , num ] strb r2 , [ r4 , hexvar ] str r3 , [ r4 ] str r4 , [ r6 , hexvar ] pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push r15 push r14 push r12 push rbx push rax mov r14 , rcx mov r15 , rdx mov r12 , rsi mov rbx , rdi call hexvar test rax , rax je hexvar mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rbx mov rsi , r12 mov rdx , r15 mov rcx , r14 add rsp , num pop rbx pop r12 pop r14 pop r15 jmp rax xor eax , eax add rsp , num pop rbx pop r12 pop r14 pop r15 ret
lui gp , hexvar lw v1 , hexvar ( a0 ) addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu v0 , zero , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) beq a1 , v0 , hexvar sw gp , hexvar ( sp ) slti v0 , a1 , hexvar bnez v0 , hexvar move s1 , a2 addiu v0 , zero , hexvar beq a1 , v0 , hexvar addiu v0 , zero , hexvar beq a1 , v0 , hexvar addiu v0 , zero , hexvar beq a1 , v0 , hexvar nop lw a0 , hexvar ( s0 ) lw t9 , - hexvar ( gp ) lw ra , hexvar ( sp ) move a2 , s1 lw s0 , hexvar ( sp ) lw s1 , hexvar ( sp ) b - hexvar addiu sp , sp , hexvar addiu v0 , zero , hexvar beq a1 , v0 , hexvar addiu v0 , zero , hexvar beq a1 , v0 , hexvar addiu v0 , zero , num bne a1 , v0 , hexvar nop lw v0 , hexvar ( a0 ) bnez v0 , hexvar lw t9 , - hexvar ( gp ) lw ra , hexvar ( sp ) move v0 , zero lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) addiu a1 , zero , hexvar bal - hexvar sw a3 , hexvar ( sp ) addiu a1 , zero , hexvar lw gp , hexvar ( sp ) move a2 , s1 lw a0 , hexvar ( s0 ) lw t9 , - hexvar ( gp )
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax movzx eax , byte ptr [ hexvar ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov al , byte ptr [ ebp + hexvar ] and al , hexvar mov byte ptr [ ebp + hexvar ] , al mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push r15 push r14 mov r14 , rdi push r13 push r12 lea r12d , [ r8 + num ] push rbp push rbx mov rdi , rsi and r12d , hexvar mov r15 , rdx mov ebx , r8d sub rsp , hexvar movsxd rsi , dword ptr [ rdx ] movsxd r12 , r12d add r12 , hexvar mov qword ptr [ rsp + num ] , rcx add rsi , r12 call hexvar test rax , rax mov r13 , rax je hexvar movsxd rbp , dword ptr [ r15 ] mov edi , num mov rax , rbp add rbp , r13 add r12d , eax mov rax , qword ptr [ r14 + num ] mov rsi , rbp mov dword ptr [ r15 ] , r12d call qword ptr [ rax + hexvar ] mov rax , qword ptr [ r14 + num ] movsxd rdi , ebx lea rsi , [ rbp + num ] mov r12 , rdi call qword ptr [ rax + hexvar ] mov rax , qword ptr [ r14 + num ] lea rsi , [ rbp + num ] mov edi , hexvar call qword ptr [ rax + hexvar ] lea rcx , [ rbp + hexvar ] mov rsi , qword ptr [ rsp + num ] xor edx , edx mov eax , hexvar mov word ptr [ rbp + hexvar ] , dx mov dword ptr [ rbp + hexvar ] , hexvar mov rdi , rcx mov word ptr [ rbp + hexvar ] , ax mov rdx , r12 call hexvar test bl , num lea rdi , [ rax + r12 ] je hexvar add ebx , num add rdi , num mov byte ptr [ rdi - num ] , num test bl , num jne hexvar add rsp , hexvar mov rax , r13 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , hexvar mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , num mov al , byte ptr [ ebp + num ] movsx ecx , byte ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov byte ptr [ ebp - num ] , al call hexvar xor ecx , ecx movzx edx , al movsx edx , byte ptr [ edx + hexvar ] cmp ecx , edx setle al and al , num movzx eax , al add esp , num pop ebp ret
orr ip , r1 , r2 cmp ip , hexvar movlo r3 , num movhs r3 , num cmp r2 , num moveq r3 , num cmp r3 , num push { r4 , r5 , r6 , lr } bne hexvar cmp r0 , num mul r4 , r2 , r1 beq hexvar cmp r4 , num blt hexvar mov r1 , r4 bl hexvar adds r4 , r4 , num movne r4 , num cmp r0 , num movne r4 , num cmp r4 , num mov r5 , r0 beq hexvar mov r0 , num bl hexvar mov r0 , r5 pop { r4 , r5 , r6 , pc }
push r15 push r14 push rbx mov r14 , rcx mov r15 , rdx mov rbx , rdi call hexvar mov rdi , rbx mov rsi , r15 mov rdx , r14 pop rbx pop r14 pop r15 jmp hexvar nop word ptr cs : [ rax + rax ]
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lui v0 , hexvar addiu a1 , v0 , hexvar lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rip + hexvar ] jmp rdi mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rcx , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rax + hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu v0 , zero , - num sw s3 , hexvar ( sp ) move s3 , a0 sw s2 , hexvar ( sp ) move s2 , a3 sw s1 , hexvar ( sp ) move s1 , a2 sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) bne a1 , v0 , hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a1 , v0 addiu a1 , a1 , num lw t9 , - hexvar ( gp ) addiu a2 , zero , hexvar sll s0 , a1 , num lui a1 , hexvar move a0 , s0 jalr t9 addiu a1 , a1 , hexvar beqz v0 , hexvar lw ra , hexvar ( sp ) addiu a3 , s0 , - num blez a3 , hexvar move v1 , v0 move a0 , zero sra a1 , a0 , num sb zero , ( v1 )
mov eax , dword ptr [ rdi + hexvar ] mov r9d , dword ptr [ rsi + hexvar ] movups xmm0 , xmmword ptr [ rdi ] mov r8d , dword ptr [ rdi + hexvar ] mov rdx , qword ptr [ rsi ] mov qword ptr [ rdi ] , rdx mov edx , dword ptr [ rsi + num ] mov dword ptr [ rdi + num ] , edx mov edx , dword ptr [ rsi + hexvar ] mov dword ptr [ rdi + hexvar ] , edx mov edx , dword ptr [ rsi + hexvar ] mov dword ptr [ rdi + hexvar ] , edx movups xmmword ptr [ rsi ] , xmm0 mov dword ptr [ rsi + hexvar ] , r8d mov edx , eax and edx , num mov ecx , r9d and ecx , num or ecx , edx mov dword ptr [ rdi + hexvar ] , ecx and r9d , num and eax , num or eax , r9d mov dword ptr [ rsi + hexvar ] , eax ret
push { r4 , r5 , r6 , r7 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r4 ] mov r6 , r0 mov r5 , r1 mov r7 , r2 ldr r1 , [ pc , hexvar ] add r2 , sp , num mov r0 , num str r3 , [ sp , hexvar ] bl hexvar cmp r0 , num beq hexvar bl hexvar ldr r1 , [ r0 ] cmp r1 , hexvar bne hexvar mov r3 , num str r3 , [ sp , num ] str r3 , [ sp , num ] cmp r6 , num strhge r6 , [ sp , num ] add r2 , sp , num cmp r5 , num ldr r1 , [ pc , hexvar ] mov r0 , num strhge r5 , [ sp , num ] bl hexvar cmp r0 , num beq hexvar bl hexvar mov r3 , r7 ldr r1 , [ r0 ] ldr r2 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc } ldrbgt r0 , [ r3 , hexvar ] ! andeq r0 , r0 , r0
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi lea esi , [ ebp - hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar test al , num jne hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax ] add ecx , - num mov dword ptr [ eax ] , ecx jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edi , dword ptr [ edx + num ] mov ebx , dword ptr [ edx + hexvar ] mov edx , dword ptr [ edx + num ] xor esi , edx xor edi , ebx mov edx , dword ptr [ ebp + hexvar ] mov ebx , esp mov dword ptr [ ebx + num ] , edx mov dword ptr [ ebx + num ] , edi mov dword ptr [ ebx ] , esi mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] test eax , eax je hexvar sub esp , num lea edx , [ esi + hexvar ] push edx push eax call hexvar add esp , hexvar mov edi , num test eax , eax je hexvar test ebp , ebp jne hexvar mov edi , num cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , edi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
lea ebx , [ ebp - hexvar ] sub esp , hexvar push dword ptr [ ebp - hexvar ] push num push ebx push esi push dword ptr [ ebp - hexvar ] call hexvar mov edx , dword ptr [ ebp - hexvar ] add edx , dword ptr [ ebp - hexvar ] add esp , hexvar add dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx jmp hexvar
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi lea edi , [ ebp - hexvar ] mov ebx , edi mov dword ptr [ esp ] , ebx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi call hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax lea eax , [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] shl eax , num add esp , num pop ebp ret
mov rax , rdi movzx ecx , byte ptr [ rdi ] test cl , cl je hexvar mov edi , edx and edi , hexvar sub edx , num sub ecx , hexvar cmp cl , hexvar ja hexvar movzx ecx , cl jmp qword ptr [ rcx * num + hexvar ] test edi , edi jne hexvar mov byte ptr [ rsi + hexvar ] , num cmp edx , num ja hexvar mov byte ptr [ rsi + hexvar ] , num jmp hexvar mov qword ptr [ rsi + hexvar ] , hexvar jmp hexvar mov qword ptr [ rsi + hexvar ] , hexvar jmp hexvar mov byte ptr [ rsi + hexvar ] , num jmp hexvar cmp qword ptr [ rsi + hexvar ] , num jne hexvar mov qword ptr [ rsi + hexvar ] , hexvar jmp hexvar mov byte ptr [ rsi + hexvar ] , num jmp hexvar mov byte ptr [ rsi + hexvar ] , num jmp hexvar mov byte ptr [ rsi + hexvar ] , num jmp hexvar mov byte ptr [ rsi + hexvar ] , num add rax , num movzx ecx , byte ptr [ rax ] test cl , cl jne hexvar ret
str lr , [ sp , - num ] ! ldr r3 , [ r0 , hexvar ] ldr r3 , [ r3 , num ] ldr ip , [ r0 , hexvar ] add r2 , r1 , ip , lsl num mov lr , num str lr , [ r1 , ip , lsl num ] cmp r3 , lr beq hexvar str r3 , [ r2 , - num ] ! ldr r3 , [ r3 , hexvar ] cmp r3 , num bne hexvar ldr r0 , [ r0 , hexvar ] pop { pc }
push rbp push r14 push rbx mov eax , dword ptr [ rdi ] mov ebp , hexvar cmp eax , dword ptr [ rsi ] jne hexvar mov rbx , rdi mov rax , qword ptr [ rdi + hexvar ] mov ebp , hexvar test rax , rax je hexvar mov r14 , rsi mov rcx , qword ptr [ rax + hexvar ] test rcx , rcx je hexvar mov rdi , rbx mov rsi , r14 call rcx test eax , eax jle hexvar mov rax , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , rbx mov rsi , r14 pop rbx pop r14 pop rbp jmp rax mov ebp , eax mov eax , ebp pop rbx pop r14 pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + hexvar ] mov esi , dword ptr [ hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , num mov dword ptr [ ebp - hexvar ] , eax mov eax , ecx add esp , hexvar pop esi pop ebp ret
str fp , [ sp , - num ] ! add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] mov r2 , r3 ldr r3 , [ fp , - hexvar ] add r3 , r3 , r2 str r3 , [ fp , - hexvar ] mov r3 , num str r3 , [ fp , - num ] b hexvar ldr r3 , [ fp , - hexvar ] ldr r2 , [ r3 , num ] ldr r3 , [ fp , - num ] lsl r3 , r3 , num add r3 , r2 , r3 ldr r3 , [ r3 ] mov r2 , r3 ldr r3 , [ fp , - hexvar ] add r3 , r3 , r2 str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - num ] add r3 , r3 , num str r3 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] ldr r2 , [ fp , - num ] cmp r2 , r3 blt hexvar ldr r3 , [ fp , - hexvar ] mov r0 , r3 add sp , fp , num pop { fp } bx lr
push rbp mov rbp , rsp movsd xmm3 , qword ptr [ rip + hexvar ] movsd xmm4 , qword ptr [ rip + hexvar ] movsd xmm5 , qword ptr [ rip + hexvar ] movsd xmm6 , qword ptr [ rip + hexvar ] movsd xmm7 , qword ptr [ rip + hexvar ] movsd xmm8 , qword ptr [ rip + hexvar ] movsd xmm9 , qword ptr [ rip + hexvar ] movsd xmm10 , qword ptr [ rip + hexvar ] movsd xmm11 , qword ptr [ rip + hexvar ] movsd xmm12 , qword ptr [ rip + hexvar ] movsd xmm13 , qword ptr [ rip + hexvar ] movsd qword ptr [ rbp - num ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 movsd qword ptr [ rbp - hexvar ] , xmm2 mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mulsd xmm13 , qword ptr [ rbp - num ] movsd xmm0 , qword ptr [ rbp - hexvar ] subsd xmm0 , xmm5 mulsd xmm12 , xmm0 subsd xmm13 , xmm12 movsd xmm0 , qword ptr [ rbp - hexvar ] subsd xmm0 , xmm5 mulsd xmm11 , xmm0 addsd xmm13 , xmm11 movaps xmm0 , xmm3 mulsd xmm0 , xmm13 mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm0 mulsd xmm10 , qword ptr [ rbp - num ] movsd xmm0 , qword ptr [ rbp - hexvar ] subsd xmm0 , xmm5 mulsd xmm9 , xmm0 subsd xmm10 , xmm9 movsd xmm0 , qword ptr [ rbp - hexvar ] subsd xmm0 , xmm5 mulsd xmm8 , xmm0 subsd xmm10 , xmm8 movaps xmm0 , xmm3 mulsd xmm0 , xmm10 mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm0 mulsd xmm7 , qword ptr [ rbp - num ] movsd xmm0 , qword ptr [ rbp - hexvar ] subsd xmm0 , xmm5 mulsd xmm6 , xmm0 addsd xmm7 , xmm6 movsd xmm0 , qword ptr [ rbp - hexvar ] subsd xmm0 , xmm5 mulsd xmm4 , xmm0 addsd xmm7 , xmm4 mulsd xmm3 , xmm7 mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm3 pop rbp ret
sub esp , hexvar push dword ptr [ edi + hexvar ] call hexvar add esp , hexvar lea ecx , [ ebx - hexvar ] test eax , eax je hexvar mov ecx , dword ptr [ eax ] mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] call hexvar mov esi , num jmp hexvar
push r13 push r12 xor eax , eax push rbp push rbx mov r13d , edx mov r12 , rcx mov edx , hexvar xor ecx , ecx sub rsp , num xor ebp , ebp call hexvar test eax , eax js hexvar mov rdx , r12 mov esi , eax mov edi , num mov ebx , eax call hexvar test eax , eax je hexvar call hexvar mov r13d , dword ptr [ rax ] mov r12 , rax mov edi , ebx call hexvar mov dword ptr [ r12 ] , r13d add rsp , num mov rax , rbp pop rbx pop rbp pop r12 pop r13 ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp - hexvar ] lea edi , [ hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi call hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s4 , a0 move s2 , a1 sw a2 , hexvar ( sp ) move s7 , a3 lw fp , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw s0 , ( a1 ) move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s1 , v0 addiu v0 , v0 , - num sltiu v0 , v0 , hexvar beqz v0 , hexvar addiu v0 , zero , hexvar lb s3 , ( s0 ) beq s3 , v0 , hexvar slti v0 , s3 , hexvar bnez v0 , hexvar addiu v0 , zero , hexvar beq s3 , v0 , hexvar addiu v0 , zero , hexvar bne s3 , v0 , hexvar addiu a2 , zero , num b hexvar move s3 , zero addiu a0 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s3 , zero move v0 , s3 lw a0 , hexvar ( sp ) lw v1 , - hexvar ( gp ) lw v1 , ( v1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) lw s7 , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu v0 , zero , hexvar bne s3 , v0 , hexvar addiu a2 , zero , hexvar move a1 , s2 addiu a0 , s0 , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sw v0 , num ( s4 )
push r13 push r12 push rbp push rbx sub rsp , hexvar mov r12 , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax lea eax , [ rcx - num ] cmp eax , num ja hexvar mov r13d , esi mov rbp , rdx mov ebx , ecx test rdx , rdx je hexvar mov esi , ecx call hexvar mov r8 , rsp mov ecx , num mov rdx , rbp mov esi , r13d mov rdi , r12 call hexvar cmp rax , - num je hexvar cmp r13d , num sbb edx , edx and edx , hexvar add edx , hexvar mov rcx , qword ptr [ rsp ] mov dword ptr [ rcx + hexvar ] , edx mov dword ptr [ rcx + hexvar ] , ebx mov rsi , qword ptr [ rsp + num ] xor rsi , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
ldrb r3 , [ r0 , hexvar ] tst r3 , hexvar bne hexvar ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ r3 , num ] sub ip , r2 , num cmn ip , num bhi hexvar ldr r3 , [ r3 , num ] cmp r3 , num beq hexvar ldr r3 , [ r3 , - num ] cmp r3 , num beq hexvar mov r0 , num bx lr push { r4 , lr } mov r4 , r0 mov r0 , r2 bl hexvar ldr r3 , [ r4 , hexvar ] ldr ip , [ r3 , num ] cmp ip , num beq hexvar mov r3 , num str r3 , [ ip , - num ] ldr r3 , [ r4 , hexvar ] ldr r3 , [ r3 , num ] ldr r3 , [ r3 , hexvar ] ldr r2 , [ r3 , num ] cmp r2 , num beq hexvar ldr r1 , [ r4 , hexvar ] ldr r1 , [ r1 , hexvar ] ldr r1 , [ r1 , num ] ldr r1 , [ r1 , hexvar ] ldr r1 , [ r1 , hexvar ] ldrb r1 , [ r1 , hexvar ] ldr r0 , [ r3 ] lsrs r0 , r0 , r1 beq hexvar sub r2 , r2 , num mov r3 , num mov lr , num ldr r1 , [ r2 , num ] ! cmp r1 , num strne lr , [ ip , r3 , lsl num ] add r3 , r3 , num cmp r3 , r0 bne hexvar mov r0 , num pop { r4 , pc } andeq r0 , r0 , r1 andeq r0 , r0 , r0
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , num mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r2 , [ r3 , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ sp ] mov r3 , r2 ldr r2 , [ sp , num ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push { r4 , lr } ldr r3 , [ sp , num ] cmp r3 , num beq hexvar ldrb r0 , [ r3 , hexvar ] cmp r0 , num beq hexvar mov r0 , num pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbx mov rax , - num mov rbx , rsi mov rsi , rdx xor edx , edx div rsi cmp rbx , rax ja hexvar imul rsi , rbx call hexvar test rax , rax jne hexvar test rbx , rbx jne hexvar pop rbx ret
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] and al , num mov byte ptr [ ebp - num ] , al test byte ptr [ ebp - num ] , num mov dword ptr [ ebp - num ] , ecx jne hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] cmp byte ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ hexvar ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ hexvar ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp + num ] , eax jmp hexvar add esp , hexvar pop ebp ret
push rbp push r14 push rbx mov ebp , ecx mov r14 , rdx mov rbx , rsi cmp qword ptr [ rsi ] , num je hexvar mov esi , hexvar mov ecx , hexvar mov rdi , r14 mov edx , ebp xor eax , eax call hexvar test eax , eax jle hexvar mov rsi , qword ptr [ rbx ] mov rdi , r14 call hexvar test eax , eax je hexvar mov esi , hexvar mov rdi , r14 mov edx , num call hexvar test eax , eax jle hexvar cmp qword ptr [ rbx + num ] , num je hexvar mov esi , hexvar mov ecx , hexvar mov rdi , r14 mov edx , ebp xor eax , eax call hexvar test eax , eax jle hexvar mov rsi , qword ptr [ rbx + num ] mov rdi , r14 call hexvar test eax , eax jle hexvar mov esi , hexvar mov rdi , r14 mov edx , num call hexvar test eax , eax jle hexvar cmp qword ptr [ rbx + hexvar ] , num je hexvar mov esi , hexvar mov ecx , hexvar mov rdi , r14 mov edx , ebp xor eax , eax call hexvar test eax , eax jle hexvar mov rsi , qword ptr [ rbx + hexvar ] mov rdi , r14 call hexvar test eax , eax je hexvar mov ebx , num mov esi , hexvar mov rdi , r14 mov edx , num call hexvar test eax , eax jg hexvar xor ebx , ebx mov eax , ebx pop rbx pop r14 pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , esp mov dword ptr [ ebx + num ] , edi mov dword ptr [ ebx + num ] , edx mov dword ptr [ ebx ] , esi mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar lui v0 , hexvar addiu gp , gp , hexvar sltu v0 , a3 , v0 sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) move s4 , a0 sw s2 , hexvar ( sp ) move s3 , a2 sw s0 , hexvar ( sp ) move s2 , a1 sw ra , hexvar ( sp ) move s0 , a3 sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s1 , hexvar ( sp ) bnez v0 , hexvar sw gp , hexvar ( sp ) lui s1 , hexvar addiu s6 , s4 , hexvar b hexvar addiu s5 , s4 , hexvar sltu v0 , s0 , s1 bnez v0 , hexvar lw ra , hexvar ( sp ) lw v0 , num ( s4 ) move a2 , s0 lw a3 , hexvar ( s4 ) subu s0 , s0 , s1 lw t9 , - hexvar ( gp ) move a1 , s2 move a0 , s3 sw v0 , hexvar ( sp ) sw s5 , hexvar ( sp ) addu s3 , s3 , s1 sw s6 , hexvar ( sp ) jalr t9 addu s2 , s2 , s1 sltu v0 , s0 , s1 lw gp , hexvar ( sp ) bnez s0 , hexvar movn s1 , s0 , v0 lw ra , hexvar ( sp ) addiu v0 , zero , num lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar bnez a3 , hexvar move s1 , a3 b hexvar lw ra , hexvar ( sp )
test rdi , rdi je hexvar mov rdi , qword ptr [ rdi ] test rdi , rdi je hexvar add rdi , hexvar jmp hexvar xor eax , eax ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , esi xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jae hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov rdi , rax movabs rsi , num mov edx , num call hexvar cmp eax , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r4 , [ r1 , hexvar ] ldr r3 , [ r4 , hexvar ] cmp r3 , num popne { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp sub esp , hexvar mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) addiu v0 , zero , num bne a2 , v0 , hexvar move s2 , a3 move s3 , a0 lbu v0 , ( a1 ) sll v0 , v0 , num lbu v1 , num ( a1 ) or v0 , v0 , v1 addiu v1 , zero , num bne v0 , v1 , hexvar move s0 , a1 lbu v0 , num ( a1 ) bnez v0 , hexvar addiu v0 , zero , hexvar jal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s1 , v0 lbu s4 , num ( s0 ) sll s4 , s4 , num lbu v0 , num ( s0 ) or s4 , s4 , v0 move s0 , zero move a0 , s1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) slt v0 , s0 , v0 beqz v0 , hexvar move a1 , s0 move a0 , s1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw v1 , num ( v0 ) beq v1 , s4 , hexvar addiu s0 , s0 , num b hexvar move a0 , s1 addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , - hexvar addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) addiu v0 , zero , hexvar sw v0 , ( s2 ) addiu v0 , zero , num lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , - hexvar addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) addiu v0 , zero , hexvar sw v0 , ( s2 )
push r14 push rbx push rax mov rbx , rdi call hexvar mov rdi , rbx mov rsi , rax call hexvar xor r14d , r14d test rax , rax je hexvar mov ecx , num mov rdi , rax mov esi , num xor edx , edx xor r8d , r8d call hexvar call hexvar mov rdi , rbx mov rsi , rax call hexvar test rax , rax je hexvar mov ecx , num mov rdi , rax mov esi , num xor edx , edx xor r8d , r8d call hexvar call hexvar mov r14d , num mov eax , r14d add rsp , num pop rbx pop r14 ret
cmp rdi , hexvar ja hexvar lea rdx , [ rip + hexvar ] movsxd rax , dword ptr [ rdx + rdi * num ] add rax , rdx jmp rax nop dword ptr [ rax ] lea rax , [ rip + hexvar ] ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ esp ] , eax call hexvar pop edx pop ecx push dword ptr [ esp + hexvar ] push eax call hexvar add esp , hexvar pop ebx ret
push rbp push rbx mov rbx , rdi mov rbp , rsi sub rsp , num mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi je hexvar call hexvar mov rdi , rbp call hexvar test rax , rax mov qword ptr [ rbx + hexvar ] , rax je hexvar mov qword ptr [ rbx + hexvar ] , rax add rsp , num xor eax , eax pop rbx pop rbp ret
push edi push esi push ebx call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] test esi , esi je hexvar test edi , edi je hexvar sub esp , hexvar push dword ptr [ esi ] call hexvar mov dword ptr [ esp ] , edi call hexvar mov dword ptr [ esi ] , eax add esp , hexvar test eax , eax setne al movzx eax , al pop ebx pop esi pop edi ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push hexvar push hexvar mov eax , dword ptr [ esp + hexvar ] add eax , num push eax call hexvar test eax , eax setne al movzx eax , al add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp eax , num mov cl , num mov byte ptr [ ebp - hexvar ] , cl je hexvar mov eax , dword ptr [ ebp + num ] add eax , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax ] , num sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , al jmp hexvar mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] add esi , hexvar lea edi , [ ebp - hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar sub esp , num mov eax , dword ptr [ ebp + num ] add eax , hexvar lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar sub esp , num mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ edx ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call eax mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar mov ebx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] test ebx , ebx je hexvar mov edx , dword ptr [ ebx + hexvar ] test edx , edx je hexvar mov eax , dword ptr [ ebx + hexvar ] test eax , eax je hexvar mov edi , dword ptr [ ebx + hexvar ] test edi , edi je hexvar cmp ebx , dword ptr [ edi ] je hexvar add esp , hexvar mov eax , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rdi , hexvar call hexvar movabs rdi , hexvar mov dword ptr [ rbp - num ] , eax call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp + hexvar ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - num ] add ecx , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , hexvar mov dword ptr [ esp ] , eax call hexvar movss xmm0 , dword ptr [ hexvar ] mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] movss dword ptr [ eax + hexvar ] , xmm0 mov cl , num and cl , num movzx eax , cl add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num jne hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + hexvar ] mov eax , hexvar cmp rdx , rax je hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] test rax , rax jne hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] test eax , eax je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] add rax , hexvar mov r9 , rax lea r8 , [ rip + hexvar ] mov ecx , hexvar lea rdx , [ rip + hexvar ] lea rsi , [ rip + hexvar ] mov edi , hexvar mov eax , num call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - num ] movabs rcx , hexvar mov qword ptr [ rax + hexvar ] , rcx mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] leave ret
push { r4 , r5 , r6 , r7 , r8 , sb , lr } ldr r6 , [ pc , hexvar ] mov r5 , r0 ldr r0 , [ r6 , num ] sub sp , sp , hexvar cmp r0 , num beq hexvar cmp r5 , num beq hexvar ldr sb , [ pc , hexvar ] ldr r8 , [ pc , hexvar ] ldr r7 , [ pc , hexvar ] ldr r4 , [ r0 , hexvar ] cmp r4 , num beq hexvar ldr r1 , [ r5 ] ldr r0 , [ r4 ] bl hexvar cmp r0 , num beq hexvar ldr r4 , [ r4 , hexvar ] cmp r4 , num bne hexvar mov r1 , num ldr r0 , [ r5 ] bl hexvar mov r2 , num mov r1 , r8 mov r0 , num ldr r4 , [ sb ] bl hexvar ldr r1 , [ r5 ] mov r2 , r0 str r1 , [ sp ] ldr r3 , [ r7 ] mov r0 , r4 mov r1 , num bl hexvar ldr r5 , [ r5 , num ] cmp r5 , num bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
xorps xmm0 , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi + hexvar ] , xmm0 movups xmmword ptr [ rdi ] , xmm0 mov qword ptr [ rdi + hexvar ] , num mov eax , num ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - num ] ldr r0 , [ pc , hexvar ] bl hexvar mov r3 , r0 str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar mov r3 , num b hexvar sub r3 , fp , hexvar mov r0 , r3 bl hexvar mov r3 , num str r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] add r0 , r2 , r3 ldr r3 , [ fp , - hexvar ] rsb r2 , r3 , hexvar ldr r3 , [ fp , - hexvar ] mov r1 , num bl hexvar str r0 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] add r3 , r2 , r3 str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , hexvar beq hexvar ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , num b hexvar ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar b hexvar mov r0 , r0 sub r3 , fp , hexvar mov r2 , r3 mov r1 , hexvar ldr r0 , [ fp , - hexvar ] bl hexvar b hexvar mov r0 , r0 b hexvar mov r0 , r0 ldr r3 , [ fp , - hexvar ] cmp r3 , num beq hexvar sub r3 , fp , hexvar mov r2 , r3 ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar sub r3 , fp , hexvar ldr r1 , [ fp , - hexvar ] mov r0 , r3 bl hexvar ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , num mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ fp , - num ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] shl ecx , num mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , num ( a0 ) beqz v0 , hexvar lui a3 , hexvar sw a1 , hexvar ( v0 )
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx ] mov dword ptr [ ebp - num ] , edx mov edx , dword ptr [ ebp - num ] mov esi , dword ptr [ ebp + hexvar ] add edx , dword ptr [ esi ] add edx , - num mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov cl , byte ptr [ eax ] mov dl , cl add dl , num mov byte ptr [ eax ] , dl movsx eax , cl cmp eax , hexvar jge hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax add ecx , - num mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ eax ] , hexvar mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] jae hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ eax ] mov edx , ecx add edx , - num mov dword ptr [ eax ] , edx mov byte ptr [ ecx - num ] , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax ] add ecx , num mov dword ptr [ eax ] , ecx add esp , hexvar pop esi pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , num call hexvar cmp eax , num jne hexvar sub esp , num push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax + hexvar ] call hexvar cmp eax , num sbb eax , eax add esp , hexvar and eax , num add eax , num pop ebx ret
cmp r2 , hexvar push { r4 , r5 , r6 , r7 , r8 , lr } mov r4 , r2 mov r5 , r1 mov r8 , r3 mov r7 , r0 bhi hexvar mov r6 , hexvar add r3 , r2 , r2 , lsl num lsl r3 , r3 , num add r2 , r3 , hexvar mla r3 , r6 , r1 , r2 ldr r6 , [ r0 , hexvar ]
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - num ] , num jmp hexvar add dword ptr [ rbp - num ] , num shr qword ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , dword ptr [ rbp - num ] pop rbp ret
push r14 push r13 push r12 push rbp push rbx mov rbx , rdi sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax lea rax , [ rdi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi je hexvar mov r12 , qword ptr [ rdi + hexvar ] test r12 , r12 jle hexvar test rax , rax je hexvar mov rbp , qword ptr [ rbx + hexvar ] cmp rbp , r12 jbe hexvar mov rax , qword ptr [ rbx + hexvar ] lea r14 , [ r12 * num ] mov rbp , qword ptr [ rax + r12 * num ] test rbp , rbp je hexvar mov ecx , dword ptr [ rdi + hexvar ] test ecx , ecx je hexvar mov r12 , qword ptr [ rbx + hexvar ] lea rax , [ r12 + num ] mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rdi ] mov rbp , qword ptr [ rdi + num ] mov qword ptr [ rbx + hexvar ] , rax call hexvar mov rdi , rbp call hexvar lea rdi , [ rax + hexvar ] call hexvar sub rsp , num lea rcx , [ rip + hexvar ] mov rdx , - num push rbp mov r9d , hexvar mov r8 , r12 mov esi , num mov r13 , rax mov rdi , rax xor eax , eax call hexvar mov rdi , rbp call hexvar mov rax , qword ptr [ rbx + hexvar ] mov edi , hexvar mov qword ptr [ rax + r14 ] , r12 call hexvar mov rdi , r13 mov rbp , rax call hexvar mov qword ptr [ rbp + num ] , rax movabs rax , hexvar mov qword ptr [ rbp + hexvar ] , r12 mov qword ptr [ rbp + hexvar ] , rax mov rax , qword ptr [ rbx + hexvar ] mov rdi , r13 mov qword ptr [ rbp + hexvar ] , num mov qword ptr [ rbp + hexvar ] , num mov qword ptr [ rbp + hexvar ] , num mov qword ptr [ rbp + hexvar ] , num mov qword ptr [ rbp ] , rax mov qword ptr [ rbx + hexvar ] , rbp call hexvar pop rax pop rdx mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov eax , num jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
lui v0 , hexvar lw t0 , hexvar ( v0 ) beqz t0 , hexvar sll t0 , t0 , num lui v0 , hexvar lw a2 , hexvar ( v0 ) addu t0 , t0 , a2 addiu v0 , zero , num lui t1 , hexvar b hexvar addiu t1 , t1 , - hexvar move v1 , a0 teq v1 , zero , num divu zero , v0 , v1 mfhi a0 bnez a0 , hexvar move v0 , v1 teq v1 , zero , num divu zero , a1 , v1 mflo v0 addiu a2 , a2 , hexvar beq a2 , t0 , hexvar mul v0 , v0 , a3 move a3 , v0 lw v1 , num ( a2 ) sll v1 , v1 , num addu v1 , v1 , t1 lw a1 , ( v1 ) b hexvar move v1 , a1 addiu v0 , zero , num jr ra nop
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ ebp + num ] movsx ecx , byte ptr [ ebp + num ] add ecx , - hexvar mov edx , ecx sub edx , hexvar mov byte ptr [ ebp - num ] , al mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov rbp , rcx mov r12 , rdx mov r13 , rsi mov r14 , rdi call hexvar mov rbx , rax mov eax , dword ptr [ rax + hexvar ] cmp eax , dword ptr [ rbx + hexvar ] jne hexvar xor ebp , ebp jmp hexvar mov rsi , rbp lea ecx , [ rax + num ] mov edx , ecx sar edx , hexvar shr edx , hexvar lea eax , [ rax + rdx ] add eax , num and eax , hexvar sub ecx , eax movsxd r15 , ecx mov rbp , qword ptr [ rbx + r15 * num + hexvar ] mov dword ptr [ rbx + hexvar ] , r15d mov qword ptr [ rbx + r15 * num + hexvar ] , num test r14 , r14 je hexvar test r13 , r13 je hexvar mov rax , qword ptr [ rbx + r15 * num + hexvar ] test rax , rax je hexvar mov qword ptr [ r14 ] , rax mov eax , dword ptr [ rbx + r15 * num + hexvar ] jmp hexvar mov qword ptr [ r14 ] , hexvar xor eax , eax mov dword ptr [ r13 ] , eax mov rdi , qword ptr [ rbx + r15 * num + hexvar ] test r12 , r12 je hexvar test rdi , rdi je hexvar mov qword ptr [ r12 ] , rdi test rsi , rsi je hexvar mov eax , dword ptr [ rbx + r15 * num + hexvar ] mov dword ptr [ rsi ] , eax jmp hexvar test rdi , rdi je hexvar test byte ptr [ rbx + r15 * num + hexvar ] , num je hexvar call hexvar mov qword ptr [ rbx + r15 * num + hexvar ] , num mov dword ptr [ rbx + r15 * num + hexvar ] , num jmp hexvar mov qword ptr [ r12 ] , hexvar test rsi , rsi je hexvar mov dword ptr [ rsi ] , num mov rax , rbp add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ eax ] mov dword ptr [ edx + hexvar ] , num mov edx , dword ptr [ eax ] push dword ptr [ esp + hexvar ] push edx push dword ptr [ eax + num ] push dword ptr [ eax + num ] push dword ptr [ edx + num ] push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , num mov eax , esp add eax , - hexvar mov esp , eax mov dword ptr [ eax ] , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] cmp dword ptr [ eax ] , num setb cl mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] cmp dword ptr [ ecx * num + hexvar ] , num setne dl mov byte ptr [ ebp - num ] , dl mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] mov ecx , dword ptr [ ecx * num + hexvar ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] mov ecx , dword ptr [ ecx * num + hexvar ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] add ecx , num mov dword ptr [ eax ] , ecx jmp hexvar mov esp , ebp pop ebp ret
push rbp push rbx mov rdi , rsi mov rbp , rsi sub rsp , num call hexvar mov rbx , rax mov rdi , rax call hexvar mov rsi , rbx mov rdi , rax call hexvar test al , al mov ebx , eax je hexvar lea rsi , [ rip + hexvar ] mov rdx , rbp mov edi , num xor eax , eax call hexvar add rsp , num mov eax , ebx pop rbx pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rsi mov esi , num call hexvar test rax , rax je hexvar mov rbp , rax mov rax , qword ptr [ rax + num ] lea rdi , [ rax * num ] call hexvar mov r12 , rax mov rax , qword ptr [ rbp + num ] test rax , rax mov qword ptr [ rsp + num ] , rax je hexvar mov rax , qword ptr [ rbp + hexvar ] xor r13d , r13d xor r14d , r14d xor ebx , ebx mov qword ptr [ rsp + hexvar ] , rax mov rcx , qword ptr [ rsp + hexvar ] lea rax , [ rbx + rbx * num ] lea r15 , [ rcx + rax * num ] mov rdi , qword ptr [ r15 + num ] call hexvar lea r14 , [ r14 + rax + num ] mov eax , dword ptr [ r15 + hexvar ] mov dword ptr [ r12 + rbx * num ] , eax lea ebx , [ r13 + num ] cmp rbx , qword ptr [ rsp + num ] mov r13 , rbx jb hexvar lea rdi , [ r14 + num ] call hexvar cmp qword ptr [ rbp + num ] , num mov qword ptr [ rsp + num ] , rax mov r15 , rax je hexvar xor r13d , r13d xor eax , eax nop mov rdx , qword ptr [ rbp + hexvar ] lea rax , [ rax + rax * num ] lea rax , [ rdx + rax * num ] mov r14 , qword ptr [ rax + num ] mov rdi , r14 call hexvar mov rbx , rax mov rdi , r15 mov rdx , rax add rbx , r15 mov rsi , r14 call hexvar lea eax , [ r13 + num ] mov byte ptr [ rbx ] , num cmp rax , qword ptr [ rbp + num ] lea r15 , [ rbx + num ] mov r13 , rax jb hexvar mov rax , qword ptr [ rsp + hexvar ] mov byte ptr [ r15 ] , num test rax , rax je hexvar mov qword ptr [ rax ] , r12 mov rax , qword ptr [ rsp + num ] add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
ldr r3 , [ pc , hexvar ] push { r4 , lr } mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num ldr r4 , [ r3 ] bl hexvar ldr r2 , [ pc , hexvar ] mov r3 , r0 mov r1 , num mov r0 , r4 bl hexvar bl hexvar ldrdeq r8 , sb , [ r4 ] , -ip andeq r6 , r3 , r0 , ror num ldrdeq r6 , r7 , [ r3 ] , -r4
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] sub edx , - num setne bl movzx esi , bl mov esi , dword ptr [ esi * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jmp esi mov eax , dword ptr [ ebp + num ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar test eax , eax setne dl movzx eax , dl mov eax , dword ptr [ eax * num + hexvar ] jmp eax call hexvar mov eax , dword ptr [ eax ] mov ecx , esp mov dword ptr [ ecx ] , hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx + hexvar ] , ecx mov dword ptr [ edx + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ edx + num ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , num call hexvar mov eax , dword ptr [ hexvar ] jmp eax add esp , hexvar pop esi pop ebx pop ebp ret
push r15 push r14 push rbx mov r14 , rdx mov rdx , qword ptr [ rsi ] test rdx , rdx je hexvar mov rbx , rsi cmp qword ptr [ rsi + num ] , num je hexvar mov r15 , rdi cmp dword ptr [ rbx + hexvar ] , - num je hexvar mov rdi , rbx mov rsi , r14 call hexvar test eax , eax je hexvar mov rdx , qword ptr [ rbx ] jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rbx pop r14 pop r15 ret
push rbx test rdi , rdi je hexvar mov rbx , rdi lea rdi , [ rdi + hexvar ] mov ecx , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar test eax , eax jle hexvar pop rbx ret
push rbp push r15 push r14 push rbx push rax mov rbx , rdi mov eax , hexvar mov r14d , hexvar mov r15d , hexvar jmp hexvar mov rbx , qword ptr [ rsp ] add rbx , hexvar mov eax , hexvar nop word ptr [ rax + rax ] cmp eax , hexvar jg hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov qword ptr [ rsp ] , rbx mov rax , qword ptr [ rsp ] cmp dword ptr [ rax ] , - num mov eax , hexvar cmove eax , r14d jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov rdi , qword ptr [ rsp ] call hexvar test eax , eax mov eax , hexvar cmove eax , r15d jmp hexvar mov eax , hexvar mov ebp , num jmp hexvar mov eax , hexvar xor ebp , ebp jmp hexvar mov eax , ebp add rsp , num pop rbx pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , num mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp + num ] and esi , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov ecx , esi shl edx , cl mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] shr edi , num or edx , dword ptr [ esi + edi * num ] mov dword ptr [ esi + edi * num ] , edx mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop esi pop edi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] ldr r2 , [ sp , num ] ldr r1 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
test rdi , rdi je hexvar mov rax , qword ptr [ rdi + hexvar ] mov rsi , qword ptr [ rdi + hexvar ] mov rdx , qword ptr [ rdi + hexvar ] mov rcx , qword ptr [ rdi + hexvar ] mov rdi , rax xor r8d , r8d xor eax , eax jmp hexvar push rax mov edi , num mov esi , num mov edx , hexvar call hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 move a2 , zero addiu a1 , zero , hexvar lui a0 , hexvar addiu a0 , a0 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( s0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , hexvar mov dword ptr [ ebp - num ] , eax call hexvar add esp , hexvar pop ebp ret
push { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r6 , r2 mov r2 , r1 ldr r4 , [ sp , hexvar ] ldr r1 , [ r6 ] add ip , r4 , num bic ip , ip , num add fp , ip , hexvar mov sl , r0 add r1 , fp , r1 mov r0 , r2 mov sb , r3 bl hexvar subs r7 , r0 , num beq hexvar mov r8 , num ldr r5 , [ r6 ] ldr r2 , [ sl , num ] add r3 , fp , r5 add r5 , r7 , r5 str r3 , [ r6 ] mov r1 , r5 ldr r3 , [ r2 , hexvar ] mov r0 , num blx r3 ldr r3 , [ sl , num ] add r1 , r5 , num ldr r3 , [ r3 , hexvar ] mov r0 , r4 blx r3 ldr r3 , [ sl , num ] add r1 , r5 , num ldr r3 , [ r3 , hexvar ] ldr r0 , [ pc , hexvar ] blx r3 add r6 , r5 , hexvar mov r2 , num ldr r1 , [ pc , hexvar ] add r0 , r5 , hexvar bl hexvar mov r1 , sb mov r0 , r6 strb r8 , [ r5 , hexvar ] strb r8 , [ r5 , hexvar ] mov r2 , r4 bl hexvar tst r4 , num add r0 , r6 , r4 beq hexvar mov r1 , r8 mov r2 , r0 strb r1 , [ r2 ] , num add r3 , r2 , r4 sub r3 , r3 , r0 tst r3 , num bne hexvar mov r0 , r7 pop { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] test esi , esi je hexvar sub esp , hexvar push esi call hexvar add esp , hexvar test eax , eax mov edi , eax je hexvar sub esp , hexvar push esi call hexvar add esp , hexvar test eax , eax mov ebp , eax je hexvar mov ecx , dword ptr [ esp + hexvar ] test ecx , ecx je hexvar call hexvar test eax , eax mov esi , eax je hexvar sub esp , hexvar push eax call hexvar mov dword ptr [ esp ] , esi call hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + hexvar ] , eax call hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + hexvar ] , eax call hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + hexvar ] , eax call hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar test eax , eax je hexvar mov dword ptr [ esp + num ] , eax sub esp , num push esi push dword ptr [ esp + hexvar ] push edi call hexvar add esp , hexvar test eax , eax mov ecx , dword ptr [ esp + num ] je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov edx , dword ptr [ eax + num ] test edx , edx je hexvar mov edx , dword ptr [ eax + hexvar ] test edx , edx je hexvar lea eax , [ ebx - hexvar ] sub esp , hexvar xor edi , edi push hexvar push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar push esi call hexvar mov dword ptr [ esp ] , esi call hexvar add esp , hexvar mov eax , edi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } sub sp , sp , num ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , num ] subs r5 , r0 , num beq hexvar ldr r4 , [ r5 , hexvar ] cmp r4 , num beq hexvar ldr r3 , [ r4 ] cmp r3 , num bne hexvar ldr r1 , [ pc , hexvar ] mov r0 , r5 bl hexvar subs r4 , r0 , num beq hexvar ldr r3 , [ r4 , hexvar ] cmp r3 , hexvar bls hexvar mov r2 , sp mov r1 , r4 mov r0 , r5 bl hexvar cmp r0 , num bne hexvar ldr r0 , [ sp ] cmp r0 , num moveq r4 , num beq hexvar bl hexvar mov r4 , num mov r0 , r4 ldr r2 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push edi push esi push ebx sub esp , num call hexvar add ebx , hexvar mov edx , dword ptr [ esp + hexvar ] lea eax , [ ebx + hexvar ] lea eax , [ eax + hexvar ] cmp edx , eax je hexvar test byte ptr [ edx + hexvar ] , hexvar jne hexvar lea eax , [ ebx + hexvar ] lea eax , [ eax + hexvar ] cmp edx , eax je hexvar mov esi , dword ptr [ edx + hexvar ] mov edi , dword ptr [ edx + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov edi , dword ptr [ edx ] mov ecx , hexvar mov eax , num repne scasb al , byte ptr es : [ edi ] mov esi , ecx not esi mov ecx , esi sub ecx , num cmp dword ptr [ ebx + hexvar ] , ecx jge hexvar mov dword ptr [ ebx + hexvar ] , ecx mov esi , dword ptr [ esp ] mov edi , dword ptr [ esp + num ] add dword ptr [ ebx + hexvar ] , esi adc dword ptr [ ebx + hexvar ] , edi mov ecx , dword ptr [ edx + hexvar ] mov eax , dword ptr [ edx + hexvar ] cmp eax , dword ptr [ ebx + hexvar ] jb hexvar ja hexvar cmp ecx , dword ptr [ ebx + hexvar ] jbe hexvar mov dword ptr [ ebx + hexvar ] , ecx mov dword ptr [ ebx + hexvar ] , eax add esp , num pop ebx pop esi pop edi ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + num ] mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - num ] lea rdx , [ rax + num ] mov qword ptr [ rbp - num ] , rdx movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar sub dword ptr [ rbp - hexvar ] , num cmp dword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rax + num ] mov eax , dword ptr [ rip + hexvar ] add eax , edx mov dword ptr [ rip + hexvar ] , eax nop leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax + hexvar ] mov eax , ecx mov rdx , rax sub rdx , num mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx ja hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax * num ] jmp rcx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov dword ptr [ rdi + hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rsi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , num jmp hexvar jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] add rsp , hexvar pop rbp ret
test rdi , rdi je hexvar mov rax , qword ptr [ rip + hexvar ] mov r8d , hexvar xor ecx , ecx cmp rax , r8 cmovne rcx , rax mov qword ptr [ rdi ] , rcx test rsi , rsi je hexvar mov rax , qword ptr [ rip + hexvar ] mov ecx , hexvar xor edi , edi cmp rax , rcx cmovne rdi , rax mov qword ptr [ rsi ] , rdi test rdx , rdx je hexvar mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rdx ] , rax ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r7 , [ r0 , hexvar ] cmp r7 , num beq hexvar ldr r6 , [ r0 , hexvar ] subs r5 , r7 , num ldrb r2 , [ r6 ] beq hexvar cmp r2 , hexvar cmpne r2 , hexvar movne r2 , num moveq r2 , num beq hexvar add r2 , r6 , num mov lr , num b hexvar mov lr , r3 add r3 , lr , num cmp r3 , r5 beq hexvar ldrb ip , [ r2 ] mov r4 , r2 cmp ip , hexvar cmpne ip , hexvar add r2 , r2 , num bne hexvar add lr , lr , num cmp r1 , num beq hexvar str r3 , [ r1 ] ldrb r3 , [ r4 ] cmp r3 , hexvar beq hexvar mov r3 , num strb r3 , [ r4 ] ldr r1 , [ r0 , hexvar ] ldr r2 , [ r0 , hexvar ] ldr r3 , [ r0 , hexvar ] add r1 , r1 , lr sub r2 , r2 , lr sub lr , r3 , lr str r1 , [ r0 , hexvar ] str r2 , [ r0 , hexvar ] str lr , [ r0 , hexvar ] mov r0 , r6 pop { r4 , r5 , r6 , r7 , r8 , pc } strheq r0 , [ r0 ] , -sp andeq r0 , r0 , r0
push { r4 , r5 , r6 , r7 , lr } sub sp , sp , hexvar sub sp , sp , hexvar add ip , sp , hexvar mov r3 , ip mov r5 , r0 sub r6 , ip , num ldr r4 , [ pc , hexvar ] str r6 , [ ip , - hexvar ] ! sub lr , r3 , num str lr , [ sp ] mov r0 , ip add lr , sp , hexvar ldr ip , [ r4 ] sub r7 , r3 , hexvar add lr , lr , hexvar mov r3 , r2 str r7 , [ sp , num ] mov r2 , r1 str ip , [ lr ] mov r1 , r5 bl hexvar ldr r0 , [ sp , hexvar ] cmp r0 , r6 cmpne r0 , r5 beq hexvar bl hexvar add r3 , sp , hexvar add r3 , r3 , hexvar ldr r1 , [ r3 ] ldr r2 , [ r4 ] ldrb r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r1 , r2 add r0 , r0 , r3 bne hexvar add sp , sp , hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc }
push r15 push r14 push r12 push rbx push rax mov r14 , rcx mov r15 , rdx test rdx , rdx jne hexvar mov rbx , rsi mov edx , hexvar call hexvar mov r15 , rax test rax , rax je hexvar mov esi , hexvar mov rdi , r15 call hexvar mov r12 , rax test rax , rax je hexvar mov rdi , r12 xor esi , esi xor edx , edx xor ecx , ecx call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , r12 call hexvar mov rdi , r14 mov rsi , rbx call hexvar xor r14d , r14d test eax , eax setne r14b mov rdi , rbx call hexvar mov eax , r14d add rsp , num pop rbx pop r12 pop r14 pop r15 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax + hexvar ] and eax , hexvar test al , al je hexvar mov edi , num call hexvar mov eax , num jmp hexvar mov edi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + num ] , num mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] shr eax , num and eax , hexvar or ah , num mov edx , eax mov rax , qword ptr [ rbp - hexvar ] and edx , hexvar mov ecx , edx shl ecx , num mov edx , dword ptr [ rax + hexvar ] and edx , hexvar or edx , ecx mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rip + hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] movzx edx , byte ptr [ rax + hexvar ] and edx , hexvar or edx , hexvar mov byte ptr [ rax + hexvar ] , dl mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov eax , num leave ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r3 , [ r1 , num ] ldr r4 , [ r2 , num ] mov r5 , r2 ldrb r2 , [ r3 , hexvar ] ldrb r3 , [ r4 ] mov r6 , r0 cmp r2 , r3 beq hexvar ldrb r2 , [ r0 , num ] cmp r2 , r3 beq hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , r4 bl hexvar subs r7 , r0 , num beq hexvar mov r0 , r5 pop { r4 , r5 , r6 , r7 , r8 , pc }
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] ldr r1 , [ sp , num ] ldr r0 , [ pc , hexvar ] bl hexvar mov r0 , r0 add sp , sp , hexvar pop { pc }
add edx , num cmp byte ptr [ esp + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] jne hexvar sub esp , hexvar add esi , num push edx call dword ptr [ eax + hexvar ] add esp , hexvar shl eax , num push eax lea eax , [ ebx - hexvar ] jmp hexvar
push r12 push rbp mov rbp , rsi push rbx mov esi , hexvar mov ebx , edi xor edi , edi sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax mov rdx , rsp call hexvar test eax , eax je hexvar call hexvar cmp dword ptr [ rax ] , hexvar mov r12 , rax jne hexvar test bl , bl je hexvar mov rax , qword ptr [ rsp + num ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
push r12 push rbp mov r12 , rsi push rbx xor ebx , ebx call hexvar test rax , rax je hexvar mov rdi , rax mov rbp , rax call hexvar cmp eax , num mov rbx , rbp jbe hexvar mov rax , rbx pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , esp mov dword ptr [ ebx + num ] , edi mov dword ptr [ ebx + num ] , edx mov dword ptr [ ebx ] , esi mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbx test dword ptr [ rdi + hexvar ] , hexvar mov rbx , rdi je hexvar xor esi , esi mov r8d , hexvar mov ecx , hexvar mov edx , hexvar mov edi , hexvar call hexvar test rax , rax mov qword ptr [ rbx + hexvar ] , rax setne al pop rbx ret
push r15 push r14 push rbx sub rsp , hexvar mov rax , rdx mov qword ptr [ rsp + num ] , rdx mov rbx , qword ptr [ rdi + hexvar ] cmp qword ptr [ rbx + num ] , num je hexvar mov r15 , rsi lea r14 , [ rsp + num ] nop word ptr cs : [ rax + rax ] nop mov esi , dword ptr [ rbx ] mov rdi , r15 call hexvar test eax , eax je hexvar mov rdi , qword ptr [ rbx + num ] xor esi , esi mov rdx , r14 call hexvar cmp qword ptr [ rbx + hexvar ] , num lea rbx , [ rbx + hexvar ] jne hexvar mov rax , qword ptr [ rsp + num ] add rsp , hexvar pop rbx pop r14 pop r15 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num jne hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] movsd xmm1 , qword ptr [ rax ] mov rax , qword ptr [ rbp - num ] movsd xmm0 , qword ptr [ rax + hexvar ] mulsd xmm0 , xmm1 mov rax , qword ptr [ rbp - num ] movsd xmm2 , qword ptr [ rax + num ] mov rax , qword ptr [ rbp - num ] movsd xmm1 , qword ptr [ rax + hexvar ] mulsd xmm1 , xmm2 subsd xmm0 , xmm1 movq xmm1 , qword ptr [ rip + hexvar ] andpd xmm0 , xmm1 movq rax , xmm0 movq xmm0 , rax call hexvar movq rax , xmm0 movq xmm0 , rax leave ret
mov eax , num test rdi , rdi je hexvar mov r8 , qword ptr [ rdi + num ] test r8 , r8 je hexvar movsxd rdi , dword ptr [ rdi ] test rdi , rdi jle hexvar movsxd rax , edx xor edx , edx mov cl , hexvar cmp rdx , rax jge hexvar movzx ecx , byte ptr [ rsi + rdx ] not cl and cl , byte ptr [ r8 + rdx ] jne hexvar add rdx , num cmp rdx , rdi jl hexvar xor eax , eax test cl , cl sete al ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , hexvar cmp esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx ja hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + hexvar ] test byte ptr [ eax + hexvar ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] or ecx , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , eax mov dword ptr [ esi ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + num ] mov rdx , qword ptr [ rdx + hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] cmp qword ptr [ rdx + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] shr rax , num mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar xor eax , eax mov edx , eax mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi + hexvar ] mov rsi , qword ptr [ rsi + hexvar ] mov r8 , qword ptr [ rbp - hexvar ] shl r8 , num add rsi , r8 lea r8 , [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rcx , r8 mov r8 , qword ptr [ rbp - hexvar ] call r8
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 ) beqz v0 , hexvar nop lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 ) beqz v0 , hexvar nop lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 ) move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) sw zero , hexvar ( v0 ) lw v0 , hexvar ( sp ) sw zero , hexvar ( v0 ) addiu v0 , zero , num lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push esi push ebx sub esp , hexvar call hexvar add eax , hexvar mov edx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ edx + hexvar ] add edx , hexvar mov dword ptr [ esp + num ] , edx mov edx , dword ptr [ esp + num ] mov edx , dword ptr [ edx + num ] mov esi , edx mov edx , dword ptr [ esp + num ] mov ebx , dword ptr [ edx + hexvar ] mov edx , dword ptr [ esp + num ] mov ecx , dword ptr [ edx + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ edx + hexvar ] sub esp , hexvar push esi push ebx push hexvar push ecx push edx mov ebx , eax call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num jns hexvar mov eax , num jmp hexvar mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + num ] mov dword ptr [ eax + num ] , edx mov eax , dword ptr [ esp + num ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ esp + num ] mov dword ptr [ eax + hexvar ] , edx mov eax , num add esp , hexvar pop ebx pop esi ret
mov r3 , r0 push { r4 , r5 , r6 , r7 , r8 , lr } ldr r6 , [ r0 , hexvar ] mov r7 , r1 ldr r0 , [ r2 , num ] mov r1 , r6 ldr r5 , [ r3 ] mov r4 , r2 bl hexvar ldr r2 , [ r5 , r1 , lsl num ] add r1 , r5 , r1 , lsl num cmp r2 , num beq hexvar cmp r4 , r2 bne hexvar b hexvar cmp r3 , r4 beq hexvar mov r2 , r3 ldr r3 , [ r2 ] cmp r3 , num bne hexvar ldr r2 , [ pc , hexvar ] mov r1 , hexvar ldr r0 , [ pc , hexvar ] bl hexvar mov r1 , r2 ldr r3 , [ r4 ] cmp r7 , num str r3 , [ r1 ] str r7 , [ r4 , num ] beq hexvar ldrb r1 , [ r7 ] add r0 , r7 , num cmp r1 , num moveq r3 , r1 beq hexvar mov r3 , num add r2 , r1 , r1 , lsl num ldrb r1 , [ r0 ] , num add r3 , r2 , r3 cmp r1 , num eor r3 , r3 , r3 , lsr num bne hexvar sub r0 , r0 , r7 sub r0 , r0 , num add r3 , r0 , r3 add r0 , r3 , r0 , lsl num eor r0 , r0 , r0 , lsr num str r0 , [ r4 , num ] mov r1 , r6 bl hexvar ldr r3 , [ r5 , r1 , lsl num ] str r3 , [ r4 ] str r4 , [ r5 , r1 , lsl num ] pop { r4 , r5 , r6 , r7 , r8 , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) move a3 , zero lw a2 , hexvar ( fp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , num mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , num mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rip ] jmp rsi mov rax , qword ptr [ rbp - hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , eax and ecx , num mov eax , ecx mov rax , qword ptr [ rax * num ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] imul rcx , rax mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rbp - hexvar ] shr rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] imul rax , rax mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rbp - hexvar ] pop rbp ret
push ebp mov ebp , esp sub esp , hexvar call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar sub esp , num push dword ptr [ ebp + hexvar ] push dword ptr [ ebp - hexvar ] push dword ptr [ ebp + num ] mov eax , dword ptr [ ebp + hexvar ] call eax add esp , hexvar test eax , eax jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar jmp hexvar nop mov eax , dword ptr [ ebp - hexvar ] leave ret
push r13 push r12 push rbp push rbx sub rsp , num mov r12 , rsi test rdi , rdi je hexvar mov rbx , rdi mov edx , num lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rcx , rbx mov rdx , rax mov esi , num mov rdi , r12 mov eax , num call hexvar call hexvar mov rbp , rax mov rcx , qword ptr [ rax ] test rcx , rcx je hexvar mov ebx , num lea r13 , [ rip + hexvar ] mov rdx , r13 mov esi , num mov rdi , r12 mov eax , num call hexvar add ebx , num movsxd rax , ebx mov rcx , qword ptr [ rbp + rax * num ] test rcx , rcx jne hexvar mov rsi , r12 mov edi , hexvar call hexvar mov rdi , rbp call hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret
push ebp push edi push esi push ebx call hexvar add eax , hexvar sub esp , hexvar mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ edx + num ] mov ecx , dword ptr [ edx ] mov edi , dword ptr [ eax + num ] mov esi , dword ptr [ eax ] mov ebp , ebx mov eax , edi imul eax , ecx imul ebp , esi add ebp , eax mov eax , ecx mul esi mov dword ptr [ esp + num ] , edx mov edx , ecx add dword ptr [ esp + num ] , ebp or edx , ebx mov dword ptr [ esp ] , eax je hexvar mov edx , esi or edx , edi je hexvar mov ebp , dword ptr [ esp + num ] mov edx , ebx mov eax , edi shr edx , hexvar shr eax , hexvar xor eax , edx shr ebp , hexvar mov edx , ebp cmp dl , al jne hexvar push ebx push ecx push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esp + hexvar ] call hexvar xor eax , esi xor edi , edx add esp , hexvar or edi , eax jne hexvar mov eax , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esp ] mov esi , dword ptr [ esp + num ] mov dword ptr [ eax ] , ebx mov dword ptr [ eax + num ] , esi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , num mov ax , word ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov word ptr [ ebp - num ] , ax mov eax , dword ptr [ ebp - num ] movsx eax , word ptr [ eax * num + hexvar ] cmp eax , - num je hexvar mov eax , dword ptr [ ebp - num ] movsx eax , word ptr [ eax * num + hexvar ] movsx ecx , word ptr [ ebp + num ] cmp eax , ecx jne hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax * num + hexvar ] add esp , num pop ebp ret
push ebx sub esp , num call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] test eax , eax je hexvar test edx , edx je hexvar test byte ptr [ eax + hexvar ] , num jne hexvar mov ecx , dword ptr [ eax + hexvar ] test ecx , ecx je hexvar sub esp , num push dword ptr [ esp + hexvar ] push edx push eax call ecx add esp , hexvar add esp , num pop ebx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , num jmp hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar jmp hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov ecx , num mov edx , num mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax - num ] mov qword ptr [ rbp - hexvar ] , rdx test rax , rax jne hexvar mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push r14 push rbx sub rsp , hexvar mov qword ptr [ rsp + num ] , num mov byte ptr [ rsp + num ] , num movaps xmm0 , xmmword ptr [ rip + hexvar ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip + hexvar ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip + hexvar ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip + hexvar ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rbx , rsi mov r14 , rdi lea rdi , [ rsp + hexvar ] lea rdx , [ rsp + num ] lea rcx , [ rsp + num ] call rax cmp eax , num jne hexvar mov rcx , qword ptr [ rsp + num ] movsx r8d , byte ptr [ rsp + num ] mov rdi , r14 mov rsi , rbx xor edx , edx call hexvar mov rbx , rax jmp hexvar mov edi , dword ptr [ rip + hexvar ] test edi , edi jne hexvar call hexvar mov edi , eax mov dword ptr [ rip + hexvar ] , eax mov ecx , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx jmp hexvar mov edi , dword ptr [ rip + hexvar ] test edi , edi jne hexvar call hexvar mov edi , eax mov dword ptr [ rip + hexvar ] , eax mov ecx , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx lea rsi , [ rsp + hexvar ] mov edi , num xor eax , eax call hexvar mov rax , rbx add rsp , hexvar pop rbx pop r14 ret
mov rax , qword ptr [ rsi ] test rax , rax je hexvar mov rdx , qword ptr [ rsi + num ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rsi + num ] test rax , rax je hexvar mov rdx , qword ptr [ rsi ] mov qword ptr [ rax ] , rdx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx cmp dword ptr [ ebp - num ] , num je hexvar lea eax , [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - num ] mov edx , dword ptr [ edx + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx + hexvar ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax cmp dword ptr [ ebx + hexvar ] , num je hexvar mov eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi ret
push rbp mov rbp , rsp push rbx sub rsp , num lea rdi , [ rip + hexvar ] call hexvar mov rbx , rax call hexvar mov eax , dword ptr [ rax ] mov rdx , rbx mov esi , eax mov edi , num mov eax , num call hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] test rsi , rsi setne al movzx ecx , al mov esi , ecx mov rsi , qword ptr [ rsi * num ] jmp rsi mov rax , qword ptr [ rip ] jmp rax movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov ecx , hexvar sub rax , rcx sete dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rip ] jmp rax movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] test ecx , ecx setne dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num ] jmp rax mov rax , qword ptr [ rbp - num ] add rax , num mov esi , num mov edx , num mov r8d , num xor ecx , ecx mov dil , cl mov ecx , hexvar mov r9d , hexvar mov byte ptr [ rbp - hexvar ] , dil mov edi , ecx mov rcx , r9 mov r9 , rax mov al , byte ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rip ] mov dword ptr [ rbp - hexvar ] , eax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rcx + hexvar ] , rax add rsp , hexvar pop rbp ret
push { r4 , lr } subs r4 , r0 , num beq hexvar ldr r1 , [ pc , hexvar ] mov r0 , r4 bl hexvar cmp r0 , num beq hexvar bl hexvar mov r0 , num pop { r4 , pc }
push { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r6 , r1 mov sb , r2 cmp r0 , num beq hexvar ldrb r3 , [ r1 ] cmp r3 , num moveq r4 , r1 moveq sl , num beq hexvar ldr r2 , [ r0 , num ] ldrb r2 , [ r2 , hexvar ] cmp r2 , r3 addeq r6 , r1 , num moveq sl , num movne sl , num b hexvar mov sl , num ldrb r3 , [ r6 ] cmp r3 , hexvar cmpne r3 , hexvar movne r4 , r6 bne hexvar mov r4 , r6 ldrb r3 , [ r4 , num ] ! cmp r3 , hexvar cmpne r3 , hexvar beq hexvar mov fp , r4 mov r1 , hexvar mov r0 , r4 bl hexvar subs r7 , r0 , num beq hexvar sub r8 , r7 , r4 add r0 , r8 , num bl hexvar subs r5 , r0 , num beq hexvar mov r2 , r8 mov r1 , r4 mov r0 , r5 bl hexvar mov r3 , num strb r3 , [ r5 , r8 ] mov r1 , sb mov r0 , r5 bl hexvar mov r4 , r0 mov r0 , r5 bl hexvar cmp r4 , num subne r8 , fp , r6 beq hexvar mov r0 , r4 bl hexvar mov sb , r0 cmp r7 , num addeq r7 , r4 , r0 mov r0 , r7 bl hexvar add fp , r0 , num add sl , sb , r8 add r0 , sl , fp bl hexvar subs r5 , r0 , num beq hexvar mov r2 , r8 mov r1 , r6 mov r0 , r5 bl hexvar mov r2 , sb mov r1 , r4 add r0 , r5 , r8 bl hexvar mov r2 , fp mov r1 , r7 add r0 , r5 , sl bl hexvar mov r0 , r4 bl hexvar mov r0 , r5 pop { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov rsi , qword ptr [ hexvar ] movabs rdi , hexvar call hexvar movabs rdi , hexvar mov dword ptr [ rbp - num ] , eax call hexvar mov rdi , rax movabs rsi , hexvar mov al , num call hexvar movabs rdi , hexvar mov dword ptr [ rbp - num ] , eax call hexvar mov rdi , rax movabs rsi , hexvar movabs rdx , hexvar mov al , num call hexvar movabs rdi , hexvar mov dword ptr [ rbp - hexvar ] , eax call hexvar mov rdi , rax movabs rsi , hexvar mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
push r15 push r14 push r13 push r12 push rbp push rbx mov rbx , rsi sub rsp , hexvar test rdi , rdi movzx eax , byte ptr [ rsi ] mov dword ptr [ rsp ] , edx je hexvar test al , al jne hexvar mov r13 , rsi mov r15 , rsi xor r12d , r12d mov dword ptr [ rsp + num ] , num mov esi , hexvar mov rdi , r15 call hexvar test rax , rax mov rbp , rax je hexvar sub rax , r13 lea rdi , [ rax + num ] mov r13 , rax call hexvar test rax , rax mov r14 , rax je hexvar mov rdx , r13 mov rsi , r15 mov rdi , rax call hexvar mov esi , dword ptr [ rsp ] mov byte ptr [ r14 + r13 ] , num mov rdi , r14 call hexvar mov rdi , r14 mov r13 , rax call hexvar test r13 , r13 je hexvar mov rdi , r13 call hexvar mov r14 , rax mov rdi , rbp call hexvar lea rdi , [ r14 + r12 ] add rax , num mov qword ptr [ rsp + num ] , rax mov qword ptr [ rsp ] , rdi add rdi , rax call hexvar test rax , rax mov r15 , rax je hexvar mov rdx , r12 mov rsi , rbx mov rdi , rax call hexvar lea rdi , [ r15 + r12 ] mov rdx , r14 mov rsi , r13 call hexvar mov rdi , qword ptr [ rsp ] mov rdx , qword ptr [ rsp + num ] mov rsi , rbp add rdi , r15 call hexvar mov rdi , r13 call hexvar add rsp , hexvar mov rax , r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , hexvar mov dword ptr [ esp ] , num lea eax , [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax call hexvar cmp eax , num jne hexvar xor eax , eax movzx ecx , word ptr [ ebp - hexvar ] cmp eax , ecx jge hexvar movzx eax , word ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , num lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar cmp eax , num jne hexvar xor eax , eax cmp eax , dword ptr [ ebp - hexvar ] jge hexvar cmp dword ptr [ ebp - hexvar ] , hexvar jle hexvar mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
cmp rdi , hexvar ja hexvar lea rdx , [ rip + hexvar ] movsxd rax , dword ptr [ rdx + rdi * num ] add rax , rdx jmp rax lea rax , [ rip + hexvar ] ret
xor eax , eax cmp edx , hexvar ja hexvar push rbp push r15 push r14 push rbx sub rsp , hexvar mov ebp , edx mov r14 , rdi mov r15d , edx mov ebx , dword ptr [ rdi ] mov dword ptr [ rsp + num ] , ebx mov dword ptr [ rsp + hexvar ] , edx lea rdi , [ rsp + hexvar ] mov rdx , r15 call hexvar cmp ebp , hexvar ja hexvar cmp ebx , num jne hexvar lea rdi , [ rsp + r15 ] add rdi , hexvar mov edx , hexvar sub edx , ebp xor esi , esi call hexvar mov dword ptr [ rsp + hexvar ] , hexvar mov edx , hexvar mov edi , num mov esi , hexvar mov ecx , hexvar call hexvar mov rax , qword ptr [ r14 + hexvar ] mov rdi , qword ptr [ rax + hexvar ] lea rsi , [ rsp + num ] call hexvar mov rbx , rax mov edx , hexvar mov edi , num mov esi , hexvar mov ecx , hexvar call hexvar xor eax , eax test rbx , rbx setne al add rsp , hexvar pop rbx pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] sub ecx , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ esp ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax ] , num jge hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } subs r6 , r1 , num beq hexvar ldr r5 , [ r0 ] mov r8 , r0 cmp r5 , num beq hexvar ldr r7 , [ pc , hexvar ] ldrb r4 , [ r5 ] cmp r4 , num bne hexvar b hexvar ldrb r4 , [ r5 , num ] ! cmp r4 , num beq hexvar lsl r3 , r4 , num ldrh r3 , [ r7 , r3 ] tst r3 , hexvar bne hexvar cmp r4 , hexvar cmpne r4 , hexvar moveq r3 , num movne r3 , num cmp r4 , hexvar orreq r3 , r3 , num cmp r3 , num beq hexvar mov r1 , r6 mov r0 , hexvar bl hexvar cmn r0 , num beq hexvar mov r0 , r4 mov r1 , r6 bl hexvar cmn r0 , num bne hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov edi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov esi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov edi , dword ptr [ rax ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar mov r8d , hexvar movabs r9 , hexvar movabs r10 , hexvar mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov edi , num call hexvar xor esi , esi mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] shl rcx , num mov rdi , rax mov rdx , rcx call hexvar mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] cmp rax , qword ptr [ rbp - hexvar ] jge hexvar call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rcx + rdx * num ] , rax mov rax , qword ptr [ rbp - num ] add rax , num mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push { r4 , lr } mov r4 , r0 bl hexvar adds r4 , r4 , num movne r4 , num cmp r0 , num movne r4 , num cmp r4 , num popeq { r4 , pc }
push r15 push r14 push rbx test rdi , rdi je hexvar mov r14 , rsi test rsi , rsi je hexvar mov rbx , rdi mov ecx , dword ptr [ rdi + hexvar ] mov eax , hexvar cmp rcx , hexvar ja hexvar lea eax , [ rcx * num ] add qword ptr [ rbx ] , rax lea r15 , [ rbx + num ] lea eax , [ rcx + num ] mov dword ptr [ rbx + hexvar ] , eax mov byte ptr [ rbx + rcx + num ] , hexvar mov eax , dword ptr [ rbx + hexvar ] cmp eax , hexvar jb hexvar cmp eax , hexvar ja hexvar nop word ptr cs : [ rax + rax ] nop lea ecx , [ rax + num ] mov dword ptr [ rbx + hexvar ] , ecx mov eax , eax mov byte ptr [ rbx + rax + num ] , num mov eax , dword ptr [ rbx + hexvar ] cmp eax , hexvar jb hexvar mov rdi , rbx mov rsi , r15 call hexvar mov dword ptr [ rbx + hexvar ] , num xor eax , eax jmp hexvar cmp eax , hexvar je hexvar lea ecx , [ rax + num ] mov dword ptr [ rbx + hexvar ] , ecx mov eax , eax mov byte ptr [ rbx + rax + num ] , num mov eax , dword ptr [ rbx + hexvar ] cmp eax , hexvar jb hexvar mov rax , qword ptr [ rbx ] mov qword ptr [ rbx + hexvar ] , rax mov rdi , rbx mov rsi , r15 call hexvar mov eax , dword ptr [ rbx + hexvar ] mov dword ptr [ r14 ] , eax mov eax , dword ptr [ rbx + hexvar ] mov dword ptr [ r14 + num ] , eax mov eax , dword ptr [ rbx + hexvar ] mov dword ptr [ r14 + num ] , eax mov eax , dword ptr [ rbx + hexvar ] mov dword ptr [ r14 + hexvar ] , eax mov eax , dword ptr [ rbx + hexvar ] mov dword ptr [ r14 + hexvar ] , eax mov eax , dword ptr [ rbx + hexvar ] mov dword ptr [ r14 + hexvar ] , eax mov eax , dword ptr [ rbx + hexvar ] mov dword ptr [ r14 + hexvar ] , eax mov eax , dword ptr [ rbx + hexvar ] mov dword ptr [ r14 + hexvar ] , eax mov eax , dword ptr [ rbx + hexvar ] mov dword ptr [ r14 + hexvar ] , eax mov eax , dword ptr [ rbx + hexvar ] mov dword ptr [ r14 + hexvar ] , eax xor eax , eax pop rbx pop r14 pop r15 ret
cmp dword ptr [ rdi + num ] , num mov rax , qword ptr [ rsi + num ] je hexvar mov r8 , qword ptr [ rdi + num ] mov rdx , qword ptr [ rdi + hexvar ] mov rcx , qword ptr [ rsi ] xor edi , edi mov rsi , r8 jmp rax mov rdx , qword ptr [ rdi + num ] mov rdi , qword ptr [ rdi + hexvar ] mov rcx , qword ptr [ rsi ] mov rsi , rdx xor edx , edx jmp rax nop
push r12 push rbp push rbx mov rbp , rsi test edi , edi lea rcx , [ rip + hexvar ] lea rax , [ rip + hexvar ] cmovne rcx , rax test rsi , rsi je hexvar mov rbx , rsi add rbx , qword ptr [ rcx ] mov rax , rbx mov edx , num div qword ptr [ rip + hexvar ]
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov rdi , rsi add rdi , num mov qword ptr [ rbp - num ] , rdi movzx eax , byte ptr [ rsi ] shl eax , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov dword ptr [ rsi ] , eax mov rsi , qword ptr [ rbp - num ] mov rdi , rsi add rdi , num mov qword ptr [ rbp - num ] , rdi movzx eax , byte ptr [ rsi ] shl eax , hexvar mov rsi , qword ptr [ rbp - hexvar ] or eax , dword ptr [ rsi ] mov dword ptr [ rsi ] , eax mov rsi , qword ptr [ rbp - num ] mov rdi , rsi add rdi , num mov qword ptr [ rbp - num ] , rdi movzx eax , byte ptr [ rsi ] shl eax , num mov rsi , qword ptr [ rbp - hexvar ] or eax , dword ptr [ rsi ] mov dword ptr [ rsi ] , eax mov rsi , qword ptr [ rbp - num ] mov rdi , rsi add rdi , num mov qword ptr [ rbp - num ] , rdi movzx eax , byte ptr [ rsi ] mov rsi , qword ptr [ rbp - hexvar ] or eax , dword ptr [ rsi ] mov dword ptr [ rsi ] , eax mov rax , qword ptr [ rbp - num ] pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar cmp dword ptr [ hexvar ] , num jne hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] or ecx , eax mov dword ptr [ ebp - num ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] or ecx , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar xor eax , eax mov ecx , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ hexvar ] , ecx mov dword ptr [ hexvar ] , ecx mov dword ptr [ hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar cmp dword ptr [ hexvar ] , num jne hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] or ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar jmp hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] or ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar jmp hexvar mov eax , dword ptr [ hexvar ] movsd xmm0 , qword ptr [ eax ] movsd qword ptr [ hexvar ] , xmm0 jmp hexvar mov dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num jmp hexvar add esp , hexvar pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s0 ) sw v0 , hexvar ( sp ) beqz a1 , hexvar lw t9 , - hexvar ( gp ) move s2 , a0 move a0 , a1 jalr t9 move s1 , a1 bnez v0 , hexvar lw gp , hexvar ( sp ) move v0 , zero lw a0 , hexvar ( sp ) lw v1 , ( s0 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) move a1 , zero move a0 , s1 jalr t9 addiu s3 , sp , hexvar move a3 , s1 lw gp , hexvar ( sp ) move a2 , v0 lw v1 , hexvar ( s2 )
add r2 , r0 , num ldrb r3 , [ r0 ] cmp r3 , num beq hexvar ldr r0 , [ pc , hexvar ] add r3 , r3 , r0 , lsl num add r0 , r0 , r3 ldrb r3 , [ r2 ] , num cmp r3 , num bne hexvar bx lr ldr r0 , [ pc ] bx lr andeq r1 , r0 , r5 , lsl num
push r14 push rbx push rax test rdi , rdi je hexvar mov rbx , rdi mov rax , qword ptr [ rdi ] test rax , rax je hexvar mov rcx , qword ptr [ rax + hexvar ] test rcx , rcx je hexvar cmp dword ptr [ rbx + hexvar ] , num jne hexvar mov r14 , rsi test rsi , rsi je hexvar mov rsi , qword ptr [ r14 ] test rsi , rsi jne hexvar call hexvar mov rsi , rax mov qword ptr [ r14 ] , rax mov rax , qword ptr [ rbx ] mov rcx , qword ptr [ rax + hexvar ] mov rdi , rbx call rcx mov ebx , eax test eax , eax jg hexvar mov rdi , qword ptr [ r14 ] call hexvar mov qword ptr [ r14 ] , num jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov ebx , hexvar mov eax , ebx add rsp , num pop rbx pop r14 ret
cmp r2 , num push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov sb , r2 movhs r2 , num sub sp , sp , hexvar str r3 , [ sp , hexvar ] rsb r3 , r2 , r2 , lsl num lsl r3 , r3 , num add r3 , r3 , hexvar str r3 , [ sp , hexvar ] mov fp , r0 mov sl , r1 mov r7 , sb mov r3 , r0 str r2 , [ sp , hexvar ] ldr r2 , [ pc , hexvar ] str r0 , [ sp , hexvar ] ldr r2 , [ r2 ] str r2 , [ sp , hexvar ] sub r2 , fp , r3 add r5 , fp , num ldr r3 , [ sp , hexvar ] cmp r5 , sl add r2 , r2 , r3 bhi hexvar ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar cmp r5 , sl blo hexvar cmp fp , sl bhs hexvar sub r1 , sl , fp sub r3 , r1 , num cmp r3 , num bhi hexvar ldr r3 , [ pc , hexvar ] mov r0 , fp ldr r3 , [ r3 ] blx r3 cmp r0 , num ldrls pc , [ pc , r0 , lsl num ] b hexvar strdeq lr , pc , [ r3 ] , -r0 andeq lr , r3 , ip , lsl num andeq lr , r3 , ip , lsl num andeq lr , r3 , ip , lsl num muleq r3 , r4 , lr muleq r3 , r0 , sb strdeq lr , pc , [ r3 ] , -r8 andeq lr , r3 , r8 , lsr num ldr r1 , [ pc , hexvar ] mov r2 , num mov r0 , num bl hexvar mov r1 , r0 mov r0 , num bl hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
lui gp , hexvar addiu sp , sp , - hexvar lui v0 , hexvar addiu gp , gp , hexvar sltu v0 , a3 , v0 sw fp , hexvar ( sp ) sw s5 , hexvar ( sp ) move fp , a0 sw s3 , hexvar ( sp ) move s5 , a3 sw s2 , hexvar ( sp ) move s3 , a1 sw ra , hexvar ( sp ) move s2 , a2 sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) bnez v0 , hexvar sw gp , hexvar ( sp ) addiu s7 , a0 , hexvar lui s6 , hexvar move s4 , a3 move s1 , a2 move s0 , a1 lw a3 , hexvar ( fp ) lui a2 , hexvar lw v0 , num ( fp ) move a1 , s0 lw t9 , - hexvar ( gp ) move a0 , s1 addiu a3 , a3 , num sw s7 , hexvar ( sp ) sw v0 , hexvar ( sp ) jalr t9 addu s4 , s4 , s6 lui v0 , hexvar lw gp , hexvar ( sp ) sltu v1 , s4 , v0 addu s1 , s1 , v0 beqz v1 , hexvar addu s0 , s0 , v0 subu v0 , s5 , v0 ext a2 , s5 , num , hexvar srl v0 , v0 , hexvar addiu v0 , v0 , num sll v0 , v0 , hexvar addu s2 , s2 , v0 addu s3 , s3 , v0 beqz a2 , hexvar lw ra , hexvar ( sp ) lw a3 , hexvar ( fp ) addiu v1 , fp , hexvar lw v0 , num ( fp ) move a1 , s3 lw t9 , - hexvar ( gp ) move a0 , s2 addiu a3 , a3 , num sw v1 , hexvar ( sp ) jalr t9 sw v0 , hexvar ( sp ) lw ra , hexvar ( sp ) addiu v0 , zero , num lw fp , hexvar ( sp ) lw s7 , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar move a2 , a3
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax ] call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi ] , rax mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + num ] call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + num ] , rax mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , ecx mov edx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , edx call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx + num ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , esp mov dword ptr [ ebx + num ] , edi mov dword ptr [ ebx + num ] , edx mov dword ptr [ ebx ] , esi mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx lea esi , [ hexvar ] mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) move v1 , zero move v0 , zero sw v1 , hexvar ( fp ) sw v0 , hexvar ( fp ) addiu a0 , zero , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , num ( v0 ) lw v0 , hexvar ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a3 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push edi push esi push ebx mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esi ] cmp edi , dword ptr [ esi + num ] jae hexvar nop mov eax , dword ptr [ edi ] test eax , eax je hexvar mov ebx , dword ptr [ edi + num ] mov eax , dword ptr [ esi + hexvar ] test ebx , ebx je hexvar test eax , eax je hexvar sub esp , hexvar push dword ptr [ ebx ] call eax mov eax , dword ptr [ esi + hexvar ] add esp , hexvar mov edx , dword ptr [ ebx + num ] mov ecx , dword ptr [ esi + hexvar ] mov dword ptr [ ebx ] , num test edx , edx mov dword ptr [ ebx + num ] , ecx mov dword ptr [ esi + hexvar ] , ebx mov ebx , edx jne hexvar test eax , eax je hexvar sub esp , hexvar push dword ptr [ edi ] call eax add esp , hexvar mov dword ptr [ edi ] , num mov dword ptr [ edi + num ] , num add edi , num cmp dword ptr [ esi + num ] , edi ja hexvar mov dword ptr [ esi + hexvar ] , num mov dword ptr [ esi + hexvar ] , num pop ebx pop esi pop edi ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rdi , qword ptr [ rbp - num ] mov esi , dword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) addiu a2 , zero , num lui a1 , hexvar addiu a1 , a1 , - hexvar move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a2 , v0 move a1 , zero addiu a0 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push { r4 , r5 } ldrb r2 , [ r0 , num ] ldrb r4 , [ r0 , num ] orr r1 , r4 , r2 , lsl num ldrb r4 , [ r0 , num ] orr r1 , r4 , r1 , lsl num lsr r3 , r1 , hexvar ldrb r4 , [ r0 , num ] orr r1 , r4 , r1 , lsl num lsl r3 , r3 , num orr r3 , r3 , r1 , lsr num ldrb r4 , [ r0 , num ] orr r1 , r4 , r1 , lsl num lsl r3 , r3 , num orr r3 , r3 , r1 , lsr num ldrb r4 , [ r0 , num ] orr r1 , r4 , r1 , lsl num lsl r3 , r3 , num orr r3 , r3 , r1 , lsr num ldrb r4 , [ r0 , num ] orr r1 , r4 , r1 , lsl num lsl r3 , r3 , num ldrb r4 , [ r0 ] orr r0 , r4 , r1 , lsl num orr r1 , r3 , r1 , lsr num pop { r4 , r5 } bx lr
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] cmp r3 , num bne hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar add r2 , sp , hexvar add r3 , sp , hexvar str r3 , [ sp ] mov r3 , r2 ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] ldr r3 , [ r3 ] ldr r3 , [ r3 , num ] ldr r3 , [ r3 ] mov r2 , r3 ldr r3 , [ sp , hexvar ] cmp r2 , r3 bne hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] ldr r3 , [ r3 ] ldr r3 , [ r3 , num ] ldr r1 , [ r3 , num ] ldr r2 , [ sp , hexvar ] add r3 , sp , hexvar mov r0 , r3 bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r3 , num b hexvar mov r3 , num mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar pop ebp ret
addiu a0 , a0 , - num srl a0 , a0 , hexvar addiu a0 , a0 , - num lw v1 , num ( a1 )
push ebp mov ebp , esp sub esp , hexvar mov eax , esp mov dword ptr [ eax + num ] , num mov dword ptr [ eax ] , num call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax call hexvar mov eax , dword ptr [ eax ] sub eax , hexvar sete cl movzx edx , cl mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - num ] , eax jmp edx call hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] mov eax , hexvar mov ecx , hexvar cmovb ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] movsx eax , byte ptr [ eax + ecx ] mov dword ptr [ esp ] , eax call hexvar movzx ecx , al mov al , byte ptr [ ecx + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - hexvar ] mov byte ptr [ ecx + edx ] , al mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push r15 push r14 push rbx mov rbx , rsi mov r15 , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov r14 , rax mov rdi , rax mov esi , hexvar xor edx , edx mov rcx , rbx call hexvar cmp dword ptr [ r15 + hexvar ] , num je hexvar xor ebx , ebx nop dword ptr [ rax + rax ] mov rax , qword ptr [ r15 ] mov rax , qword ptr [ rax + rbx * num ] mov ecx , num test rax , rax je hexvar xor ecx , ecx nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] add ecx , num mov rax , qword ptr [ rax + num ] test rax , rax jne hexvar mov esi , hexvar mov rdi , r14 mov edx , ebx xor eax , eax call hexvar add rbx , num mov eax , dword ptr [ r15 + hexvar ] cmp rbx , rax jb hexvar mov rdi , r14 pop rbx pop r14 pop r15 jmp hexvar pop rbx pop r14 pop r15 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
mov rax , qword ptr [ rdi + hexvar ] movzx edx , byte ptr [ rax ] cmp dl , hexvar je hexvar test esi , esi jne hexvar cmp dl , hexvar jne hexvar add rax , num xor esi , esi mov qword ptr [ rdi + hexvar ] , rax jmp hexvar xor eax , eax ret
push ebp push edi push esi push ebx mov eax , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] test eax , eax jle hexvar xor edi , edi lea esi , [ esi ] push esi push ebx add esi , num push ebp add ebx , num add edi , num call hexvar add esp , hexvar cmp dword ptr [ esp + hexvar ] , edi jne hexvar pop ebx pop esi pop edi pop ebp ret
lui gp , hexvar lui v0 , hexvar addiu gp , gp , - hexvar addiu sp , sp , - hexvar addiu v0 , v0 , hexvar lw v1 , - hexvar ( gp ) sw s3 , hexvar ( sp ) addiu s3 , a0 , num sw s2 , hexvar ( sp ) move s2 , a1 sw s1 , hexvar ( sp ) sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v1 , ( v1 ) beq v1 , v0 , hexvar move s1 , a2 addiu a1 , zero , num move s0 , a0 jal hexvar move a0 , s3 addiu a1 , zero , num move a0 , s0 sw v1 , num ( s2 )
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] mov r2 , num ldr r1 , [ sp ] ldr r0 , [ sp , num ] bl hexvar mov r0 , r0 add sp , sp , hexvar pop { pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + hexvar ] , rax add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rdi ] test eax , eax mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , num mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov rdi , rax call hexvar test eax , eax sete byte ptr [ rbp - num ] mov rdi , qword ptr [ rip + hexvar ] jmp rdi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov cl , byte ptr [ rax ] test cl , cl sete cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov byte ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov cl , byte ptr [ rax ] sub cl , hexvar sete dl movzx esi , dl mov edi , esi add rax , rdi mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov byte ptr [ rbp - hexvar ] , cl jmp rax mov rax , qword ptr [ rbp - hexvar ] mov cl , byte ptr [ rax ] sub cl , hexvar setne dl movzx esi , dl mov eax , esi mov rax , qword ptr [ rax * num + hexvar ] mov byte ptr [ rbp - hexvar ] , cl jmp rax mov byte ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , rax add rcx , num mov qword ptr [ rbp - hexvar ] , rcx mov dl , byte ptr [ rax + num ] test dl , dl setne dl movzx esi , dl mov eax , esi mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov byte ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax call hexvar mov al , byte ptr [ rbp - num ] and al , num movzx eax , al add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] and eax , num add esp , hexvar pop ebp ret
push r13 push r12 push rbp push rbx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax test edx , edx jne hexvar mov qword ptr [ rsp ] , rdi mov rdi , rsp mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdi mov rbp , rcx mov qword ptr [ rsp + num ] , num mov dword ptr [ rsp + hexvar ] , num call hexvar mov rdi , qword ptr [ rsp + hexvar ] mov ebx , eax mov rsi , qword ptr [ rdi + hexvar ] sub rsi , qword ptr [ rdi + num ] cmp al , num ja hexvar cmp al , num jae hexvar test al , al jne hexvar mov rdi , qword ptr [ rbp ] call hexvar mov rbx , rax mov rdi , rbx call hexvar test eax , eax je hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov rax , rbx jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
push { r4 , lr } sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] ldr r3 , [ r3 , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] str r3 , [ sp ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] ldr r4 , [ r3 , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] str r3 , [ sp ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] blx r4 mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { r4 , pc }
push r12 push rbp push rbx mov rbp , rdi call hexvar mov ebx , eax test eax , eax je hexvar mov rdi , rbp call hexvar mov r12 , rax mov edx , num mov esi , hexvar mov edi , num call hexvar mov rbp , rax call hexvar mov rcx , r12 mov rdx , rbp mov esi , dword ptr [ rax ] mov edi , num mov eax , num call hexvar mov eax , ebx pop rbx pop rbp pop r12 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a0 , hexvar ( sp ) jal hexvar nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
beqz a0 , hexvar move v0 , zero beqz a2 , hexvar nop addiu v0 , a1 , - num sltiu v0 , v0 , num beqz v0 , hexvar nop sw zero , num ( a0 ) addiu v0 , zero , num sw v0 , ( a0 ) sw a1 , num ( a0 ) sw a2 , hexvar ( a0 ) addiu v0 , zero , num jr ra nop jr ra move v0 , zero
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , hexvar cmp edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar cmp dword ptr [ hexvar ] , num jl hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax call hexvar xor eax , eax cmp eax , dword ptr [ hexvar ] jne hexvar xor eax , eax mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ ebp - hexvar ] , eax cmp ecx , dword ptr [ ebp - hexvar ] jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , hexvar call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx + num ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ edi + num ] mov edi , dword ptr [ edi + num ] xor edx , edi xor esi , ebx xor ebx , ebx or esi , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi mov byte ptr [ ebp - hexvar ] , bl jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx + hexvar ] mov edx , dword ptr [ edx + hexvar ] xor eax , edx xor ecx , esi xor edx , edx mov bl , dl or ecx , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , bl jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ecx ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] xor ecx , ecx test al , num mov edx , num cmovne ecx , edx cmp ecx , num setne al and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , hexvar jmp hexvar jmp hexvar mov rax , qword ptr [ num ] mov rcx , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rcx + hexvar ] call rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ num ] mov rdi , qword ptr [ rbp - hexvar ] call rax mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , hexvar jmp hexvar jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) move s3 , a0 sw s2 , hexvar ( sp ) move s2 , a1 sw s1 , hexvar ( sp ) move s1 , a2 sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) addiu a2 , zero , num addiu a1 , zero , hexvar move a3 , s2 move a0 , v0 jalr t9 move s0 , v0 blez v0 , hexvar lw gp , hexvar ( sp ) addiu v0 , zero , num beq s1 , v0 , hexvar addiu v0 , zero , num beq s1 , v0 , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , zero , hexvar addiu a3 , a3 , - hexvar addiu v0 , zero , hexvar addiu a1 , zero , hexvar sw v0 , hexvar ( sp ) addiu a0 , zero , hexvar jalr t9 move s1 , zero lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , s0 move v0 , s1 lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) addiu v0 , zero , hexvar addiu a3 , a3 , - hexvar addiu a2 , zero , num sw v0 , hexvar ( sp ) addiu a1 , zero , hexvar addiu a0 , zero , hexvar jalr t9 move s1 , zero lw ra , hexvar ( sp ) move v0 , s1 lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) move a1 , zero jalr t9 move a0 , s0 addiu a2 , zero , hexvar lw gp , hexvar ( sp ) move s1 , v0 beqz s1 , hexvar move a1 , s1 jal hexvar move a0 , s3 move a0 , s1 lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lw v0 , hexvar ( fp ) move t1 , v0 sra v0 , v0 , hexvar move t0 , v0 sw zero , hexvar ( sp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( sp ) lui v0 , hexvar addiu v0 , v0 , - hexvar sw v0 , hexvar ( sp ) lui v1 , hexvar ori v1 , v1 , hexvar move v0 , zero sw v1 , hexvar ( sp ) sw v0 , hexvar ( sp ) move a3 , t1 move a2 , t0 lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) sw v1 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v1 , ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) jal hexvar nop lw gp , hexvar ( sp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) addiu v0 , zero , num lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
movzx eax , word ptr [ rsi + num ] mov r8d , dword ptr [ rsi + num ] mov r9d , dword ptr [ rsi + hexvar ] mov esi , num cmp ax , - num jne hexvar shl r8 , hexvar mov eax , r9d mov esi , hexvar or rax , r8 test rdx , rdx je hexvar mov qword ptr [ rdx ] , rax test rcx , rcx je hexvar mov qword ptr [ rcx ] , rsi ret nop dword ptr [ rax + rax ]
str lr , [ sp , - num ] ! sub sp , sp , hexvar ldr ip , [ sp , hexvar ] str ip , [ sp , num ] str r3 , [ sp , num ] ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] bl hexvar add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov dword ptr [ ebp - hexvar ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov edx , dword ptr [ ebp - hexvar ] add edx , num add edx , hexvar sub edx , num mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] cmp edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jb hexvar mov eax , dword ptr [ ebp - hexvar ] sub esp , hexvar mov dword ptr [ esp ] , eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] add ecx , num add ecx , num sub ecx , num and ecx , hexvar add ecx , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ecx mov ecx , dword ptr [ edx ] mov esi , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] sub eax , ecx mov dl , al mov eax , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ eax ] mov byte ptr [ esi - num ] , dl mov esi , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - num ] pop esi pop ebp ret
push esi push ebx call hexvar add ebx , hexvar sub esp , num mov edx , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ edx + num ] mov esi , dword ptr [ ecx + num ] and eax , hexvar and esi , hexvar cmp esi , eax je hexvar cmp eax , num sbb eax , eax add esp , num and eax , num sub eax , num pop ebx pop esi ret
push rbp mov rbp , rsp xor eax , eax mov ecx , eax mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov rdx , rcx sub rdx , num sub rdi , rdx mov rdx , qword ptr [ rbp - num ] movabs rsi , hexvar sub rdx , rsi add rdx , num add rdx , rsi imul rdi , rdx mov qword ptr [ rbp - hexvar ] , rdi mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] add rsi , hexvar imul rdx , rsi shr rdx , num mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rcx sub rsi , num sub rdx , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rcx sub rdi , rdx mov rdx , rcx sub rdx , rsi add rdi , rdx sub rcx , rdi mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] imul rcx , qword ptr [ rbp - hexvar ] mov rax , rcx pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r4 , r1 sub sp , sp , hexvar mov r5 , r2 str r2 , [ sp , num ] mov r8 , r3 mov sl , r0 bl hexvar ldr fp , [ r4 ] cmp fp , num beq hexvar mov r6 , num mov r7 , r0 str r6 , [ sp ] mvn sb , num b hexvar mla r3 , r8 , sb , r3 mov r2 , r8 mov r0 , r3 mov r1 , r5 bl hexvar cmp r0 , num ldr r3 , [ sp ] movne r3 , num str r3 , [ sp ] ldr fp , [ r4 , num ] ! add r6 , r6 , num cmp fp , num add r5 , r5 , r8 beq hexvar mov r2 , r7 mov r1 , sl mov r0 , fp bl hexvar cmp r0 , num bne hexvar mov r0 , fp bl hexvar cmp r0 , r7 beq hexvar cmn sb , num moveq sb , r6 beq hexvar ldr r3 , [ sp , num ] cmp r3 , num bne hexvar mov r3 , num str r3 , [ sp ] b hexvar ldr r3 , [ sp ] cmp r3 , num mvnne sb , num mov r0 , sb add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push { r4 , fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] add r2 , r3 , num ldm r2 , { r1 , r2 } ldr r3 , [ pc , hexvar ] ldm r3 , { r3 , r4 } cmp r2 , r4 cmpeq r1 , r3 bne hexvar bl hexvar mov r2 , r0 mov r3 , hexvar str r3 , [ r2 ] mov r3 , num b hexvar bl hexvar mov r2 , r0 mov r3 , num str r3 , [ r2 ] ldr r3 , [ fp , - hexvar ] add r3 , r3 , num mov r1 , r3 ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bgt hexvar bl hexvar mov r3 , r0 ldr r3 , [ r3 ] mov r0 , r3 bl hexvar mov r3 , r0 cmp r3 , num beq hexvar ldr r3 , [ fp , - hexvar ] add r4 , r3 , num ldm r4 , { r3 , r4 } ldr r2 , [ pc , hexvar ] stm r2 , { r3 , r4 } ldr r3 , [ fp , - hexvar ] mov r0 , r3 sub sp , fp , num pop { r4 , fp , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar add eax , num mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , hexvar ja hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov edx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax movsd xmm0 , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbp - num ] mulsd xmm0 , qword ptr [ rax + hexvar ] add rsp , hexvar pop rbp ret
sub rsp , hexvar movaps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 mov dword ptr [ rsp + hexvar ] , num movaps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 mov dword ptr [ rsp + hexvar ] , hexvar xorps xmm0 , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 mov dword ptr [ rsp + hexvar ] , num lea rdi , [ rsp + hexvar ] lea rsi , [ rsp + hexvar ] mov edx , hexvar call hexvar test eax , eax jne hexvar lea rdi , [ rsp + hexvar ] lea rsi , [ rsp + hexvar ] mov edx , num call hexvar test eax , eax jne hexvar lea rdi , [ rsp + hexvar ] lea rsi , [ rsp + hexvar ] lea rcx , [ rsp + hexvar ] mov edx , hexvar call hexvar test eax , eax jne hexvar lea rdi , [ rsp + hexvar ] call hexvar test eax , eax jne hexvar lea rdi , [ rsp + hexvar ] lea rdx , [ rsp + hexvar ] mov esi , hexvar mov ecx , hexvar mov r8d , num xor r9d , r9d call hexvar xor ecx , ecx test eax , eax setne cl lea eax , [ rcx + rcx * num ] add rsp , hexvar ret
push { r4 , r5 , r6 , lr } mov r5 , r0 ldr r6 , [ pc , hexvar ] ldr r4 , [ pc , hexvar ] cmp r4 , num beq hexvar ldr r3 , [ r4 , hexvar ] mov r1 , r5 mov r0 , r4 blx r3 cmp r0 , num bne hexvar ldr r4 , [ r4 , hexvar ] cmp r4 , num bne hexvar ldr r4 , [ r6 , num ] ! cmp r4 , num bne hexvar mov r4 , num mov r0 , r4 pop { r4 , r5 , r6 , pc }
push { r4 , lr } sub sp , sp , num str r0 , [ sp , num ] str r1 , [ sp ] ldr r3 , [ sp ] ldr r4 , [ r3 ] ldr r3 , [ sp , num ] ldr r0 , [ r3 ] ldr r3 , [ sp , num ] ldr r1 , [ r3 , num ] ldr r3 , [ sp , num ] ldr r2 , [ r3 , num ] ldr r3 , [ sp ] ldr r3 , [ r3 , num ] blx r4 mov r0 , r0 add sp , sp , num pop { r4 , pc }
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar lea ecx , [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] add ecx , num mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar lea ecx , [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , hexvar lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , hexvar mov dword ptr [ esp + hexvar ] , hexvar mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ esp + hexvar ] , ecx mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , ecx call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rcx mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] cmp rax , num mov ecx , hexvar mov edx , hexvar cmovne edx , ecx mov dword ptr [ rbp - hexvar ] , edx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov cx , word ptr [ rax + hexvar ] and cx , hexvar movzx edx , cx cmp edx , num mov edx , hexvar mov esi , hexvar cmove esi , edx mov dword ptr [ rbp - hexvar ] , esi jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ rbp - hexvar ] , ecx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx ecx , byte ptr [ rax + hexvar ] and ecx , hexvar and ecx , hexvar add ecx , hexvar mov dl , cl mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax + hexvar ] , dl mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov eax , num add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx ] sub edx , - num setne bl movzx esi , bl mov esi , dword ptr [ esi * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jmp esi mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp + hexvar ] sub eax , ecx setne dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , eax add esp , hexvar pop esi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov byte ptr [ ebp - num ] , num mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov ecx , esp mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + num ] , hexvar call hexvar cmp eax , num je hexvar mov eax , dword ptr [ ebp - num ] mov ecx , esp mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + num ] , hexvar call hexvar cmp eax , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , num sete cl and cl , num movzx eax , cl add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov dword ptr [ rbp - num ] , eax cmp dword ptr [ rbp - num ] , - num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] shl rax , num mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov edx , dword ptr [ rbp - num ] mov edx , edx and edx , hexvar or rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov eax , dword ptr [ rbp - num ] and eax , hexvar test eax , eax jne hexvar mov eax , num leave ret
addiu sp , sp , - hexvar lui gp , hexvar lw v0 , hexvar ( sp ) addiu gp , gp , hexvar sw a3 , hexvar ( sp ) move a3 , a1 lui a1 , hexvar sw a2 , hexvar ( sp ) sw v0 , hexvar ( sp ) move a2 , a0 lw v0 , hexvar ( sp ) addiu a1 , a1 , hexvar lw t9 , - hexvar ( gp ) lw a0 , - hexvar ( gp ) sw v0 , hexvar ( sp ) sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) bal hexvar sw v0 , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push esi sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar pop esi ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al lea eax , [ hexvar ] mov dword ptr [ hexvar ] , num mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , edi mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar lea esp , [ ebp - num ] pop esi pop edi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] mov r1 , num ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r2 , [ r3 ] ldr r3 , [ sp , hexvar ] add r3 , r2 , r3 add r3 , r3 , num mov r1 , r3 ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r2 , [ r3 , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] add r3 , r2 , r3 str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] asr r2 , r3 , hexvar ldr r3 , [ sp , hexvar ] and r2 , r2 , hexvar strb r2 , [ r3 ] ldr r3 , [ sp , hexvar ] asr r2 , r3 , num ldr r3 , [ sp , hexvar ] add r3 , r3 , num and r2 , r2 , hexvar strb r2 , [ r3 ] ldr r3 , [ sp , hexvar ] add r3 , r3 , num ldr r2 , [ sp , hexvar ] and r2 , r2 , hexvar strb r2 , [ r3 ] ldr r3 , [ sp , hexvar ] add r3 , r3 , num str r3 , [ sp , hexvar ] add r3 , sp , hexvar mov r1 , r3 ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] ldr r2 , [ r3 ] ldr r3 , [ sp , hexvar ] add r3 , r2 , r3 add r2 , r3 , num ldr r3 , [ sp , hexvar ] str r2 , [ r3 ] mov r3 , num mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw a3 , ( a0 ) lw a2 , num ( a0 ) lw v0 , num ( a0 ) sw a1 , hexvar ( sp ) move a1 , v0 lw a0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add eax , hexvar sub esp , hexvar push hexvar mov ebx , eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ eax ] , edx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - num ] leave ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ esi + hexvar ] mov esi , dword ptr [ esi ] mov edi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx call hexvar and al , num mov byte ptr [ ebp - num ] , al jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
push r15 push r14 push r13 push r12 push rbp push rbx mov rbx , rsi mov rbp , rdx sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rdi mov rdi , qword ptr [ rdi ] mov rcx , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rcx xor ecx , ecx call hexvar cmp dword ptr [ rbx ] , num mov dword ptr [ rsp + hexvar ] , eax je hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , ebx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar sub sp , sp , num str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r0 , [ sp , num ] bl hexvar mov r2 , r0 ldr r3 , [ pc , hexvar ] cmp r2 , r3 bhi hexvar ldr r0 , [ sp , num ] bl hexvar mov r2 , r0 ldr r3 , [ pc , hexvar ] cmp r2 , r3 bls hexvar mov r3 , num b hexvar add r3 , sp , hexvar sub r3 , r3 , num ldr r1 , [ sp , num ] mov r0 , r3 bl hexvar str r0 , [ sp , hexvar ] add r3 , sp , hexvar sub r3 , r3 , num mov r2 , num ldr r1 , [ sp , hexvar ] mov r0 , r3 bl hexvar mov r2 , r0 ldr r3 , [ sp , hexvar ] str r2 , [ r3 , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] cmp r3 , num bne hexvar mov r3 , num b hexvar add r3 , sp , hexvar sub r3 , r3 , num ldr r1 , [ sp , num ] mov r0 , r3 bl hexvar str r0 , [ sp , hexvar ] add r3 , sp , hexvar sub r3 , r3 , num mov r2 , num ldr r1 , [ sp , hexvar ] mov r0 , r3 bl hexvar mov r2 , r0 ldr r3 , [ sp , hexvar ] str r2 , [ r3 , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] cmp r3 , num movne r3 , num moveq r3 , num and r3 , r3 , hexvar mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar add sp , sp , num pop { pc }
push rbp push r14 push rbx test rdi , rdi je hexvar mov rbx , rdi mov rax , qword ptr [ rdi ] test rax , rax je hexvar mov r14 , rsi cmp qword ptr [ rax + hexvar ] , num jne hexvar cmp qword ptr [ rax + hexvar ] , num jne hexvar cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov ecx , dword ptr [ rbx + hexvar ] cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov rdi , rbx mov esi , num xor edx , edx mov rcx , r14 call rax test eax , eax jle hexvar mov ebp , num cmp eax , num je hexvar mov rax , qword ptr [ rbx + hexvar ] test rax , rax je hexvar mov eax , dword ptr [ rax ] cmp eax , dword ptr [ r14 ] jne hexvar mov rdi , r14 call hexvar test eax , eax jne hexvar mov rdi , qword ptr [ rbx + hexvar ] mov rsi , r14 call hexvar test eax , eax je hexvar mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx + hexvar ] , r14 mov rax , qword ptr [ rbx ] mov ebp , num mov rdi , rbx mov esi , num mov edx , num mov rcx , r14 call qword ptr [ rax + hexvar ] test eax , eax jle hexvar add r14 , num mov ecx , hexvar mov rdi , r14 mov esi , num mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov ebp , hexvar mov eax , ebp pop rbx pop r14 pop rbp ret
push rbp push r14 push rbx xor ebp , ebp test rsi , rsi je hexvar mov r14 , rdx mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] call hexvar test eax , eax jle hexvar test r14 , r14 je hexvar mov rdi , qword ptr [ rbx + hexvar ] mov esi , hexvar mov edx , num call hexvar cmp eax , num jne hexvar mov rdi , qword ptr [ rbx + hexvar ] mov rsi , r14 call hexvar test eax , eax jle hexvar mov rdi , qword ptr [ rbx + hexvar ] mov esi , hexvar mov edx , num call hexvar xor ebp , ebp cmp eax , num sete bpl mov eax , ebp pop rbx pop r14 pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s7 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui s0 , hexvar sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) lw s7 , - hexvar ( gp ) lw s2 , hexvar ( s0 ) lw s1 , hexvar ( s0 ) sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s6 , hexvar ( sp ) or v0 , s2 , s1 sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v1 , ( s7 ) sw v1 , hexvar ( sp ) bnez v0 , hexvar lui v0 , hexvar lui v0 , hexvar lw v0 , hexvar ( v0 ) bnez v0 , hexvar lui a1 , hexvar addiu s6 , zero , num lw a0 , hexvar ( sp ) move v0 , s6 lw v1 , ( s7 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) lw s7 , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) lui v1 , hexvar addiu s3 , a0 , num sw v0 , hexvar ( sp ) sw v1 , hexvar ( sp ) lui a1 , hexvar sw s3 , hexvar ( sp ) move s5 , a0 lw s6 , hexvar ( v0 )
lui gp , hexvar lw v1 , num ( a0 ) addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) beqz v1 , hexvar sw gp , hexvar ( sp ) lw v0 , num ( a0 ) sltiu a1 , v0 , num bnez a1 , hexvar addiu v0 , v0 , - num lw s0 , num ( v1 ) lw t9 , - hexvar ( gp ) sw v0 , num ( a0 ) jalr t9 move a0 , s0 addiu v1 , zero , hexvar addiu v0 , v0 , - num addu a0 , s0 , v0 lb v0 , ( a0 ) bne v0 , v1 , hexvar lw gp , hexvar ( sp ) lb v1 , num ( a0 ) bne v1 , v0 , hexvar lui a3 , hexvar lb v0 , num ( a0 ) bnez v0 , hexvar addiu v1 , zero , hexvar sb zero , num ( a0 ) addiu v0 , zero , num sb v1 , ( a0 ) lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) lui a1 , hexvar lui a0 , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar addiu a1 , a1 , hexvar jalr t9 addiu a0 , a0 , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) lui a1 , hexvar lui a0 , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar addiu a1 , a1 , hexvar jalr t9 addiu a0 , a0 , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) lui a1 , hexvar lui a0 , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar addiu a1 , a1 , hexvar jalr t9 addiu a0 , a0 , hexvar
push rbp push r14 push rbx sub rsp , hexvar mov qword ptr [ rsp + num ] , rsi mov r14d , hexvar test rdi , rdi je hexvar mov rbp , rsi mov rbx , rdi mov rcx , qword ptr [ rdi + hexvar ] test rcx , rcx je hexvar cmp dword ptr [ rbx + hexvar ] , num jne hexvar mov rdi , qword ptr [ rbx + num ] movsxd rsi , dword ptr [ rbx ] mov edx , num call hexvar mov dword ptr [ rbx + hexvar ] , num test rbp , rbp je hexvar mov rsi , qword ptr [ rbx + num ] mov edx , dword ptr [ rbx ] mov r8 , qword ptr [ rbx + hexvar ] lea rdi , [ rsp + num ] mov ecx , num mov r9d , num call hexvar test rax , rax je hexvar sub rax , qword ptr [ rbx + num ] shr rax , num mov r14d , eax jmp hexvar mov eax , dword ptr [ rbx ] test eax , eax jle hexvar mov rdx , qword ptr [ rbx + num ] xor ecx , ecx nop dword ptr [ rax + rax ] movsxd rsi , ecx cmp qword ptr [ rdx + rsi * num ] , rbp je hexvar add ecx , num cmp ecx , eax jl hexvar jmp hexvar mov r14d , ecx mov eax , r14d add rsp , hexvar pop rbx pop r14 pop rbp ret
push rbp push r15 push r14 push rbx sub rsp , hexvar mov rax , rdi shr rax , hexvar mov ebp , hexvar jne hexvar mov r15 , r8 mov r14 , rcx mov rcx , rdi cmp rdi , hexvar jb hexvar xor ebp , ebp lea rbx , [ rsp + hexvar ] mov esi , hexvar mov edx , hexvar mov rdi , rbx xor eax , eax call hexvar mov rdi , r15 mov rsi , rbx mov edx , hexvar call r14
addiu sp , sp , - hexvar lw v0 , ( a2 ) lui gp , hexvar addiu v1 , zero , - num sw s0 , hexvar ( sp ) addiu gp , gp , hexvar sw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) sw s4 , hexvar ( sp ) move s4 , a0 addiu s1 , s0 , num sw s6 , hexvar ( sp ) move a0 , a1 sw s5 , hexvar ( sp ) and s1 , s1 , v1 sw s3 , hexvar ( sp ) addiu s1 , s1 , hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) move s6 , a2 addu a1 , s1 , v0 sw gp , hexvar ( sp ) jalr t9 move s5 , a3 beqz v0 , hexvar move s3 , v0 lw v1 , num ( s4 ) addiu a1 , zero , num lw v0 , ( s6 ) move a0 , zero addu s2 , s3 , v0 lw t9 , hexvar ( v1 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , ecx mov al , num and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov edi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov esi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar xor esi , esi mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] shl rcx , num mov rdi , rax mov rdx , rcx call hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jge hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi + rdi * num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + rsi * num ] , num jne hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] movss xmm0 , dword ptr [ rax + hexvar ] movss dword ptr [ rbp - hexvar ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movss xmm0 , dword ptr [ rax + hexvar ] movss dword ptr [ rbp - hexvar ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov r12 , rax call hexvar movsxd rbx , eax call hexvar movsxd rsi , eax mov rax , r12 cqo idiv rbx
addiu v1 , a0 , num sltu v0 , v1 , a0 bnez v0 , hexvar lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , v1 beqz v0 , hexvar move a0 , v0 lui v1 , hexvar lw ra , hexvar ( sp ) addiu v0 , v0 , num ori v1 , v1 , hexvar multu v0 , v1 lui a1 , hexvar lui a2 , hexvar addiu a1 , a1 , hexvar mfhi v1 ori a2 , a2 , hexvar sw a2 , num ( a0 ) srl v1 , v1 , num sll a3 , v1 , num addu v1 , a3 , v1 subu v1 , v0 , v1 sll v1 , v1 , num addu v1 , v1 , a1 lw a1 , ( v1 ) sw v0 , ( v1 ) sw a1 , ( a0 ) jr ra addiu sp , sp , hexvar lw ra , hexvar ( sp ) move v0 , zero jr ra addiu sp , sp , hexvar jr ra move v0 , zero
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] call hexvar mov rdi , qword ptr [ rbp - num ] mov dword ptr [ rbp - hexvar ] , eax call hexvar xor ecx , ecx mov edi , ecx mov qword ptr [ rbp - num ] , rax mov rax , rdi add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r4 , r0 mov r6 , r1 mov r1 , num bl hexvar subs r5 , r0 , num moveq r4 , num beq hexvar mov r3 , r6 mov r2 , hexvar mla r1 , r2 , r4 , r6 mov r8 , r5 cmp r3 , r1 bne hexvar sub r6 , r8 , r5 asr r6 , r6 , num ldr r3 , [ pc , hexvar ] mov r2 , num mov r1 , r6 mov r0 , r5 bl hexvar cmp r8 , r5 movhi r3 , r5 movhi r7 , num subhi r2 , r8 , num bhi hexvar mov r7 , num b hexvar ldr r2 , [ r3 , hexvar ] cmp r2 , num strne r3 , [ r8 ] addne r8 , r8 , num add r3 , r3 , hexvar b hexvar ldr r0 , [ r1 ] ldr r1 , [ r3 , num ] ! ldr r0 , [ r0 , hexvar ] ldr r1 , [ r1 , hexvar ] cmp r0 , r1 addne r7 , r7 , num mov r1 , r3 cmp r3 , r2 blo hexvar mov r3 , hexvar mla sb , r7 , r3 , r3 add r6 , sb , r6 , lsl num mov r0 , r6 bl hexvar subs r4 , r0 , num bne hexvar mov r0 , r5 bl hexvar mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } usaths r7 , hexvar , lr , asr hexvar andeq r0 , r0 , r0
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] test byte ptr [ ecx + hexvar ] , num mov dl , num mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , dl jne hexvar mov eax , dword ptr [ ebp + num ] mov cl , byte ptr [ eax + hexvar ] mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] test al , num mov cl , num mov byte ptr [ ebp - num ] , cl jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov cl , byte ptr [ eax + hexvar ] mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
push { r4 , r5 , r6 , lr } sub sp , sp , num mov r5 , r0 mov r6 , r1 mov r4 , r2 ldr r2 , [ r2 , hexvar ] bl hexvar cmp r0 , num bne hexvar add sp , sp , num pop { r4 , r5 , r6 , pc }
push ebx sub esp , hexvar call hexvar add ebx , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar pop ebx ret
push ebx sub esp , num call hexvar add ebx , hexvar mov eax , dword ptr [ ebx + hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar test eax , eax jne hexvar sub esp , num lea eax , [ ebx + hexvar ] push eax push num call hexvar add esp , hexvar sub esp , num lea eax , [ ebx + hexvar ] push eax push num call hexvar add esp , hexvar nop add esp , num pop ebx ret
lea eax , [ ebx - hexvar ] jmp hexvar lea esi , [ esi ] mov eax , ebp call hexvar test eax , eax je hexvar jmp hexvar lea esi , [ esi ] lea edi , [ ebx - hexvar ] mov ecx , num mov esi , edx repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta cl sbb cl , num test cl , cl jne hexvar add edx , num jmp hexvar mov esi , dword ptr [ esp + hexvar ] lea edi , [ ebx - hexvar ] mov ecx , num repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta al sbb al , num test al , al je hexvar mov esi , dword ptr [ esp + hexvar ] lea edi , [ ebx - hexvar ] mov ecx , hexvar repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta al sbb al , num test al , al jne hexvar jmp hexvar nop cmp edx , hexvar lea eax , [ ebx - hexvar ] je hexvar jmp hexvar cmp edx , hexvar je hexvar jbe hexvar cmp edx , hexvar je hexvar jb hexvar cmp edx , hexvar lea eax , [ ebx - hexvar ] je hexvar cmp edx , hexvar lea eax , [ ebx - hexvar ] je hexvar jmp hexvar cmp ax , hexvar jne hexvar cmp edx , hexvar lea eax , [ ebx - hexvar ] je hexvar jmp hexvar cmp ax , num jne hexvar cmp esi , hexvar ja hexvar mov eax , dword ptr [ ebx + esi * num - hexvar ] add eax , ebx jmp eax cmp edx , hexvar lea eax , [ ebx - hexvar ] je hexvar jmp hexvar sub edx , hexvar cmp edx , num ja hexvar mov eax , dword ptr [ ebx + edx * num - hexvar ] add eax , ebx jmp eax
push { r4 , lr } sub sp , sp , hexvar mov r4 , r0 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldrb r3 , [ r0 , hexvar ] tst r3 , hexvar beq hexvar ldr r0 , [ r0 , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ ebp + num ] jae hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx + edx * num ] shl ecx , num add eax , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ecx ] sub eax , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , edx call hexvar cmp eax , dword ptr [ ebp - hexvar ] je hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lui v0 , hexvar addiu a2 , v0 , hexvar lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar add qword ptr [ rbp - hexvar ] , num call hexvar mov rbx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar movzx eax , al add rax , rax add rax , rbx movzx eax , word ptr [ rax ] movzx eax , ax and eax , num test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] cmp al , hexvar jne hexvar add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] cmp al , hexvar sete al movzx eax , al add qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rbp - hexvar ] , rdx movzx eax , byte ptr [ rax ] movsx eax , al sub eax , hexvar cmp eax , num ja hexvar jmp hexvar add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al sub eax , hexvar cmp eax , num jbe hexvar jmp hexvar add qword ptr [ rbp - hexvar ] , num call hexvar mov rbx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar movzx eax , al add rax , rax add rax , rbx movzx eax , word ptr [ rax ] movzx eax , ax and eax , num test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rbx , rax lea rdi , [ rip + hexvar ] call hexvar mov rsi , rbx mov rdi , rax mov eax , num call hexvar add rsp , hexvar pop rbx pop rbp ret
mov rsi , qword ptr [ rdi ] movsx ecx , byte ptr [ rsi ] cmp cl , hexvar je hexvar lea eax , [ rcx - hexvar ] cmp al , num ja hexvar xor r9d , r9d sub ecx , hexvar add rsi , num xor r8d , r8d mov r11d , hexvar mov r10d , hexvar jmp hexvar nop dword ptr [ rax ] sub ecx , hexvar mov edx , r11d add rsi , num sub edx , ecx mov eax , edx mul r10d shr edx , num cmp edx , r8d jl hexvar lea eax , [ r8 + r8 * num ] mov qword ptr [ rdi ] , rsi lea r8d , [ rcx + rax * num ] movsx ecx , byte ptr [ rsi ] lea eax , [ rcx - hexvar ] cmp al , num jbe hexvar mov eax , r8d neg eax test r9d , r9d cmovne r8d , eax mov eax , r8d ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , ebx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp + hexvar ] jae hexvar mov eax , dword ptr [ ebp - hexvar ] imul ecx , dword ptr [ ebp - hexvar ] , hexvar add eax , ecx mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , edx xor edx , edx div dword ptr [ ebp + hexvar ]
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] cmp dword ptr [ rdi + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + num ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + num ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi + num ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar xor ecx , ecx mov edi , ecx mov qword ptr [ rbp - hexvar ] , rax mov rax , rdi add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , - hexvar sub ecx , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx ja hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov edi , eax mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax mov edx , num mov esi , num call hexvar nop leave ret
push ebx sub esp , num call hexvar add eax , hexvar cmp dword ptr [ esp + hexvar ] , num jne hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov ebx , eax call hexvar add esp , hexvar jmp hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] lea eax , [ eax - hexvar ] push eax call hexvar add esp , hexvar add esp , num pop ebx ret
ldrb r3 , [ r0 ] ldrb r1 , [ r0 , num ] ldrb r2 , [ r0 , num ] orr r3 , r3 , r1 , lsl num ldrb r0 , [ r0 , num ] orr r3 , r3 , r2 , lsl num orr r3 , r3 , r0 , lsl num eor r0 , r3 , r3 , ror num lsr r0 , r0 , num bic r0 , r0 , hexvar eor r0 , r0 , r3 , ror num bx lr
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r4 , r0 ldr ip , [ r0 , hexvar ] sub sp , sp , hexvar ldr r0 , [ ip ] ldr r7 , [ ip , hexvar ] str r0 , [ r4 , hexvar ] mov r0 , ip mov fp , r3 mov r8 , r1 mov sl , r2 ldr r6 , [ ip , num ] bl hexvar ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar cmp r7 , num ldr r3 , [ r4 , hexvar ] bne hexvar ldr r7 , [ r3 , hexvar ] adds r7 , r7 , num movne r7 , num ldr r2 , [ r3 ] mov r0 , r3 ldr r3 , [ r3 , num ] str r2 , [ r4 , hexvar ] str r3 , [ sp , hexvar ] bl hexvar b hexvar str r3 , [ sp , hexvar ] ldr r5 , [ r4 , hexvar ] cmp r5 , num beq hexvar ldr sb , [ r5 , hexvar ] cmp sb , num beq hexvar cmp sl , num beq hexvar blo hexvar cmp sl , num bne hexvar mov r3 , hexvar str r3 , [ sp , hexvar ] cmp fp , num ldr r3 , [ sp , hexvar ] beq hexvar cmp r3 , num moveq fp , hexvar movne fp , hexvar mov r0 , sb bl hexvar str r0 , [ sp , hexvar ] mov r0 , r6 bl hexvar mov sl , r0 mov r0 , r8 bl hexvar ldr r1 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r1 , r1 , sl cmp r3 , num add r1 , r1 , r0 bne hexvar add r1 , r1 , hexvar mov r0 , sb bl hexvar ldr r3 , [ r4 , hexvar ] str r0 , [ r5 , hexvar ] ldr r5 , [ r3 , hexvar ] mov r0 , r5 bl hexvar mov r3 , hexvar ldr r2 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r2 , [ sp , num ] add r0 , r5 , r0 str fp , [ sp , hexvar ] stm sp , { r6 , r8 } ldr r3 , [ pc , hexvar ] mvn r2 , num mov r1 , num bl hexvar mov r0 , r6 bl hexvar cmp r7 , num movne r2 , num ldrne r3 , [ r4 , hexvar ] strne r2 , [ r3 , hexvar ] mov r0 , num add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] mov al , byte ptr [ rdi + hexvar ] shr al , num test al , num setne al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov edi , num call hexvar mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov edi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] test rax , rax sete cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , num mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rax + hexvar ] or edx , hexvar mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov sil , byte ptr [ rax + hexvar ] and sil , hexvar or sil , hexvar mov byte ptr [ rax + hexvar ] , sil mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ edi ] mov edi , dword ptr [ edi + num ] xor edx , edi xor esi , ebx or esi , edx sete dl movzx edi , dl mov edi , dword ptr [ edi * num + hexvar ] xor ebx , ebx mov dl , bl mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi mov byte ptr [ ebp - hexvar ] , dl jmp edi mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + num ] mov eax , dword ptr [ eax + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx + num ] mov edx , dword ptr [ edx + hexvar ] xor eax , edx xor ecx , esi or ecx , eax sete bl mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , bl jmp eax mov al , byte ptr [ ebp - hexvar ] xor ecx , ecx test al , num mov edx , num cmovne ecx , edx cmp ecx , num setne al and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r4 ] mov r1 , sp ldr r2 , [ pc , hexvar ] str r3 , [ sp , hexvar ] bl hexvar cmp r0 , num movne r0 , num bne hexvar ldr r1 , [ pc , hexvar ] mov r0 , sp bl hexvar cmp r0 , num bne hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 lw a0 , ( a0 )
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] cmp ecx , hexvar mov dword ptr [ ebp - num ] , eax jge hexvar mov eax , dword ptr [ hexvar ] add eax , num mov dword ptr [ hexvar ] , eax mov dword ptr [ hexvar ] , num add esp , num pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] add r3 , sp , hexvar mov r2 , hexvar mov r1 , num mov r0 , r3 bl hexvar mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , num ] ldr r3 , [ r3 ] ldr r3 , [ r3 , num ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 ] ldr r3 , [ r3 , num ] add r2 , sp , hexvar mov r1 , r2 ldr r0 , [ sp , num ] blx r3 mov r3 , r0 cmp r3 , num bne hexvar mvn r3 , num b hexvar mov r3 , num mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { pc }
addiu v0 , zero , - num teq a1 , zero , num divu zero , v0 , a1 mflo v0 sltu v0 , a0 , v0 beqz v0 , hexvar nop lui gp , hexvar addiu gp , gp , - hexvar lw t9 , - hexvar ( gp ) jr t9 mul a0 , a1 , a0 jr ra move v0 , zero
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw s0 , ( v0 ) addiu a2 , zero , num lui a1 , hexvar addiu a1 , a1 , - hexvar move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a1 , s0 move a0 , v0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] mov r0 , num bl hexvar mov r3 , r0 cmp r3 , num beq hexvar ldr r0 , [ sp , num ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] mov r2 , num ldr r1 , [ sp , hexvar ] mov r0 , r3 bl hexvar b hexvar mov r0 , r0 add sp , sp , hexvar pop { pc }
push rbp push r14 push rbx mov r14 , r8 mov ebp , esi mov rbx , rdi call hexvar test eax , eax je hexvar pop rbx pop r14 pop rbp ret
sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax lea eax , [ ebx - hexvar ] mov dword ptr [ ebp - hexvar ] , eax add dword ptr [ ebp - hexvar ] , num jmp hexvar
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } subs r6 , r1 , num beq hexvar mov sb , r0 ldr r4 , [ r0 ] cmp r4 , num beq hexvar ldr r7 , [ pc , hexvar ] mov r8 , hexvar mov sl , hexvar ldrb r3 , [ r4 ] cmp r3 , num bne hexvar mov r1 , r6 mov r0 , sl bl hexvar cmn r0 , num beq hexvar ldr r4 , [ sb , num ] ! cmp r4 , num bne hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push edi push esi push ebx call hexvar add ebx , hexvar mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] sub esp , num cmp edi , esi mov eax , esi cmovbe eax , edi push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax jne hexvar cmp edi , esi jb hexvar seta al movzx eax , al pop ebx pop esi pop edi ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) move s1 , a1 sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw a0 , hexvar ( a0 )
str r3 , [ sp , - num ] ! push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr r5 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r5 ] mov sb , r1 mov r8 , r2 str r3 , [ sp , hexvar ] mov r6 , r0 ldr r7 , [ sp , hexvar ] bl hexvar bl hexvar ldr r3 , [ pc , hexvar ] mov sl , r0 ldr r0 , [ r3 ] bl hexvar ldr r4 , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] ldr r1 , [ r4 ] ldr r0 , [ r3 ] add r3 , sp , hexvar str r3 , [ sp , num ] bl hexvar cmp sb , num beq hexvar cmp r6 , num beq hexvar cmp r8 , num ldr r0 , [ r4 ] beq hexvar ldr r3 , [ r8 ] cmp r3 , num beq hexvar str r3 , [ sp ] ldr r2 , [ pc , hexvar ] mov r3 , r6 mov r1 , num bl hexvar b hexvar ldr r0 , [ r4 ] mov r3 , r6 ldr r2 , [ pc , hexvar ] mov r1 , num bl hexvar cmp r7 , num ldr r0 , [ r4 ] beq hexvar mov r3 , r0 mov r2 , num mov r1 , num ldr r0 , [ pc , hexvar ] bl hexvar mov r2 , r7 ldr r3 , [ sp , num ] mov r1 , num ldr r0 , [ r4 ] bl hexvar ldr r0 , [ r4 ] mov r3 , sl ldr r2 , [ pc , hexvar ] mov r1 , num bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r5 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } add sp , sp , num bx lr mov r0 , sb bl hexvar mov r6 , r0 b hexvar bl hexvar andeq r5 , sp , r0 , lsl num strdeq r7 , r8 , [ sp ] , -ip
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , hexvar mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
push rbx mov rbx , rdi mov esi , hexvar call hexvar mov rdx , rax mov eax , num test rdx , rdx je hexvar mov qword ptr [ rbx + hexvar ] , rdx mov dword ptr [ rdx + num ] , num mov qword ptr [ rdx ] , num mov qword ptr [ rdx + hexvar ] , num mov qword ptr [ rdx + hexvar ] , num mov eax , num pop rbx ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx ] mov esi , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ esi ] mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r6 , r2 mov r2 , r1 ldr r4 , [ sp , hexvar ] ldr r1 , [ r6 ] add ip , r4 , num bic ip , ip , num add fp , ip , hexvar mov sl , r0 add r1 , fp , r1 mov r0 , r2 mov sb , r3 bl hexvar subs r7 , r0 , num beq hexvar mov r8 , num ldr r5 , [ r6 ] ldr r2 , [ sl , num ] add r3 , fp , r5 add r5 , r7 , r5 str r3 , [ r6 ] mov r1 , r5 ldr r3 , [ r2 , hexvar ] mov r0 , num blx r3 ldr r3 , [ sl , num ] add r1 , r5 , num ldr r3 , [ r3 , hexvar ] mov r0 , r4 blx r3 ldr r3 , [ sl , num ] add r1 , r5 , num ldr r3 , [ r3 , hexvar ] ldr r0 , [ pc , hexvar ] blx r3 add r6 , r5 , hexvar mov r2 , num ldr r1 , [ pc , hexvar ] add r0 , r5 , hexvar bl hexvar mov r1 , sb mov r0 , r6 strb r8 , [ r5 , hexvar ] strb r8 , [ r5 , hexvar ] mov r2 , r4 bl hexvar tst r4 , num add r0 , r6 , r4 beq hexvar mov r1 , r8 mov r2 , r0 strb r1 , [ r2 ] , num add r3 , r2 , r4 sub r3 , r3 , r0 tst r3 , num bne hexvar mov r0 , r7 pop { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push rbp push r15 push r14 push r12 push rbx mov r15d , edx mov r12 , rsi mov r14 , rdi mov edi , num call hexvar xor ebp , ebp test rax , rax je hexvar mov rbx , rax mov rdi , rax mov rsi , r12 mov edx , r15d call hexvar test eax , eax je hexvar mov rdi , r14 mov esi , num mov rdx , rbx call hexvar mov ebp , num mov eax , ebp pop rbx pop r12 pop r14 pop r15 pop rbp ret
push rbp mov rbp , rsp mov al , dil mov byte ptr [ rbp - num ] , al movzx edi , byte ptr [ rbp - num ] and edi , hexvar sar edi , num mov eax , edi pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r7 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r7 ] mov r5 , r0 ldr r0 , [ pc , hexvar ] mov r8 , r1 str r3 , [ sp , hexvar ] bl hexvar subs r6 , r0 , num moveq r0 , num beq hexvar mov r3 , num ldr r2 , [ pc , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r2 , [ sp ] ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] str r3 , [ sp , hexvar ] str r2 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r2 , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , hexvar ] str r3 , [ sp , hexvar ] mov r4 , num b hexvar cmp r0 , num ldr r3 , [ r5 ] beq hexvar tst r3 , hexvar bne hexvar rsb r2 , r4 , hexvar add r0 , r6 , r4 mov r3 , r5 mov r1 , num bl hexvar add r4 , r4 , r0 cmp r4 , hexvar bne hexvar mov r1 , r4 mov r2 , sp mov r0 , r6 bl hexvar b hexvar tst r3 , hexvar beq hexvar mov r0 , r6 bl hexvar mov r0 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ r7 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc }
ldrb r3 , [ r0 , hexvar ] tst r3 , hexvar bne hexvar ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ r3 , num ] sub ip , r2 , num cmn ip , num bhi hexvar ldr r3 , [ r3 , num ] cmp r3 , num beq hexvar ldr r3 , [ r3 , - num ] cmp r3 , num beq hexvar mov r0 , num bx lr push { r4 , lr } mov r4 , r0 mov r0 , r2 bl hexvar ldr r3 , [ r4 , hexvar ] ldr ip , [ r3 , num ] cmp ip , num beq hexvar mov r3 , num str r3 , [ ip , - num ] ldr r3 , [ r4 , hexvar ] ldr r3 , [ r3 , num ] ldr r3 , [ r3 , hexvar ] ldr r2 , [ r3 , num ] cmp r2 , num beq hexvar ldr r1 , [ r4 , hexvar ] ldr r1 , [ r1 , hexvar ] ldr r1 , [ r1 , num ] ldr r1 , [ r1 , hexvar ] ldr r1 , [ r1 , hexvar ] ldrb r1 , [ r1 , hexvar ] ldr r0 , [ r3 ] lsrs r0 , r0 , r1 beq hexvar sub r2 , r2 , num mov r3 , num mov lr , num ldr r1 , [ r2 , num ] ! cmp r1 , num strne lr , [ ip , r3 , lsl num ] add r3 , r3 , num cmp r3 , r0 bne hexvar mov r0 , num pop { r4 , pc } andeq r0 , r0 , r1 andeq r0 , r0 , r0
str lr , [ sp , - num ] ! sub sp , sp , hexvar ldr ip , [ sp , hexvar ] str ip , [ sp , num ] str r3 , [ sp , num ] ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] bl hexvar add sp , sp , hexvar pop { pc }
push r14 push rbx push rax mov r14 , rsi mov rbx , qword ptr [ rdi + hexvar ] call hexvar mov rdi , rbx mov esi , eax mov rdx , r14 call hexvar mov eax , num add rsp , num pop rbx pop r14 ret
push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ eax + num ] test edx , edx jne hexvar lea edx , [ ebx - hexvar ] push dword ptr [ esp + hexvar ] push edx push num push dword ptr [ eax ] call hexvar add esp , hexvar mov eax , num pop ebx ret
test rdi , rdi je hexvar cmp rdi , num je hexvar mov eax , hexvar cmp rdi , num jne hexvar mov eax , hexvar jmp hexvar mov eax , hexvar jmp hexvar mov eax , hexvar mov rax , qword ptr [ rax + num ] ret
push { r4 , r5 , r6 , r7 , r8 , lr } subs r8 , r0 , num popeq { r4 , r5 , r6 , r7 , r8 , pc } mov r0 , hexvar mov r4 , r1 mov r7 , r2 bl hexvar mov r6 , r0 mov r0 , r4 bl hexvar add r5 , r7 , hexvar ldm r5 , { r4 , r5 } ldm r7 , { r2 , r3 } str r0 , [ r6 ] mov r1 , r6 mov r0 , r8 str r4 , [ r6 , num ] str r5 , [ r6 , hexvar ] str r2 , [ r6 , hexvar ] str r3 , [ r6 , hexvar ] bl hexvar cmp r0 , num beq hexvar cmp r6 , r0 popeq { r4 , r5 , r6 , r7 , r8 , pc } mov r0 , r6 pop { r4 , r5 , r6 , r7 , r8 , lr } b hexvar bl hexvar
push { r4 , lr } mov r1 , num mov r4 , r0 ldr r0 , [ pc , hexvar ] bl hexvar cmp r4 , r0 moveq r3 , num beq hexvar cmp r0 , num mov r3 , r0 movlt r3 , num blt hexvar bl hexvar bl hexvar mov r2 , num mov r3 , num str r2 , [ r0 ] mov r0 , r3 pop { r4 , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov al , byte ptr [ hexvar ] and al , num movzx ecx , al cmp ecx , num sete al mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov al , byte ptr [ hexvar ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] and eax , hexvar cmp eax , hexvar jne hexvar mov byte ptr [ hexvar ] , num jmp hexvar jmp hexvar mov al , num and al , num movzx eax , al add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr r4 , [ pc , hexvar ] mov r7 , r0 ldr r5 , [ r4 ] cmp r5 , num beq hexvar ldmib r4 , { r3 , r6 } sub r2 , r3 , num cmp r2 , r6 lslhi r3 , r6 , num bls hexvar ldr r2 , [ r5 , r3 ] add r5 , r5 , r3 cmp r2 , r7 popeq { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } cmp r2 , num beq hexvar ldr r2 , [ r4 , hexvar ] ldrb r3 , [ r4 , hexvar ] ldr r1 , [ r4 , hexvar ] strb r3 , [ r2 ] ldr r3 , [ r5 ] str r2 , [ r3 , num ] str r1 , [ r3 , hexvar ] ldr r3 , [ r7 , num ] ldr r2 , [ r7 ] ldr r1 , [ pc , hexvar ] str r7 , [ r5 ] str r2 , [ r4 , hexvar ] str r3 , [ r1 ] ldrb r1 , [ r3 ] ldr r2 , [ r7 , hexvar ] str r3 , [ r4 , hexvar ] strb r1 , [ r4 , hexvar ] str r2 , [ r4 , hexvar ] pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } mrcne p12 , num , r5 , c9 , c15 , num
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr ip , [ r0 , hexvar ] sub sp , sp , hexvar cmp ip , num beq hexvar ldr r6 , [ ip , hexvar ] cmp r6 , num beq hexvar mov r7 , r3 ldr r3 , [ ip ] cmp r3 , num beq hexvar mov sb , r2 ldr r2 , [ r3 , hexvar ] cmp r2 , num beq hexvar ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar mov r8 , r1 mov r1 , num ldrb r3 , [ ip , hexvar ] mov r4 , r0 lsr r3 , r3 , num and r5 , r3 , r1 bl hexvar cmp sb , num mov sl , r0 bne hexvar cmp r5 , num ldrne r2 , [ r4 , hexvar ] mov r0 , r6 ldrbne r3 , [ r2 , hexvar ] orrne r3 , r3 , num strbne r3 , [ r2 , hexvar ] bl hexvar add r0 , r0 , num bl hexvar ldr r3 , [ pc , hexvar ] str r6 , [ sp ] mvn r2 , num mov r1 , num mov sb , r0 bl hexvar ldr r5 , [ r4 , hexvar ] ldr fp , [ r5 , hexvar ] add r3 , r5 , hexvar cmp fp , num beq hexvar ldr r0 , [ r5 , hexvar ] str r0 , [ r4 , hexvar ] str r3 , [ r4 , num ] mov r1 , sb mov r0 , r4 bl hexvar cmp r0 , num beq hexvar mov r1 , sl mov r0 , r4 bl hexvar cmp r0 , num bne hexvar mov r0 , sb bl hexvar mov r0 , num add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
ldrb r3 , [ r0 , hexvar ] tst r3 , hexvar beq hexvar cmn r1 , num moveq r1 , num ldr r3 , [ r0 , hexvar ] addne r1 , r1 , num ldr r0 , [ r3 , hexvar ] cmp r0 , r1 mvnls r1 , num ldrhi r3 , [ r3 , hexvar ] mov r0 , r1 addhi r3 , r3 , r1 , lsl num strhi r3 , [ r2 ] bx lr push { r4 , lr } mov r0 , num bl hexvar mvn r1 , num mov r0 , r1 pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rax mov rdi , qword ptr [ rip + hexvar ] call hexvar test rax , rax je hexvar pop rax ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar movss xmm0 , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] movss dword ptr [ eax + hexvar ] , xmm0 mov bl , num and bl , num movzx eax , bl add esp , hexvar pop esi pop ebx pop ebp ret
push r12 push rbp push rbx mov rbx , rdi mov rdi , qword ptr [ rip + hexvar ] call hexvar mov edx , num mov esi , hexvar mov edi , num call hexvar mov r12 , rax mov edx , num mov esi , hexvar mov edi , num call hexvar mov rbp , rax mov edx , num mov esi , hexvar mov edi , num call hexvar mov r8 , rax push num push r12 mov r9 , rbp mov rcx , qword ptr [ rip + hexvar ] mov edx , hexvar mov rsi , rbx mov rdi , qword ptr [ rip + hexvar ] mov eax , num call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp + num ] , eax lea ecx , [ eax + num ] mov edx , hexvar mov eax , ecx imul edx lea eax , [ edx + ecx ] sar eax , num mov edx , ecx sar edx , hexvar sub eax , edx lea edx , [ eax * num ] sub edx , eax sub ecx , edx add ecx , num mov dword ptr [ esp + hexvar ] , num jmp hexvar
mov eax , num cmp esi , num je hexvar mov rcx , qword ptr [ rdi + hexvar ] cmp esi , hexvar je hexvar mov eax , hexvar cmp esi , hexvar jne hexvar cmp edx , hexvar jl hexvar mov dword ptr [ rcx ] , edx mov eax , num ret
push r12 push rbp push rbx sub rsp , hexvar lea rcx , [ rsp + hexvar ] lea rdx , [ rsp + hexvar ] lea rsi , [ rsp + num ] lea r8 , [ rsp + hexvar ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r14d , edx mov r15 , rsi mov rbp , rdi test rsi , rsi mov eax , hexvar mov ebx , hexvar cmove ebx , eax mov eax , hexvar mov r13d , hexvar jmp hexvar mov eax , hexvar xor r12d , r12d nop dword ptr [ rax ] mov ecx , eax cmp eax , hexvar jle hexvar cmp ecx , hexvar jle hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar mov eax , ecx cmp ecx , hexvar jne hexvar mov rax , qword ptr [ rbp + hexvar ] mov qword ptr [ rsp + num ] , rax cmp qword ptr [ rsp + num ] , num mov eax , hexvar cmove eax , r13d jmp hexvar nop dword ptr [ rax ] cmp ecx , hexvar jle hexvar mov eax , ebx cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar mov eax , ecx cmp ecx , hexvar jne hexvar jmp hexvar nop dword ptr [ rax ] cmp ecx , hexvar je hexvar mov eax , ecx cmp ecx , hexvar jne hexvar mov rdi , rbp mov esi , hexvar call hexvar mov rdi , rbp call hexvar mov eax , hexvar mov r12d , dword ptr [ rsp + num ] jmp hexvar nop cmp ecx , hexvar je hexvar mov eax , ecx cmp ecx , hexvar jne hexvar jmp hexvar mov rax , qword ptr [ rbp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax cmp qword ptr [ rsp + hexvar ] , num mov eax , hexvar cmove eax , r13d jmp hexvar mov rdi , qword ptr [ rsp + hexvar ] mov rsi , r15 mov edx , r14d call hexvar mov dword ptr [ rsp + num ] , eax mov ecx , dword ptr [ rbp + hexvar ] cmp dword ptr [ rsp + num ] , num mov eax , hexvar mov edx , hexvar cmovg eax , edx test ecx , ecx mov ecx , hexvar cmove eax , ecx jmp hexvar mov edx , dword ptr [ rsp + num ] mov rdi , qword ptr [ rsp + num ] mov rsi , r15 call hexvar test eax , eax mov eax , hexvar mov ecx , hexvar cmovle eax , ecx jmp hexvar mov eax , hexvar mov r12d , hexvar jmp hexvar mov eax , r12d add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp push edi push esi push ebx sub esp , hexvar mov esi , eax mov ebp , edx mov dword ptr [ esp + num ] , ecx mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov edi , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esi + hexvar ] mov eax , num test ebx , ebx je hexvar mov eax , dword ptr [ esi + hexvar ] cmp eax , num ja hexvar mov ecx , dword ptr [ ebx + eax * num + num ] cmp ecx , - num je hexvar mov edx , dword ptr [ ebx + eax * num + hexvar ] mov eax , dword ptr [ ebx + eax * num + hexvar ] cmp edi , edx ja hexvar jb hexvar cmp dword ptr [ esp + hexvar ] , eax ja hexvar mov eax , num jmp hexvar sub esp , hexvar push edx push eax push ecx mov eax , dword ptr [ ebx + num ] push dword ptr [ eax + num ] push dword ptr [ esp + hexvar ] call dword ptr [ ebp + hexvar ] add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ esi + hexvar ] add eax , num mov dword ptr [ esi + hexvar ] , eax cmp eax , num ja hexvar mov ecx , dword ptr [ ebx + eax * num + num ] cmp ecx , - num je hexvar mov edx , dword ptr [ ebx + eax * num + hexvar ] mov eax , dword ptr [ ebx + eax * num + hexvar ] cmp edx , edi ja hexvar jb hexvar cmp eax , dword ptr [ esp + hexvar ] jb hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dl , byte ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , dl mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov bl , byte ptr [ ebp - hexvar ] and bl , num mov byte ptr [ eax ] , bl mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx ] mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ esi ] sub esp , hexvar mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar xor ecx , ecx sub esp , hexvar mov dword ptr [ esp ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov bl , byte ptr [ eax ] and bl , num sub esp , hexvar movzx ecx , bl mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw a3 , hexvar ( a0 )
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , edi mov ebx , dword ptr [ ecx ] mov bl , byte ptr [ ebx + hexvar ] and bl , num movzx ebx , bl cmp ebx , num setne bl mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ eax ] mov edx , dword ptr [ edx + hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ esi ] sub esp , hexvar mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , edi call ecx add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , esi call ecx add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push rax mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rip + hexvar ] , num cmp byte ptr [ rip + hexvar ] , num jne hexvar mov edi , dword ptr [ rip + hexvar ] mov esi , hexvar call hexvar mov edi , dword ptr [ rip + hexvar ] mov esi , hexvar call hexvar mov esi , hexvar xor edi , edi call hexvar mov byte ptr [ rip + hexvar ] , num mov eax , num pop rcx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ num ] , num jne hexvar mov rax , qword ptr [ num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , num sete cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar movabs rdi , num call hexvar jmp hexvar mov rdi , qword ptr [ num ] call hexvar cmp qword ptr [ num ] , num sete al mov byte ptr [ rbp - hexvar ] , al mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rsi movabs rdi , num mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ num ] , rax jmp hexvar mov rdi , qword ptr [ num ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] call hexvar jmp hexvar mov rax , qword ptr [ num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , num setne cl mov byte ptr [ rbp - hexvar ] , cl xor eax , eax mov cl , byte ptr [ rbp - hexvar ] test cl , num mov edx , num cmovne eax , edx add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar lw v0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) sw a3 , hexvar ( sp ) move a3 , a2 move a2 , a1 sw ra , hexvar ( sp ) move a1 , a0 sw gp , hexvar ( sp ) addiu a0 , zero , num bal hexvar sw v0 , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] test ecx , ecx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp + num ] add ecx , num mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , hexvar mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax ] , num jmp hexvar jmp hexvar call hexvar add esp , hexvar pop ebp ret
cmp esi , hexvar je hexvar jbe hexvar cmp esi , hexvar je hexvar jbe hexvar cmp esi , hexvar je hexvar ja hexvar cmp esi , hexvar lea rax , [ rip + hexvar ] je hexvar lea rax , [ rax - hexvar ] jb hexvar add rax , hexvar cmp esi , hexvar je hexvar add rax , hexvar cmp esi , hexvar jne hexvar ret nop dword ptr [ rax ] cmp esi , hexvar je hexvar ja hexvar cmp esi , num je hexvar jbe hexvar cmp esi , hexvar lea rax , [ rip + hexvar ] je hexvar jbe hexvar cmp esi , hexvar lea rax , [ rip + hexvar ] je hexvar sub rax , hexvar cmp esi , hexvar jne hexvar ret nop dword ptr [ rax + rax ] cmp esi , hexvar je hexvar jbe hexvar cmp esi , hexvar lea rax , [ rip + hexvar ] je hexvar lea rax , [ rax - hexvar ] jb hexvar add rax , hexvar cmp esi , hexvar je hexvar add rax , hexvar cmp esi , hexvar jne hexvar ret nop dword ptr [ rax ] cmp esi , hexvar je hexvar jbe hexvar cmp esi , hexvar lea rax , [ rip + hexvar ] je hexvar lea rax , [ rax - hexvar ] jb hexvar add rax , hexvar cmp esi , hexvar je hexvar add rax , hexvar cmp esi , hexvar jne hexvar ret nop dword ptr [ rax ] cmp esi , hexvar je hexvar jbe hexvar cmp esi , hexvar lea rax , [ rip + hexvar ] je hexvar add rax , hexvar cmp esi , hexvar jne hexvar ret nop dword ptr [ rax + rax ] cmp esi , hexvar lea rax , [ rip + hexvar ] je hexvar lea rdx , [ rax - hexvar ] lea rax , [ rax + hexvar ] cmovbe rax , rdx ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] mov r3 , num str r3 , [ sp , num ] ldr r3 , [ sp ] cmp r3 , num beq hexvar ldr r3 , [ sp ] mov r2 , num str r2 , [ r3 ] mov r0 , hexvar bl hexvar mov r1 , r0 mov r3 , hexvar mvn r2 , num ldr r0 , [ sp , num ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r1 , [ pc , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , num ] ldr r3 , [ sp , num ] cmp r3 , num bne hexvar mvn r3 , num b hexvar ldr r3 , [ sp ] cmp r3 , num beq hexvar ldr r3 , [ sp ] ldr r2 , [ sp , num ] str r2 , [ r3 ] b hexvar ldr r0 , [ sp , num ] bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + hexvar ] mov dword ptr [ ebp - num ] , edx mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] jae hexvar mov eax , dword ptr [ ebp - hexvar ] imul ecx , dword ptr [ ebp - hexvar ] , hexvar add eax , ecx mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar test al , num jne hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) move s1 , a1 sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar lw a0 , ( a0 )
push rbp push r14 push rbx sub rsp , hexvar mov ebp , esi mov rbx , rdi call hexvar mov qword ptr [ rsp ] , rax mov ecx , hexvar mov r14d , hexvar jmp hexvar mov ecx , hexvar mov eax , hexvar nop dword ptr [ rax ] cmp ecx , hexvar jle hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar cmp qword ptr [ rsp ] , num mov ecx , hexvar cmove ecx , r14d jmp hexvar mov rax , qword ptr [ rsp + num ] mov rdi , rbx mov esi , ebp call rax mov ecx , hexvar jmp hexvar mov rcx , qword ptr [ rsp ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rsp + num ] , rcx cmp qword ptr [ rsp + num ] , num mov ecx , hexvar cmove ecx , r14d jmp hexvar add rsp , hexvar pop rbx pop r14 pop rbp ret
push { r4 , fp } add fp , sp , num sub sp , sp , num str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] ldr r4 , [ fp , - num ] b hexvar ldr r3 , [ fp , - num ] add r3 , r3 , num str r3 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] add r3 , r3 , num str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - num ] ldrb r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] ldrb r3 , [ r3 ] cmp r2 , r3 bne hexvar ldr r3 , [ fp , - num ] ldrb r3 , [ r3 ] cmp r3 , num bne hexvar ldr r3 , [ fp , - num ] mov r2 , r4 sub r3 , r3 , r2 mov r0 , r3 sub sp , fp , num pop { r4 , fp } bx lr
push r15 push r14 mov r15 , rdx push r13 push r12 mov r13 , rdi push rbp push rbx mov r14 , rsi mov ebp , ecx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax test r8 , r8 je hexvar cmp byte ptr [ r8 ] , hexvar jne hexvar cmp byte ptr [ r8 + num ] , hexvar jne hexvar cmp byte ptr [ r8 + num ] , num jne hexvar mov eax , dword ptr [ rdi + hexvar ] test al , num jne hexvar test ecx , ecx jns hexvar mov ecx , eax and ecx , hexvar jne hexvar mov ebx , num and eax , hexvar cmp eax , num sbb edx , edx and edx , hexvar add edx , hexvar test ecx , ecx je hexvar mov edi , dword ptr [ r13 + hexvar ] mov rsi , r8 xor eax , eax mov qword ptr [ rsp + num ] , r8 call hexvar mov r8 , qword ptr [ rsp + num ] mov r12d , eax test r12d , r12d mov qword ptr [ rsp + num ] , r8 js hexvar mov esi , num mov edi , r12d call hexvar mov eax , dword ptr [ r13 + hexvar ] mov r8 , qword ptr [ rsp + num ] jmp hexvar nop dword ptr [ rax + rax ] mov eax , dword ptr [ r13 + hexvar ] test al , num je hexvar test ah , num je hexvar test ebp , ebp js hexvar mov edi , ebp xor ebx , ebx call hexvar nop word ptr [ rax + rax ] mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov eax , ebx jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ ebp + num ] mov byte ptr [ ebp - num ] , al call hexvar mov eax , dword ptr [ eax ] movzx ecx , byte ptr [ ebp + num ] mov dx , word ptr [ eax + ecx * num ] mov word ptr [ ebp - num ] , dx mov ax , word ptr [ ebp - num ] movzx ecx , ax and ecx , num mov dword ptr [ ebp - num ] , ecx mov eax , dword ptr [ ebp - num ] cmp eax , num mov cl , num mov byte ptr [ ebp - num ] , cl jne hexvar mov al , byte ptr [ ebp + num ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] movzx ecx , al cmp ecx , hexvar sete dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - num ] , al jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push ebx sub esp , num call hexvar add ebx , hexvar lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r3 , hexvar beq hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , num bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 bl hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r15 , rdx mov r14 , rdi test rdi , rdi setne byte ptr [ rsp + num ] test rdx , rdx setne byte ptr [ rsp + num ] mov ebp , esi mov eax , esi or eax , hexvar cmp eax , hexvar mov ebx , hexvar mov eax , hexvar cmove ebx , eax cmp esi , hexvar cmove ebx , eax mov ecx , hexvar mov r12d , hexvar mov r13d , hexvar jmp hexvar mov ecx , hexvar mov eax , hexvar cmp ecx , hexvar jg hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov ecx , hexvar mov eax , hexvar jmp hexvar nop dword ptr [ rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov edi , ebp mov rsi , r14 mov rdx , r15 call hexvar mov dword ptr [ r15 + hexvar ] , eax mov ecx , hexvar xor eax , eax jmp hexvar movzx edx , byte ptr [ rsp + num ] cmp byte ptr [ rsp + num ] , num mov ecx , hexvar cmovne ecx , r12d test dl , dl cmove ecx , r13d jmp hexvar mov ecx , ebx jmp hexvar add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , num pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar movsd xmm4 , qword ptr [ rip + hexvar ] movsd xmm5 , qword ptr [ rip + hexvar ] movss dword ptr [ rbp - num ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 movss dword ptr [ rbp - hexvar ] , xmm2 movsd qword ptr [ rbp - hexvar ] , xmm3 movsd xmm0 , qword ptr [ rbp - hexvar ] subsd xmm0 , xmm5 movaps xmm1 , xmmword ptr [ rip + hexvar ] pand xmm0 , xmm1 ucomisd xmm4 , xmm0 jbe hexvar movss xmm0 , dword ptr [ rbp - num ] movss dword ptr [ rbp - num ] , xmm0 jmp hexvar movsd xmm0 , qword ptr [ rip + hexvar ] movsd xmm1 , qword ptr [ rip + hexvar ] mulsd xmm1 , qword ptr [ rbp - hexvar ] mulsd xmm1 , qword ptr [ rbp - hexvar ] subsd xmm0 , xmm1 movsd qword ptr [ rbp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] call hexvar movsd qword ptr [ rbp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] movss xmm1 , dword ptr [ rbp - num ] cvtss2sd xmm1 , xmm1 movsd xmm2 , qword ptr [ rbp - hexvar ] movss xmm3 , dword ptr [ rbp - hexvar ] cvtss2sd xmm3 , xmm3 movsd xmm4 , qword ptr [ rbp - hexvar ] movsd qword ptr [ rbp - hexvar ] , xmm0 movaps xmm0 , xmm1 movaps xmm1 , xmm2 movaps xmm2 , xmm3 movaps xmm3 , xmm4 call hexvar movsd xmm1 , qword ptr [ rbp - hexvar ] mulsd xmm1 , xmm0 movaps xmm0 , xmm1 call hexvar movss dword ptr [ rbp - hexvar ] , xmm0 movss xmm0 , dword ptr [ rbp - hexvar ] movss dword ptr [ rbp - num ] , xmm0 movss xmm0 , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push { fp , lr } add fp , sp , num sub sp , sp , num str r0 , [ fp , - num ] mov r1 , hexvar ldr r0 , [ fp , - num ] bl hexvar mov r3 , r0 mov r0 , r3 sub sp , fp , num pop { fp , pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar move a3 , a1 lui a1 , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) move a2 , a0 sw zero , hexvar ( sp ) addiu a1 , a1 , hexvar sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) lw t9 , - hexvar ( gp ) lw a0 , - hexvar ( gp ) bal hexvar sw zero , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] movsd xmm0 , qword ptr [ ebp + num ] movsd qword ptr [ ebp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ ebp + hexvar ] movsd qword ptr [ ebp - hexvar ] , xmm0 mov dword ptr [ ebp - hexvar ] , num mov edi , dword ptr [ hexvar ] lea ebx , [ ebp - hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , r6 , lr } mov r5 , r0 ldr r6 , [ pc , hexvar ] ldr r4 , [ pc , hexvar ] cmp r4 , num beq hexvar ldr r3 , [ r4 , hexvar ] mov r1 , r5 mov r0 , r4 blx r3 cmp r0 , num bne hexvar ldr r4 , [ r4 , hexvar ] cmp r4 , num bne hexvar ldr r4 , [ r6 , num ] ! cmp r4 , num bne hexvar mov r4 , num mov r0 , r4 pop { r4 , r5 , r6 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rip + hexvar ] , hexvar lea rdi , [ rip + hexvar ] call hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov eax , dword ptr [ rbp - num ] cdqe lea rdx , [ rax * num ] lea rax , [ rip + hexvar ] mov eax , dword ptr [ rdx + rax ] mov esi , eax lea rdi , [ rip + hexvar ] call hexvar add dword ptr [ rbp - num ] , num cmp dword ptr [ rbp - num ] , num jle hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov eax , dword ptr [ rbp - num ] movsxd rdx , eax mov rax , rdx shl rax , num add rax , rdx add rax , rax add rax , rdx shl rax , num lea rdx , [ rip + hexvar ] add rdx , rax mov eax , dword ptr [ rbp - num ] cdqe lea rcx , [ rax * num ] lea rax , [ rip + hexvar ] mov eax , dword ptr [ rcx + rax ] mov esi , num mov edi , eax call hexvar mov eax , dword ptr [ rbp - num ] movsxd rdx , eax mov rax , rdx shl rax , num add rax , rdx add rax , rax add rax , rdx shl rax , num mov rdx , rax lea rax , [ rip + hexvar ] mov rax , qword ptr [ rdx + rax ] cmp rax , num je hexvar mov eax , dword ptr [ rbp - num ] cdqe lea rdx , [ rax * num ] lea rax , [ rip + hexvar ] mov eax , dword ptr [ rdx + rax ] lea rsi , [ rip - hexvar ] mov edi , eax call hexvar add dword ptr [ rbp - num ] , num cmp dword ptr [ rbp - num ] , num jle hexvar mov esi , num mov edi , hexvar call hexvar mov byte ptr [ rip + hexvar ] , num nop leave ret
sub sp , sp , num str r0 , [ sp , num ] ldr r3 , [ sp , num ] cmp r3 , num bne hexvar mvn r3 , num b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 ] sub r3 , r3 , num cmp r3 , num bhi hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] b hexvar mvn r3 , num mov r0 , r3 add sp , sp , num bx lr
sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar mov qword ptr [ rsp ] , num mov qword ptr [ rsp + hexvar ] , num mov qword ptr [ rsp + num ] , num cmp eax , hexvar setne dl movzx edx , dl add eax , edx mov rcx , rsp mov edx , hexvar mov esi , eax mov edi , num call hexvar mov rax , qword ptr [ rsp ] mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rsp + num ] mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar ret
cmp r0 , hexvar bhi hexvar cmp r0 , hexvar movne r0 , num moveq r0 , num bx lr push { r4 , lr } ldr r2 , [ pc , num ] ldr r1 , [ pc , num ] ldr r0 , [ pc , num ] bl hexvar andeq fp , sb , ip , ror num andeq r1 , r0 , r3 , lsl r2 andeq lr , sb , r4 , ror num
push ebp mov ebp , esp push ebx push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] sub edx , num and ecx , edx cmp ecx , num setne bl and bl , num movzx ecx , bl mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebx pop ebp ret
push ebp mov ebp , esp call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ eax + hexvar ] , edx nop pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s1 , a0 beqz a0 , hexvar move s0 , a1 lui a1 , hexvar addiu a1 , a1 , - hexvar move a0 , s1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) bnez v0 , hexvar nop lui v0 , hexvar lw v0 , - hexvar ( v0 ) beqz v0 , hexvar nop beqz s0 , hexvar addiu a0 , zero , num sw v0 , num ( s0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) lw a3 , hexvar ( sp ) lw a2 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) bnez v0 , hexvar nop lw v0 , hexvar ( sp ) b hexvar nop lw v0 , hexvar ( sp ) sll v0 , v0 , num lw v1 , hexvar ( sp ) addu v0 , v1 , v0 sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sll v0 , v0 , num lw v1 , hexvar ( sp ) addu v0 , v1 , v0 sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sll v0 , v0 , num lw v1 , hexvar ( sp ) addu v0 , v1 , v0 sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) bgez v0 , hexvar nop lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) b hexvar nop lw v0 , hexvar ( sp ) lw v0 , ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rcx cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov eax , hexvar mov rcx , qword ptr [ rbp - hexvar ] cmp rcx , rax jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , qword ptr [ rbp - hexvar ] mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push r14 push rbx sub rsp , hexvar lea r14 , [ rsp + hexvar ] xorps xmm0 , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 mov qword ptr [ rsp + hexvar ] , num movaps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rsp + hexvar ] , xmm0 mov qword ptr [ rsp + hexvar ] , hexvar lea rdi , [ rsp + hexvar ] mov esi , num xor edx , edx call hexvar xorps xmm0 , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp ] , xmm0 cmp dword ptr [ rsp + hexvar ] , num jne hexvar mov rax , qword ptr [ rsp + hexvar ] add dword ptr [ rsp + hexvar ] , eax jae hexvar add dword ptr [ rsp + hexvar ] , num cmp byte ptr [ rsp + hexvar ] , num je hexvar mov dword ptr [ rsp + hexvar ] , hexvar mov dword ptr [ rsp + hexvar ] , hexvar lea rdi , [ r14 + rax ] mov edx , hexvar sub rdx , rax xor esi , esi call hexvar lea rbx , [ rsp + hexvar ] mov rdi , rbx mov rsi , r14 call hexvar movaps xmm0 , xmmword ptr [ rsp + hexvar ] movaps xmm1 , xmmword ptr [ rsp + hexvar ] movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp ] , xmm0 mov rdx , qword ptr [ rsp + hexvar ] lea rdi , [ rsp + hexvar ] mov rsi , rsp call hexvar mov esi , hexvar mov rdi , rbx call hexvar lea rdi , [ rsp + hexvar ] mov esi , hexvar mov edx , num mov ecx , hexvar mov r8d , num xor r9d , r9d call hexvar mov ecx , eax mov eax , num test ecx , ecx je hexvar add rsp , hexvar pop rbx pop r14 ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rsi + hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rsi + hexvar ] sub eax , ecx setne dl movzx ecx , dl mov esi , ecx mov rsi , qword ptr [ rsi * num + hexvar ] mov dword ptr [ rbp - hexvar ] , eax jmp rsi mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rax ] sub ecx , edx setne sil movzx edx , sil mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] mov dword ptr [ rbp - hexvar ] , ecx jmp rax mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] sub rax , rcx seta dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] sub rax , rcx seta dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] pop rbp ret
mov eax , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ eax ] test eax , eax je hexvar push edx push hexvar push num push eax call hexvar add esp , hexvar test eax , eax mov dword ptr [ ebx + hexvar ] , eax jg hexvar lea eax , [ ebx - hexvar ] push edi push num push eax push num call hexvar mov dword ptr [ esp ] , eax call hexvar
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] test byte ptr [ edx + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar movss xmm0 , dword ptr [ hexvar ] movsd xmm1 , qword ptr [ hexvar ] movaps xmm2 , xmm1 movd xmm3 , dword ptr [ ebp + num ] por xmm3 , xmm2 subsd xmm3 , xmm1 cvtsd2ss xmm1 , xmm3 mov eax , dword ptr [ ebp + hexvar ] divss xmm1 , dword ptr [ eax + num ] movss dword ptr [ ebp - num ] , xmm1 movss xmm1 , dword ptr [ ebp - num ] ucomiss xmm1 , xmm0 jb hexvar mov dword ptr [ ebp - num ] , num jmp hexvar movss xmm0 , dword ptr [ ebp - num ] movss xmm1 , dword ptr [ hexvar ] movaps xmm2 , xmm0 subss xmm2 , xmm1 cvttss2si eax , xmm2 xor eax , hexvar cvttss2si ecx , xmm0 ucomiss xmm1 , xmm0 cmova eax , ecx mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp + num ] , eax mov eax , hexvar cmp eax , dword ptr [ ebp + num ] jae hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , hexvar cmp esi , dword ptr [ ebp + num ] setle bl and bl , num movzx esi , bl lea edi , [ hexvar ] add edi , esi mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esi mov dword ptr [ ebp - hexvar ] , edx cdq mov esi , hexvar idiv esi add eax , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edi call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , ecx cdq mov ecx , hexvar idiv ecx mov dword ptr [ esp ] , edx call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , ecx add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov rbx , rdi test rdi , rdi mov r14d , hexvar mov r15d , hexvar cmove r15d , r14d lea r12 , [ rdi + hexvar ] mov eax , hexvar mov r13d , hexvar jmp hexvar mov eax , hexvar mov ebp , dword ptr [ rsp + num ] nop cmp eax , hexvar jg hexvar cmp eax , hexvar jle hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov qword ptr [ rsp + hexvar ] , r12 mov rax , qword ptr [ rsp + hexvar ] mov dword ptr [ rax ] , num mov rax , qword ptr [ rsp + num ] mov rax , qword ptr [ rax ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rsp + hexvar ] , rax cmp qword ptr [ rsp + hexvar ] , num mov eax , hexvar mov ecx , hexvar cmove eax , ecx jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] cmp eax , hexvar jle hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar nop dword ptr [ rax ] cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov qword ptr [ rsp + num ] , rbx mov rax , qword ptr [ rsp + num ] mov rax , qword ptr [ rax ] mov qword ptr [ rsp + hexvar ] , rax cmp qword ptr [ rsp + hexvar ] , num mov eax , hexvar cmove eax , r14d jmp hexvar nop dword ptr [ rax ] cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov eax , r15d jmp hexvar mov rax , qword ptr [ rsp + hexvar ] cmp qword ptr [ rax + hexvar ] , num mov eax , hexvar cmove eax , r14d jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov eax , hexvar mov ebp , hexvar jmp hexvar mov rax , qword ptr [ rsp + hexvar ] mov rdi , rbx call rax mov dword ptr [ rsp + num ] , eax cmp dword ptr [ rsp + num ] , num mov eax , hexvar cmovle eax , r13d jmp hexvar mov rax , qword ptr [ rsp + hexvar ] mov dword ptr [ rax ] , num mov eax , hexvar jmp hexvar mov eax , hexvar mov ebp , num jmp hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
ldr r2 , [ r0 ] ldr r3 , [ r1 ] cmp r2 , r3 blo hexvar bhi hexvar ldr r2 , [ r0 , num ] ldr r3 , [ r1 , num ] ldr r0 , [ r2 , num ] ldr r1 , [ r3 , num ] cmp r0 , r1 blo hexvar bhi hexvar ldrb r2 , [ r2 , hexvar ] ldrb r3 , [ r3 , hexvar ] cmp r2 , r3 blo hexvar mvnhi r0 , num movls r0 , num bx lr mov r0 , num bx lr mvn r0 , num bx lr
push r15 push r14 push rbx mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar mov rbx , rdi mov rcx , qword ptr [ rdi + hexvar ] test rcx , rcx je hexvar mov r14 , rdx mov r15 , rsi test rsi , rsi je hexvar mov rdi , qword ptr [ rcx + hexvar ] call hexvar mov rsi , qword ptr [ r14 ] mov rcx , qword ptr [ rbx + hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov rdi , r15 mov rdx , rax xor r8d , r8d call hexvar test eax , eax jns hexvar pop rbx pop r14 pop r15 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] sub edi , ebx mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] cmp eax , dword ptr [ ebp + hexvar ] jae hexvar mov eax , dword ptr [ ebp + num ] mov ecx , eax add ecx , num mov dword ptr [ ebp + num ] , ecx movsx eax , byte ptr [ eax ] cmp eax , num sete dl and dl , num movzx eax , dl add eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ ebx + hexvar ] push dword ptr [ ebx + hexvar ] push dword ptr [ ebx + hexvar ] push num push hexvar call hexvar mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ edx + hexvar ] , eax add esp , hexvar pop ebx ret
mov ip , num push { r4 , r5 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar stm sp , { r0 , r1 } ldr r1 , [ pc , hexvar ] ldr lr , [ r4 ] ldr r0 , [ r1 ] mov r1 , sp str r2 , [ sp , num ] str r3 , [ sp , hexvar ] str lr , [ sp , hexvar ] str ip , [ sp , hexvar ] bl hexvar subs r5 , r0 , num beq hexvar ldr r0 , [ r5 , hexvar ] bl hexvar mov r0 , r5 bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push r15 push r14 xor eax , eax push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbp , qword ptr [ rdi + hexvar ] mov edx , dword ptr [ rbp + hexvar ] cmp edx , esi jbe hexvar mov eax , dword ptr [ rip + hexvar ] mov r13d , esi mov rbx , rdi mov r12 , r13 add eax , num cmp eax , num mov dword ptr [ rip + hexvar ] , eax ja hexvar mov rax , qword ptr [ rbp + hexvar ] lea r15 , [ rip + hexvar ] mov r14 , qword ptr [ rax + r13 * num ] mov edx , dword ptr [ r14 ] test edx , edx jne hexvar mov rax , qword ptr [ rbx + num ] mov r8 , qword ptr [ rax + hexvar ] mov eax , dword ptr [ r14 + num ] cmp eax , hexvar je hexvar jbe hexvar cmp eax , hexvar je hexvar jbe hexvar cmp eax , hexvar je hexvar jbe hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar cmp qword ptr [ r14 + hexvar ] , num jne hexvar mov rax , qword ptr [ rbx + hexvar ] movdqu xmm0 , xmmword ptr [ r14 ] movups xmmword ptr [ rax + hexvar ] , xmm0 mov dword ptr [ rax + hexvar ] , r12d movdqu xmm0 , xmmword ptr [ r14 + hexvar ] movups xmmword ptr [ rax + hexvar ] , xmm0 movdqu xmm0 , xmmword ptr [ r14 + hexvar ] movups xmmword ptr [ rax + hexvar ] , xmm0 movdqu xmm0 , xmmword ptr [ r14 + hexvar ] movups xmmword ptr [ rax + hexvar ] , xmm0 movdqu xmm0 , xmmword ptr [ r14 + hexvar ] movups xmmword ptr [ rax + hexvar ] , xmm0 nop dword ptr [ rax ] mov ecx , r12d mov rdx , r15 mov rsi , r14 mov rdi , rbx call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov esi , dword ptr [ rbp + hexvar ] mov rdi , rbx call hexvar test rax , rax mov r15 , rax jne hexvar xor eax , eax mov rdx , qword ptr [ rip + hexvar ] test rdx , rdx je hexvar cmp qword ptr [ rip + hexvar ] , rbx je hexvar sub dword ptr [ rip + hexvar ] , num jne hexvar mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , rbx add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov dl , cl mov ecx , dword ptr [ ebp + num ] mov esi , esp mov dword ptr [ esi ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , dl call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] sub eax , hexvar cmp eax , num mov dl , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , dl ja hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] cmp ecx , eax sete dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , - hexvar sub ecx , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx ja hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] sub eax , hexvar add eax , hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
mov r2 , num push { r4 , r5 , lr } ldr r5 , [ pc , hexvar ] sub sp , sp , hexvar add r3 , sp , num ldr ip , [ r5 ] str r2 , [ sp , num ] str r3 , [ sp ] ldr r2 , [ pc , hexvar ] mov r3 , hexvar mov r1 , num str ip , [ sp , hexvar ] bl hexvar cmp r0 , num beq hexvar ldr r4 , [ sp , num ] mov r2 , num mov r0 , r4 ldr r1 , [ pc , hexvar ] bl hexvar cmp r0 , num bne hexvar add r4 , r4 , num mov r2 , r4 add r0 , sp , hexvar ldr r3 , [ pc , hexvar ] mov r1 , hexvar str r4 , [ sp , num ] bl hexvar cmp r0 , num beq hexvar add r0 , sp , hexvar bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r5 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , pc } blgt hexvar andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + num ] test eax , eax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + num ] mov eax , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax ] cmp eax , num je hexvar cmp eax , num jb hexvar sub eax , hexvar cmp eax , num jbe hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax ] mov rax , qword ptr [ rax ] test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar jmp hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rax + num ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
mov eax , dword ptr [ esp + num ] add eax , num cmp eax , num jbe hexvar xor eax , eax ret
push { r4 , r5 , r6 , lr } ldr r5 , [ r0 , hexvar ] cmp r5 , num beq hexvar ldrb r3 , [ r5 , hexvar ] lsrs r3 , r3 , num bne hexvar mov r4 , num mov r6 , r4 b hexvar mov r5 , r3 ldr r3 , [ r0 , hexvar ] ldr r2 , [ r0 , hexvar ] adds r4 , r4 , r3 adc r6 , r6 , r2 ldr r3 , [ r5 , hexvar ] cmp r3 , num beq hexvar ldrb r2 , [ r3 , hexvar ] mov r0 , r5 lsrs r2 , r2 , num beq hexvar ldr r3 , [ r5 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ r3 , num ] mov r0 , r5 blx r3 str r0 , [ r5 , hexvar ] str r1 , [ r5 , hexvar ] subs r0 , r0 , r4 sbc r1 , r1 , r6 pop { r4 , r5 , r6 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push r12 push rbp push rbx nop dword ptr [ rax ] mov eax , esi shr esi , num and eax , hexvar test esi , esi jne hexvar mov byte ptr [ rdi ] , al mov eax , dword ptr [ rdx ] lea rbx , [ rdi + num ] test al , num je hexvar mov eax , dword ptr [ rdx + num ] mov rsi , rbx mov ecx , eax shr eax , num and ecx , hexvar test eax , eax je hexvar nop word ptr [ rax + rax ] or ecx , hexvar add rsi , num mov byte ptr [ rsi - num ] , cl mov ecx , eax shr eax , num and ecx , hexvar test eax , eax jne hexvar mov byte ptr [ rsi ] , cl mov eax , dword ptr [ rdx ] lea rbx , [ rsi + num ] test al , num je hexvar mov r12 , qword ptr [ rdx + num ] mov rdi , r12 call hexvar lea ebp , [ rax + num ] mov rdi , rbx mov rsi , r12 movsxd rbp , ebp mov rdx , rbp add rbx , rbp call hexvar mov rax , rbx pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp push ebx push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ hexvar ] cmp ecx , dword ptr [ edx ] sete bl and bl , num movzx ecx , bl mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebx pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ eax ] mov edx , dword ptr [ edx + hexvar ] and edx , hexvar cmp edx , hexvar sete bl mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , bl xor eax , eax mov cl , al mov dl , byte ptr [ ebp - hexvar ] test dl , num mov byte ptr [ ebp - hexvar ] , cl jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ ecx + hexvar ] mov esi , dword ptr [ ecx + hexvar ] mov edi , dword ptr [ ecx + hexvar ] mov ecx , dword ptr [ ecx + hexvar ] mov ebx , ecx sar ebx , hexvar shr ebx , hexvar add edi , ebx adc ecx , num mov ebx , ecx shld ebx , edi , hexvar sar ecx , num sub esi , ebx sbb edx , ecx setl cl mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edx mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] mov byte ptr [ ebp - hexvar ] , al jmp hexvar mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
beqz a0 , hexvar move v0 , a1 lbu v1 , ( a0 ) addiu v1 , v1 , - hexvar andi v0 , v1 , hexvar sltiu v0 , v0 , hexvar beqz v0 , hexvar andi v1 , v1 , hexvar sll v1 , v1 , num lui a0 , hexvar addiu a0 , a0 , hexvar addu v1 , a0 , v1 lw v0 , ( v1 ) jr v0 nop jr ra addiu v0 , zero , num jr ra move v0 , a1 move v0 , zero jr ra nop
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , hexvar pop ebp ret
push rbp mov rbp , rsp movsd qword ptr [ rbp - num ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 movsd qword ptr [ rbp - hexvar ] , xmm2 mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx movsd xmm0 , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rip + hexvar ] subsd xmm0 , xmm1 movsd xmm1 , qword ptr [ rip + hexvar ] mulsd xmm0 , xmm1 movsd xmm1 , qword ptr [ rbp - num ] subsd xmm1 , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] movsd xmm2 , qword ptr [ rip + hexvar ] subsd xmm0 , xmm2 movsd xmm2 , qword ptr [ rip + hexvar ] mulsd xmm0 , xmm2 addsd xmm0 , xmm1 movsd xmm1 , qword ptr [ rip + hexvar ] mulsd xmm0 , xmm1 mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rip + hexvar ] subsd xmm0 , xmm1 movsd xmm1 , qword ptr [ rip + hexvar ] mulsd xmm0 , xmm1 movsd xmm1 , qword ptr [ rbp - num ] subsd xmm1 , xmm0 movapd xmm0 , xmm1 movsd xmm1 , qword ptr [ rbp - hexvar ] movsd xmm2 , qword ptr [ rip + hexvar ] subsd xmm1 , xmm2 movsd xmm2 , qword ptr [ rip + hexvar ] mulsd xmm1 , xmm2 subsd xmm0 , xmm1 movsd xmm1 , qword ptr [ rip + hexvar ] mulsd xmm0 , xmm1 mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rip + hexvar ] subsd xmm0 , xmm1 movsd xmm1 , qword ptr [ rip + hexvar ] mulsd xmm0 , xmm1 addsd xmm0 , qword ptr [ rbp - num ] movsd xmm1 , qword ptr [ rbp - hexvar ] movsd xmm2 , qword ptr [ rip + hexvar ] subsd xmm1 , xmm2 movsd xmm2 , qword ptr [ rip + hexvar ] mulsd xmm1 , xmm2 subsd xmm0 , xmm1 movsd xmm1 , qword ptr [ rip + hexvar ] mulsd xmm0 , xmm1 mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 nop pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] cmp dword ptr [ edx + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jg hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ ebp - hexvar ] jae hexvar mov eax , dword ptr [ ebp - num ] add eax , dword ptr [ ebp - hexvar ] shr eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + ecx * num ] cmp eax , dword ptr [ ebp + hexvar ] jge hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + ecx * num ] cmp eax , dword ptr [ ebp + hexvar ] jne hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar xor eax , eax mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r1 , [ r0 , hexvar ] ldr r6 , [ pc , hexvar ] ldrb r3 , [ r1 ] ldr r2 , [ r6 ] sub sp , sp , hexvar sub r3 , r3 , hexvar mov r4 , r0 str r2 , [ sp , num ] cmp r3 , hexvar ldrls pc , [ pc , r3 , lsl num ] b hexvar andeq r7 , ip , r0 , lsr num andeq r7 , ip , ip , ror num andeq r7 , ip , ip , ror num andeq r7 , ip , ip , ror num andeq r7 , ip , ip , ror num andeq r7 , ip , ip , lsr num andeq r7 , ip , ip , ror num andeq r7 , ip , r0 , lsl ip andeq r7 , ip , ip , ror num andeq r7 , ip , ip , ror num andeq r7 , ip , ip , ror num andeq r7 , ip , ip , ror num andeq r7 , ip , r4 , lsl num ldr r2 , [ sp , num ] ldr r3 , [ r6 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } b hexvar ldrb r3 , [ r1 , num ] cmp r3 , hexvar beq hexvar mov r1 , num bl hexvar ldr r3 , [ r4 , hexvar ] mov r5 , r0 ldrb r2 , [ r3 ] cmp r2 , hexvar bne hexvar add r3 , r3 , num str r3 , [ r4 , hexvar ] mov r0 , r4 bl hexvar mov r3 , r0 b hexvar bl hexvar ldr r3 , [ r4 , hexvar ] mov r5 , r0 ldrb r2 , [ r3 ] cmp r2 , hexvar beq hexvar ldr r2 , [ sp , num ] ldr r3 , [ r6 ] mov r0 , r5 cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov cl , byte ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] and cl , num mov byte ptr [ ebp - num ] , cl mov esi , dword ptr [ ebp + num ] mov dword ptr [ esi + hexvar ] , hexvar mov dword ptr [ esi + num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx xor eax , eax mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp eax , - num je hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + ecx ] , num jmp hexvar test byte ptr [ ebp - num ] , num je hexvar mov dword ptr [ ebp - hexvar ] , num cmp dword ptr [ ebp - hexvar ] , hexvar jae hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dl , byte ptr [ eax + ecx ] mov dh , dl xor dh , hexvar and dh , num mov bl , num mov bh , bl xor bh , num and dl , bh xor bl , num and bl , num and bh , num or dh , dl or bl , bh xor dh , bl mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] and dh , num mov byte ptr [ eax + ecx ] , dh xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] sub eax , num sub ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar jmp hexvar add esp , hexvar pop esi pop ebx pop ebp ret
xor eax , eax test rdi , rdi je hexvar test esi , esi setne al shl eax , num add eax , - num mov dword ptr [ rdi + num ] , eax mov eax , num ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , ( a0 )
mov rax , qword ptr [ rdi + hexvar ] cmp byte ptr [ rax ] , hexvar jne hexvar add rax , num push rbx mov rbx , rdi mov qword ptr [ rdi + hexvar ] , rax call hexvar test eax , eax js hexvar mov ecx , dword ptr [ rbx + hexvar ] cmp ecx , dword ptr [ rbx + hexvar ] jge hexvar movsxd rdx , ecx cdqe add ecx , num lea rsi , [ rdx + rdx * num ] mov rdx , qword ptr [ rbx + hexvar ] lea rdx , [ rdx + rsi * num ] mov dword ptr [ rdx + num ] , num mov dword ptr [ rbx + hexvar ] , ecx mov qword ptr [ rdx + num ] , rax mov dword ptr [ rdx ] , num mov rax , rdx pop rbx ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] and al , num mov byte ptr [ ebp - num ] , al mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ edi + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp + hexvar ] cmp dword ptr [ eax + num ] , num jne hexvar mov al , byte ptr [ ebp - num ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov byte ptr [ ebp - hexvar ] , al call hexvar mov ecx , dword ptr [ ebp + num ] mov dl , byte ptr [ ebp - hexvar ] and dl , num movzx esi , dl mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push rbp push r15 push r14 push r12 push rbx sub rsp , hexvar mov r14 , rsi mov rbx , rdi mov rbp , qword ptr [ rdi + hexvar ] cmp qword ptr [ rbp + num ] , num je hexvar call hexvar test rax , rax je hexvar mov r15 , rax cmp qword ptr [ rbx + hexvar ] , num je hexvar lea r12 , [ rsp + num ] mov rdi , r12 mov rsi , rbx call hexvar jmp hexvar call hexvar mov qword ptr [ rbp + num ] , rax xor r12d , r12d test rax , rax je hexvar mov esi , hexvar mov rdi , rax call hexvar test eax , eax jne hexvar jmp hexvar xor r12d , r12d jmp hexvar xor r12d , r12d mov esi , dword ptr [ rbp ] mov rdx , qword ptr [ rbp + num ] mov rdi , r15 mov rcx , r12 call hexvar mov r12d , eax test eax , eax jle hexvar mov rdi , r14 mov esi , num mov rdx , r15 call hexvar jmp hexvar mov rdi , r15 call hexvar mov eax , r12d add rsp , hexvar pop rbx pop r12 pop r14 pop r15 pop rbp ret
push edi push esi push ebx call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ ebx + hexvar ] cmp esi , num je hexvar cmp esi , num je hexvar sub esp , num push num lea eax , [ ebx - hexvar ] push eax lea eax , [ ebx - hexvar ] push eax call hexvar call hexvar add esp , hexvar mov dword ptr [ ebx + hexvar ] , edi mov byte ptr [ edi ] , num cmp dword ptr [ ebx + hexvar ] , num jne hexvar cmp byte ptr [ ebx + hexvar ] , num je hexvar add dword ptr [ ebx + hexvar ] , num mov edx , dword ptr [ ebx + hexvar ] test dl , num je hexvar or dword ptr [ ebx + hexvar ] , hexvar lea eax , [ edx * num ] and eax , num cmp esi , num je hexvar test dl , num je hexvar or dword ptr [ ebx + hexvar ] , hexvar add eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ edx + eax * num ] call hexvar jmp hexvar cmp byte ptr [ ebx + hexvar ] , num jne hexvar mov byte ptr [ edi ] , hexvar lea edi , [ edi + num ] jmp hexvar cmp byte ptr [ ebx + hexvar ] , num jne hexvar test byte ptr [ ebx + hexvar ] , num je hexvar or dword ptr [ ebx + hexvar ] , hexvar mov byte ptr [ edi ] , hexvar lea edi , [ edi + num ] jmp hexvar mov byte ptr [ edi ] , hexvar lea edi , [ edi + num ] mov eax , dword ptr [ ebx + hexvar ] and eax , hexvar or dword ptr [ ebx + hexvar ] , eax jmp hexvar call hexvar or dword ptr [ ebx + hexvar ] , hexvar test edx , edx je hexvar add eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ edx + eax * num ] call hexvar jmp hexvar add eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ edx + eax * num ] call hexvar jmp hexvar add eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ edx + eax * num ] call hexvar jmp hexvar sub esp , num push dword ptr [ esp + hexvar ] push esi call hexvar add esp , hexvar pop ebx pop esi pop edi ret
push r14 push rbx push rax mov rcx , rdi mov rdi , rsp xor esi , esi xor edx , edx call hexvar mov rdi , qword ptr [ rsp ] call hexvar mov edi , eax call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov r14 , rax call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax mov esi , hexvar xor edx , edx mov rcx , r14 call hexvar test rax , rax jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov rdi , rbx call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx mov rax , rbx add rsp , num pop rbx pop r14 ret
b hexvar mov r0 , r3 ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar ldrb r2 , [ r3 , hexvar ] tst r2 , num beq hexvar ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar push { r4 , lr } ldr r3 , [ r3 , hexvar ] blx r3 pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a1 move s1 , a2 jal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move a2 , s1 move a1 , s0 addiu a0 , v0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar move v0 , zero
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov ecx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx xor ecx , ecx mov edx , eax mov dword ptr [ esp + hexvar ] , num sub edx , ebp cmp edx , esi jge hexvar mov ebp , hexvar mov edi , dword ptr [ esp + hexvar ] xor edi , dword ptr gs : [ hexvar ] mov eax , ebp jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , num mov qword ptr [ rbp - hexvar ] , num mov rsi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rsi ] mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jae hexvar mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax call hexvar mov rsi , qword ptr [ rbp - hexvar ] xor rsi , rax or rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov ecx , hexvar mov edx , ecx xor edx , num and edx , hexvar xor ecx , hexvar mov esi , ecx and esi , num mov r8d , eax xor r8d , hexvar and r8d , hexvar and eax , ecx or edx , esi or r8d , eax xor edx , r8d mov eax , edx add rsp , hexvar pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax test rdi , rdi je hexvar mov r13 , rsi test rsi , rsi je hexvar mov r12 , rdx test rdx , rdx je hexvar mov r14 , rcx test rcx , rcx je hexvar mov rbx , rdi mov ebp , hexvar cmp dword ptr [ rdi ] , num jne hexvar mov edi , dword ptr [ rbx + num ] call hexvar mov ebp , hexvar test eax , eax je hexvar mov edi , dword ptr [ r13 + num ] call hexvar test eax , eax je hexvar mov rax , qword ptr [ rbx + num ] mov rdi , qword ptr [ rax + num ] mov rax , qword ptr [ r13 + num ] mov rsi , qword ptr [ rax + num ] call hexvar mov ebp , hexvar test eax , eax jne hexvar call hexvar test rax , rax je hexvar mov r15 , rax mov rdi , rsp call qword ptr [ rip ] test eax , eax je hexvar mov ebp , eax jmp hexvar mov ebp , hexvar jmp hexvar mov rdi , qword ptr [ rsp ] mov rax , qword ptr [ rbx + num ] mov rsi , qword ptr [ rax + hexvar ] mov edx , hexvar call qword ptr [ rip ] mov ebp , eax test eax , eax jne hexvar mov rdi , qword ptr [ rbx + hexvar ] add r13 , hexvar mov rcx , qword ptr [ rsp ] mov rsi , r13 mov rdx , r15 mov r8d , num call qword ptr [ rip ] mov ebp , eax test eax , eax jne hexvar mov rdi , qword ptr [ rsp ] call qword ptr [ rip ] mov rbx , rax cmp qword ptr [ r14 ] , rax jae hexvar mov qword ptr [ r14 ] , rbx mov ebp , num jmp hexvar mov rdi , r12 mov rsi , rbx call hexvar mov r13 , qword ptr [ rip ] mov rbp , qword ptr [ r15 ] mov rdi , rbp call qword ptr [ rip ] mov rsi , rbx sub rsi , rax add rsi , r12 mov rdi , rbp call r13
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax jne hexvar mov edi , hexvar call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax jne hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov eax , dword ptr [ rax ] mov edi , eax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] push qword ptr [ rbp - num ] lea rdx , [ rip + hexvar ] push rdx lea r9 , [ rip + hexvar ] mov r8d , hexvar mov ecx , hexvar lea rdx , [ rip + hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax mov eax , num call hexvar add rsp , hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar call hexvar mov edi , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov edx , hexvar mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rax + num ] , hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rax ] , num nop leave ret
push ebp mov ebp , esp sub esp , num call hexvar mov dword ptr [ ebp - num ] , eax cmp eax , num je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar jmp hexvar add esp , num pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov edi , dword ptr [ ebp + num ] mov ebx , esp mov dword ptr [ ebx ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num call hexvar cmp eax , dword ptr [ ebp - hexvar ] jne hexvar mov byte ptr [ ebp - hexvar ] , num jmp hexvar mov byte ptr [ ebp - hexvar ] , num mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , num mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar add esp , num pop ebp ret
mov eax , dword ptr [ esp + hexvar ] xor ebp , ebp mov edx , eax sub edx , esi cmp esi , eax jb hexvar jmp hexvar nop lea esi , [ esi ] cmp ebp , edx je hexvar movzx eax , byte ptr [ esi + ebp ] add ebp , num test al , al js hexvar add ebp , esi jmp hexvar nop
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) lui s0 , hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw a0 , hexvar ( s0 ) beqz a0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lui s1 , hexvar sw zero , hexvar ( s0 ) lw v0 , - hexvar ( s1 ) bnez v0 , hexvar lw ra , hexvar ( sp ) lui s0 , hexvar lw t9 , - hexvar ( gp ) lui a1 , hexvar lw a0 , hexvar ( s0 ) jalr t9 addiu a1 , a1 , - hexvar lui a1 , hexvar lw gp , hexvar ( sp ) lw a0 , hexvar ( s0 ) lw t9 , - hexvar ( gp ) jalr t9 addiu a1 , a1 , - hexvar lui a1 , hexvar lw gp , hexvar ( sp ) move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 addiu a1 , a1 , - hexvar addiu v0 , zero , num sw v0 , - hexvar ( s1 ) lw ra , hexvar ( sp ) addiu v0 , zero , num lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push r14 push r13 mov r14 , rsi push r12 push rbp mov r13d , edx push rbx mov rbx , rdi add rdi , hexvar call hexvar mov rbp , rax xor eax , eax test rbp , rbp je hexvar mov rax , qword ptr [ rbx + hexvar ] test rax , rax je hexvar mov rdi , qword ptr [ rbx + hexvar ] mov edx , num mov rsi , r14 call rax test rax , rax mov r12 , rax je hexvar lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar test rax , rax je hexvar mov byte ptr [ rax ] , num mov r8 , qword ptr [ rbx + hexvar ] lea rcx , [ rax + num ] mov rdi , qword ptr [ rbx ] lea rdx , [ rip + hexvar ] xor eax , eax mov r9 , rbp mov esi , num call hexvar cmp r13d , num jb hexvar cmp r13d , num jbe hexvar cmp r13d , num jne hexvar mov rcx , qword ptr [ rbx ] lea rdi , [ rip + hexvar ] mov edx , hexvar mov esi , num call hexvar mov rdi , qword ptr [ rbx ] lea rdx , [ rip + hexvar ] mov rcx , r12 mov esi , num xor eax , eax call hexvar mov rdi , r12 call hexvar mov rsi , qword ptr [ rbx ] mov edi , hexvar call hexvar mov rdi , rbp call hexvar mov eax , num pop rbx pop rbp pop r12 pop r13 pop r14 ret
mov rax , qword ptr [ rdi + hexvar ] mov rcx , qword ptr [ rsi + hexvar ] mov rdx , rax sub rdx , rcx xor esi , esi test rdx , rdx setg sil xor edx , edx cmp rax , rcx lea eax , [ rsi + rsi - num ] cmove eax , edx ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r8 , rcx mov r13 , rdx mov rbx , rsi mov rax , rdi movzx ebp , byte ptr [ rdi ] mov edi , ebp mov r15 , qword ptr [ rax + hexvar ] mov r12 , qword ptr [ rax + hexvar ] test bpl , hexvar mov qword ptr [ rsp + hexvar ] , rax mov byte ptr [ rsp + hexvar ] , bpl jne hexvar lea rsi , [ rax + hexvar ] mov rdi , rax mov rdx , r12 mov r14 , r8 call r15
push rbp push r15 push r14 push rbx sub rsp , hexvar mov rbx , rsi mov r14 , rdi mov qword ptr [ rsp + hexvar ] , num call hexvar test rax , rax je hexvar mov r15 , rax mov rdi , qword ptr [ rbx + hexvar ] mov rsi , rax add rsi , num call hexvar mov dword ptr [ r15 ] , eax test eax , eax jle hexvar mov dword ptr [ r15 + num ] , hexvar mov rax , qword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rax + hexvar ] xor esi , esi call hexvar test rax , rax je hexvar mov rbx , rax lea rsi , [ rsp + hexvar ] mov rdi , rax call hexvar mov ebp , eax mov rdi , rbx call hexvar mov edi , hexvar call hexvar mov r9 , qword ptr [ rsp + hexvar ] mov dword ptr [ rsp ] , ebp mov rdi , r14 mov rsi , rax xor edx , edx mov ecx , hexvar mov r8 , r15 call hexvar mov ecx , eax mov eax , num test ecx , ecx jne hexvar mov rdi , qword ptr [ rsp + hexvar ] test rdi , rdi je hexvar call hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov rdi , r15 call hexvar xor eax , eax add rsp , hexvar pop rbx pop r14 pop r15 pop rbp ret
push rbp push r15 push r14 push r12 push rbx mov r14 , rdx mov r12 , rsi mov r15 , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax mov esi , hexvar xor edx , edx mov rcx , r12 call hexvar mov rdi , r15 mov rsi , rbx mov rdx , r14 call hexvar mov ebp , eax mov rdi , rbx call hexvar mov eax , ebp jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar xor eax , eax pop rbx pop r12 pop r14 pop r15 pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s4 , hexvar ( sp ) lw s4 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s4 ) sw v0 , hexvar ( sp ) beqz a1 , hexvar lw t9 , - hexvar ( gp ) move s0 , a1 bal hexvar move s2 , a0 lw gp , hexvar ( sp ) beqz v0 , hexvar move s1 , v0 addiu s5 , sp , hexvar b hexvar addiu s3 , zero , - num addiu s0 , s0 , - num beqz s0 , hexvar addiu s1 , s1 , - num beqz s1 , hexvar lw t9 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) move a1 , s5 bal hexvar move a0 , s2 beqz v0 , hexvar lw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) beqz v0 , hexvar lw t9 , - hexvar ( gp ) sltu v1 , s0 , v0 lw a0 , num ( s2 )
push esi push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] cmp eax , hexvar jg hexvar cmp eax , hexvar jge hexvar cmp eax , num je hexvar cmp eax , num jne hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esi + hexvar ] , eax mov eax , num add esp , num pop ebx pop esi ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + num ] add ebx , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ebx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi call hexvar and al , num mov byte ptr [ ebp - hexvar ] , al mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx ] , ecx mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move s0 , a0 addiu a0 , s0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu a1 , zero , hexvar addiu a0 , s0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu a1 , zero , hexvar addiu a0 , s0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu a1 , zero , hexvar addiu a0 , s0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu a1 , zero , hexvar addiu v0 , zero , - num lw gp , hexvar ( sp ) move a0 , s0 lw ra , hexvar ( sp ) sw v0 , hexvar ( s0 )
push { r4 , r5 , r6 , r7 , r8 , lr } subs r4 , r0 , num mov r2 , num mov r5 , r1 beq hexvar ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar mov r3 , r4 mov r2 , r0 mov r1 , num mov r0 , r5 bl hexvar bl hexvar ldr r3 , [ r0 ] mov r7 , r0 cmp r3 , num beq hexvar mov r4 , r0 ldr r6 , [ pc , hexvar ] mov r2 , r6 mov r1 , num mov r0 , r5 bl hexvar ldr r3 , [ r4 , num ] ! cmp r3 , num bne hexvar mov r1 , r5 mov r0 , hexvar bl hexvar mov r0 , r7 pop { r4 , r5 , r6 , r7 , r8 , lr } b hexvar ldr r1 , [ pc , hexvar ] bl hexvar mov r1 , num mov r2 , r0 mov r0 , r5 bl hexvar b hexvar andeq r0 , ip , r4 , ror sp strheq lr , [ fp ] , -ip andeq r0 , ip , r0 , ror num
push ebx sub esp , hexvar call hexvar add ebx , hexvar lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov dword ptr [ esp ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar nop word ptr [ eax + eax ]
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] test byte ptr [ hexvar ] , num mov dword ptr [ ebp - num ] , eax jne hexvar mov byte ptr [ hexvar ] , num mov dword ptr [ esp ] , num call hexvar xor ecx , ecx cmp ecx , eax jg hexvar call hexvar call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + hexvar ] , edx call hexvar mov dword ptr [ ebp - num ] , eax add esp , hexvar pop ebp ret
mov eax , dword ptr [ rip ] test eax , eax jne hexvar movaps xmm0 , xmmword ptr [ rip ] xorps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rip ] , xmm0 movaps xmmword ptr [ rip ] , xmm0 add byte ptr [ rsi ] , bh add byte ptr [ rax ] , al add byte ptr [ rax ] , al test dword ptr [ rax + hexvar ] , ebp insd dword ptr [ rdi ] , dx lea eax , [ rip ] xorps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rip ] , xmm0 movaps xmmword ptr [ rip ] , xmm0 xorps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rip ] , xmm0 movaps xmmword ptr [ rip ] , xmm0 add byte ptr [ rsi ] , bh add byte ptr [ rax ] , al add byte ptr [ rax ] , al
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw s0 , hexvar ( sp ) addiu a0 , zero , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar move s0 , a1 lui v1 , hexvar sw s1 , ( v0 )
push ebp mov ebp , esp call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] test eax , eax je hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov edx , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] sub edx , eax mov eax , edx sar eax , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ hexvar ] jge hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + ecx * num + num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - num ] add eax , hexvar add eax , num sub eax , hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] lea ecx , [ hexvar ] cmp dword ptr [ eax + num ] , ecx je hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ hexvar ] , hexvar lea eax , [ hexvar ] mov dword ptr [ hexvar ] , eax lea eax , [ hexvar ] cmp dword ptr [ ebp - num ] , eax je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar lea eax , [ hexvar ] mov dword ptr [ hexvar ] , eax mov dword ptr [ hexvar ] , num add esp , hexvar pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov cl , byte ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , cl mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov dl , byte ptr [ ebp - num ] and dl , num mov byte ptr [ eax ] , dl mov esi , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , esi mov ecx , dword ptr [ ecx ] mov dl , byte ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax sub esp , hexvar mov eax , esp mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + num ] , num mov dword ptr [ eax + num ] , num call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] lea esp , [ ebp - num ] pop esi pop ebp ret
mov rdx , qword ptr [ rdi + num ] mov rax , qword ptr [ rsi + num ] cmp rdx , rax jae hexvar cmp dword ptr [ rip + hexvar ] , num sbb eax , eax or eax , num ret
push r12 push rbp push rbx mov rbx , r8 cmp byte ptr [ r8 + hexvar ] , num je hexvar mov rbp , rdi cmp byte ptr [ r8 + hexvar ] , num je hexvar cmp byte ptr [ r8 + hexvar ] , num jne hexvar call hexvar mov dword ptr [ rax ] , hexvar movzx ebx , byte ptr [ rbx + hexvar ] xor ebx , num mov eax , ebx pop rbx pop rbp pop r12 ret
push { r4 , r5 , r6 , lr } mov r6 , r1 mov r1 , r0 mov r0 , num mov r4 , r2 bl hexvar mov r1 , r6 mov r5 , r0 mov r0 , num bl hexvar mov r2 , r5 mov r3 , r0 ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar cmp r4 , num beq hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar mov r5 , r0 mov r0 , r4 bl hexvar mov r1 , r5 mov r2 , r0 mov r0 , num bl hexvar ldr r3 , [ pc , hexvar ] ldr r0 , [ r3 ] ldr r3 , [ r0 , hexvar ] ldr r2 , [ r0 , hexvar ] cmp r3 , r2 bhs hexvar mov r2 , hexvar add r1 , r3 , num str r1 , [ r0 , hexvar ] strb r2 , [ r3 ] pop { r4 , r5 , r6 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 ) lw v0 , hexvar ( v0 )
push rbx mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar mov rbx , rdi mov rdi , qword ptr [ rax + num ] test rdi , rdi je hexvar mov esi , hexvar call hexvar mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rax + num ] , num pop rbx ret
push edi push esi mov esi , eax push ebx mov edi , dword ptr [ eax + hexvar ] call hexvar add ebx , hexvar sub esp , num lea eax , [ ebx - hexvar ] push num push eax lea eax , [ ebx - hexvar ] push eax call hexvar push hexvar push edi push esi push eax call hexvar add esp , hexvar push hexvar call hexvar add esp , hexvar xor eax , eax pop ebx pop esi pop edi ret
push rax cmp qword ptr [ rip + hexvar ] , num je hexvar mov rax , rdx mov rdx , qword ptr [ rdx + hexvar ] test rdx , rdx je hexvar mov r8 , rcx mov rcx , qword ptr [ rax + hexvar ] test rcx , rcx je hexvar pop rax jmp hexvar mov edi , dword ptr [ rip + hexvar ] test edi , edi jne hexvar call hexvar mov edi , eax mov dword ptr [ rip + hexvar ] , eax mov ecx , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rcx ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , ecx mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ edi ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi lea esi , [ hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + hexvar ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jl hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax ] cmp eax , dword ptr [ ebp - hexvar ] jge hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx ] , eax mov byte ptr [ ebp - hexvar ] , num jmp hexvar mov byte ptr [ ebp - hexvar ] , num mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar movsd qword ptr [ rbp - num ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 movsd qword ptr [ rbp - hexvar ] , xmm2 mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rdx ] mov rdx , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rdx ] mov rdx , qword ptr [ rbp - hexvar ] movsd xmm2 , qword ptr [ rdx ] lea rdi , [ rbp - hexvar ] lea rsi , [ rbp - hexvar ] lea rdx , [ rbp - hexvar ] call hexvar movsd xmm1 , qword ptr [ rip + hexvar ] movsd xmm0 , qword ptr [ rip + hexvar ] movsd xmm2 , qword ptr [ rbp - num ] subsd xmm2 , xmm0 movaps xmm0 , xmm2 call hexvar movsd xmm1 , qword ptr [ rip + hexvar ] movsd xmm2 , qword ptr [ rip + hexvar ] divsd xmm0 , xmm2 addsd xmm0 , qword ptr [ rbp - hexvar ] movsd qword ptr [ rbp - hexvar ] , xmm0 movaps xmm0 , xmm1 mulsd xmm0 , qword ptr [ rbp - hexvar ] mulsd xmm0 , qword ptr [ rbp - hexvar ] movsd qword ptr [ rbp - hexvar ] , xmm0 mulsd xmm1 , qword ptr [ rbp - hexvar ] mulsd xmm1 , qword ptr [ rbp - hexvar ] movsd qword ptr [ rbp - hexvar ] , xmm1 movsd xmm0 , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rbp - hexvar ] movsd xmm2 , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r6 , num ldr sl , [ pc , hexvar ] ldr r4 , [ pc , hexvar ] ldr r3 , [ sl ] sub sp , sp , hexvar ldr r0 , [ r4 , hexvar ] str r3 , [ sp , hexvar ] str r6 , [ r4 , hexvar ] bl hexvar bl hexvar add sb , r4 , hexvar ldm sb , { r8 , sb } orrs r3 , r8 , sb mov r2 , num beq hexvar ldr r1 , [ pc , hexvar ] mov r0 , r6 bl hexvar add r7 , sp , hexvar mov r3 , r0 mov r2 , hexvar mov r1 , num stm sp , { r8 , sb } mov r0 , r7 bl hexvar mov r1 , r6 mov r0 , r7 ldr r5 , [ r4 , hexvar ] bl hexvar sub r0 , r5 , r0 bic r0 , r0 , r0 , asr num asr r1 , r0 , num ldr r3 , [ pc , hexvar ] ldr lr , [ r4 , hexvar ] ldr ip , [ r4 , hexvar ] sub r0 , r0 , r1 ldr r2 , [ r4 , hexvar ] str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r3 , [ sp , hexvar ] str r3 , [ sp , num ] str r7 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] str lr , [ sp , hexvar ] str ip , [ sp ] ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sl ] strb r6 , [ r4 , hexvar ] cmp r2 , r3 str r6 , [ r4 , hexvar ] bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sltiu v0 , a1 , hexvar sw s1 , hexvar ( sp ) move a3 , a1 sw s0 , hexvar ( sp ) move s1 , a2 sw ra , hexvar ( sp ) move s0 , a0 bnez v0 , hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a2 , zero jalr t9 move a0 , s0 lw gp , hexvar ( sp ) beqz v0 , hexvar sw v0 , hexvar ( s0 )
push rbp push rbx push rax mov rax , qword ptr [ rdi + hexvar ] mov ebp , num test rax , rax je hexvar mov rbx , rdi mov rdx , rsp xor esi , esi xor ecx , ecx call rax test eax , eax jle hexvar mov rcx , qword ptr [ rsp ] mov edi , hexvar mov esi , hexvar mov rdx , rbx mov r8d , eax mov r9d , num call hexvar mov ebp , eax mov eax , ebp add rsp , num pop rbx pop rbp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r2 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] sub r3 , r2 , r3 ldr r2 , [ fp , - hexvar ] cmp r2 , r3 movlo r3 , r2 movhs r3 , r3 str r3 , [ fp , - num ] ldr r3 , [ pc , hexvar ] ldr r2 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] add r3 , r2 , r3 ldr r2 , [ fp , - num ] ldr r1 , [ fp , - hexvar ] mov r0 , r3 bl hexvar ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - num ] sub r3 , r2 , r3 str r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - num ] add r3 , r2 , r3 str r3 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r2 , [ r3 ] ldr r3 , [ fp , - num ] add r3 , r2 , r3 ldr r2 , [ pc , hexvar ] str r3 , [ r2 ] ldr r3 , [ pc , hexvar ] ldr r2 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 blo hexvar bl hexvar ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar mov r0 , r0 sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi lea esi , [ ebp - hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar test al , num jne hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax ] add ecx , - num mov dword ptr [ eax ] , ecx jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
ldrb r3 , [ r0 , hexvar ] and r3 , r3 , num cmp r3 , num bne hexvar ldr r3 , [ r0 , num ] ldr r3 , [ r3 , hexvar ] bx r3 mov r2 , num ldr r3 , [ pc , num ] mvn r0 , num str r2 , [ r3 , num ] bx lr andeq r6 , pc , r8 , rrx
call hexvar add eax , hexvar mov edx , dword ptr [ eax + hexvar ] test edx , edx jne hexvar cmp dword ptr [ esp + num ] , hexvar jg hexvar ret mov dword ptr [ eax + hexvar ] , num ret
ldrb r3 , [ r0 ] cmp r3 , num beq hexvar str lr , [ sp , - num ] ! mov ip , r1 b hexvar cmp r1 , hexvar and r3 , lr , hexvar bls hexvar cmp r2 , r3 bne hexvar ldrb r3 , [ r0 , num ] ! cmp r3 , num beq hexvar ldrb r2 , [ ip ] , num sub lr , r3 , hexvar cmp r2 , r3 sub r1 , r2 , hexvar beq hexvar cmp lr , hexvar and r1 , r1 , hexvar add lr , r3 , hexvar bls hexvar cmp r1 , hexvar bhi hexvar add r2 , r2 , hexvar and r2 , r2 , hexvar b hexvar ldrb r0 , [ ip ] clz r0 , r0 lsr r0 , r0 , num pop { pc }
lea edi , [ ebx - hexvar ] sub esp , hexvar push hexvar push edi push hexvar push hexvar push hexvar call hexvar add esp , hexvar jmp hexvar lea esi , [ esi ]
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx + num ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ edi + num ] mov edi , dword ptr [ edi + num ] xor edx , edi xor esi , ebx xor ebx , ebx or esi , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi mov byte ptr [ ebp - hexvar ] , bl jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx + hexvar ] mov edx , dword ptr [ edx + hexvar ] xor eax , edx xor ecx , esi xor edx , edx mov bl , dl or ecx , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , bl jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ecx ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar cmp eax , num sete bl mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] xor ecx , ecx test al , num mov edx , num cmovne ecx , edx cmp ecx , num setne al and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw a2 , hexvar ( fp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw a3 , hexvar ( fp ) lw a2 , hexvar ( fp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
xor eax , eax cmp edi , num ja hexvar movsxd rax , edi movsxd rcx , dword ptr [ rax * num + hexvar ] mov qword ptr [ rsi ] , rcx cmp edi , num jne hexvar mov qword ptr [ rdx ] , num jmp hexvar mov rax , qword ptr [ rax * num + hexvar ] mov qword ptr [ rdx ] , rax mov eax , num ret
push eax push eax lea edx , [ ebx - hexvar ] lea eax , [ ebx + hexvar ] mov dword ptr [ ebp - hexvar ] , edx push dword ptr [ eax ] lea eax , [ ebx - hexvar ] push num push edx push eax mov eax , dword ptr [ ebx + hexvar ] push dword ptr [ eax ] lea eax , [ ebx - hexvar ] push eax call hexvar mov edx , dword ptr [ ebp - hexvar ] add esp , hexvar mov eax , dword ptr [ edx + eax * num ] mov dword ptr [ ebx + hexvar ] , eax jmp hexvar
cmp edi , num jg hexvar movsxd rdi , edi shl rdi , num mov rax , qword ptr [ rdi + hexvar ] ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , ( a0 )
push r14 push r13 mov edi , hexvar push r12 push rbp mov r13 , rdx push rbx mov r14 , rsi mov r12d , ecx mov ebp , r8d mov ebx , r9d call hexvar mov rdx , qword ptr [ rsp + hexvar ] mov dword ptr [ rax + hexvar ] , num mov qword ptr [ rax ] , r14 mov qword ptr [ rax + num ] , r13 mov dword ptr [ rax + hexvar ] , r12d mov dword ptr [ rax + hexvar ] , ebp mov qword ptr [ rax + hexvar ] , rdx mov rdx , qword ptr [ rsp + hexvar ] mov dword ptr [ rax + hexvar ] , ebx mov qword ptr [ rax + hexvar ] , rdx pop rbx pop rbp pop r12 pop r13 pop r14 ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r12 , r8 mov r14 , rcx mov r15d , edx mov r13d , esi mov rbp , rdi mov edi , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , qword ptr [ rax ] test rbp , rbp je hexvar mov rsi , rbp mov edx , r13d call hexvar mov rdi , qword ptr [ rbx + hexvar ] mov esi , hexvar call hexvar mov qword ptr [ rbx + hexvar ] , r12 mov rax , qword ptr [ rbx + num ] test r14 , r14 je hexvar mov dword ptr [ rax ] , num mov qword ptr [ rax + num ] , r14 jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar xor esi , esi mov edx , hexvar call hexvar test eax , eax je hexvar mov rax , qword ptr [ rbx ] mov rdi , qword ptr [ rax + num ] mov esi , hexvar call hexvar test eax , eax jg hexvar jmp hexvar mov dword ptr [ rax ] , num movsxd rcx , r15d mov qword ptr [ rax + num ] , rcx jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov esi , hexvar mov rdi , rbx call hexvar xor ebx , ebx mov rax , rbx add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov bl , byte ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] and bl , num mov byte ptr [ ebp - hexvar ] , bl mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi call hexvar test al , num jne hexvar jmp hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar xor eax , eax mov ecx , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , ecx mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , num mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov bl , byte ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] and bl , num mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx movzx ecx , bl mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ esp + hexvar ] , num lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ esp + hexvar ] , eax call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) lw a2 , ( a0 )
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu a1 , zero , hexvar sw s0 , hexvar ( sp ) move a0 , zero lw s0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s1 , hexvar ( sp ) addiu s1 , sp , hexvar sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) move a2 , s1 lw v0 , ( s0 ) sw v0 , hexvar ( sp ) jalr t9 nop beqz v0 , hexvar lw gp , hexvar ( sp ) move v0 , zero lw a0 , hexvar ( sp ) lw v1 , ( s0 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) addiu a0 , zero , hexvar jalr t9 move a1 , s1 beqz v0 , hexvar lw gp , hexvar ( sp ) b hexvar nop lw t9 , - hexvar ( gp )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - num ] , num setne cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rcx mov eax , hexvar mov rcx , qword ptr [ rbp - hexvar ] cmp rcx , rax jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , ecx mov eax , dword ptr [ rbp - hexvar ] cmp eax , num je hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , qword ptr [ rbp - hexvar ] mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rdi mov rdx , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , num call hexvar mov ecx , num mov dword ptr [ rbp - hexvar ] , eax mov eax , ecx add rsp , hexvar pop rbp ret
mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar push rax mov esi , hexvar call hexvar mov qword ptr [ rip + hexvar ] , num add rsp , num xor edi , edi jmp hexvar nop dword ptr [ rax ]
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw s3 , hexvar ( sp ) move a0 , zero sw gp , hexvar ( sp ) move s3 , a1 sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s2 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) bltz v0 , hexvar lw gp , hexvar ( sp ) sll s0 , v0 , num move s2 , v0 addu v0 , s0 , v0 sll v0 , v0 , num addu v0 , s1 , v0 lw a0 , hexvar ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , num ( v0 )
push r13 push r12 mov edx , num push rbp push rbx mov rbx , rdi mov r12 , rsi sub rsp , hexvar mov rdi , qword ptr [ rdi ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax mov byte ptr [ rsp + num ] , num lea rbp , [ rsp + num ] mov rax , qword ptr [ rdi ] mov rsi , rbp call qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rbx + hexvar ] mov esi , hexvar call hexvar mov rdi , rax mov r13 , rax call hexvar mov rdi , qword ptr [ rbx ] mov rdx , rax mov rsi , r13 mov rcx , qword ptr [ rdi ] call qword ptr [ rcx + hexvar ] mov rdi , qword ptr [ rbx ] mov edx , num mov rsi , rbp mov rax , qword ptr [ rdi ] call qword ptr [ rax + hexvar ] mov rdi , r12 call hexvar mov rdi , qword ptr [ rbx ] mov rsi , r12 mov rdx , rax mov rcx , qword ptr [ rdi ] call qword ptr [ rcx + hexvar ] mov rdi , qword ptr [ rbx ] mov edx , num mov rsi , rbp mov rax , qword ptr [ rdi ] call qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rbx + hexvar ] mov esi , hexvar call hexvar mov rdi , rax mov r12 , rax call hexvar mov rdi , qword ptr [ rbx ] mov rsi , r12 mov rdx , rax mov rcx , qword ptr [ rdi ] call qword ptr [ rcx + hexvar ] mov rdi , qword ptr [ rbx ] mov edx , num lea rsi , [ rip + hexvar ] mov rax , qword ptr [ rdi ] call qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rbx + hexvar ] mov esi , hexvar call hexvar lea rsi , [ rip + hexvar ] mov rdi , rax mov r12 , rax call hexvar mov rdi , qword ptr [ rbx ] mov rdx , rax mov rsi , r12 mov rcx , qword ptr [ rdi ] call qword ptr [ rcx + hexvar ] mov rdi , qword ptr [ rbx ] mov edx , num mov rsi , rbp mov rax , qword ptr [ rdi ] call qword ptr [ rax + hexvar ] mov dword ptr [ rbx + hexvar ] , eax mov qword ptr [ rbx + hexvar ] , num mov rax , qword ptr [ rsp + num ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
push edi push esi push ebx mov edi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push edi call hexvar add esp , hexvar test eax , eax mov esi , eax js hexvar mov eax , esi pop ebx pop esi pop edi ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] add rdi , num mov qword ptr [ rax + hexvar ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , num ] cmp r3 , num beq hexvar ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r0 , [ sp , num ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar ldr r0 , [ sp , num ] bl hexvar mov r3 , num b hexvar ldr r0 , [ sp , hexvar ] bl hexvar ldr r2 , [ pc , hexvar ] ldr r3 , [ sp , num ] str r3 , [ r2 ] mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov edx , num mov rsi , rcx mov rdi , rax call hexvar leave ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s3 , hexvar ( sp ) move s3 , a0 sw s2 , hexvar ( sp ) move s2 , a2 sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move s1 , a1 lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw t9 , - hexvar ( gp ) jalr t9 nop move a0 , s0 lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a1 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) beqz s1 , hexvar lw t9 , - hexvar ( gp ) addiu a3 , zero , num sw zero , hexvar ( sp ) addiu a1 , zero , num move a2 , s1 jalr t9 move a0 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop move a0 , s0 lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a1 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) beqz s2 , hexvar lw t9 , - hexvar ( gp ) addiu a3 , zero , num sw zero , hexvar ( sp ) addiu a1 , zero , num move a2 , s2 jalr t9 move a0 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop move v0 , s0 lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu a3 , zero , num sw zero , hexvar ( sp ) move a2 , zero addiu a1 , zero , num jalr t9 move a0 , v0 b hexvar lw gp , hexvar ( sp ) addiu a3 , zero , num sw zero , hexvar ( sp ) move a2 , zero addiu a1 , zero , num jalr t9 move a0 , v0 b hexvar lw gp , hexvar ( sp ) lui a1 , hexvar lw t9 , - hexvar ( gp )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lw v0 , hexvar ( sp ) bnez v0 , hexvar nop addiu v0 , zero , - num b hexvar nop lw v0 , hexvar ( sp ) bgez v0 , hexvar nop addiu v0 , zero , - num sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) addiu v0 , v0 , num sw v0 , hexvar ( sp ) b hexvar nop lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , ( v0 ) lw a1 , hexvar ( sp ) move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) bnez v0 , hexvar nop lw v0 , hexvar ( sp ) b hexvar nop lw v0 , hexvar ( sp ) addiu v0 , v0 , num sw v0 , hexvar ( sp ) lw v1 , hexvar ( sp ) lw v0 , hexvar ( sp ) slt v0 , v1 , v0 bnez v0 , hexvar nop addiu v0 , zero , - num lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push { r4 , r5 , r6 , r7 , r8 , sb , lr } sub sp , sp , hexvar mov r4 , r0 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r2 , [ r0 , hexvar ] ldr r1 , [ r2 , hexvar ] ldr r3 , [ r0 , hexvar ] ldr r3 , [ r3 , hexvar ] and r3 , r3 , num cmp r3 , num movne r5 , hexvar moveq r5 , hexvar ldr r3 , [ r0 , hexvar ] ldr r0 , [ r0 , hexvar ] ldr ip , [ r2 , hexvar ] ldr lr , [ r2 , hexvar ] adds r8 , r3 , ip adc sb , r0 , lr ldr ip , [ r2 , hexvar ] ldr r2 , [ r2 , hexvar ] subs r6 , ip , r3 sbc r7 , r2 , r0 mov r3 , num cmp r3 , r7 cmpeq r5 , r6 movhs r5 , r6 cmp r8 , num sbcs r3 , sb , num movlt r3 , num strlt r3 , [ r4 , hexvar ] mvnlt r0 , hexvar blt hexvar stm sp , { r8 , sb } mov r3 , r5 mov r2 , sp ldr r0 , [ r4 , hexvar ] bl hexvar cmp r0 , num blt hexvar cmp r0 , r5 ldrlo r3 , [ r4 , hexvar ] biclo r3 , r3 , num strlo r3 , [ r4 , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc } stcllo p0 , c3 , [ r6 , hexvar ] andeq r0 , r0 , r0
push ebp mov ebp , esp push esi sub esp , hexvar mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar cmp eax , num jbe hexvar mov eax , dword ptr [ hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + hexvar ] , num mov dword ptr [ ecx + num ] , num mov dword ptr [ ecx + num ] , num call hexvar cmp eax , num jne hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar cmp eax , num je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar cmp eax , num je hexvar mov byte ptr [ ebp - num ] , num test byte ptr [ ebp - num ] , num je hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ hexvar ] , num je hexvar call hexvar mov eax , dword ptr [ eax ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , num mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , esi lea esi , [ hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx call hexvar jmp hexvar call hexvar xor ecx , ecx mov eax , dword ptr [ eax ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx call hexvar jmp hexvar call hexvar test byte ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] and edx , esi sub edx , - num sete bl movzx esi , bl mov esi , dword ptr [ esi * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jmp esi mov eax , esp mov dword ptr [ eax ] , hexvar call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ hexvar ] mov esi , dword ptr [ hexvar ] mov edi , dword ptr [ hexvar ] mov ebx , esp mov dword ptr [ ebx + hexvar ] , edi mov dword ptr [ ebx + hexvar ] , esi mov dword ptr [ ebx + hexvar ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ ebx + num ] , edx mov dword ptr [ ebx + num ] , ecx mov dword ptr [ ebx ] , eax mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebx + hexvar ] , num call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push r14 push rbx push rax mov ebx , esi mov r14 , rdi mov edi , esi call hexvar add ebx , - hexvar cmp ebx , num ja hexvar jmp qword ptr [ rbx * num + hexvar ] mov qword ptr [ r14 + hexvar ] , rax mov edi , num call hexvar mov rcx , rax mov qword ptr [ r14 + hexvar ] , rax mov eax , num test rcx , rcx jne hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar mov qword ptr [ r14 + hexvar ] , rax call hexvar mov qword ptr [ r14 + hexvar ] , rax test rax , rax je hexvar mov rdi , qword ptr [ rax ] mov esi , num call hexvar mov ecx , eax mov eax , num test ecx , ecx jne hexvar mov rdi , qword ptr [ r14 + hexvar ] call hexvar mov qword ptr [ r14 + hexvar ] , num jmp hexvar mov qword ptr [ r14 + hexvar ] , rax call hexvar mov qword ptr [ r14 + hexvar ] , rax test rax , rax je hexvar mov rdi , qword ptr [ rax ] xor esi , esi call hexvar test eax , eax je hexvar mov edi , hexvar call hexvar mov rcx , qword ptr [ r14 + hexvar ] mov rcx , qword ptr [ rcx + hexvar ] jmp hexvar mov qword ptr [ r14 + hexvar ] , rax call hexvar mov qword ptr [ r14 + hexvar ] , rax test rax , rax je hexvar mov rdi , qword ptr [ rax ] mov esi , num call hexvar mov rax , qword ptr [ r14 + hexvar ] mov rdi , qword ptr [ rax ] mov esi , num call hexvar test eax , eax je hexvar mov edi , hexvar call hexvar mov rcx , qword ptr [ r14 + hexvar ] mov rcx , qword ptr [ rcx + hexvar ] jmp hexvar mov qword ptr [ r14 + hexvar ] , rax call hexvar mov qword ptr [ r14 + hexvar ] , rax test rax , rax je hexvar mov rdi , qword ptr [ rax ] xor esi , esi call hexvar mov ecx , eax mov eax , num test ecx , ecx je hexvar add rsp , num pop rbx pop r14 ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar xor eax , eax mov qword ptr [ rsp + hexvar ] , rax test rsi , rsi je hexvar mov ebp , edx mov r14 , rsi mov r13 , rdi call hexvar mov edx , hexvar test rax , rax je hexvar mov r12 , rax mov rdi , r14 call hexvar test eax , eax je hexvar mov rdi , r13 mov esi , ebp mov edx , hexvar call hexvar mov edx , hexvar test eax , eax je hexvar mov rdi , r14 call hexvar test eax , eax je hexvar mov edi , eax call hexvar xor ebx , ebx mov esi , hexvar mov rdi , r13 mov rdx , rax xor eax , eax call hexvar test eax , eax jle hexvar xor r15d , r15d mov esi , hexvar mov rdi , r13 xor eax , eax call hexvar mov ebp , num test eax , eax jg hexvar xor ebx , ebx xor eax , eax mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov qword ptr [ rsp + hexvar ] , rax xor r14d , r14d xor eax , eax mov qword ptr [ rsp + hexvar ] , rax xor r13d , r13d mov edx , hexvar jmp hexvar mov edx , hexvar xor r12d , r12d xor ebx , ebx xor eax , eax mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov qword ptr [ rsp + hexvar ] , rax xor r14d , r14d xor eax , eax mov qword ptr [ rsp + hexvar ] , rax xor r13d , r13d xor r15d , r15d mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov r8d , hexvar call hexvar mov rax , qword ptr [ rsp + hexvar ] mov ebp , eax test rbx , rbx je hexvar mov rdi , rbx mov rbp , rax call hexvar mov rdi , qword ptr [ rsp + hexvar ] test rdi , rdi je hexvar call hexvar mov rdi , qword ptr [ rsp + hexvar ] test rdi , rdi je hexvar call hexvar test r14 , r14 je hexvar mov rdi , r14 call hexvar mov rdi , qword ptr [ rsp + hexvar ] test rdi , rdi je hexvar call hexvar test r13 , r13 je hexvar mov rdi , r13 call hexvar test r12 , r12 je hexvar mov rdi , r12 call hexvar test r15 , r15 je hexvar mov rdi , r15 call hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r6 , [ sp , hexvar ] ldr r4 , [ pc , hexvar ] sub r5 , r6 , num add ip , r4 , r5 ldrb ip , [ ip , hexvar ] cmp ip , num popne { r4 , r5 , r6 , r7 , r8 , pc } mov lr , r3 mov ip , r1 ldrb r3 , [ r4 , hexvar ] ldr r1 , [ r0 ] ldr r2 , [ r2 ] cmp r3 , num sub r1 , r1 , num sub r3 , r2 , num ldr r0 , [ ip ] ldr r2 , [ lr ] bne hexvar bl hexvar cmp r0 , num pople { r4 , r5 , r6 , r7 , r8 , pc } ldr r7 , [ r4 , hexvar ] mov r2 , num sub r7 , r7 , num ldr r1 , [ pc , hexvar ] clz r7 , r7 mov r0 , num bl hexvar lsr r7 , r7 , num mov r3 , r6 mov r2 , r0 mov r1 , num mov r0 , r7 bl hexvar mov r3 , num add r4 , r4 , r5 strb r3 , [ r4 , hexvar ] pop { r4 , r5 , r6 , r7 , r8 , pc }
push rbx sub rsp , hexvar mov rbx , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax cmp dword ptr [ rip + hexvar ] , num je hexvar test esi , esi jne hexvar mov r8d , edx lea rcx , [ rip + hexvar ] mov rdx , - num mov esi , num mov eax , num call hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx ret
push r13 push r12 push rbp push rbx sub rsp , hexvar mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax test rdi , rdi je hexvar test byte ptr [ rdi ] , hexvar jne hexvar call hexvar test eax , eax jne hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi jne hexvar cmp byte ptr [ rip + hexvar ] , num jne hexvar cmp byte ptr [ rip + hexvar ] , num je hexvar mov qword ptr [ rip + hexvar ] , num mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov al , byte ptr [ hexvar ] and al , num movzx ecx , al mov dword ptr [ esp ] , ecx call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , ecx cmp dword ptr [ ebp - hexvar ] , num je hexvar xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ecx ] mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx + num ] mov esi , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ esi + hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov bl , byte ptr [ edi + hexvar ] and bl , num movzx edi , bl cmp edi , num setne bl mov edi , dword ptr [ ebp - hexvar ] mov bh , byte ptr [ edi + hexvar ] shr bh , num xor bh , hexvar mov dword ptr [ ebp - hexvar ] , eax mov al , hexvar mov ah , al xor ah , num xor al , hexvar or bh , ah or al , hexvar xor bh , hexvar and bh , al movzx edi , bh cmp edi , num setne al mov edi , esp mov dword ptr [ edi + hexvar ] , esi mov dword ptr [ edi + num ] , edx mov dword ptr [ edi ] , ecx movzx ecx , al and ecx , num mov dword ptr [ edi + hexvar ] , ecx movzx ecx , bl and ecx , num mov dword ptr [ edi + hexvar ] , ecx mov dword ptr [ edi + hexvar ] , num mov dword ptr [ edi + hexvar ] , num mov dword ptr [ edi + hexvar ] , num mov dword ptr [ edi + num ] , num call hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , - hexvar mov edx , ecx sub edx , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw s0 , hexvar ( sp ) move s0 , a1 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw a0 , num ( a1 )
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r13 , rdx mov r15 , rsi mov r12 , rdi mov rdi , rcx xor esi , esi call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax call hexvar mov ebp , hexvar test eax , eax jle hexvar mov rdi , rbx mov esi , hexvar mov edx , hexvar mov ecx , num xor r8d , r8d mov r9 , r13 call hexvar test eax , eax jle hexvar mov rax , qword ptr [ r13 + hexvar ] mov rcx , qword ptr [ rax + num ] movsxd r8 , dword ptr [ rax ] xor r14d , r14d mov rdx , rsp mov rdi , rbx xor esi , esi call hexvar test eax , eax jle hexvar mov edi , dword ptr [ rsp ] mov esi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov r14 , rax mov rax , qword ptr [ r13 + hexvar ] mov rcx , qword ptr [ rax + num ] movsxd r8 , dword ptr [ rax ] mov rdx , rsp mov rdi , rbx mov rsi , r14 call hexvar test eax , eax jle hexvar mov rdi , qword ptr [ r12 ] test rdi , rdi je hexvar movsxd rsi , dword ptr [ r15 ] call hexvar mov rdi , qword ptr [ r12 ] call hexvar mov qword ptr [ r12 ] , r14 mov eax , dword ptr [ rsp ] mov dword ptr [ r15 ] , eax mov ebp , num mov rdi , rbx call hexvar test r14 , r14 jne hexvar jmp hexvar mov ebp , hexvar jmp hexvar xor r14d , r14d mov rdi , rbx call hexvar test r14 , r14 je hexvar test ebp , ebp jne hexvar mov rdi , r14 call hexvar xor ebp , ebp mov eax , ebp add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push r14 push rbx push rax mov r14 , rsi call hexvar mov rbx , rax mov rdi , r14 call hexvar mov rdi , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rax + hexvar ] call hexvar mov dword ptr [ rsp + num ] , eax mov edx , hexvar mov ecx , hexvar jmp hexvar mov edx , hexvar xor eax , eax nop dword ptr [ rax + rax ] cmp edx , hexvar jg hexvar cmp edx , hexvar je hexvar cmp edx , hexvar jne hexvar cmp dword ptr [ rsp + num ] , num mov edx , hexvar cmove edx , ecx jmp hexvar nop word ptr [ rax + rax ] cmp edx , hexvar je hexvar cmp edx , hexvar jne hexvar jmp hexvar mov edx , hexvar mov eax , num jmp hexvar add rsp , num pop rbx pop r14 ret
push r14 push r13 push r12 push rbp mov r12 , rsi push rbx mov rbp , rdx mov rbx , rdi sub rsp , hexvar test rdx , rdx je hexvar mov r14 , rsi sub r14 , qword ptr [ rdi ] lea r13 , [ r14 + rdx + hexvar ] and r13 , hexvar cmp rdx , rcx ja hexvar cmp qword ptr [ rdi + hexvar ] , r13 je hexvar lea rax , [ rcx + hexvar ] and rax , hexvar jne hexvar test rcx , rcx jne hexvar mov rdx , qword ptr [ rbx + hexvar ] mov rcx , qword ptr [ rbx + hexvar ] sub rcx , rdx cmp rcx , rax jb hexvar mov r13 , qword ptr [ rbx ] add rax , rdx mov qword ptr [ rbx + hexvar ] , rax add r13 , rdx test rbp , rbp jne hexvar add rsp , hexvar mov rax , r13 pop rbx pop rbp pop r12 pop r13 pop r14 ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push r12 mov r12 , rsi push rbp mov rbp , rdx push rbx mov rbx , rdi jmp hexvar nop mov rbx , rax mov rax , qword ptr [ rbx + num ] test rax , rax jne hexvar mov rax , qword ptr [ rbx + hexvar ] test rax , rax jne hexvar mov rsi , rbx mov rdi , rbp call r12
push r14 push r13 push r12 push rbp mov rbp , rdi push rbx movzx ebx , byte ptr [ rsi ] test bl , bl je hexvar mov r12 , rsi call hexvar mov r14 , rax nop dword ptr [ rax ] mov rax , qword ptr [ r14 ] movsx r13 , bl add rbp , num test byte ptr [ rax + r13 * num + num ] , num je hexvar call hexvar mov rax , qword ptr [ rax ] movzx ebx , byte ptr [ rax + r13 * num ] add r12 , num mov byte ptr [ rbp - num ] , bl movzx ebx , byte ptr [ r12 ] test bl , bl jne hexvar mov byte ptr [ rbp ] , num pop rbx pop rbp pop r12 pop r13 pop r14 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) addiu v0 , sp , hexvar sw v0 , hexvar ( sp ) addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) beqz v0 , hexvar move s0 , a0 move s3 , a1 move s2 , a2 move s1 , a3 lw a1 , num ( a3 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r13 , rcx mov rbx , rdx mov r12 , rsi mov r15 , rdi mov rax , rcx shr rax , hexvar je hexvar movabs rax , hexvar lea rcx , [ r15 + hexvar ] mov qword ptr [ rsp + hexvar ] , rcx lea rbp , [ rax + num ] movabs r14 , hexvar mov qword ptr [ rsp + num ] , r13 nop dword ptr [ rax ] movabs rax , hexvar add r13 , rax mov rcx , qword ptr [ r15 + hexvar ] mov r9d , dword ptr [ r15 + hexvar ] mov rdi , rbx mov rsi , r12 mov rdx , rbp mov r8 , qword ptr [ rsp + hexvar ] call hexvar add rbx , r14 add r12 , r14 movabs rax , hexvar cmp r13 , rax ja hexvar mov r13 , qword ptr [ rsp + num ] movabs rax , hexvar and r13 , rax test r13 , r13 je hexvar mov rcx , qword ptr [ r15 + hexvar ] mov r9d , dword ptr [ r15 + hexvar ] add r15 , hexvar mov rdi , rbx mov rsi , r12 mov rdx , r13 mov r8 , r15 call hexvar mov eax , num add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov qword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , num mov al , byte ptr [ ebp + num ] and al , num mov byte ptr [ ebp - num ] , al cmp dword ptr [ hexvar ] , num je hexvar test byte ptr [ hexvar ] , num jne hexvar test byte ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ hexvar ] , num cmp dword ptr [ hexvar ] , num jne hexvar mov al , byte ptr [ ebp - num ] and al , num movzx ecx , al mov dword ptr [ esp ] , ecx call hexvar mov dword ptr [ hexvar ] , eax mov dl , byte ptr [ ebp - num ] and dl , num mov byte ptr [ hexvar ] , dl mov eax , dword ptr [ hexvar ] add esp , num pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , esp mov ecx , eax add ecx , - hexvar mov esp , ecx mov edx , esp mov esi , edx add esi , - hexvar mov esp , esi mov esi , esp mov edi , esi add edi , - hexvar mov esp , edi mov ebx , esp add ebx , - hexvar mov esp , ebx mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ edx - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ edx - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esi - hexvar ] , eax mov edx , dword ptr [ edx - hexvar ] mov dword ptr [ ebx ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edi , dword ptr [ edi ] sub esp , hexvar mov dword ptr [ esp ] , ebx mov dword ptr [ esp + num ] , edi call esi add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push { r0 , r1 , r2 , r3 } push { r4 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , num add r3 , sp , hexvar ldr r2 , [ r4 ] mov r1 , r3 ldr r0 , [ sp , hexvar ] str r2 , [ sp , num ] str r3 , [ sp ] bl hexvar ldr r2 , [ sp , num ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , num pop { r4 , lr } add sp , sp , hexvar bx lr bl hexvar andeq fp , r2 , r8 , lsl num
push ebp mov ebp , esp sub esp , hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar lea eax , [ hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , num call hexvar xor ecx , ecx mov dword ptr [ ebp - num ] , eax cmp ecx , dword ptr [ ebp - num ] jg hexvar xor eax , eax mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar jmp hexvar xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar jmp hexvar xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] call hexvar cmp eax , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax + hexvar ] mov ecx , dword ptr [ rax + hexvar ] shr ecx , num xor ecx , hexvar mov edx , hexvar mov esi , edx xor esi , num xor edx , hexvar or ecx , esi or edx , hexvar xor ecx , hexvar and ecx , edx mov dword ptr [ rbp - num ] , ecx jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , hexvar mov edx , num call hexvar cmp eax , num je hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar cmp eax , num je hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar cmp eax , num je hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar cmp eax , num je hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar cmp eax , num je hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar cmp eax , num je hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar cmp eax , num je hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar cmp eax , num je hexvar mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar cmp eax , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , hexvar mov edx , num call hexvar cmp eax , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov edi , num call hexvar mov dword ptr [ rbp - num ] , hexvar mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar add esp , hexvar pop ebp ret
test rsi , rsi push r12 push rbp push rbx je hexvar mov rbx , rsi mov edi , hexvar xor esi , esi mov r12d , edx call hexvar test rax , rax mov rbp , rax je hexvar mov edi , hexvar call hexvar mov dword ptr [ rax + hexvar ] , num mov qword ptr [ rax ] , rbx mov dword ptr [ rax + num ] , r12d mov qword ptr [ rbp + hexvar ] , rax mov rax , rbp pop rbx pop rbp pop r12 ret
push rbx mov rbx , rdi cmp dword ptr [ rdi + hexvar ] , hexvar jne hexvar mov rax , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rax + num ] mov rdi , rbx mov edx , hexvar xor ecx , ecx xor r8d , r8d xor r9d , r9d call hexvar mov dword ptr [ rbx + hexvar ] , hexvar mov qword ptr [ rbx + hexvar ] , hexvar mov rdi , rbx xor esi , esi call hexvar mov rdi , rbx mov esi , hexvar pop rbx jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ]
push esi sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar pop esi ret
push { fp , lr } add fp , sp , num sub sp , sp , num str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] ldr r0 , [ fp , - num ] bl hexvar ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - num ] bl hexvar mov r3 , r0 mov r0 , r3 sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov cl , byte ptr [ ebp + num ] cmp dword ptr [ ebp + hexvar ] , num mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , cl jne hexvar movzx eax , byte ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar movzx eax , byte ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
push rax test rdx , rdx je hexvar test rdi , rdi je hexvar mov eax , num cmp rsi , num jb hexvar mov cl , byte ptr [ rdi ] and cl , hexvar cmp cl , num jne hexvar movzx r10d , byte ptr [ rdi + num ] lea rcx , [ r10 + num ] cmp rcx , rsi ja hexvar xor eax , eax test r10b , r10b je hexvar lea rcx , [ r10 - num ] mov r8d , r10d and r8d , num cmp rcx , num jae hexvar mov r10d , num xor esi , esi test r8 , r8 jne hexvar jmp hexvar xor esi , esi jmp hexvar mov r9 , r8 sub r9 , r10 mov r10d , num xor esi , esi nop shl rsi , num movzx ecx , byte ptr [ rdi + r10 ] or rcx , rsi shl rcx , num movzx esi , byte ptr [ rdi + r10 + num ] or rsi , rcx shl rsi , num movzx ecx , byte ptr [ rdi + r10 + num ] or rcx , rsi shl rcx , num movzx esi , byte ptr [ rdi + r10 + num ] or rsi , rcx lea rcx , [ r9 + r10 ] add rcx , num add r10 , num cmp rcx , num jne hexvar test r8 , r8 je hexvar add rdi , r10 xor r9d , r9d shl rsi , num movzx ecx , byte ptr [ rdi + r9 ] or rsi , rcx add r9 , num cmp r8 , r9 jne hexvar mov qword ptr [ rdx ] , rsi pop rcx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , num ( v0 )
push ebp push edi mov eax , hexvar push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edx , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] test edx , edx je hexvar mov ebp , dword ptr [ ecx + num ] sub ebp , num js hexvar mov eax , dword ptr [ ecx ] mov dword ptr [ esp + num ] , edx xor edx , edx mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + num ] , eax nop mov eax , dword ptr [ esp + num ] mov esi , dword ptr [ eax + ebp * num ] push dword ptr [ esp + hexvar ] sub ebp , num push dword ptr [ esp + hexvar ] push edx push esi call hexvar add esp , hexvar cmp ebp , - num mov edx , eax jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar cmp dword ptr [ eax ] , num je hexvar call hexvar xor ecx , ecx mov dl , cl cmp dword ptr [ eax ] , hexvar mov byte ptr [ ebp - num ] , dl jne hexvar mov eax , dword ptr [ ebp + num ] mov cl , byte ptr [ eax + hexvar ] xor cl , hexvar mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
push rbp mov rbp , rsp movsd xmm1 , qword ptr [ rip + hexvar ] movsd xmm2 , qword ptr [ rip + hexvar ] movsd qword ptr [ rbp - num ] , xmm0 mov qword ptr [ rbp - hexvar ] , rdi subsd xmm2 , qword ptr [ rbp - num ] movsd qword ptr [ rbp - hexvar ] , xmm2 movaps xmm0 , xmm1 mulsd xmm0 , qword ptr [ rbp - num ] mulsd xmm0 , qword ptr [ rbp - num ] mulsd xmm0 , qword ptr [ rbp - num ] mov rdi , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdi + hexvar ] , xmm0 mulsd xmm1 , qword ptr [ rbp - hexvar ] mulsd xmm1 , qword ptr [ rbp - hexvar ] mulsd xmm1 , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdi ] , xmm1 mov rdi , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rbp - hexvar ] subsd xmm0 , qword ptr [ rdi ] movsd qword ptr [ rbp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] subsd xmm0 , qword ptr [ rdi ] addsd xmm0 , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdi + num ] , xmm0 movsd xmm0 , qword ptr [ rbp - num ] mov rdi , qword ptr [ rbp - hexvar ] subsd xmm0 , qword ptr [ rdi + hexvar ] subsd xmm0 , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdi + hexvar ] , xmm0 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov edx , num mov esi , num mov rdi , rax call hexvar mov eax , num leave ret
push rbp push rbx mov rbp , rdi sub rsp , num mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi je hexvar nop word ptr [ rax + rax ] mov rbx , qword ptr [ rdi ] call hexvar test rbx , rbx mov rdi , rbx jne hexvar add rsp , num mov rdi , rbp pop rbx pop rbp jmp hexvar nop word ptr cs : [ rax + rax ]
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , edx mov dword ptr [ ebp - num ] , eax call hexvar add esp , hexvar mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov esp , ebp pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] cmp rax , num jae hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , num mov edx , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] cmp eax , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov eax , dword ptr [ rbp - num ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp mov ecx , eax add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - num ] mov dword ptr [ eax - hexvar ] , edx mov eax , dword ptr [ eax - hexvar ] mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ecx ] mov dword ptr [ eax + hexvar ] , hexvar mov esp , ebp pop ebp ret
push rax cmp qword ptr [ rdi + hexvar ] , num je hexvar test byte ptr [ rdi + hexvar ] , num jne hexvar mov rax , qword ptr [ rdi + num ] mov rax , qword ptr [ rax + hexvar ] pop rcx jmp rax mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov eax , hexvar pop rcx ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , - num sete cl and cl , num movzx edx , cl mov dword ptr [ ebp - num ] , eax mov eax , edx add esp , num pop ebp ret
push r15 push r14 push rbx sub rsp , hexvar mov r15 , rsi mov r14 , rdi lea rax , [ rsi + hexvar ] mov qword ptr [ rsp + num ] , rax lea rax , [ rsi + hexvar ] mov qword ptr [ rsp + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] mov eax , dword ptr [ rax ] mov rcx , qword ptr [ rsp + num ] mov byte ptr [ rcx + rax ] , hexvar add rax , num mov qword ptr [ rsp + hexvar ] , rax mov eax , hexvar mov ebx , hexvar jmp hexvar mov rax , qword ptr [ rsp + hexvar ] cmp rax , hexvar mov eax , hexvar cmova eax , ebx mov rcx , qword ptr [ rsp + hexvar ] nop dword ptr [ rax ] cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar mov rdi , qword ptr [ rsp + num ] add rdi , qword ptr [ rsp + hexvar ] mov edx , hexvar sub rdx , qword ptr [ rsp + hexvar ] xor esi , esi call hexvar mov rsi , qword ptr [ rsp + num ] mov edx , num mov rdi , r15 call hexvar mov eax , hexvar xor ecx , ecx jmp hexvar mov rdi , qword ptr [ rsp + num ] add rdi , rcx mov edx , hexvar sub rdx , rcx xor esi , esi call hexvar mov rbx , qword ptr [ rsp + num ] mov eax , dword ptr [ r15 + hexvar ] bswap eax mov dword ptr [ rbx + hexvar ] , eax mov eax , dword ptr [ r15 + hexvar ] bswap eax mov dword ptr [ rbx + hexvar ] , eax mov edx , num mov rdi , r15 mov rsi , rbx call hexvar mov rax , qword ptr [ rsp + hexvar ] mov dword ptr [ rax ] , num mov esi , hexvar mov rdi , rbx call hexvar mov eax , dword ptr [ r15 ] bswap eax mov dword ptr [ r14 ] , eax mov eax , dword ptr [ r15 + num ] bswap eax mov dword ptr [ r14 + num ] , eax mov eax , dword ptr [ r15 + num ] bswap eax mov dword ptr [ r14 + num ] , eax mov eax , dword ptr [ r15 + hexvar ] bswap eax mov dword ptr [ r14 + hexvar ] , eax mov eax , dword ptr [ r15 + hexvar ] bswap eax mov dword ptr [ r14 + hexvar ] , eax mov eax , num add rsp , hexvar pop rbx pop r14 pop r15 ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , hexvar ja hexvar mov rax , qword ptr [ rbp - num ] lea rdx , [ rax * num ] lea rax , [ rip + hexvar ] mov eax , dword ptr [ rdx + rax ] movsxd rdx , eax lea rax , [ rip + hexvar ] add rax , rdx jmp rax lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar lea rax , [ rip + hexvar ] jmp hexvar mov eax , num pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) beqz v0 , hexvar nop sw s1 , hexvar ( sp ) addiu a3 , zero , hexvar lui a2 , hexvar addiu a2 , a2 , - hexvar addiu a1 , zero , num addiu a0 , zero , num lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) addiu a1 , sp , hexvar lui v0 , hexvar lw a0 , - hexvar ( v0 ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 addiu a3 , zero , hexvar lui a2 , hexvar addiu a2 , a2 , - hexvar addiu a1 , zero , num addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) move v0 , s0 lw a0 , hexvar ( sp ) lw v1 , - hexvar ( gp ) lw v1 , ( v1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar jal hexvar nop bnez v0 , hexvar lw gp , hexvar ( sp ) b hexvar move s0 , zero addiu a2 , zero , hexvar lui a1 , hexvar addiu a1 , a1 , - hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] movsd xmm0 , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax + hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - num ] , eax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push r12 push rbp mov rbp , rdi push rbx cmp qword ptr [ rdi ] , num jle hexvar xor ebx , ebx xor r12d , r12d nop word ptr [ rax + rax ] mov rax , qword ptr [ rbp + hexvar ] add r12 , num mov rdi , qword ptr [ rax + rbx + hexvar ] call hexvar mov rax , qword ptr [ rbp + hexvar ] mov rdi , qword ptr [ rax + rbx + hexvar ] add rbx , hexvar call hexvar cmp r12 , qword ptr [ rbp ] jl hexvar pop rbx mov rdi , qword ptr [ rbp + hexvar ] pop rbp pop r12 jmp hexvar nop
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ecx ] mov esi , dword ptr [ ecx + num ] mov edi , dword ptr [ ecx + num ] mov ecx , dword ptr [ ecx + hexvar ] mov ebx , esp mov dword ptr [ ebx + hexvar ] , ecx mov dword ptr [ ebx + hexvar ] , edi mov dword ptr [ ebx + num ] , esi mov dword ptr [ ebx + num ] , edx mov dword ptr [ ebx ] , hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , num mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar setb cl movzx edx , cl mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp edx mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] movzx eax , byte ptr [ eax + ecx + hexvar ] mov ecx , esp mov dword ptr [ ecx + num ] , eax mov dword ptr [ ecx ] , hexvar call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] inc eax mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , lr } mov r4 , r1 ldr r3 , [ r1 ] ldr r1 , [ r1 , num ] mov r5 , r0 cmp r3 , r1 sub sp , sp , hexvar ldr r0 , [ r4 , num ] beq hexvar add r1 , r0 , r3 , lsl num mov r0 , r5 bl hexvar cmp r0 , num ldrne r3 , [ r4 ] addne r3 , r3 , num strne r3 , [ r4 ] add sp , sp , hexvar pop { r4 , r5 , pc }
addiu sp , sp , - hexvar lui gp , hexvar sw s5 , hexvar ( sp ) addiu gp , gp , - hexvar sw s1 , hexvar ( sp ) lui s1 , hexvar sw s7 , hexvar ( sp ) addiu s7 , zero , num sw s6 , hexvar ( sp ) addiu s6 , zero , num sw s4 , hexvar ( sp ) ori s1 , s1 , hexvar sw s3 , hexvar ( sp ) move s4 , a0 sw s2 , hexvar ( sp ) move s3 , a1 sw s0 , hexvar ( sp ) move s2 , a2 sw ra , hexvar ( sp ) move s0 , a3 sw fp , hexvar ( sp ) sw gp , hexvar ( sp ) lw s5 , hexvar ( sp ) lw a1 , num ( s3 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jmp edx mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + hexvar ] sub eax , ecx setb dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] imul ecx , ecx , hexvar mov eax , dword ptr [ eax + ecx + hexvar ] not eax shr eax , hexvar mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] imul ecx , ecx , hexvar mov eax , dword ptr [ eax + ecx + hexvar ] and eax , hexvar sub eax , hexvar sete dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] imul ecx , ecx , hexvar mov eax , dword ptr [ eax + ecx + hexvar ] and eax , hexvar sub eax , hexvar sete dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] inc eax mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] sub rdi , num setne al movzx ecx , al mov edx , ecx mov rdx , qword ptr [ rdx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi jmp rdx mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - num ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) sw zero , hexvar ( fp ) b hexvar nop lw v0 , hexvar ( fp ) sll v0 , v0 , num lw v1 , hexvar ( fp ) addu v0 , v1 , v0 lw v0 , ( v0 ) move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move v1 , v0 lw v0 , - hexvar ( gp ) sw v1 , hexvar ( v0 ) lw v0 , hexvar ( fp ) sll v0 , v0 , num lw v1 , hexvar ( fp ) addu v0 , v1 , v0 lw v0 , ( v0 ) move a0 , v0 jal hexvar nop lw gp , hexvar ( fp ) xori v0 , v0 , num andi v0 , v0 , hexvar beqz v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( fp ) addiu v0 , v0 , num sw v0 , hexvar ( fp ) lw v1 , hexvar ( fp ) lw v0 , hexvar ( fp ) slt v0 , v1 , v0 beqz v0 , hexvar nop lw v0 , hexvar ( fp ) sll v0 , v0 , num lw v1 , hexvar ( fp ) addu v0 , v1 , v0 lw v0 , ( v0 ) addiu a1 , zero , num move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) xori v0 , v0 , num andi v0 , v0 , hexvar bnez v0 , hexvar nop lw v0 , hexvar ( fp ) bnez v0 , hexvar nop addiu v0 , zero , hexvar sh v0 , hexvar ( fp ) addiu v0 , fp , hexvar move a0 , v0 jal hexvar nop lw gp , hexvar ( fp ) b hexvar nop addiu v0 , zero , num lw v1 , - hexvar ( gp ) lw a0 , hexvar ( fp ) lw v1 , ( v1 ) beq a0 , v1 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push { r4 , r5 , r6 , lr } ldr lr , [ pc , hexvar ] ldr ip , [ lr ] ldrb r3 , [ ip ] sub r3 , r3 , hexvar cmp r3 , hexvar ldrls pc , [ pc , r3 , lsl num ] b hexvar andeq r1 , r1 , r0 , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , r0 , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , r4 , lsl num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , ip , ror num andeq r1 , r1 , r0 , ror num mov r4 , r1 mov r5 , num add r3 , ip , num str r3 , [ lr ] str ip , [ r0 ] ldr r6 , [ lr ] ldr r3 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] str r2 , [ r4 , hexvar ] str r5 , [ r4 ] mov r0 , r6 str r5 , [ r4 , num ] str r5 , [ r4 , hexvar ] str r1 , [ r3 ] bl hexvar mov r2 , r4 mov r1 , r0 mov r0 , r6 bl hexvar cmp r0 , num bne hexvar mov r0 , num pop { r4 , r5 , r6 , pc } ldrdeq r0 , r1 , [ r0 ] , -r5 andeq r0 , r0 , r0
push { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r5 , [ r1 ] ldr r3 , [ r1 , num ] cmp r5 , r3 bhs hexvar mov r8 , r2 mov sl , r0 mov r7 , r1 mov sb , num add r5 , r5 , num ldr fp , [ r5 , - num ] mov r6 , r5 cmp fp , num beq hexvar ldr r4 , [ r5 , - num ] cmp r4 , num bne hexvar b hexvar ldr r2 , [ r0 , num ] cmp r3 , num str r2 , [ r4 , num ] str r4 , [ r0 , num ] mov r4 , r3 beq hexvar ldr fp , [ r4 ] mov r0 , sl mov r1 , fp bl hexvar ldr r2 , [ r0 ] ldr r3 , [ r4 , num ] cmp r2 , num bne hexvar ldr r1 , [ sl , hexvar ] str fp , [ r0 ] add r1 , r1 , num str r1 , [ sl , hexvar ] str r2 , [ r4 ] ldr r2 , [ sl , hexvar ] cmp r3 , num str r2 , [ r4 , num ] str r4 , [ sl , hexvar ] mov r4 , r3 bne hexvar ldr fp , [ r5 , - num ] cmp r8 , num str sb , [ r5 , - num ] beq hexvar ldr r3 , [ r7 , num ] cmp r3 , r6 add r5 , r5 , num bhi hexvar mov r0 , num pop { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a3 move s0 , a2 move a1 , zero lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar addiu v1 , zero , hexvar sw v0 , hexvar ( sp ) sw v1 , hexvar ( sp ) move a3 , s1 move a2 , s0 move a0 , v0 jal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbx test rdi , rdi je hexvar mov r8 , rcx test rcx , rcx je hexvar lea eax , [ rdx - num ] cmp eax , num jae hexvar mov ebx , num cmp esi , num jne hexvar test edx , edx mov eax , num cmovne eax , edx xor ebx , ebx mov rsi , rdi mov edx , eax xor ecx , ecx call hexvar mov eax , ebx pop rbx ret
push { r4 , lr } mov r4 , r1 mov r1 , num bl hexvar cmp r0 , num popeq { r4 , pc } mov r3 , r0 mov r2 , hexvar mov r1 , r4 bl hexvar pop { r4 , pc }
lui v0 , hexvar lui gp , hexvar addiu sp , sp , - hexvar lbu v0 , hexvar ( v0 ) addiu gp , gp , - hexvar sw ra , hexvar ( sp ) beqz v0 , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lbu v0 , hexvar ( v0 ) bnez v0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop bltz v0 , hexvar lw gp , hexvar ( sp ) move v0 , zero lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui v0 , hexvar lbu v0 , hexvar ( v0 ) bnez v0 , hexvar lw t9 , - hexvar ( gp ) lui v0 , hexvar move v1 , a0 move a3 , a2 lbu v0 , hexvar ( v0 ) move a2 , a1 move a1 , v1 addiu v1 , zero , hexvar addiu a0 , zero , - hexvar movz v1 , zero , v0 jalr t9 sw v1 , hexvar ( sp ) bgez v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp )
push ebp mov ebp , esp push ebx push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] sub edx , num and ecx , edx cmp ecx , num setne bl and bl , num movzx ecx , bl mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebx pop ebp ret
push r13 push r12 mov r12 , rdi push rbp push rbx mov ebp , edx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov qword ptr [ rsp + num ] , rdi call hexvar cmp rax , - num je hexvar lea rdi , [ rsp + num ] mov rsi , rax mov rbx , rax call hexvar test rax , rax mov r13 , rax je hexvar mov edi , dword ptr [ rax + num ] mov rax , qword ptr [ rsp + num ] mov rax , qword ptr [ rax ] call qword ptr [ rax ] cmp eax , num jne hexvar mov rdi , qword ptr [ rsp + num ] xor edx , edx lea rcx , [ rsp + hexvar ] mov rsi , r13 mov rax , qword ptr [ rdi ] call qword ptr [ rax + hexvar ] mov rsi , rbx mov rdi , r12 call hexvar test rax , rax jne hexvar mov rax , qword ptr [ rsp + num ] mov rbx , qword ptr [ rsp + hexvar ] mov edi , dword ptr [ r13 + num ] mov rax , qword ptr [ rax ] add rbx , r13 call qword ptr [ rax + hexvar ] test eax , eax je hexvar cmp ebp , dword ptr [ rbx + num ] je hexvar sub eax , num lea rax , [ rbx + rax * num + num ] jmp hexvar nop dword ptr [ rax ] cmp dword ptr [ rbx + num ] , ebp je hexvar add rbx , num cmp rbx , rax jne hexvar mov esi , hexvar mov rdi , r12 call hexvar xor eax , eax mov rdx , qword ptr [ rsp + hexvar ] xor rdx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu v0 , zero , - num sw s6 , hexvar ( sp ) addiu a0 , zero , hexvar sw s2 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw s6 , - hexvar ( gp ) lw s2 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s5 , hexvar ( sp ) move s5 , a1 sw gp , hexvar ( sp ) addiu a1 , zero , num sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lw v0 , ( s6 ) sw v0 , hexvar ( sp ) jalr t9 nop lw a0 , ( s2 ) beqz a0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal - hexvar move a1 , zero beqz v0 , hexvar lw gp , hexvar ( sp ) lui v0 , hexvar sw zero , hexvar ( sp ) lui s4 , hexvar sw zero , hexvar ( sp ) sw v0 , hexvar ( sp ) lui v0 , hexvar lui s7 , hexvar sw zero , hexvar ( sp ) addiu v0 , v0 , hexvar sw zero , hexvar ( sp ) move s3 , zero sw zero , hexvar ( sp ) sw v0 , hexvar ( sp ) lui v0 , hexvar addiu s4 , s4 , hexvar addiu s7 , s7 , hexvar sw v0 , hexvar ( sp ) addiu s1 , s3 , num sll s0 , s1 , num addu s0 , s5 , s0 lw fp , ( s0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move a1 , a0 lui a0 , hexvar addiu a0 , a0 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbp mov rbp , rsp mov dword ptr [ rbp - num ] , edi cmp dword ptr [ rbp - num ] , hexvar je hexvar cmp dword ptr [ rbp - num ] , hexvar jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rcx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] add rax , - hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rcx ] mov qword ptr [ rdx + hexvar ] , rax mov rax , qword ptr [ rcx ] add rax , hexvar mov rdx , qword ptr [ rcx ] mov qword ptr [ rdx + hexvar ] , rax mov rax , qword ptr [ rcx ] add rax , hexvar mov rsp , rbp pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rdi , qword ptr [ rbp - num ] movsd xmm0 , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rbp - hexvar ] movabs rsi , hexvar mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , lr } mov r6 , r0 mov r4 , r1 mov r5 , r2 ldr r3 , [ r0 , num ] ldr r3 , [ r3 , hexvar ] mov r1 , r2 ldr r0 , [ r4 ] blx r3 ldr r3 , [ r6 , num ] ldr r3 , [ r3 , hexvar ] add r1 , r5 , num ldr r0 , [ r4 , num ] blx r3 ldr r3 , [ r6 , num ] ldr r3 , [ r3 , hexvar ] add r1 , r5 , num ldr r0 , [ r4 , num ] blx r3 ldr r3 , [ r6 , num ] ldr r3 , [ r3 , hexvar ] add r1 , r5 , hexvar ldr r0 , [ r4 , hexvar ] blx r3 ldr r3 , [ r6 , num ] ldr r3 , [ r3 , hexvar ] add r1 , r5 , hexvar ldr r0 , [ r4 , hexvar ] blx r3 ldr r3 , [ r6 , num ] ldr r3 , [ r3 , hexvar ] add r1 , r5 , hexvar ldr r0 , [ r4 , hexvar ] blx r3 ldr r3 , [ r6 , num ] ldr r3 , [ r3 , hexvar ] add r1 , r5 , hexvar ldr r0 , [ r4 , hexvar ] blx r3 ldr r3 , [ r6 , num ] ldr r3 , [ r3 , hexvar ] add r1 , r5 , hexvar ldr r0 , [ r4 , hexvar ] blx r3 ldr r3 , [ r6 , num ] ldr r3 , [ r3 , hexvar ] add r1 , r5 , hexvar ldr r0 , [ r4 , hexvar ] blx r3 ldr r3 , [ r6 , num ] ldr r3 , [ r3 , hexvar ] add r1 , r5 , hexvar ldr r0 , [ r4 , hexvar ] blx r3 pop { r4 , r5 , r6 , pc }
mov edx , dword ptr [ ebx + hexvar ] sub esp , hexvar push num push dword ptr [ ebp - hexvar ] push num push num push dword ptr [ edx ] mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar test eax , eax mov edx , dword ptr [ ebp - hexvar ] jne hexvar cmp dword ptr [ ebp - hexvar ] , num jne hexvar sub esp , hexvar push dword ptr [ edx ] call hexvar mov dword ptr [ ebp - hexvar ] , eax lea eax , [ ebx - hexvar ] add esp , hexvar push num push eax push num call hexvar mov edx , dword ptr [ ebp - hexvar ] push edx push eax push num push num call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebx + hexvar ] , eax jmp hexvar
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr r7 , [ r2 , hexvar ] mov r6 , r2 cmp r7 , num mov r4 , r0 mov r5 , r1 bne hexvar cmp r5 , hexvar bls hexvar tst r4 , num beq hexvar cmp r5 , hexvar add r7 , r6 , hexvar beq hexvar sub sb , r5 , hexvar lsr sb , sb , num add r8 , sb , num add r8 , r4 , r8 , lsl num mov r2 , hexvar mov r1 , r4 mov r0 , r7 add r4 , r4 , r2 bl hexvar mov r2 , r6 mov r1 , hexvar bl hexvar cmp r4 , r8 bne hexvar sub r5 , r5 , hexvar rsb sb , sb , sb , lsl num add r5 , r5 , sb , lsl num ldr r3 , [ r6 , hexvar ] mov r1 , r4 add r0 , r7 , r3 add r4 , r3 , r5 mov r2 , r5 bl hexvar cmp r4 , hexvar bhi hexvar str r4 , [ r6 , hexvar ] pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , - num jne hexvar call hexvar cmp dword ptr [ eax ] , hexvar jne hexvar call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] add rax , hexvar mov rsi , rax call hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] add rsp , hexvar pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] cmp r3 , num bne hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , num bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] cmn r3 , num bne hexvar ldr r3 , [ sp , hexvar ] mov r2 , num str r2 , [ r3 , hexvar ] b hexvar ldr r1 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] mov r1 , r3 ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r2 , [ r3 ] ldr r3 , [ sp , hexvar ] ldr r1 , [ r3 , hexvar ] ldr r3 , [ sp , num ] str r3 , [ sp ] mov r3 , r1 ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { pc }
push { r4 , lr } mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r2 , [ pc , hexvar ] mov r1 , r0 mov r0 , num bl hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r3 , [ pc , hexvar ] mov r1 , r0 ldr r2 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r1 , [ pc , hexvar ] mov r2 , num mov r0 , num bl hexvar pop { r4 , lr } ldr r3 , [ pc , hexvar ] ldr r1 , [ r3 ] b hexvar andeq r7 , r1 , r0 , lsl num andeq r7 , r1 , r8 , lsl r6 andeq r7 , r1 , r0 , lsr r6 andeq r6 , r1 , r4 , lsl num andeq r6 , r1 , ip , lsr num andeq r7 , r1 , r4 , asr num andeq r8 , r2 , r4 , asr r1
mov rax , qword ptr [ rdi ] cmp rax , hexvar sete cl cmp rax , hexvar sete dl or edx , ecx cmp rax , hexvar sete cl or dl , cl jne hexvar cmp rax , hexvar jne hexvar mov qword ptr [ rdi + hexvar ] , num ret
push { r4 , lr } sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] ldr r4 , [ r3 , hexvar ] ldr r1 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r3 , r3 , hexvar ldr r2 , [ sp , hexvar ] ldr r2 , [ r2 , num ] str r2 , [ sp , num ] str r3 , [ sp ] mov r3 , r1 ldr r2 , [ sp , num ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] blx r4 b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] cmp r3 , num beq hexvar ldr r1 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r3 , r3 , hexvar ldr r2 , [ sp , hexvar ] ldr r2 , [ r2 , hexvar ] str r2 , [ sp , num ] str r3 , [ sp ] mov r3 , r1 ldr r2 , [ sp , num ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar b hexvar ldr r1 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r3 , r3 , hexvar ldr r2 , [ sp , hexvar ] ldr r2 , [ r2 , hexvar ] str r2 , [ sp , num ] str r3 , [ sp ] mov r3 , r1 ldr r2 , [ sp , num ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { r4 , pc }
push ebp mov ebp , esp sub esp , hexvar fld xword ptr [ ebp + num ] fstp xword ptr [ ebp - hexvar ] fld xword ptr [ ebp - hexvar ] fldz fucomip st ( num ) fstp st ( num ) jbe hexvar jmp hexvar fld xword ptr [ ebp - hexvar ] fld dword ptr [ hexvar ] faddp st ( num ) fstp xword ptr [ ebp - hexvar ] jmp hexvar fld xword ptr [ ebp - hexvar ] fld dword ptr [ hexvar ] faddp st ( num ) fstp xword ptr [ ebp - hexvar ] fld xword ptr [ ebp - hexvar ] fstp xword ptr [ ebp - hexvar ] jmp hexvar fld xword ptr [ ebp - hexvar ] fstp xword ptr [ ebp - hexvar ] fnstcw word ptr [ ebp - hexvar ] mov ax , word ptr [ ebp - hexvar ] mov word ptr [ ebp - hexvar ] , hexvar fldcw word ptr [ ebp - hexvar ] mov word ptr [ ebp - hexvar ] , ax fld xword ptr [ ebp - hexvar ] fistp qword ptr [ ebp - hexvar ] fldcw word ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar test al , al movaps xmmword ptr [ rbp - hexvar ] , xmm7 movaps xmmword ptr [ rbp - hexvar ] , xmm6 movaps xmmword ptr [ rbp - hexvar ] , xmm5 movaps xmmword ptr [ rbp - hexvar ] , xmm4 movaps xmmword ptr [ rbp - hexvar ] , xmm3 movaps xmmword ptr [ rbp - hexvar ] , xmm2 movaps xmmword ptr [ rbp - hexvar ] , xmm1 movaps xmmword ptr [ rbp - hexvar ] , xmm0 mov qword ptr [ rbp - hexvar ] , r9 mov qword ptr [ rbp - hexvar ] , r8 mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , rdx mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdi je hexvar movaps xmm0 , xmmword ptr [ rbp - hexvar ] movaps xmmword ptr [ rbp - hexvar ] , xmm0 movaps xmm1 , xmmword ptr [ rbp - hexvar ] movaps xmmword ptr [ rbp - hexvar ] , xmm1 movaps xmm2 , xmmword ptr [ rbp - hexvar ] movaps xmmword ptr [ rbp - hexvar ] , xmm2 movaps xmm3 , xmmword ptr [ rbp - hexvar ] movaps xmmword ptr [ rbp - hexvar ] , xmm3 movaps xmm4 , xmmword ptr [ rbp - hexvar ] movaps xmmword ptr [ rbp - hexvar ] , xmm4 movaps xmm5 , xmmword ptr [ rbp - hexvar ] movaps xmmword ptr [ rbp - hexvar ] , xmm5 movaps xmm6 , xmmword ptr [ rbp - hexvar ] movaps xmmword ptr [ rbp - hexvar ] , xmm6 movaps xmm7 , xmmword ptr [ rbp - hexvar ] movaps xmmword ptr [ rbp - hexvar ] , xmm7 mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov edi , dword ptr [ rbp - hexvar ] mov r8 , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , r8 mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , num mov r9b , byte ptr [ rbp - hexvar ] and r9b , hexvar shr r9b , num movzx edi , r9b mov r8d , edi mov r8 , qword ptr [ r8 * num + hexvar ] jmp r8
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r4 , [ r2 , num ] sub sp , sp , hexvar cmp r4 , num streq r4 , [ r0 ] beq hexvar add r7 , r3 , r4 ble hexvar ldr ip , [ r2 , num ] sub ip , ip , num add r4 , ip , r4 , lsl num ldr lr , [ ip , num ] ! cmp r4 , ip add r7 , r7 , lr bne hexvar mov r8 , r2 ldr r2 , [ r1 , hexvar ] mov sb , r1 and r2 , r2 , r7 ldr r1 , [ r1 , hexvar ] add r2 , r2 , r2 , lsl num lsl r2 , r2 , num ldr sl , [ r1 , r2 ] mov fp , r3 cmp sl , num str r0 , [ sp , hexvar ] add r2 , r1 , r2 ble hexvar ldr r6 , [ r2 , num ] mov r5 , num sub r6 , r6 , num b hexvar cmp r5 , sl beq hexvar ldr r4 , [ r6 , num ] ! add r5 , r5 , num ldr r3 , [ r4 ] cmp r3 , r7 bne hexvar ldrb r3 , [ r4 , hexvar ] and r3 , r3 , hexvar cmp r3 , fp bne hexvar ldr r0 , [ r4 , hexvar ] cmp r0 , num beq hexvar mov r1 , r8 bl hexvar cmp r0 , num beq hexvar mov r0 , r4 add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } addsle r1 , r7 , hexvar andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov dword ptr [ rbp - hexvar ] , ecx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov qword ptr [ rbp - hexvar ] , num cmp dword ptr [ rbp - hexvar ] , num je hexvar cmp dword ptr [ rbp - hexvar ] , num je hexvar cmp dword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar jmp hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar mov ecx , dword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov esi , ecx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov esi , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov r8 , rcx mov ecx , num mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , - num jne hexvar mov rax , - num jmp hexvar cmp dword ptr [ rbp - hexvar ] , num je hexvar mov edx , hexvar jmp hexvar mov edx , hexvar mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - num ] xor rdi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
test rdi , rdi je hexvar mov ecx , dword ptr [ rip + hexvar ] mov eax , dword ptr [ rdi ] test ecx , ecx js hexvar cmp ecx , eax je hexvar ret
push { r4 , lr } ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar strheq r8 , [ r1 ] , -ip andeq r0 , r0 , pc , asr num andeq r8 , r1 , r0 , asr num andeq r8 , r1 , r4 , ror num
cmp dword ptr [ rip + hexvar ] , hexvar je hexvar ret nop dword ptr [ rax + rax ] cmp dword ptr [ rip + hexvar ] , num je hexvar movsxd rdx , dword ptr [ rip + hexvar ] lea rax , [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , num mov dword ptr [ rax + rdx * num ] , hexvar ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx jmp edx mov eax , dword ptr [ ebp + hexvar ] sub eax , hexvar sete cl movzx edx , cl mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp edx mov eax , dword ptr [ hexvar ] inc eax mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + hexvar ] sub eax , num sete cl movzx edx , cl mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp edx mov byte ptr [ hexvar ] , num mov eax , dword ptr [ hexvar ] mov ecx , eax sar ecx , hexvar shr ecx , hexvar add eax , ecx and eax , hexvar add eax , num mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + hexvar ] add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rsi ] mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov rsi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] setne cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] cmp rax , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar jmp hexvar add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax movsd xmm0 , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] movsd qword ptr [ rax + hexvar ] , xmm0 mov eax , num add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar xor eax , eax mov dword ptr [ esp ] , hexvar mov dword ptr [ esp + num ] , num lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ hexvar ] , eax cmp dword ptr [ hexvar ] , num jne hexvar call hexvar add esp , hexvar pop ebp ret
push { r4 , fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] mov r0 , num ldr ip , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] umull r1 , r2 , ip , r3 mov r3 , num mov r4 , num mov r3 , r2 mov r4 , num cmp r3 , num beq hexvar mov r0 , num cmp r1 , num bge hexvar mov r0 , num mov r3 , r0 and r3 , r3 , num and r3 , r3 , hexvar cmp r3 , num bne hexvar ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar bl hexvar ldr r3 , [ fp , - hexvar ] mov r0 , r3 sub sp , fp , num pop { r4 , fp , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] add rsp , hexvar pop rbp ret
addiu v0 , zero , num beq a1 , v0 , hexvar nop beqz a1 , hexvar lui v0 , hexvar addiu v0 , zero , num bne a1 , v0 , hexvar lui gp , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar addiu sp , sp , - hexvar addiu v0 , a1 , - hexvar addiu gp , gp , - hexvar sltiu v0 , v0 , num sw s1 , hexvar ( sp ) sw ra , hexvar ( sp ) move s1 , a1 sw s0 , hexvar ( sp ) bnez v0 , hexvar sw gp , hexvar ( sp ) addiu v0 , a1 , - hexvar sltiu v0 , v0 , num beqz v0 , hexvar addiu v0 , zero , hexvar bne a1 , v0 , hexvar addiu v1 , zero , num lbu v0 , ( a0 ) beq v0 , v1 , hexvar nop bnez v0 , hexvar lui a1 , hexvar lui v0 , hexvar b hexvar addiu v0 , v0 , hexvar jr ra addiu v0 , v0 , hexvar lui v0 , hexvar jr ra addiu v0 , v0 , hexvar lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , zero , num addiu a1 , a1 , hexvar move a0 , zero jalr t9 lui s0 , hexvar addiu a3 , zero , hexvar lw gp , hexvar ( sp ) addiu a2 , zero , num addiu a1 , zero , hexvar sw s1 , hexvar ( sp ) addiu a0 , s0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 sw v0 , hexvar ( sp ) addiu v0 , s0 , hexvar lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , zero , num b hexvar addiu a1 , a1 , hexvar lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , zero , num b hexvar addiu a1 , a1 , hexvar
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , num pop ebp ret
push { r4 , r5 , r6 , lr } mov r5 , r0 bl hexvar mov r4 , r0 add r0 , r0 , num bl hexvar mov ip , num strb ip , [ r0 , r4 ] mov r1 , r5 mov r2 , r4 pop { r4 , r5 , r6 , lr } b hexvar
mov eax , edi test edi , edi je hexvar cmp edi , num je hexvar cmp edi , num je hexvar cmp edi , num mov eax , hexvar mov edx , hexvar cmovne eax , edx ret
sub rsp , hexvar test rsi , rsi js hexvar mov rdi , qword ptr [ rdi + hexvar ] je hexvar add rsi , num and rsi , hexvar jne hexvar call hexvar test rax , rax je hexvar add rsp , hexvar ret
push rbp lea rax , [ rip + hexvar ] push rbx xor edx , edx mov ebx , edi mov rdi , rsi sub rsp , hexvar mov rcx , rax jmp hexvar nop dword ptr [ rax ] add edx , num add rcx , hexvar cmp edx , hexvar je hexvar cmp dword ptr [ rcx ] , ebx jne hexvar lea rdx , [ rdx + rdx * num ] lea rsi , [ rax + rdx * num + num ] call hexvar xor eax , eax add rsp , hexvar pop rbx pop rbp ret
push { r4 , r5 , r6 , r7 , lr } sub sp , sp , hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , num ] ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar mov r7 , r0 mov r5 , r1 ldr r4 , [ r3 ] cmp r4 , num beq hexvar add r6 , r4 , hexvar mov r2 , hexvar mov r1 , sp mov r0 , r6 bl hexvar str r0 , [ r5 , hexvar ] ldr r3 , [ sp ] cmp r6 , r3 beq hexvar add r6 , r4 , hexvar mov r2 , hexvar mov r1 , sp mov r0 , r6 bl hexvar str r0 , [ r5 , hexvar ] ldr r3 , [ sp ] cmp r6 , r3 beq hexvar add r6 , r4 , hexvar mov r2 , hexvar mov r1 , sp mov r0 , r6 bl hexvar str r0 , [ r5 , hexvar ] ldr r3 , [ sp ] cmp r6 , r3 beq hexvar add r4 , r4 , hexvar mov r2 , num mov r1 , sp mov r0 , r4 bl hexvar str r0 , [ r5 , hexvar ] ldr r3 , [ sp ] cmp r4 , r3 beq hexvar ldr r3 , [ r7 , hexvar ] ldr r3 , [ r3 , num ] mov r0 , num str r3 , [ r5 , hexvar ] str r0 , [ r5 , hexvar ] ldr r2 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov edi , hexvar call hexvar xor esi , esi mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , rax mov edx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + num ] , hexvar mov edi , hexvar call hexvar mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rdx ] , rax mov edi , hexvar mov esi , num call hexvar mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rdx + hexvar ] , rax mov edi , hexvar mov esi , num call hexvar mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rdx + hexvar ] , rax mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax ] , num je hexvar mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] cmp qword ptr [ rax + hexvar ] , num jne hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov edi , dword ptr [ rax ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar mov r8d , hexvar movabs r9 , hexvar movabs r10 , hexvar mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov edi , num call hexvar xor eax , eax mov edi , eax call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov edi , hexvar mov qword ptr [ rax + hexvar ] , rdi mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s1 , a1 move s0 , a3 addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sw s1 , ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) slti v0 , v0 , hexvar bnez v0 , hexvar nop lui v0 , hexvar addiu a2 , v0 , - hexvar addiu a1 , zero , hexvar lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw v0 , hexvar ( fp ) beqz v0 , hexvar nop lw v0 , hexvar ( fp ) b hexvar nop addiu v0 , zero , hexvar sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw a1 , hexvar ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) lbu v1 , ( v0 ) lw v0 , hexvar ( fp ) sb v1 , ( v0 ) lw v0 , hexvar ( fp ) lbu v0 , ( v0 ) beqz v0 , hexvar nop lw v0 , hexvar ( fp ) addiu v1 , v0 , num lw v0 , hexvar ( fp ) addiu v0 , v0 , num addiu a2 , zero , num move a1 , v0 move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) b hexvar nop lw v0 , hexvar ( fp ) addiu v0 , v0 , num addiu a2 , zero , num move a1 , zero move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw v0 , hexvar ( fp ) lbu v1 , hexvar ( v0 ) lw v0 , hexvar ( fp ) sb v1 , hexvar ( v0 ) lw v0 , hexvar ( fp ) addiu v1 , v0 , hexvar lw v0 , hexvar ( fp ) addiu v0 , v0 , hexvar move a1 , v0 move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( fp ) nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rsi , qword ptr [ rbp - hexvar ] movabs rdi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ num ] call hexvar xor ecx , ecx mov esi , ecx mov rdi , qword ptr [ num ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax + num ] or ecx , hexvar mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + num ] , ecx mov rax , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi + hexvar ] , rax mov rdi , qword ptr [ num ] call hexvar add rsp , hexvar pop rbp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] mov r3 , num str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] cmp r3 , num beq hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] ldrb r3 , [ r3 , hexvar ] cmp r3 , hexvar bne hexvar ldr r3 , [ fp , - hexvar ] ldr r2 , [ r3 , num ] sub r3 , fp , hexvar ldr r1 , [ fp , - hexvar ] mov r0 , r3 bl hexvar mov r2 , r0 ldr r3 , [ fp , - hexvar ] str r2 , [ r3 , num ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] cmp r3 , num beq hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] ldr r2 , [ fp , - hexvar ] str r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] cmp r3 , num beq hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] ldrb r3 , [ r3 , hexvar ] cmp r3 , hexvar bne hexvar ldr r3 , [ fp , - hexvar ] ldr r2 , [ r3 , num ] sub r3 , fp , hexvar ldr r1 , [ fp , - hexvar ] mov r0 , r3 bl hexvar mov r2 , r0 ldr r3 , [ fp , - hexvar ] str r2 , [ r3 , num ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] cmp r3 , num beq hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] ldr r2 , [ fp , - hexvar ] str r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ fp , - num ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar sub sp , fp , num pop { fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
lui gp , hexvar lw t1 , ( a1 ) addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) beqz t1 , hexvar lw s2 , hexvar ( a0 ) move s7 , a3 move s3 , a2 move s5 , a0 move s6 , a1 move s0 , zero b hexvar addiu s4 , zero , num sltu v0 , s0 , t1 beqz v0 , hexvar move v0 , zero lw t0 , ( s3 ) sll v1 , s0 , num lw v0 , ( s2 )
push rbx mov ebx , edi cmp edi , num ja hexvar mov ebx , edi lea rdx , [ rip + hexvar ] movsxd rax , dword ptr [ rdx + rbx * num ] add rax , rdx jmp rax mov edx , num lea rsi , [ rip + hexvar ] mov edi , num call hexvar pop rbx ret
cmp rdi , hexvar ja hexvar lea rdx , [ rip + hexvar ] movsxd rax , dword ptr [ rdx + rdi * num ] add rax , rdx jmp rax nop word ptr [ rax + rax ] lea rax , [ rip + hexvar ] ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] test edi , edi je hexvar test esi , esi jne hexvar lea eax , [ ebx - hexvar ] push eax lea eax , [ ebx - hexvar ] push dword ptr [ esp + hexvar ] push eax push ebp call hexvar mov dword ptr [ esp ] , edi call hexvar add esp , hexvar test eax , eax je hexvar test esi , esi jne hexvar lea eax , [ ebx - hexvar ] mov dword ptr [ esp + hexvar ] , eax lea eax , [ ebx - hexvar ] mov dword ptr [ esp + num ] , eax jmp hexvar mov esi , esi lea edi , [ edi ] push eax push edx push dword ptr [ esp + hexvar ] push ebp call hexvar add esp , hexvar add esi , num sub esp , hexvar push edi call hexvar add esp , hexvar cmp esi , eax jge hexvar test esi , esi jle hexvar sub esp , num push dword ptr [ esp + hexvar ] push ebp call hexvar add esp , hexvar sub esp , num push esi push edi call hexvar mov edx , dword ptr [ eax + num ] add esp , hexvar test edx , edx je hexvar mov eax , dword ptr [ eax + num ] test eax , eax jne hexvar sub esp , num push edx push ebp call hexvar add esp , hexvar jmp hexvar lea esi , [ esi ] add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov al , num call hexvar cmp qword ptr [ rbp - num ] , num setne r9b mov dword ptr [ rbp - hexvar ] , eax mov byte ptr [ rbp - hexvar ] , r9b mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar xor esi , esi mov rax , qword ptr [ rbp - num ] mov rdi , rax mov edx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax movsd xmm0 , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 mov rcx , qword ptr [ rbp - num ] add rcx , hexvar mov qword ptr [ rbp - hexvar ] , rcx movsd xmm0 , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 movsd qword ptr [ rbp - hexvar ] , xmm2 movsd qword ptr [ rbp - hexvar ] , xmm3 movsd qword ptr [ rbp - hexvar ] , xmm4 movsd qword ptr [ rbp - hexvar ] , xmm5 cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rdi , qword ptr [ rbp - num ] movsd xmm0 , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rbp - hexvar ] movsd xmm2 , qword ptr [ rbp - hexvar ] movsd xmm3 , qword ptr [ rbp - hexvar ] movsd xmm4 , qword ptr [ rbp - hexvar ] movsd xmm5 , qword ptr [ rbp - hexvar ] mov esi , num call hexvar add rsp , hexvar pop rbp ret
push ebx sub esp , num call hexvar add eax , hexvar sub esp , num push dword ptr [ esp + hexvar ] lea edx , [ eax - hexvar ] push edx mov ebx , eax call hexvar add esp , hexvar add esp , num pop ebx ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] cmp ecx , num mov dword ptr [ ebp - num ] , eax jne hexvar mov eax , dword ptr [ hexvar ] add eax , num mov dword ptr [ hexvar ] , eax add esp , num pop ebp ret
ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ r3 , hexvar ] cmp r2 , num beq hexvar mov r2 , num mov r0 , num str r2 , [ r3 , hexvar ] bx lr push { r4 , lr } ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar andeq r0 , pc , r0 , lsr r8 strdeq r1 , r2 , [ r0 ] , -sb muleq pc , r4 , sl muleq pc , ip , sl
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
lea eax , [ ebp - hexvar ] push ebx mov ebx , ebp push eax lea eax , [ ebp - hexvar ] push hexvar push eax call hexvar lea eax , [ ebp - hexvar ] push ecx mov ebx , ebp push eax lea eax , [ ebp - hexvar ] push hexvar push eax call hexvar lea eax , [ ebp - hexvar ] push esi mov ebx , ebp push eax lea eax , [ ebp - hexvar ] push hexvar push eax call hexvar lea esi , [ esi ]
push ebx sub esp , num call hexvar add ebx , hexvar mov ecx , dword ptr [ esp + hexvar ] cmp dword ptr [ ecx + hexvar ] , num jne hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , num push dword ptr [ ecx + hexvar ] push dword ptr [ ecx + hexvar ] call hexvar test eax , eax setg al add esp , hexvar pop ebx ret
push ebp mov ebp , esp push edi sub esp , hexvar test byte ptr [ hexvar ] , num jne hexvar jmp hexvar mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , num lea eax , [ ebp - hexvar ] xor ecx , ecx mov edx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , edx mov edi , dword ptr [ ebp - hexvar ] cld rep stosd dword ptr es : [ edi ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edi xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] or ecx , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ esp ] , num lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + hexvar ] , num lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar cmp eax , num jne hexvar call hexvar add esp , hexvar pop edi pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx cmp ecx , eax jne hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ hexvar ] , num jmp hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dl , cl mov ecx , dword ptr [ hexvar ] cmp dword ptr [ ecx ] , num mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , dl jge hexvar mov eax , dword ptr [ hexvar ] cmp dword ptr [ eax + num ] , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num lea ecx , [ hexvar ] lea edx , [ hexvar ] cmovne edx , ecx mov ecx , dword ptr [ hexvar ] cmp dword ptr [ ecx ] , num mov dword ptr [ ebp - hexvar ] , edx jge hexvar mov eax , dword ptr [ hexvar ] cmp dword ptr [ eax + num ] , num je hexvar mov eax , dword ptr [ hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] xor ecx , ecx mov dword ptr [ esp ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ esp ] , num call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar cmp eax , num je hexvar cmp eax , num jle hexvar cmp eax , num je hexvar cmp eax , num jne hexvar mov ebp , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ ebx + hexvar ] lea esi , [ eax * num ] mov dword ptr [ esp + hexvar ] , esi mov edx , dword ptr [ ebp + eax * num ] mov ecx , num lea edi , [ ebx - hexvar ] mov esi , edx repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta cl sbb cl , num test cl , cl jne hexvar add eax , num mov dword ptr [ ebx + hexvar ] , eax cmp eax , dword ptr [ ebx + hexvar ] jge hexvar call hexvar xor eax , num jmp hexvar cmp eax , num jne hexvar call hexvar jmp hexvar call hexvar jmp hexvar call hexvar jmp hexvar call hexvar mov ecx , num lea edi , [ ebx - hexvar ] mov esi , edx repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta dl sbb dl , num test dl , dl jne hexvar mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ ebp + edi + hexvar ] mov ecx , num lea edi , [ ebx - hexvar ] repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta dl sbb dl , num test dl , dl jne hexvar add eax , num mov dword ptr [ ebx + hexvar ] , eax call hexvar add dword ptr [ ebx + hexvar ] , num jmp hexvar test eax , eax jle hexvar mov eax , dword ptr [ ebx + hexvar ] cmp dword ptr [ ebx + hexvar ] , eax jge hexvar call hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] cmp esi , num ja hexvar sub esp , hexvar push esi call hexvar mov dword ptr [ esp + hexvar ] , eax call hexvar mov edi , dword ptr [ eax ] mov ebp , eax mov dword ptr [ esp ] , esi call hexvar add esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ ebp ] , edi add esp , hexvar mov eax , esi pop ebx pop esi pop edi pop ebp ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push { r4 , lr } mov r4 , r1 mov r1 , hexvar bl hexvar cmp r0 , num popeq { r4 , pc } mov r3 , num str r3 , [ r0 , num ] ldr r3 , [ r4 , hexvar ] cmp r3 , num strne r0 , [ r3 ] streq r0 , [ r4 , hexvar ] str r0 , [ r4 , hexvar ] pop { r4 , pc }
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] xor rax , rdx mov edx , num div qword ptr [ rbp - hexvar ] mov rax , rdx pop rbp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] test esi , esi je hexvar test edi , edi je hexvar lea eax , [ edi + edi * num + num ] lea ebp , [ ebx - hexvar ] sub esp , num push hexvar push ebp push eax call hexvar add esp , hexvar test eax , eax je hexvar test edi , edi mov edx , eax jle hexvar lea ebp , [ esi + edi ] lea ecx , [ ebx - hexvar ] lea esi , [ esi ] movzx ebx , byte ptr [ esi ] add esi , num add edx , num shr bl , num movzx ebx , bl movzx ebx , byte ptr [ ecx + ebx ] mov byte ptr [ edx - num ] , bl movzx ebx , byte ptr [ esi - num ] and ebx , hexvar movzx ebx , byte ptr [ ecx + ebx ] mov byte ptr [ edx - num ] , bl cmp ebp , esi mov byte ptr [ edx - num ] , hexvar jne hexvar lea edx , [ edi + edi * num ] add edx , eax mov byte ptr [ edx - num ] , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
ldr r1 , [ r0 , hexvar ] push { r4 , r5 , r6 , lr } cmn r1 , hexvar bhi hexvar lsl r1 , r1 , num mov r4 , r0 bl hexvar subs r5 , r0 , num bne hexvar ldr r0 , [ r4 , hexvar ] cmp r0 , num beq hexvar ldr r1 , [ r4 , hexvar ] add r1 , r1 , num lsl r1 , r1 , num bl hexvar cmp r0 , num beq hexvar str r0 , [ r4 , hexvar ] ldrb r2 , [ r4 , hexvar ] ldr r3 , [ r4 , hexvar ] cmp r2 , num beq hexvar cmp r3 , num mov r0 , r4 ble hexvar pop { r4 , r5 , r6 , lr } b hexvar cmp r3 , num bgt hexvar ldr r1 , [ r4 , hexvar ] cmp r1 , num beq hexvar ldr ip , [ r4 , hexvar ] ldr r2 , [ r4 , hexvar ] ldr r3 , [ r4 , hexvar ] cmp ip , r2 movhs ip , r2 cmp ip , r3 bhi hexvar b hexvar ldr r1 , [ r4 , hexvar ] ldr r2 , [ r4 ] ldr r0 , [ r4 , hexvar ] add r2 , r2 , r3 ldrb r0 , [ r2 , r0 ] ldr r2 , [ r4 , num ] ldrb r1 , [ r1 , r0 ] strb r1 , [ r2 , r3 ] add r3 , r3 , num cmp ip , r3 bne hexvar str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] mov r0 , r5 pop { r4 , r5 , r6 , pc } strheq r0 , [ r0 ] , -r3 andeq r0 , r0 , r0
push esi push ebx call hexvar add ebx , hexvar sub esp , num mov edx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] test edx , edx je hexvar sub esp , num push dword ptr [ esp + hexvar ] push esi push edx call hexvar add esp , hexvar test eax , eax je hexvar mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , num add esp , num pop ebx pop esi ret
ldr r2 , [ r0 , hexvar ] ldr r3 , [ pc , hexvar ] cmp r2 , r3 beq hexvar mov r0 , num bx lr ldr r3 , [ r0 , num ] cmp r3 , num beq hexvar push { r4 , lr } bl hexvar pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ ecx ] mov ecx , dword ptr [ ecx + num ] sub esp , hexvar mov esi , esp mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ esi + num ] , edi mov dword ptr [ esi + num ] , ecx mov dword ptr [ esi ] , edx call hexvar mov dword ptr [ esp ] , eax call hexvar lea esp , [ ebp - num ] pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar add esp , num pop ebp ret
call hexvar add eax , hexvar mov eax , dword ptr [ esp + num ] mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ esp + num ] mov eax , dword ptr [ eax + hexvar ] ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov dword ptr [ rip + hexvar ] , num mov eax , dword ptr [ rip + hexvar ] mov edi , eax call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rip + hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov edx , dword ptr [ rip + hexvar ] mov eax , dword ptr [ rip + hexvar ] add eax , edx mov dword ptr [ rip + hexvar ] , eax mov eax , dword ptr [ rip + hexvar ] mov edx , dword ptr [ rbp - hexvar ] sub edx , eax mov eax , edx mov edi , eax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] sub rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] mov edi , eax call hexvar add qword ptr [ rbp - hexvar ] , hexvar mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - num ] jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , eax mov edi , hexvar call hexvar nop leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] jmp hexvar mov eax , num cmp rax , qword ptr [ rbp - num ] jne hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov qword ptr [ rax ] , num mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] test eax , eax je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar jmp hexvar nop leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov ecx , dword ptr [ rbp - hexvar ] lea rdx , [ rbp - hexvar ] lea rsi , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax je hexvar call hexvar mov eax , dword ptr [ rax ] mov rdx , qword ptr [ rbp - hexvar ] mov rcx , rdx lea rdx , [ rip + hexvar ] mov esi , eax mov edi , num mov eax , num call hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
mov rax , rdi cmp esi , num je hexvar test esi , esi jne hexvar mov dword ptr [ rax ] , num ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] movsd xmm0 , qword ptr [ rax + hexvar ] call hexvar add rsp , hexvar pop rbp ret
push r14 push rbx push rax mov rbx , rdi mov rdi , qword ptr [ rdi ] call hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov r14 , qword ptr [ rbx + num ] add r14 , hexvar cmp qword ptr [ r14 ] , num jne hexvar jmp hexvar mov rax , qword ptr [ rbx + num ] mov r14 , qword ptr [ rax + num ] test r14 , r14 je hexvar cmp qword ptr [ r14 ] , num jne hexvar call hexvar mov qword ptr [ r14 ] , rax test rax , rax je hexvar mov edi , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , qword ptr [ r14 ] mov rsi , rax call hexvar test eax , eax jne hexvar mov esi , hexvar mov rdi , rbx call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx mov rax , rbx add rsp , num pop rbx pop r14 ret
push rbx mov rax , rdi mov rdi , qword ptr [ rdi + hexvar ] cmp esi , num je hexvar cmp esi , num je hexvar mov ebx , hexvar cmp esi , num jne hexvar test rcx , rcx sete sil test edx , edx setg al xor ebx , ebx cmp edx , - num jl hexvar and al , sil jne hexvar add rdi , num mov rsi , rcx call hexvar test eax , eax jne hexvar mov eax , ebx pop rbx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ ebp - hexvar ] add ecx , num mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx lea edx , [ hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ esp ] , hexvar lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov dword ptr [ esp ] , num lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov dword ptr [ esp ] , num lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov dword ptr [ esp ] , num lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov dword ptr [ esp ] , hexvar lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rax , num mov rdi , rax mov rsi , rax movabs rdx , num call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] xor ecx , num mov dword ptr [ rax + hexvar ] , ecx mov rdi , qword ptr [ rbp - num ] call hexvar mov edx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rdx add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw zero , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , ( v0 ) move a1 , v0 lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) bgtz v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( sp ) lw v0 , ( v0 ) move a2 , v0 lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar nop lw v0 , hexvar ( sp ) addiu v0 , v0 , num sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sltiu v0 , v0 , hexvar bnez v0 , hexvar nop lw v0 , hexvar ( sp ) sltiu v0 , v0 , hexvar beqz v0 , hexvar nop addiu v0 , zero , num b hexvar nop move v0 , zero lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub ecx , hexvar sbb eax , num setb dl movzx esi , dl movsd xmm0 , qword ptr [ esi * num + hexvar ] cvtsd2ss xmm0 , xmm0 mov esi , dword ptr [ ebp - hexvar ] movss dword ptr [ esi + hexvar ] , xmm0 mov byte ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax ] add ecx , - num mov dword ptr [ eax ] , ecx mov byte ptr [ ebp - hexvar ] , num mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar str r3 , [ sp , num ] subs r4 , r1 , num beq hexvar mov r7 , r0 mov fp , r2 mov r5 , r4 mov r1 , r7 ldr r0 , [ r5 ] bl hexvar cmp r0 , num beq hexvar ldr r5 , [ r5 , hexvar ] cmp r5 , num bne hexvar mov r0 , r7 bl hexvar mov r8 , r0 ldr sl , [ pc , hexvar ] mov sb , num b hexvar ldr r3 , [ r5 , hexvar ] str r3 , [ fp ] mov r0 , num add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar movabs rax , hexvar mov rdi , rax mov rsi , rax movabs rdx , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num mov rdi , qword ptr [ rbp - num ] call hexvar mov edx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rdx add rsp , hexvar pop rbp ret
mov eax , dword ptr [ rsi + hexvar ] cmp eax , dword ptr [ rdx ] jae hexvar shl rax , num add rax , qword ptr [ rdx + num ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rsi + hexvar ] , rdx mov qword ptr [ rsi + hexvar ] , rax ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] mov r3 , r2 strb r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , hexvar ] str r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 bne hexvar ldr r3 , [ fp , - hexvar ] cmn r3 , hexvar beq hexvar bl hexvar ldrb r3 , [ fp , - hexvar ] cmp r3 , num beq hexvar ldr r3 , [ fp , - hexvar ] add r3 , r3 , hexvar ldr r1 , [ fp , - hexvar ] mov r0 , r3 bl hexvar str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] cmp r3 , num blt hexvar ldr r0 , [ fp , - num ] bl hexvar b hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , hexvar ] and r3 , r3 , num cmp r3 , num bne hexvar ldr r3 , [ fp , - hexvar ] cmp r3 , num blt hexvar ldr r0 , [ fp , - hexvar ] bl hexvar ldr r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] str r2 , [ r3 , hexvar ] mov r0 , r0 sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ eax ] cmp dword ptr [ edx ] , num setne bl mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov ecx , dword ptr [ ecx + num ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar lea esp , [ ebp - num ] pop ebx pop ebp ret
sub sp , sp , num str r0 , [ sp , num ] ldr r3 , [ sp , num ] asr r3 , r3 , num str r3 , [ sp , num ] ldr r3 , [ sp , num ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] b hexvar ldr r3 , [ sp , num ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] b hexvar ldr r3 , [ pc , hexvar ] mov r0 , r3 add sp , sp , num bx lr eoreq r2 , r5 , r0 , lsr num eoreq r2 , r5 , r4 , lsr num eoreq r2 , r5 , r8 , lsr num
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - num ] , eax mov rdx , qword ptr [ rip + hexvar ] jmp rdx mov dword ptr [ rip + hexvar ] , num mov rdi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax setg cl movzx eax , cl mov dword ptr [ rbp - num ] , eax mov rdx , qword ptr [ rip + hexvar ] jmp rdx mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , num ( v0 ) bnez v0 , hexvar nop lui v0 , hexvar addiu a3 , v0 , hexvar addiu a2 , zero , hexvar lui v0 , hexvar addiu a1 , v0 , hexvar lui v0 , hexvar addiu a0 , v0 , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw v0 , hexvar ( fp ) lw v0 , num ( v0 ) lw v0 , num ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov eax , dword ptr [ rbp - hexvar ] add eax , num cdqe mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rcx mov rdi , rax call hexvar mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rax , qword ptr [ rbp - num ] add rax , rdx mov byte ptr [ rax ] , num mov rax , qword ptr [ rbp - num ] leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 move s1 , a2 move a0 , a1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move a2 , s1 move a1 , v0 move a0 , s0 jal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar addiu v0 , zero , - num
addiu sp , sp , - hexvar addiu v1 , zero , hexvar sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lbu v0 , ( a1 ) lbu fp , num ( a1 ) lbu a3 , num ( a1 ) lbu t0 , num ( a1 ) sll v0 , v0 , hexvar sll fp , fp , hexvar sll a3 , a3 , num xor fp , v0 , fp xor fp , fp , t0 xor fp , fp , a3 sw fp , ( a2 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] test byte ptr [ hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax jne hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar test byte ptr [ hexvar ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + num ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + num ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add eax , - num mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ hexvar ] add eax , - num mov dword ptr [ hexvar ] , eax add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s4 , a0 move s1 , a1 move s2 , a2 move s3 , a3 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) addiu s0 , sp , hexvar move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a2 , zero move a1 , v0 move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) bnez v0 , hexvar move s0 , v0 addiu a0 , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move v0 , s0 lw a0 , hexvar ( sp ) lw v1 , - hexvar ( gp ) lw v1 , ( v1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar move a2 , s2 move a1 , s1 addiu a0 , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw a2 , hexvar ( sp ) move a1 , s3 addiu a0 , sp , hexvar lw t9 , - hexvar ( gp )
test rdi , rdi je hexvar mov rax , qword ptr [ rdi + hexvar ] test rax , rax jne hexvar mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rax + num ] test rax , rax je hexvar ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax cmp dword ptr [ esp + hexvar ] , - hexvar mov edi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] jne hexvar sub esp , hexvar push ebp call edi add esp , hexvar mov edi , eax mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] mov eax , edi jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 )
sll a0 , a0 , num addu a0 , a2 , a0 addiu a2 , a2 , hexvar lbu t4 , ( a1 ) sll t4 , t4 , hexvar lbu v0 , num ( a1 ) sll v0 , v0 , hexvar xor t4 , t4 , v0 lbu v0 , num ( a1 ) xor t4 , t4 , v0 lbu v0 , num ( a1 ) sll v0 , v0 , num xor t4 , t4 , v0 lw v0 , ( a0 )
push { r4 , r5 , r6 , r7 , lr } sub sp , sp , hexvar mov r5 , r0 mov r7 , r1 mov r6 , r2 mov r3 , num str r3 , [ sp ] mov r3 , num mov r2 , r3 ldr r0 , [ r0 , hexvar ] bl hexvar subs r4 , r0 , num beq hexvar ldrb r3 , [ r4 , hexvar ] sub r3 , r3 , num cmp r3 , num bls hexvar ldrb r3 , [ r4 , hexvar ] tst r3 , num beq hexvar tst r3 , num bne hexvar ldrb r2 , [ r4 , hexvar ] mov r3 , num strb r3 , [ r4 , hexvar ] str r6 , [ r4 , hexvar ] mov r3 , num str r3 , [ r4 , hexvar ] orr r3 , r2 , num bic r3 , r3 , num strb r3 , [ r4 , hexvar ] ldrb r3 , [ r4 , hexvar ] orr r3 , r3 , hexvar strb r3 , [ r4 , hexvar ] str r6 , [ r4 , hexvar ] ldrb r3 , [ r7 ] cmp r3 , hexvar bne hexvar ldr r3 , [ r5 , hexvar ] ldr r3 , [ r3 , num ] ldr r3 , [ r3 , hexvar ] ldr r3 , [ r3 , hexvar ] mov r2 , num mov r1 , r4 mov r0 , r5 blx r3 mov r0 , r4 add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc } andeq r0 , r0 , r0 svcvs hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , rsp add rax , - hexvar mov rsp , rax mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rdi , qword ptr [ rbp - num ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov word ptr [ rdi ] , ax movsx eax , word ptr [ rdi ] mov rsp , rbp pop rbp ret
push rbp push rbx push rax mov rax , qword ptr [ rdi + hexvar ] mov ebp , num test rax , rax je hexvar mov rbx , rdi mov rdx , rsp xor esi , esi xor ecx , ecx call rax test eax , eax jle hexvar mov rcx , qword ptr [ rsp ] mov edi , hexvar mov esi , hexvar mov rdx , rbx mov r8d , eax xor r9d , r9d call hexvar mov ebp , eax mov eax , ebp add rsp , num pop rbx pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar test rdi , rdi je hexvar cmp qword ptr [ rsp + hexvar ] , num je hexvar mov qword ptr [ rsp + hexvar ] , r9 cmp qword ptr [ rsp + hexvar ] , num je hexvar mov r13 , r8 mov rbx , rcx mov r12 , rdx mov r15 , rsi mov r14 , rdi mov edi , dword ptr [ rsp + hexvar ] call hexvar mov ebp , eax test eax , eax jne hexvar mov edi , dword ptr [ rsp + hexvar ] call hexvar mov ebp , eax test eax , eax je hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] ldr r3 , [ fp , - num ] ldr r3 , [ r3 ] cmp r3 , num beq hexvar ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - num ] bl hexvar b hexvar ldr r3 , [ fp , - num ] add r3 , r3 , hexvar ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] mov r0 , r3 bl hexvar mov r0 , r0 sub sp , fp , num pop { fp , pc }
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] ldr r1 , [ pc , hexvar ] ldr r0 , [ sp , num ] bl hexvar mov r0 , r0 add sp , sp , hexvar pop { pc }
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , num ] mov r3 , num str r3 , [ sp , num ] mov r3 , num str r3 , [ sp ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] str r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num beq hexvar ldr r3 , [ fp , - hexvar ] cmp r3 , num beq hexvar ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bge hexvar bl hexvar mov r3 , r0 ldr r3 , [ r3 ] cmp r3 , num bne hexvar mov r1 , hexvar ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - num ] mov r3 , num str r3 , [ fp , - hexvar ] ldr r2 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 beq hexvar ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - num ] bl hexvar mov r3 , r0 cmp r3 , num bge hexvar mov r3 , num str r3 , [ fp , - hexvar ] ldr r0 , [ fp , - num ] bl hexvar ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] mov r0 , r3 sub sp , fp , num pop { fp , pc }
push rbx xor esi , esi mov rbx , rdi mov qword ptr [ rdi + num ] , num xor eax , eax mov edi , hexvar call hexvar mov edx , eax mov dword ptr [ rbx ] , eax xor eax , eax test edx , edx js hexvar pop rbx ret
push { r4 , r5 , lr } sub sp , sp , hexvar mov r4 , r0 bl hexvar bl hexvar ldr r3 , [ pc , hexvar ] mov r5 , r0 ldr r0 , [ r3 ] bl hexvar ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] cmp r4 , num ldr r3 , [ r3 ] ldr r0 , [ r2 ] beq hexvar stm sp , { r4 , r5 } ldr r2 , [ pc , hexvar ] mov r1 , num bl hexvar add sp , sp , hexvar pop { r4 , r5 , pc }
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
mov eax , dword ptr [ esp + num ] mov edx , dword ptr [ esp + num ] mov dword ptr [ eax + hexvar ] , edx mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ eax + hexvar ] , edx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] lea edx , [ hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ ebp + num ] je hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar add esp , hexvar pop ebp ret
push r14 push r13 lea r13 , [ rdi + hexvar ] push r12 lea r12 , [ rdi + hexvar ] push rbp mov rbp , rdi push rbx jmp hexvar nop dword ptr [ rax + rax ] mov rax , qword ptr [ rbp + hexvar ] xor edx , edx mov rsi , rax mov rdi , rax call qword ptr [ rax + hexvar ] test rax , rax mov rbx , rax je hexvar mov edx , dword ptr [ rax ] cmp edx , hexvar jle hexvar cmp byte ptr [ rbp + hexvar ] , num je hexvar mov rax , qword ptr [ rbp + hexvar ] mov edx , num mov rsi , rax mov rdi , rax call qword ptr [ rax + hexvar ] lea rsi , [ rbx + hexvar ] mov rdi , r13 call hexvar mov rdi , r12 call hexvar test al , al mov r14d , eax je hexvar pop rbx mov eax , r14d pop rbp pop r12 pop r13 pop r14 ret
sub rsp , num movzx eax , byte ptr [ rdi + hexvar ] and eax , num cmp al , num jne hexvar movzx eax , byte ptr [ rsi + hexvar ] and eax , num cmp al , num jne hexvar mov rax , qword ptr [ rdi + num ] call qword ptr [ rax + hexvar ] jmp hexvar mov edi , num call hexvar mov eax , num add rsp , num ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rdi ] mov edi , eax shl rdi , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rdi + num ] mov edi , eax shl rdi , hexvar or rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rdi + num ] mov edi , eax shl rdi , num or rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rdi + num ] mov edi , eax or rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov edi , hexvar mov rcx , rdi xor rcx , qword ptr [ rbp - hexvar ] sub rcx , rdi mov rax , rcx pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ ebp - hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , hexvar mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax movsx eax , byte ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - num ] cmp eax , ecx mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar cmp eax , dword ptr [ ebp - hexvar ] setne dl mov dword ptr [ ebp - hexvar ] , hexvar and dl , num mov byte ptr [ ebp - hexvar ] , dl jmp hexvar mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub ecx , hexvar sbb eax , num setb dl movzx esi , dl movsd xmm0 , qword ptr [ esi * num + hexvar ] cvtsd2ss xmm0 , xmm0 mov esi , dword ptr [ ebp - hexvar ] movss dword ptr [ esi + hexvar ] , xmm0 mov byte ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ eax ] add ecx , - num mov dword ptr [ eax ] , ecx mov byte ptr [ ebp - hexvar ] , num mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
lui gp , num addiu sp , sp , - hexvar addiu gp , gp , num addiu v1 , zero , - num sw s1 , hexvar ( sp ) move s1 , a0 sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw a0 , hexvar ( a0 )
sub esp , hexvar push num push num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar xor ecx , ecx mov dword ptr [ ebp - num ] , eax cmp ecx , eax jae hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] cmp ecx , eax je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , esp mov dword ptr [ ecx + num ] , eax mov dword ptr [ ecx + num ] , hexvar mov dword ptr [ ecx ] , hexvar call hexvar cmp eax , num je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar cmp dword ptr [ ebp - num ] , num sete al and al , num mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] movsx ecx , byte ptr [ rax ] cmp ecx , num je hexvar mov rax , qword ptr [ rbp - hexvar ] movsx edi , byte ptr [ rax ] call hexvar mov cl , al mov rdx , qword ptr [ rbp - hexvar ] mov byte ptr [ rdx ] , cl mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax call hexvar lea rdx , [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rax call hexvar test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rip - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] movzx edx , byte ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax + hexvar ] , dl mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov esi , num mov rdi , rax call hexvar movd edx , xmm0 mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , edx mov eax , num jmp hexvar mov eax , num mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
ldr r3 , [ pc , hexvar ] push { r4 , lr } ldr r0 , [ r3 ] bl hexvar bl hexvar mov r2 , num ldr r4 , [ r0 ] ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar mov r1 , r4 mov r2 , r0 mov r0 , num bl hexvar andeq sb , r2 , ip , ror num strdeq r7 , r8 , [ r1 ] , -r0
push r13 push r12 mov r13 , rsi push rbp push rbx mov r12d , edx mov rbx , rdi xor edx , edx mov esi , hexvar sub rsp , num mov edi , num call hexvar mov qword ptr [ rax ] , r13 mov byte ptr [ rax + num ] , r12b mov rbp , rax call hexvar mov rcx , qword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rbx + hexvar ] lea rsi , [ rbx + hexvar ] mov qword ptr [ rbp + hexvar ] , rax mov edx , num xor r9d , r9d mov r8d , num call hexvar mov rdx , qword ptr [ rbx + hexvar ] mov qword ptr [ rbx + hexvar ] , rax lea rcx , [ rdx + num ] mov qword ptr [ rbx + hexvar ] , rcx mov qword ptr [ rax + rdx * num ] , rbp add rsp , num pop rbx pop rbp pop r12 pop r13 ret
mov eax , dword ptr [ rdi + hexvar ] test eax , eax jne hexvar push r12 push rbp mov r12 , rsi push rbx mov eax , dword ptr [ rdi + hexvar ] movsxd rbp , edx cmp dword ptr [ rdi + hexvar ] , eax mov rbx , rdi jl hexvar test eax , eax je hexvar cmp eax , hexvar jg hexvar add eax , eax mov dword ptr [ rdi + hexvar ] , eax cdqe mov rdi , qword ptr [ rdi + num ] lea rsi , [ rax * num ] call hexvar mov qword ptr [ rbx + num ] , rax lea edi , [ rbp + num ] movsxd rdi , edi call hexvar mov rdx , rbp mov rsi , r12 mov rdi , rax call hexvar mov byte ptr [ rax + rbp ] , num mov rcx , rax movsxd rax , dword ptr [ rbx + hexvar ] mov rdx , qword ptr [ rbx + num ] lea esi , [ rax + num ] mov dword ptr [ rbx + hexvar ] , esi mov qword ptr [ rdx + rax * num ] , rcx pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , eax mov dword ptr [ esp ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov eax , dword ptr [ ebp - num ] add esp , num pop ebp ret num
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + num ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp - num ] cmp eax , dword ptr [ ecx + hexvar ] mov eax , hexvar mov ecx , hexvar cmovle ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ ebp - num ] cmp dword ptr [ eax + hexvar ] , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , num mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , hexvar jmp hexvar add esp , hexvar pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rip ] jmp rsi mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rbp - hexvar ] test rax , rax sete cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num ] jmp rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rbp - hexvar ] sub rax , num sete cl movzx edx , cl mov esi , edx mov rsi , qword ptr [ rsi * num ] mov qword ptr [ rbp - hexvar ] , rax jmp rsi mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] add qword ptr [ rax ] , num lea rax , [ rax + num ] jb hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] mov rcx , qword ptr [ rbp - hexvar ] add qword ptr [ rax ] , rcx jae hexvar add qword ptr [ rax + num ] , num lea rax , [ rax + num ] jb hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] mov rcx , qword ptr [ rbp - num ] movsxd rcx , dword ptr [ rcx + num ] cmp qword ptr [ rax + rcx * num ] , num setne dl and dl , num movzx esi , dl mov rax , qword ptr [ rbp - num ] add esi , dword ptr [ rax + num ] mov dword ptr [ rax + num ] , esi pop rbp ret
push rbp push r14 push rbx sub rsp , hexvar mov ebp , esi mov rbx , rdi cmp esi , num jl hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] call hexvar test rax , rax je hexvar mov qword ptr [ rbx ] , rax add rbx , num add ebp , - num cmp ebp , num jg hexvar mov qword ptr [ rsp + num ] , rax mov r14d , num test ebp , ebp je hexvar call hexvar mov qword ptr [ rsp + num ] , rax test rax , rax je hexvar movsxd rdx , ebp lea rsi , [ rsp + num ] mov rdi , rbx call hexvar jmp hexvar mov qword ptr [ rsp + num ] , num xor r14d , r14d mov eax , r14d add rsp , hexvar pop rbx pop r14 pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s0 , a0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lhu v0 , hexvar ( a0 ) addiu v1 , zero , hexvar beq v0 , v1 , hexvar addiu v1 , zero , hexvar bne v0 , v1 , hexvar addiu a2 , zero , num lw v0 , hexvar ( s0 )
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov byte ptr [ ebp - hexvar ] , al mov eax , dword ptr [ ebp + hexvar ] sub ebx , eax inc ebx mov dword ptr [ ebp - hexvar ] , ebx mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp + hexvar ] jae hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi + num ] , edx mov dword ptr [ edi ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] add ecx , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] movsx ecx , byte ptr [ ebp + hexvar ] lea esi , [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar cmp eax , num jge hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar andi v0 , a1 , hexvar sw s0 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) lw s0 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw v1 , ( s0 ) sw v1 , hexvar ( sp ) bnez v0 , hexvar addiu v0 , sp , hexvar move a2 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar move a0 , v0 lw a0 , hexvar ( sp ) lw v1 , ( s0 ) bne a0 , v1 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar sw v0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop nop
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] ldr r2 , [ pc , hexvar ] ldr r1 , [ sp ] ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push rax add rdi , hexvar mov ecx , hexvar mov esi , num mov edx , hexvar mov r8d , hexvar call hexvar xor ecx , ecx cmp eax , num setg cl mov eax , ecx pop rcx ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] mov r3 , num str r3 , [ sp , hexvar ] ldr r0 , [ sp , num ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , num ] ldr r3 , [ r3 , num ] ldr r3 , [ r3 , num ] cmp r3 , num beq hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , num str r3 , [ sp , hexvar ] b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] ldr r1 , [ sp , hexvar ] mov r0 , r3 bl hexvar str r0 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar b hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r3 , r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] mov r0 , r3 bl hexvar mov r2 , r0 ldr r3 , [ sp , hexvar ] cmp r3 , r2 blt hexvar ldr r3 , [ sp , hexvar ] b hexvar mov r0 , r0 ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
mov r2 , r1 ldr r1 , [ r0 , hexvar ] ldr r3 , [ r2 , hexvar ] cmp r1 , r3 blt hexvar bgt hexvar ldr r3 , [ r0 , hexvar ] ldr r1 , [ r2 , hexvar ] subs r3 , r3 , r1 bne hexvar ldr r1 , [ r0 ] ldr r0 , [ r2 ] b hexvar mov r3 , num mov r0 , r3 bx lr mvn r3 , num b hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov dword ptr [ rbp - hexvar ] , edx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] mov edx , num mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax ] , edx mov eax , num leave ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } sub sp , sp , num mov r7 , r0 mov r4 , r1 mov sb , r2 mov r0 , r1 bl hexvar mov r5 , r0 add r0 , r0 , num bl hexvar subs r6 , r0 , num beq hexvar mov r2 , r5 mov r1 , r4 mov r0 , r6 bl hexvar cmp sb , num beq hexvar ldr r3 , [ sb ] ldr r2 , [ pc , hexvar ] cmp r3 , r2 bgt hexvar ldr r8 , [ pc , hexvar ] add r5 , r6 , r5 ldr sl , [ pc , hexvar ] b hexvar mov r3 , r4 cmp r4 , sl bgt hexvar add r4 , r3 , num str r3 , [ sp ] mov r3 , r8 mvn r2 , num mov r1 , num mov r0 , r5 bl hexvar mov r3 , num mov r2 , r3 mov r1 , r6 add r0 , r7 , hexvar bl hexvar cmp r0 , num bne hexvar cmp sb , num strne r4 , [ sb ] mov r0 , r6 add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r5 , [ r1 , hexvar ] ldr ip , [ r1 ] sub sp , sp , hexvar cmp r5 , num mov r4 , r1 mov sl , r2 mov fp , r3 ldr sb , [ ip ] mov r7 , r0 ldr r8 , [ sp , hexvar ] beq hexvar ldr r6 , [ r5 , hexvar ] cmp r6 , num beq hexvar ldr r3 , [ sp , hexvar ] str r0 , [ sp , num ] str r3 , [ sp , num ] str r8 , [ sp ] sub r3 , r2 , fp mov r2 , sb blx r6 cmp r0 , num mov r3 , r0 beq hexvar mov r0 , r3 add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } bhs hexvar andeq r0 , r0 , r0
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbp , rdi mov qword ptr [ rsp + num ] , rsi mov r13 , rdx mov r15 , rcx mov r14d , r8d mov rbx , r9 mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rax , qword ptr [ rdi + num ] mov r12 , qword ptr [ rax + hexvar ] mov r10 , qword ptr [ r12 + hexvar ] test r10 , r10 je hexvar sub rsp , num push r9 mov r9d , r8d mov r8 , rcx mov ecx , num mov eax , num call r10
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] mov r2 , hexvar ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 , hexvar ] mov r1 , hexvar mov r0 , r3 bl hexvar mov r3 , r0 cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 , hexvar ] mov r0 , r3 bl hexvar str r0 , [ fp , - num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r2 , [ fp , - num ] mov r1 , r3 ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 strb r3 , [ fp , - num ] ldr r0 , [ fp , - num ] bl hexvar ldrb r3 , [ fp , - num ] b hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r2 , [ pc , hexvar ] mov r1 , r3 ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 b hexvar mov r3 , num mov r0 , r3 sub sp , fp , num pop { fp , pc }
push ebx call hexvar add ebx , hexvar sub esp , hexvar push num mov eax , dword ptr [ esp + hexvar ] push dword ptr [ eax + hexvar ] push dword ptr [ esp + hexvar ] call hexvar cmp eax , num sbb eax , eax add esp , hexvar and eax , hexvar add eax , num pop ebx ret
push r12 push rbp mov r12 , rdx push rbx mov rbx , rdi mov rdi , rsi mov rsi , rcx mov rbp , rcx mov qword ptr [ rip + hexvar ] , hexvar call hexvar mov rdi , r12 lea r12 , [ rbx + hexvar ] mov rsi , rbp call qword ptr [ rip + hexvar ] nop word ptr cs : [ rax + rax ] mov rdi , rbx add rbx , hexvar mov rsi , rbp call qword ptr [ rip + hexvar ] cmp rbx , r12 jne hexvar pop rbx pop rbp pop r12 ret
push rbx sub rsp , hexvar mov ebx , esi mov dword ptr [ rsp + num ] , edx mov rax , qword ptr [ rdi ] mov qword ptr [ rsp + num ] , rax lea rdi , [ rsp + num ] lea rdx , [ rsp + hexvar ] lea rcx , [ rsp + hexvar ] lea r8 , [ rsp + hexvar ] lea r9 , [ rsp + num ] call hexvar test eax , eax jle hexvar add ebx , - hexvar mov esi , dword ptr [ rsp + hexvar ] mov eax , dword ptr [ rsp + hexvar ] mov edx , dword ptr [ rsp + num ] lea ecx , [ rsi + num ] shr ecx , num test eax , eax je hexvar test edx , edx je hexvar lea ecx , [ rcx + rcx * num ] add ecx , hexvar cmp ebx , ecx jae hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax add rsp , hexvar pop rbx ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] sub eax , - num sete bl movzx ecx , bl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar test eax , eax setne byte ptr [ ebp - num ] mov eax , dword ptr [ hexvar ] jmp eax mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebx pop ebp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] sub edx , esi setne bl movzx esi , bl mov esi , dword ptr [ esi * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jmp esi mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx add esp , hexvar pop esi pop ebx pop ebp ret
addiu sp , sp , - hexvar lui gp , hexvar addiu v0 , zero , - num sw s3 , hexvar ( sp ) lui s3 , hexvar sw s2 , hexvar ( sp ) move s2 , a0 addiu gp , gp , - hexvar sw s1 , hexvar ( sp ) sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw v0 , ( s2 ) lw a0 , hexvar ( s3 ) beqz a0 , hexvar addiu s1 , zero , num b hexvar addiu s4 , zero , - num jalr t9 nop jal hexvar lw a0 , ( v0 )
push { r4 , r5 , r6 , lr } mov r4 , r0 mvn r0 , hexvar ldr r3 , [ r4 , hexvar ] mov r5 , r1 and r3 , r3 , hexvar add r2 , r3 , num rsb r1 , r2 , hexvar cmp r1 , num add r6 , r4 , hexvar add r1 , r4 , r3 strb r0 , [ r1 , hexvar ] addhi r0 , r6 , r2 rsbhi r2 , r2 , hexvar bhi hexvar cmp r2 , hexvar beq hexvar mov r1 , num add r3 , r3 , hexvar add r3 , r4 , r3 add r2 , r4 , hexvar strb r1 , [ r3 ] , num cmp r2 , r3 bne hexvar mov r0 , r4 mov r1 , r6 bl hexvar mov r0 , r6 mov r2 , hexvar mov r1 , num bl hexvar ldr r3 , [ r4 , hexvar ] ldr r2 , [ r4 , hexvar ] lsl r3 , r3 , num orr r3 , r3 , r2 , lsr num lsl r2 , r2 , num mov r1 , r6 str r3 , [ r4 , hexvar ] str r2 , [ r4 , hexvar ] mov r0 , r4 bl hexvar ldr r3 , [ r4 ] mov r2 , hexvar str r3 , [ r5 ] ldr r3 , [ r4 , num ] mov r1 , num str r3 , [ r5 , num ] ldr r3 , [ r4 , num ] str r3 , [ r5 , num ] ldr r3 , [ r4 , hexvar ] str r3 , [ r5 , hexvar ] pop { r4 , r5 , r6 , lr } b hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
addiu sp , sp , - hexvar lui gp , hexvar lui t9 , hexvar addiu gp , gp , hexvar sw s3 , hexvar ( sp ) move a0 , zero sw s2 , hexvar ( sp ) move s3 , a1 sw gp , hexvar ( sp ) addiu a1 , zero , hexvar sw ra , hexvar ( sp ) addiu t9 , t9 , hexvar sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) jalr t9 move s2 , a3 beqz v0 , hexvar lw gp , hexvar ( sp ) lui s1 , hexvar lw t9 , - hexvar ( gp ) addiu a3 , zero , hexvar addiu a2 , zero , hexvar addiu a1 , s1 , - hexvar move a0 , v0 jalr t9 move s0 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw v0 , ( s2 ) lui a0 , hexvar lui v1 , hexvar sw zero , hexvar ( s0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , hexvar mov ecx , dword ptr [ ebp + num ] mov edx , ecx sub edx , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , edx xor edx , edx mov esi , dword ptr [ edi ] cmp esi , num je hexvar cmp esi , num je hexvar test esi , esi je hexvar lea eax , [ ebx - hexvar ] sub esp , hexvar xor esi , esi push hexvar push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] mov eax , esi jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] test rsi , rsi setne al movzx ecx , al mov esi , ecx mov rsi , qword ptr [ rsi * num ] jmp rsi mov rax , qword ptr [ rip ] jmp rax movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar test eax , eax sete cl movzx eax , cl mov edi , eax mov rdi , qword ptr [ rdi * num ] jmp rdi mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rbp - hexvar ] test rax , rax sete cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num ] jmp rax mov rdi , qword ptr [ rbp - hexvar ] mov esi , num call hexvar test eax , eax sete cl movzx eax , cl mov esi , eax mov rsi , qword ptr [ rsi * num ] jmp rsi mov rdi , qword ptr [ rip ] call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rip ] jmp rax mov rdi , qword ptr [ rip ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push r15 push r14 mov r15d , edi push r13 push r12 push rbp push rbx sub rsp , num mov r12 , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rip + hexvar ] mov rbp , qword ptr [ r12 + hexvar ] lea rbx , [ rax + num ] mov rsi , qword ptr [ rbp ] cmp rbx , rsi ja hexvar cmp r15d , hexvar mov qword ptr [ rip + hexvar ] , rbx movzx eax , byte ptr [ rax ] jne hexvar sar eax , num cmp dword ptr [ rip + hexvar ] , num je hexvar and eax , num mov edx , dword ptr [ rip + hexvar ] cmp edx , hexvar je hexvar cmp edx , hexvar jne hexvar mov rdx , qword ptr [ rip + hexvar ] cdqe mov rdi , qword ptr [ rip + hexvar ] mov rsi , qword ptr [ rdx + rax * num ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , num pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , edx sar esi , hexvar mov edi , dword ptr [ ebp + hexvar ] mov ebx , esp mov dword ptr [ ebx + num ] , edi mov dword ptr [ ebx + num ] , esi mov dword ptr [ ebx ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r7 , r1 sub sp , sp , hexvar ldr sl , [ pc , hexvar ] ldr r6 , [ sp , hexvar ] ldr r1 , [ sl ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r6 , num mov sb , r0 mov fp , r2 str r1 , [ sp , hexvar ] ldr r8 , [ r7 , hexvar ] str r3 , [ sp , num ] ldr r4 , [ sp , hexvar ] beq hexvar mov r5 , num ldrb r3 , [ r4 , hexvar ] lsrs r3 , r3 , num bne hexvar ldr r2 , [ r4 , num ] ldr r1 , [ r8 , hexvar ] mov r0 , r7 bl hexvar cmp r0 , num beq hexvar mov r1 , sb bl hexvar cmp r0 , num beq hexvar add r5 , r5 , num cmp r5 , r6 add r4 , r4 , hexvar bne hexvar mov r3 , num mov r4 , num ldr r2 , [ fp ] mov r1 , sb ldr r0 , [ r2 , hexvar ] mov r2 , r3 str r4 , [ sp ] bl hexvar cmp r0 , num beq hexvar ldrb r3 , [ r0 , hexvar ] sub r3 , r3 , num cmp r3 , r4 movhi r0 , num bls hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sl ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp push rbx sub rsp , num mov rbx , rdi mov rbp , rsi mov rdi , rsi call qword ptr [ rbx ] mov edx , eax mov rsi , rbp mov rdi , rbx call hexvar add rsp , num pop rbx pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) sw s2 , hexvar ( sp ) move s2 , a1 sw s1 , hexvar ( sp ) move s1 , a0 sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s0 ) sw v0 , hexvar ( sp ) beqz a3 , hexvar lw t9 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) move a0 , s2 jalr t9 lw a1 , hexvar ( s1 )
sub esp , num push dword ptr [ ebp - hexvar ] lea eax , [ ebp - hexvar ] push eax push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add dword ptr [ ebp - hexvar ] , eax sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] test eax , eax je hexvar cmp dword ptr [ ebp - hexvar ] , num je hexvar cmp dword ptr [ ebp - hexvar ] , hexvar ja hexvar sub esp , num push dword ptr [ ebp - hexvar ] lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar jmp hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar jmp hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar sub esp , hexvar push eax call hexvar add esp , hexvar nop jmp hexvar
push esi push ebx call hexvar add ebx , hexvar sub esp , num mov esi , dword ptr [ esp + hexvar ] mov eax , esi call hexvar sub esp , hexvar push esi call hexvar add esp , hexvar pop ebx pop esi ret
push r14 push r13 mov r14 , rsi push r12 push rbp mov rbp , rdi push rbx mov edi , hexvar sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar test rax , rax je hexvar mov r12 , rax mov dword ptr [ rsp ] , hexvar mov dword ptr [ rsp + num ] , hexvar mov dword ptr [ rsp + num ] , hexvar mov dword ptr [ rsp + hexvar ] , hexvar mov dword ptr [ rsp + hexvar ] , num mov dword ptr [ rsp + hexvar ] , num mov dword ptr [ rsp + hexvar ] , num xor ebx , ebx mov r13d , hexvar jmp hexvar nop test rax , rax je hexvar test byte ptr [ rbp ] , hexvar jne hexvar lea rdi , [ r12 + rbx ] mov rdx , r13 mov rcx , rbp sub rdx , rbx mov esi , num call hexvar add rbx , rax cmp rbx , hexvar jne hexvar mov rdx , rsp mov esi , hexvar mov rdi , r12 call hexvar jmp hexvar test byte ptr [ rbp ] , hexvar jne hexvar test rbx , rbx jne hexvar mov rsi , r14 mov rdi , rsp call hexvar mov rdi , r12 call hexvar xor eax , eax mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s3 , hexvar ( sp ) move s3 , a0 sw s2 , hexvar ( sp ) move s2 , a2 sw s1 , hexvar ( sp ) move s1 , a3 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a0 , v0 jalr t9 move s0 , v0 lw gp , hexvar ( sp ) lw a1 , hexvar ( s1 )
mov ecx , num mov eax , num mov r10d , hexvar mov r9d , num jmp hexvar mov byte ptr [ rdi ] , hexvar cmp ecx , num jle hexvar lea r8d , [ rcx + num ] mov eax , r8d imul r10d sar edx , num mov eax , r8d sar eax , hexvar sub edx , eax lea eax , [ rdx + hexvar ] mov byte ptr [ rdi + num ] , al lea eax , [ rdx + rdx * num ] add eax , eax sub r8d , eax add r8d , hexvar mov byte ptr [ rdi + num ] , r8b lea rdi , [ rdi + num ] mov eax , r9d shr esi , num add ecx , num cmp ecx , hexvar je hexvar test sil , num je hexvar test eax , eax je hexvar mov byte ptr [ rdi ] , hexvar lea rdi , [ rdi + num ] jmp hexvar lea eax , [ rcx + hexvar ] mov byte ptr [ rdi + num ] , al lea rdi , [ rdi + num ] mov eax , r9d jmp hexvar mov byte ptr [ rdi ] , num ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 move s2 , a1 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) addiu a1 , zero , num addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) beqz v0 , hexvar move a1 , zero move a1 , zero lw v0 , - hexvar ( gp ) lw a0 , ( v0 ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s6 , v0 move a1 , zero lw v0 , - hexvar ( gp ) lw a0 , ( v0 ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar nop addiu s0 , s0 , - num blez s0 , hexvar addiu s2 , s2 , num sw zero , hexvar ( sp ) move s7 , zero move s4 , zero lui s3 , hexvar addiu s3 , s3 , hexvar lui s5 , hexvar addiu s5 , s5 , hexvar lui v0 , hexvar addiu v0 , v0 , - hexvar sw v0 , hexvar ( sp ) lui v0 , hexvar addiu v0 , v0 , - hexvar sw v0 , hexvar ( sp ) b hexvar lui fp , hexvar lw v0 , - hexvar ( gp ) lw a0 , ( v0 ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw v1 , - hexvar ( gp ) b hexvar sw v0 , ( v1 ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) b hexvar sw v0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) b hexvar sw v0 , hexvar ( sp ) addiu s4 , zero , num addiu s0 , s0 , - num beqz s0 , hexvar addiu s2 , s2 , num lw s1 , ( s2 )
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ ebp + num ] movzx ecx , byte ptr [ ebp + num ] add ecx , - hexvar mov edx , ecx sub edx , hexvar mov byte ptr [ ebp - num ] , al mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx movzx eax , byte ptr [ ebp + num ] sub eax , hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov dword ptr [ ebp - num ] , hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , lr } subs r6 , r2 , num beq hexvar mov r5 , r1 mov r4 , r0 bl hexvar sub r3 , r4 , num ldr ip , [ r0 ] add r6 , r3 , r6 sub r1 , r5 , num ldrb r4 , [ r3 , num ] ! ldrb lr , [ r1 , num ] ! ldr r0 , [ ip , r4 , lsl num ] ldr r2 , [ ip , lr , lsl num ] subs r0 , r0 , r2 popne { r4 , r5 , r6 , pc }
sub esp , num push num lea eax , [ ebx - hexvar ] push eax push num call hexvar add esp , hexvar sub esp , num push eax lea eax , [ ebx - hexvar ] push eax push num call hexvar add esp , hexvar cmp dword ptr [ esp + hexvar ] , num jne hexvar sub esp , num push num push esi mov eax , dword ptr [ esp + hexvar ] call dword ptr [ eax ] mov esi , eax add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] cmp eax , num ja hexvar mov ecx , ebx add ecx , dword ptr [ ebx + eax * num - hexvar ] jmp ecx
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push rbp push rbx mov rbp , rdi mov rdi , rsi mov esi , hexvar mov rbx , rdx sub rsp , hexvar call hexvar test eax , eax jne hexvar cmp byte ptr [ rbx + hexvar ] , num jne hexvar add rsp , hexvar pop rbx pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lbu v0 , hexvar ( v0 ) beqz v0 , hexvar lui v0 , hexvar lui v0 , hexvar lbu v0 , hexvar ( v0 ) bnez v0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) bltz v0 , hexvar lw t9 , - hexvar ( gp ) b hexvar move v0 , zero jalr t9 nop lw gp , hexvar ( sp ) b hexvar lw v0 , ( v0 ) lbu v0 , hexvar ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) move a1 , v0 move a0 , s0 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar addiu a3 , zero , num sw zero , hexvar ( sp ) move a2 , zero addiu a1 , zero , num move a0 , v0 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) move a1 , v0 move a0 , s0 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar addiu a3 , zero , num sw zero , hexvar ( sp ) move a2 , zero addiu a1 , zero , num move a0 , v0 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) b hexvar addiu v0 , zero , num move v0 , zero lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar move v0 , zero
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] cmp dword ptr [ esp + hexvar ] , num je hexvar test esi , esi je hexvar cmp dword ptr [ ebp + num ] , num je hexvar cmp dword ptr [ esi ] , hexvar jne hexvar sub esp , num push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esi + hexvar ] mov eax , dword ptr [ eax ] push dword ptr [ eax + num ] call hexvar add esp , hexvar mov edi , esi test eax , eax jne hexvar mov eax , edi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar fld xword ptr [ ebp + num ] fstp xword ptr [ ebp - hexvar ] fld xword ptr [ ebp - hexvar ] fldz fucomip st ( num ) fstp st ( num ) jbe hexvar jmp hexvar fld xword ptr [ ebp - hexvar ] mov eax , esp fstp xword ptr [ eax ] call hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx jmp hexvar fld xword ptr [ ebp - hexvar ] mov eax , esp fstp xword ptr [ eax ] call hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , ecx mov edx , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] test rax , rax sete cl movzx r8d , cl mov eax , r8d mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov qword ptr [ rbp - hexvar ] , hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov dword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , hexvar mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] add r0 , r3 , hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp ] ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r3 , num b hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
ldr r0 , [ r0 ] cmp r0 , num bxlt lr push { r4 , lr } bl hexvar cmp r0 , num popeq { r4 , pc } ldr r3 , [ pc , hexvar ] mov r2 , hexvar ldr r1 , [ pc , num ] ldr r0 , [ pc , num ] bl hexvar muleq r2 , r0 , r0 andeq r1 , r2 , r8 , lsr num strheq r1 , [ r2 ] , -ip
cmp r0 , num push { r4 , lr } ldr r3 , [ r1 ] beq hexvar ldr r2 , [ pc , hexvar ] cmp r3 , r2 bhi hexvar add r2 , r3 , num add r3 , r2 , r3 , lsr num str r3 , [ r1 ] mov r1 , r3 bl hexvar cmp r0 , num popne { r4 , pc }
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax ] , hexvar mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + num ] , hexvar mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + num ] , hexvar mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , hexvar mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , hexvar mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov edx , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num nop pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar xor eax , eax mov edx , eax mov qword ptr [ rbp - num ] , rdi mov edi , num mov esi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx ] , rax mov rax , qword ptr [ rbp - hexvar ] movabs rdx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] add rax , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar add rsp , hexvar pop rbp ret
push rbp push r14 push rbx sub rsp , hexvar mov rbx , rdx mov ebp , esi mov rax , qword ptr [ rdi + hexvar ] mov qword ptr [ rsp + num ] , rax mov ecx , hexvar mov r14d , hexvar jmp hexvar mov rdi , qword ptr [ rsp + num ] mov esi , ebp mov rdx , rbx call hexvar mov ecx , hexvar nop word ptr [ rax + rax ] cmp ecx , hexvar jg hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov ecx , hexvar xor eax , eax jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar cmp qword ptr [ rsp + num ] , num mov ecx , hexvar cmove ecx , r14d jmp hexvar add rsp , hexvar pop rbx pop r14 pop rbp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov esi , dword ptr [ eax ] and esi , num cmp esi , num setne bl mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar call hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] and ecx , num cmp ecx , num setne dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx ] mov esi , dword ptr [ ecx ] movzx esi , byte ptr [ esi - num ] sub eax , esi add edx , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov edx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , edx call hexvar add esp , hexvar lea esp , [ ebp - num ] pop esi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi movzx eax , byte ptr [ rip + hexvar ] test al , al jne hexvar mov eax , dword ptr [ rip + hexvar ] cmp eax , num jne hexvar mov rax , qword ptr [ rip + hexvar ] jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov rsi , rax lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov rax , qword ptr [ rax ] mov rsi , rax lea rdi , [ rip + hexvar ] call hexvar mov dword ptr [ rip + hexvar ] , num movzx eax , byte ptr [ rip + hexvar ] test al , al jne hexvar call hexvar mov rax , qword ptr [ rip + hexvar ] add rax , num mov qword ptr [ rip + hexvar ] , rax nop leave ret
test rsi , rsi je hexvar sub rsp , hexvar mov edx , num movsd qword ptr [ rsp + num ] , xmm0 call hexvar test rax , rax je hexvar movsd xmm1 , qword ptr [ rsp + num ] movsd qword ptr [ rax + hexvar ] , xmm1 mov eax , num add rsp , hexvar ret
push rbp mov rbp , rsp mov al , dil movsd xmm0 , qword ptr [ rip + hexvar ] mov byte ptr [ rbp - num ] , al movzx edi , byte ptr [ rbp - num ] cvtsi2sd xmm1 , edi mulsd xmm0 , xmm1 cvtsd2ss xmm0 , xmm0 pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar mov edx , eax xor eax , eax cmp dword ptr [ edx ] , hexvar jne hexvar mov eax , dword ptr [ edx + num ] mov edx , dword ptr [ eax + num ] mov dword ptr [ esp + num ] , edx push dword ptr [ ebx + hexvar ] push dword ptr [ eax ] lea eax , [ esp + hexvar ] push eax push num call hexvar add esp , hexvar mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx xor eax , eax mov ecx , dword ptr [ ebp + hexvar ] sub eax , - num mov edx , ecx sub edx , eax mov dword ptr [ ebp + hexvar ] , edx cmp ecx , num jbe hexvar mov eax , dword ptr [ ebp + hexvar ] movzx eax , byte ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov ecx , dword ptr [ ebp + hexvar ] add ecx , num mov dword ptr [ ebp + hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar add esp , hexvar pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push eax call hexvar add esp , hexvar test eax , eax jne hexvar add esp , num pop ebx ret
push rax test rdi , rdi je hexvar call hexvar mov ecx , eax cmp qword ptr [ rip + hexvar ] , num je hexvar mov eax , hexvar nop dword ptr [ rax ] cmp dword ptr [ rax ] , ecx je hexvar cmp qword ptr [ rax + hexvar ] , num lea rax , [ rax + hexvar ] jne hexvar mov edx , hexvar mov edi , hexvar mov esi , hexvar mov ecx , hexvar call hexvar xor eax , eax jmp hexvar xor edi , edi call hexvar mov rdi , rax mov eax , hexvar test rdi , rdi je hexvar cmp byte ptr [ rdi ] , num je hexvar call hexvar mov ecx , eax test eax , eax jne hexvar mov edx , hexvar mov edi , hexvar mov esi , hexvar mov ecx , hexvar jmp hexvar pop rcx ret
push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r12 , rcx mov r13 , rdx mov r14 , rsi xor ebx , ebx xor esi , esi call hexvar test rax , rax je hexvar mov r15 , rax mov rdi , rsp mov esi , hexvar xor edx , edx mov rcx , r12 test r13 , r13 je hexvar call r13
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx ] mov esi , dword ptr [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx ] je hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ hexvar ] , num call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ hexvar ] add edx , eax adc ecx , num mov dword ptr [ hexvar ] , edx mov dword ptr [ hexvar ] , ecx add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ hexvar ] jae hexvar mov eax , dword ptr [ hexvar ] imul ecx , dword ptr [ ebp - num ] , hexvar add eax , ecx mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp - num ] mov dword ptr [ ecx + edx * num ] , eax mov eax , dword ptr [ ebp - num ] add eax , hexvar add eax , num sub eax , hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar add esp , num pop ebp ret
push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ esp + hexvar ] lea edx , [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , num call hexvar test eax , eax jne hexvar mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi ret
push { r4 , r5 , r6 , lr } ldr r3 , [ pc , hexvar ] sub sp , sp , num mov r6 , r0 mov r5 , r1 mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num ldr r4 , [ r3 ] bl hexvar str r6 , [ sp ] mov r2 , r0 mov r3 , r5 mov r0 , r4 mov r1 , num bl hexvar add sp , sp , num pop { r4 , r5 , r6 , pc }
mov ebx , dword ptr [ esi + num ] lea esi , [ esi ] test ebx , ebx je hexvar cmp dword ptr [ ebx ] , hexvar ja hexvar mov eax , dword ptr [ ebx ] mov edx , dword ptr [ ebp + eax * num - hexvar ] add edx , ebp jmp edx nop
lui gp , hexvar lhu v0 , hexvar ( a0 ) addiu sp , sp , - hexvar addiu gp , gp , - hexvar andi v0 , v0 , hexvar sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) bnez v0 , hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) addiu s0 , a0 , hexvar move s5 , a2 move a3 , zero addiu a2 , zero , num move s1 , a0 move a0 , s0 bal hexvar move s4 , a1 lw gp , hexvar ( sp ) beqz v0 , hexvar move s2 , v0 lw v0 , hexvar ( v0 ) beqz v0 , hexvar lw t9 , - hexvar ( gp ) addiu a1 , zero , hexvar bal hexvar move a0 , s0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a2 , s4 move a1 , s0 bal hexvar move a0 , v0 lw gp , hexvar ( sp ) beqz v0 , hexvar move s3 , v0 lw t9 , - hexvar ( gp ) addiu s0 , v0 , hexvar addiu a2 , zero , hexvar move a1 , zero jalr t9 move a0 , s0 lw a0 , ( s2 ) lw v1 , num ( s2 ) lw v0 , num ( s2 ) sw a0 , ( s3 )
push rbp mov rbp , rsp sub rsp , hexvar movsd qword ptr [ rbp - num ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 movsd qword ptr [ rbp - hexvar ] , xmm2 mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx movsd xmm0 , qword ptr [ rbp - num ] movsd xmm1 , qword ptr [ rbp - hexvar ] movsd xmm2 , qword ptr [ rbp - hexvar ] lea rdi , [ rbp - hexvar ] lea rsi , [ rbp - hexvar ] lea rdx , [ rbp - hexvar ] call hexvar movsd xmm0 , qword ptr [ rbp - hexvar ] addsd xmm0 , qword ptr [ rbp - hexvar ] addsd xmm0 , qword ptr [ rbp - hexvar ] call hexvar movsd qword ptr [ rbp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] mulsd xmm0 , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] mulsd xmm0 , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm0 add rsp , hexvar pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r13 , rcx mov rbx , rdx mov rbp , rsi mov r12 , rdi lea r14 , [ rdi + hexvar ] lea r15 , [ rdi + hexvar ] jmp hexvar nop word ptr cs : [ rax + rax ] nop mov rcx , qword ptr [ r12 + hexvar ] mov rdi , qword ptr [ rsp + num ] mov rsi , qword ptr [ rsp + hexvar ] movabs rax , hexvar lea rdx , [ rax + num ] mov r8 , r14 mov r9 , r15 call hexvar mov r13 , qword ptr [ rsp ] movabs rax , hexvar add r13 , rax mov rbx , qword ptr [ rsp + num ] movabs rax , hexvar add rbx , rax mov rbp , qword ptr [ rsp + hexvar ] add rbp , rax mov eax , hexvar jmp hexvar mov qword ptr [ rsp ] , r13 mov qword ptr [ rsp + num ] , rbx mov qword ptr [ rsp + hexvar ] , rbp mov rax , qword ptr [ rsp ] movabs rcx , hexvar cmp rax , rcx mov eax , hexvar mov ecx , hexvar cmova eax , ecx nop word ptr cs : [ rax + rax ] cmp eax , hexvar jle hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar nop cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar cmp qword ptr [ rsp ] , num mov eax , hexvar mov ecx , hexvar cmove eax , ecx jmp hexvar mov rcx , qword ptr [ r12 + hexvar ] mov rdx , qword ptr [ rsp ] mov rdi , qword ptr [ rsp + num ] mov rsi , qword ptr [ rsp + hexvar ] mov r8 , r14 mov r9 , r15 call hexvar mov eax , hexvar jmp hexvar mov eax , num add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) jal hexvar nop lw gp , hexvar ( sp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) beqz v0 , hexvar lui s0 , hexvar addiu v0 , zero , num lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a1 , hexvar addiu a1 , a1 , hexvar lw a0 , hexvar ( s0 )
sub rsp , num cmp edi , hexvar ja hexvar mov eax , edi jmp qword ptr [ rax * num + hexvar ] nop word ptr cs : [ rax + rax ] mov eax , hexvar add rsp , num ret
mov rax , qword ptr [ rdi + num ] test rax , rax je hexvar mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar jmp rax xor eax , eax ret
lbu a2 , ( a0 ) beqz a2 , hexvar move v0 , zero sll v1 , v0 , num addiu a0 , a0 , num subu v0 , v1 , v0 addu v0 , v0 , a2 lbu a2 , ( a0 ) teq a1 , zero , num divu zero , v0 , a1 bnez a2 , hexvar mfhi v0 jr ra nop
sub rsp , num mov eax , dword ptr [ rsp + hexvar ] push rax push r9 mov r9d , r8d mov r8d , ecx mov ecx , num call hexvar add rsp , hexvar ret
lui gp , hexvar addiu sp , sp , - hexvar addiu v0 , a1 , - hexvar addiu gp , gp , hexvar slt v0 , a3 , v0 sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) beqz v0 , hexvar sw gp , hexvar ( sp ) addiu a1 , a1 , - num lw t9 , - hexvar ( gp ) addiu v1 , a0 , num sb zero , ( a0 ) subu s0 , a1 , a3 addiu v0 , zero , num addiu a1 , zero , hexvar move s2 , a2 sb v0 , num ( a0 ) move a2 , s0 move a0 , v1 jalr t9 move s1 , a3 lw gp , hexvar ( sp ) addu s0 , v0 , s0 move a2 , s1 addiu a0 , s0 , num move a1 , s2 lw t9 , - hexvar ( gp ) jalr t9 sb zero , ( s0 ) addiu v0 , zero , num lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) addiu v0 , zero , hexvar addiu a3 , a3 , - hexvar addiu a2 , zero , hexvar sw v0 , hexvar ( sp ) addiu a1 , zero , hexvar bal hexvar addiu a0 , zero , num move v0 , zero lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , esp add eax , - hexvar mov esp , eax mov dword ptr [ ebp - hexvar ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edi call hexvar and al , num movzx eax , al lea esp , [ ebp - num ] pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov cl , byte ptr [ hexvar ] mov byte ptr [ ebp - num ] , cl mov dword ptr [ ebp - num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov al , byte ptr [ ebp - num ] test al , num mov ecx , hexvar mov edx , hexvar cmovne edx , ecx mov dword ptr [ ebp - num ] , edx jmp hexvar mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ ebp - num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov byte ptr [ hexvar ] , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
push r15 push r14 push r12 push rbx sub rsp , hexvar add esi , - num cmp esi , hexvar ja hexvar mov r15 , rcx mov rbx , rdi mov r14 , qword ptr [ rdi + hexvar ] mov r12d , num jmp qword ptr [ rsi * num + hexvar ] mov dword ptr [ r14 ] , num mov edi , dword ptr [ rbx + hexvar ] cmp edi , - num je hexvar call hexvar mov dword ptr [ rbx + hexvar ] , hexvar mov dword ptr [ rbx + hexvar ] , num xor r12d , r12d mov rax , r12 add rsp , hexvar pop rbx pop r12 pop r14 pop r15 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov eax , dword ptr [ ebp - num ] lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) move s2 , a0 sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) move s4 , a2 sw s3 , hexvar ( sp ) move s3 , a1 sw s1 , hexvar ( sp ) move s1 , a3 sw gp , hexvar ( sp ) sw s0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw a0 , hexvar ( sp ) lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw a0 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) move a1 , v0 move a0 , s1 jal hexvar move s0 , v0 bnez v0 , hexvar lw gp , hexvar ( sp ) move s0 , zero lw t9 , - hexvar ( gp ) jalr t9 lw a0 , hexvar ( sp ) move v0 , s0 lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw v0 , hexvar ( sp ) move a3 , s0 move a2 , s4 move a1 , s3 sw v0 , hexvar ( sp ) jal hexvar move a0 , s2 lw gp , hexvar ( sp ) b hexvar move s0 , v0
push ebx sub esp , hexvar call hexvar add ebx , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] lea eax , [ ebx - hexvar ] push eax push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar pop ebx ret
test rsi , rsi je hexvar lea r9 , [ rdi + rsi ] movzx ecx , byte ptr [ rdi ] lea r8 , [ rdx + num ] mov rax , rdx mov esi , ecx and esi , num add esi , hexvar add rax , num mov byte ptr [ rax - num ] , sil shr cl , num cmp r8 , rax jne hexvar add rdx , num add rdi , num cmp r9 , rdi jne hexvar ret
lea esi , [ ebx - hexvar ] mov eax , dword ptr [ ebp + hexvar ] lea edi , [ esi + hexvar ] jmp hexvar mov byte ptr [ esp + num ] , dl sub esp , num mov byte ptr [ ebp + hexvar ] , num push dword ptr [ ebp + hexvar ] push hexvar push ebp call dword ptr [ ebp + hexvar ] add esp , hexvar add dword ptr [ ebp + hexvar ] , num movzx edx , byte ptr [ esp + num ] mov eax , num xor ecx , ecx add esi , num mov dword ptr [ ebp + hexvar ] , eax mov byte ptr [ ebp + ecx ] , dl cmp edi , esi mov byte ptr [ ebp + hexvar ] , dl je hexvar cmp eax , hexvar movzx edx , byte ptr [ esi ] je hexvar mov ecx , eax add eax , num jmp hexvar
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push ebp push edi mov ecx , num push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ ebx + hexvar ] lea edi , [ ebx - hexvar ] mov ebp , dword ptr [ edx + eax * num ] lea esi , [ eax * num ] mov dword ptr [ esp + hexvar ] , esi mov esi , ebp repe cmpsb byte ptr [ esi ] , byte ptr es : [ edi ] seta cl sbb cl , num test cl , cl je hexvar cmp byte ptr [ ebp ] , hexvar jne hexvar movzx eax , byte ptr [ ebp + num ] test al , al je hexvar cmp byte ptr [ ebp + num ] , num jne hexvar sub eax , hexvar cmp al , hexvar ja hexvar movzx eax , al mov edx , dword ptr [ ebx + eax * num - hexvar ] add edx , ebx jmp edx nop
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov esi , num mov edi , num call hexvar mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov ecx , edx mov rdx , rax mov esi , num mov edi , num mov eax , num call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jns hexvar mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] cdqe mov esi , num mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rdx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rdx mov edi , eax call hexvar mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov ecx , dword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edi , eax mov eax , num call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jns hexvar lea rdi , [ rip + hexvar ] call hexvar mov rbx , rax call hexvar mov eax , dword ptr [ rax ] mov rdx , rbx mov esi , eax mov edi , num mov eax , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax ] , edx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov eax , num add rsp , hexvar pop rbx pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push rbp push r15 push r14 push rbx push rax xor r14d , r14d test rdi , rdi je hexvar mov rbx , rdi mov rbp , qword ptr [ rdi + hexvar ] test rbp , rbp je hexvar mov r15 , rsi test rsi , rsi je hexvar mov rdi , r15 call hexvar cmp rax , hexvar jb hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar mov rdi , qword ptr [ rbp + hexvar ] test rdi , rdi je hexvar call hexvar test r15 , r15 je hexvar mov rdi , r15 call hexvar mov rcx , qword ptr [ rbx + hexvar ] mov qword ptr [ rcx + hexvar ] , rax test rax , rax jne hexvar jmp hexvar mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rax + hexvar ] , num mov r14d , num mov eax , r14d add rsp , num pop rbx pop r14 pop r15 pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp sw a0 , hexvar ( fp ) move a1 , zero lw a0 , hexvar ( fp ) jal hexvar nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
mov rax , qword ptr [ rsi ] mov ecx , dword ptr [ rax + num ] cmp ecx , hexvar ja hexvar lea esi , [ rcx + num ] mov byte ptr [ rax + rcx + hexvar ] , dl mov dword ptr [ rax + num ] , esi mov eax , num ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar test eax , eax jne hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] add eax , hexvar push eax call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov esi , dword ptr [ eax ] and esi , num cmp esi , num setne bl mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar call hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] and ecx , num cmp ecx , num setne dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx ] mov esi , dword ptr [ ecx ] movzx esi , byte ptr [ esi - num ] sub eax , esi add edx , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov edx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , edx call hexvar add esp , hexvar lea esp , [ ebp - num ] pop esi pop ebx pop ebp ret
cmp qword ptr [ rdi + hexvar ] , - num je hexvar push r14 push r13 push r12 push rbp mov rbp , rdi push rbx mov rax , qword ptr [ rsi + num ] mov rbx , rsi call qword ptr [ rax + hexvar ] test eax , eax je hexvar movzx eax , byte ptr [ rbp + hexvar ] mov r13 , qword ptr [ rbp + num ] shr al , num and eax , num cmp al , num jbe hexvar mov esi , hexvar mov rdi , r13 call hexvar test rax , rax mov r12 , rax je hexvar mov r14 , rax sub r14 , r13 lea rdi , [ r14 + num ] call hexvar test rax , rax mov r12 , rax je hexvar mov rsi , r13 mov rdx , r14 mov rdi , rax call hexvar mov r13 , r12 mov byte ptr [ r12 + r14 ] , num mov rdi , r13 call hexvar mov rcx , qword ptr [ rbx + hexvar ] mov rdx , qword ptr [ rbx + hexvar ] mov qword ptr [ rdx + rcx * num ] , rax mov rdx , qword ptr [ rbx + hexvar ] mov rcx , qword ptr [ rbp + hexvar ] mov qword ptr [ rdx + rcx * num ] , rax mov rax , qword ptr [ rbx + hexvar ] add qword ptr [ rbx + hexvar ] , num mov rdx , qword ptr [ rbp + hexvar ] test rax , rax js hexvar cmp rax , rdx jg hexvar test r12 , r12 je hexvar mov rdi , r12 call hexvar mov eax , num pop rbx pop rbp pop r12 pop r13 pop r14 ret
push edi push esi push ebx mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] sub esp , num lea eax , [ edi + hexvar ] call hexvar add ebx , hexvar push eax lea eax , [ esi + hexvar ] push eax call hexvar add esp , hexvar test eax , eax je hexvar lea eax , [ edi + hexvar ] sub esp , num push eax lea eax , [ esi + hexvar ] push eax call hexvar add esp , hexvar test eax , eax je hexvar lea eax , [ edi + hexvar ] sub esp , num push eax lea eax , [ esi + hexvar ] push eax call hexvar add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ edi + hexvar ] mov dword ptr [ esi + hexvar ] , eax mov eax , num pop ebx pop esi pop edi ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , edx mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , esi mov edi , dword ptr [ ecx ] mov dword ptr [ edi ] , num mov edi , dword ptr [ eax ] mov edi , dword ptr [ edi + hexvar ] mov ebx , dword ptr [ ecx ] mov dword ptr [ ebx + num ] , edi mov ecx , dword ptr [ ecx ] mov eax , dword ptr [ eax ] mov dword ptr [ eax + hexvar ] , ecx lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - hexvar ] , eax jne hexvar mov eax , dword ptr [ hexvar ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] sub eax , ecx cmp eax , num jl hexvar mov eax , dword ptr [ ebp - num ] add eax , - num mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , num call hexvar cmp eax , num jne hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , num call hexvar cmp eax , num jne hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax add esp , hexvar pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , hexvar lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] movsd xmm0 , qword ptr [ esi ] movsd qword ptr [ ebp - hexvar ] , xmm0 mov esi , dword ptr [ ebp + hexvar ] movsd xmm0 , qword ptr [ esi ] movsd qword ptr [ ebp - hexvar ] , xmm0 mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esi , ebx adc edi , eax mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov eax , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - hexvar ] sub eax , edi sbb esi , ebx setl bl movzx edi , bl mov ebx , dword ptr [ ebp - hexvar ] shr ebx , hexvar and bl , num movzx ebx , bl cmp edi , ebx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , esi je hexvar mov dword ptr [ esp ] , hexvar call hexvar movsd xmm0 , qword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp + num ] movsd qword ptr [ eax ] , xmm0 add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax movsd xmm0 , qword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp + num ] movsd qword ptr [ eax ] , xmm0 mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edi add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] cmp qword ptr [ rsi + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi + hexvar ] , rax jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi + hexvar ] , rax mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi + hexvar ] , rax mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi + hexvar ] , rax mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar lui v0 , hexvar addiu gp , gp , hexvar sltu v0 , a3 , v0 sw fp , hexvar ( sp ) sw s5 , hexvar ( sp ) move fp , a0 sw s3 , hexvar ( sp ) move s5 , a3 sw s2 , hexvar ( sp ) move s3 , a1 sw ra , hexvar ( sp ) move s2 , a2 sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) bnez v0 , hexvar sw gp , hexvar ( sp ) addiu s7 , a0 , hexvar lui s6 , hexvar move s4 , a3 move s1 , a2 move s0 , a1 lw v0 , num ( fp )
ldr r3 , [ r0 , num ] ldr r3 , [ r3 , num ] cmp r3 , num bne hexvar ldrb r3 , [ r0 , hexvar ] and r3 , r3 , num cmp r3 , num bne hexvar ldr r3 , [ r0 , hexvar ] ldr r0 , [ r3 , hexvar ] bx lr mov r0 , num bx lr
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rcx cmp qword ptr [ rax ] , num setne dl mov qword ptr [ rbp - hexvar ] , rax mov byte ptr [ rbp - hexvar ] , dl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov edx , hexvar cmp qword ptr [ rcx + hexvar ] , rdx sete sil mov byte ptr [ rbp - hexvar ] , sil mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] cmp dword ptr [ rcx + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] add rcx , num mov edi , hexvar movabs rsi , num movabs rdx , num mov r8d , hexvar mov qword ptr [ rbp - hexvar ] , rcx mov rcx , r8 movabs r8 , num mov r9 , qword ptr [ rbp - hexvar ] mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax jmp hexvar movsd xmm0 , qword ptr [ rip ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mulsd xmm0 , qword ptr [ rcx + hexvar ] movsd qword ptr [ rbp - hexvar ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] mov rsp , rbp pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rdx + hexvar ] mov edx , eax mov eax , edx and eax , num mov edx , eax mov rdx , qword ptr [ rdx * num + hexvar ] jmp rdx mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar test eax , eax sets cl movzx eax , cl mov edi , eax mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi call hexvar mov edi , dword ptr [ rax ] call hexvar movzx edi , al mov ecx , edi mov rcx , qword ptr [ rcx * num + hexvar ] jmp rcx call hexvar mov esi , dword ptr [ rax ] mov edi , hexvar mov dword ptr [ rbp - hexvar ] , esi call hexvar mov rsi , qword ptr [ rbp - num ] mov edi , num mov qword ptr [ rbp - hexvar ] , rax call hexvar xor edi , edi mov cl , dil mov esi , dword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov byte ptr [ rbp - hexvar ] , cl mov rcx , rax mov al , byte ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rip + hexvar ] jmp rcx mov rdi , qword ptr [ rbp - hexvar ] mov esi , hexvar call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] test eax , eax sete cl movzx eax , cl mov edi , eax mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov rsi , qword ptr [ rip + hexvar ] jmp rsi mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
mov rcx , rdx mov rdx , rsi mov eax , hexvar or rdx , rcx sub rsp , hexvar cmp rdx , rax jbe hexvar test rcx , rcx je hexvar mov rax , rsi mul rcx jo hexvar imul rsi , rcx test rsi , rsi js hexvar mov rdi , qword ptr [ rdi + hexvar ] je hexvar add rsi , num and rsi , hexvar jne hexvar call hexvar test rax , rax je hexvar add rsp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov edi , dword ptr [ rbp - num ] call hexvar add rsp , hexvar pop rbp ret
push rbp push r14 push rbx sub rsp , hexvar mov r14d , esi mov rbx , rdi mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , rbx mov esi , r14d add rsp , hexvar pop rbx pop r14 pop rbp jmp rax movsd qword ptr [ rsp + num ] , xmm0 call hexvar test rax , rax je hexvar mov rbp , rax mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax test rax , rax je hexvar mov qword ptr [ rip + hexvar ] , rbp movsd xmm0 , qword ptr [ rsp + num ] mov rax , qword ptr [ rax + hexvar ] test rax , rax jne hexvar jmp hexvar mov rdi , rbp call hexvar call hexvar mov qword ptr [ rip + hexvar ] , rax test rax , rax movsd xmm0 , qword ptr [ rsp + num ] jne hexvar add rsp , hexvar pop rbx pop r14 pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar srl v0 , a1 , num sw s0 , hexvar ( sp ) srl t0 , a1 , hexvar sw a0 , hexvar ( sp ) srl v1 , a1 , hexvar sb v0 , hexvar ( sp ) addiu a0 , sp , hexvar lw s0 , - hexvar ( gp ) addiu a3 , zero , num lw t9 , - hexvar ( gp ) move a2 , zero sw gp , hexvar ( sp ) sb a1 , hexvar ( sp ) sw ra , hexvar ( sp ) sb t0 , hexvar ( sp ) sb v1 , hexvar ( sp ) lw v0 , ( s0 ) sw v0 , hexvar ( sp ) jalr t9 nop lw a1 , hexvar ( sp ) xori v1 , v1 , num lw a0 , ( s0 ) or v0 , v0 , v1 bne a1 , a0 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) sltiu v0 , v0 , num lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp + num ] add ecx , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] cmp eax , ecx setb dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar call hexvar mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] movsx ecx , byte ptr [ ecx ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar movzx ecx , al mov edx , dword ptr [ ebp - hexvar ] mov si , word ptr [ edx + ecx * num ] mov word ptr [ ebp - hexvar ] , si mov ax , word ptr [ ebp - hexvar ] movzx ecx , ax and ecx , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp eax , num jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
push r15 push r14 push r12 push rbx push rax mov r15 , r8 mov r14 , rcx mov rbx , rdi call hexvar xor r12d , r12d test eax , eax je hexvar xor edi , edi mov rsi , rbx mov rdx , rbx mov rcx , r14 mov r8 , r15 call hexvar test eax , eax je hexvar cmp dword ptr [ rbx + hexvar ] , num je hexvar cmp dword ptr [ r14 + hexvar ] , num mov eax , hexvar mov ecx , hexvar cmove rcx , rax mov rdi , rbx mov rsi , rbx mov rdx , r14 add rsp , num pop rbx pop r12 pop r14 pop r15 jmp rcx mov r12d , num mov eax , r12d add rsp , num pop rbx pop r12 pop r14 pop r15 ret
push ebp mov ebp , esp push ebx sub esp , num call hexvar add eax , hexvar cmp dword ptr [ ebp + num ] , num je hexvar sub esp , num push num push dword ptr [ ebp + num ] lea edx , [ eax - hexvar ] push edx mov ebx , eax call hexvar add esp , hexvar jmp hexvar sub esp , hexvar lea edx , [ eax - hexvar ] push edx mov ebx , eax call hexvar add esp , hexvar mov ebx , dword ptr [ ebp - num ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rax , hexvar mov rdi , rax mov rsi , rax movabs rdx , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] movabs rdx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] movabs rdx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] xor ecx , num mov dword ptr [ rax + hexvar ] , ecx mov rdi , qword ptr [ rbp - num ] call hexvar mov edx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rdx add rsp , hexvar pop rbp ret
cmp edi , hexvar jg hexvar cmp edi , hexvar je hexvar cmp edi , hexvar jne hexvar mov eax , hexvar ret
sub rsp , hexvar mov edi , hexvar call hexvar pxor xmm1 , xmm1 mov edi , hexvar cvtsi2sd xmm1 , rax movsd qword ptr [ rsp ] , xmm1 call hexvar pxor xmm2 , xmm2 movsd xmm1 , qword ptr [ rsp ] pxor xmm0 , xmm0 ucomisd xmm1 , xmm2 cvtsi2sd xmm0 , rax jb hexvar ucomisd xmm0 , xmm2 jb hexvar mulsd xmm0 , xmm1 add rsp , hexvar ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ ebp - num ] , ecx cmp dword ptr [ ebp - num ] , num mov dword ptr [ ebp - num ] , eax je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax + hexvar ] , num add esp , hexvar pop ebp ret
cmp r2 , hexvar push { r4 , r5 , r6 , r7 , r8 , lr } mov r4 , r2 mov r5 , r1 mov r8 , r3 mov r7 , r0 bhi hexvar mov r6 , hexvar add r3 , r2 , r2 , lsl num lsl r3 , r3 , num add r2 , r3 , hexvar mla r3 , r6 , r1 , r2 ldr r6 , [ r0 , hexvar ] add r6 , r6 , r3 cmp r5 , num beq hexvar cmp r5 , num bne hexvar cmp r4 , hexvar moveq r5 , num beq hexvar tst r4 , num movne r5 , num stm r6 , { r5 , r8 } pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] movsx ecx , byte ptr [ ecx ] cmp ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jne hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax + num ] cmp eax , num je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , eax inc ecx mov dword ptr [ ebp + num ] , ecx mov dl , byte ptr [ eax + num ] mov byte ptr [ ebp - hexvar ] , dl movzx eax , byte ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax fild dword ptr [ ebp - hexvar ] fstp xword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp + num ] mov ecx , eax add ecx , num mov dword ptr [ ebp + num ] , ecx movsx eax , byte ptr [ eax + num ] cmp eax , num je hexvar test byte ptr [ hexvar ] , num jne hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx call hexvar jmp hexvar call hexvar mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp + num ] mov ecx , esp lea edx , [ ebp - num ] mov dword ptr [ ecx + num ] , edx mov dword ptr [ ecx ] , eax call hexvar fstp xword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar fld xword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
ands ip , r1 , num push { r4 , r5 , r6 , lr } bne hexvar add r3 , r1 , num cmp r1 , num movlt r1 , r3 asr r3 , r1 , num cmp r3 , num movle r1 , ip ble hexvar cmp r2 , num beq hexvar mov r1 , ip add r3 , r0 , r3 sub r3 , r3 , num sub r0 , r0 , num ldrb r4 , [ r0 , num ] ! lsl r1 , r1 , num cmp r3 , r0 orr r1 , r1 , ip , lsr num mov r5 , num orr ip , r4 , ip , lsl num bne hexvar mov r0 , ip pop { r4 , r5 , r6 , pc }
push rbx cmp edi , num jne hexvar mov rax , qword ptr [ rsi ] mov ecx , dword ptr [ rax ] cmp ecx , num je hexvar cmp ecx , num je hexvar test ecx , ecx jne hexvar mov rbx , qword ptr [ rax + num ] mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar call hexvar mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar call hexvar mov eax , num pop rbx ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , num ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] str r3 , [ sp ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] cmp r3 , num blt hexvar ldr r3 , [ fp , - num ] b hexvar bl hexvar mov r3 , r0 ldr r3 , [ r3 ] cmp r3 , num beq hexvar bl hexvar mov r3 , r0 ldr r3 , [ r3 ] cmp r3 , hexvar bne hexvar ldr r3 , [ fp , - hexvar ] ldr r2 , [ pc , hexvar ] cmp r3 , r2 bls hexvar ldr r3 , [ pc , hexvar ] str r3 , [ fp , - hexvar ] b hexvar ldr r3 , [ fp , - num ] b hexvar mov r0 , r0 b hexvar mov r0 , r3 sub sp , fp , num pop { fp , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov dword ptr [ rbp - num ] , esi mov eax , dword ptr [ rip + hexvar ] mov edx , eax lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] mov eax , num call hexvar lea rdi , [ rip + hexvar ] call hexvar nop leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 ) lw v0 , hexvar ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , hexvar ( a1 )
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar addiu a2 , sp , hexvar sw s0 , hexvar ( sp ) addiu a1 , sp , hexvar lw s0 , - hexvar ( gp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw v0 , ( s0 ) sw v0 , hexvar ( sp ) jal hexvar nop beqz v0 , hexvar lw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v1 , ( s0 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar move v0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] sub esp , hexvar push eax call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar nop add esp , hexvar pop ebx ret
push dword ptr [ esp ] push num push dword ptr [ esp + hexvar ] push edi call hexvar add edi , dword ptr [ esp + hexvar ] mov ebp , eax mov eax , dword ptr [ esp + hexvar ] add esp , hexvar mov ecx , dword ptr [ esp ] lea esi , [ edi + eax ] cmp esi , ecx jb hexvar xor eax , eax xor edx , edx cmp ecx , edi jbe hexvar mov eax , ecx sub eax , edi lea edx , [ eax - num ] cmp edx , num ja hexvar sub esp , num push eax push edi mov eax , dword ptr [ esp + hexvar ] call dword ptr [ eax ] add esp , hexvar call hexvar sub esp , num mov edi , eax lea eax , [ ebx - hexvar ] push num jmp hexvar mov esi , esi lea edi , [ edi ]
cmp edi , hexvar mov eax , hexvar mov esi , hexvar cmove esi , eax cmp edi , hexvar mov eax , hexvar mov edx , hexvar cmove edx , eax cmp edi , hexvar mov eax , hexvar mov r8d , hexvar cmove r8d , eax mov ecx , hexvar jmp hexvar mov ecx , hexvar xor eax , eax nop dword ptr [ rax ] mov edi , ecx cmp ecx , hexvar jle hexvar cmp edi , hexvar jg hexvar mov ecx , esi cmp edi , hexvar je hexvar mov ecx , edi cmp edi , hexvar jne hexvar mov ecx , hexvar mov eax , hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop dword ptr [ rax ] cmp edi , hexvar jg hexvar cmp edi , hexvar je hexvar mov ecx , edi cmp edi , hexvar jne hexvar mov ecx , hexvar mov eax , hexvar jmp hexvar nop word ptr cs : [ rax + rax ] mov ecx , edx cmp edi , hexvar je hexvar mov ecx , edi cmp edi , hexvar jne hexvar mov ecx , r8d jmp hexvar cmp edi , hexvar je hexvar mov ecx , edi cmp edi , hexvar jne hexvar jmp hexvar mov ecx , hexvar mov eax , hexvar jmp hexvar ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] shl ecx , num mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] cmp edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
and r3 , r0 , hexvar cmp r3 , hexvar push { r4 , r5 , r6 , r7 , r8 , sb , lr } moveq sb , hexvar beq hexvar cmp r3 , hexvar moveq sb , hexvar beq hexvar cmp r3 , hexvar moveq sb , hexvar beq hexvar cmp r3 , hexvar moveq sb , hexvar beq hexvar cmp r3 , hexvar moveq sb , hexvar beq hexvar cmp r3 , hexvar moveq sb , hexvar movne sb , hexvar tst r0 , hexvar movne r8 , hexvar moveq r8 , hexvar tst r0 , hexvar movne r7 , hexvar moveq r7 , hexvar tst r0 , hexvar movne ip , hexvar moveq ip , hexvar tst r0 , hexvar movne r6 , hexvar moveq r6 , hexvar tst r0 , hexvar movne r5 , hexvar moveq r5 , hexvar tst r0 , num movne r2 , hexvar moveq r2 , hexvar tst r0 , num movne r4 , hexvar moveq r4 , hexvar tst r0 , num movne lr , hexvar moveq lr , hexvar tst r0 , num movne r3 , hexvar moveq r3 , hexvar tst r0 , hexvar strb sb , [ r1 ] strb r8 , [ r1 , num ] strb r7 , [ r1 , num ] strb ip , [ r1 , num ] strb r6 , [ r1 , num ] strb r5 , [ r1 , num ] strb r2 , [ r1 , num ] strb r4 , [ r1 , num ] strb lr , [ r1 , num ] strb r3 , [ r1 , num ] beq hexvar cmp ip , hexvar movne ip , hexvar moveq ip , hexvar strb ip , [ r1 , num ] tst r0 , hexvar beq hexvar cmp r2 , hexvar movne r2 , hexvar moveq r2 , hexvar strb r2 , [ r1 , num ] tst r0 , hexvar popeq { r4 , r5 , r6 , r7 , r8 , sb , pc }
push rbp push rbx push rax mov edx , esi xor ebx , ebx xor esi , esi call hexvar test eax , eax jle hexvar mov ebp , eax call hexvar cmp eax , num cmove ebx , ebp mov eax , ebx add rsp , num pop rbx pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , lr } mov r5 , r0 sub sp , sp , hexvar mov r6 , r1 mov r0 , r3 ldr r1 , [ pc , hexvar ] mov r4 , r3 mov r7 , r2 bl hexvar cmp r0 , num ldr r8 , [ sp , hexvar ] ldr sb , [ sp , hexvar ] beq hexvar ldr r1 , [ pc , hexvar ] mov r0 , r4 bl hexvar cmp r0 , num beq hexvar ldr r1 , [ pc , hexvar ] mov r0 , r4 bl hexvar cmp r0 , num bne hexvar ldr r3 , [ r5 , num ] ldr lr , [ pc , hexvar ] ldr r1 , [ r3 , hexvar ] ldr ip , [ pc , hexvar ] ldr r4 , [ r1 , hexvar ] ldr r3 , [ pc , hexvar ] cmp r4 , num mov r2 , r7 mov r1 , r6 str sb , [ sp , num ] str r8 , [ sp , num ] mov r0 , r5 movne r3 , lr str ip , [ sp ] bl hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc }
lbu v0 , hexvar ( a0 ) bnez v0 , hexvar lui gp , hexvar lw v1 , hexvar ( a0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lui v0 , hexvar addiu v0 , v0 , - hexvar sw v0 , hexvar ( sp ) addiu a3 , sp , hexvar addiu a2 , zero , hexvar move a1 , zero lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) addiu v1 , zero , num beq v0 , v1 , hexvar nop bnez v0 , hexvar lw v0 , hexvar ( sp ) beqz v0 , hexvar addiu a2 , zero , num lw v0 , hexvar ( sp ) addiu v0 , v0 , - num lw a0 , hexvar ( sp ) lw v1 , - hexvar ( gp ) lw v1 , ( v1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu v0 , zero , - num b hexvar sw v0 , hexvar ( sp ) addiu a2 , zero , num lui a1 , hexvar addiu a1 , a1 , - hexvar move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s1 , v0 move a0 , s0 lw t9 , - hexvar ( gp )
push edi push esi push ebx mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] sub esp , hexvar call hexvar add ebx , hexvar push esi call hexvar add esp , hexvar test al , num je hexvar sub esp , hexvar push edi call hexvar add esp , hexvar test eax , eax je hexvar sub esp , hexvar push esi call hexvar sub eax , num add esp , hexvar cmp eax , num jbe hexvar call hexvar sub esp , hexvar push eax call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ esp + hexvar ] , edi pop ebx pop esi pop edi jmp eax nop lea esi , [ esi ] sub esp , hexvar push edi call hexvar mov eax , dword ptr [ eax ] add esp , hexvar test eax , eax je hexvar cmp byte ptr [ eax ] , num je hexvar sub esp , num push eax push esi push edi call hexvar add esp , hexvar mov eax , num pop ebx pop esi pop edi ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , num mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
ldr r3 , [ r0 , num ] push { r4 , r5 , r6 , r7 , r8 , lr } ldr lr , [ r1 , hexvar ] ldr r6 , [ r3 , hexvar ] add r3 , lr , num ldr ip , [ r6 , hexvar ] str r3 , [ r1 , hexvar ] mov r5 , r0 ldr r3 , [ r1 , hexvar ] ldrb r0 , [ ip , num ] ldr r1 , [ r1 , hexvar ] mla r4 , r0 , lr , r3 add r3 , r3 , r1 add r0 , r4 , r0 cmp r0 , r3 mov r7 , r2 bls hexvar ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar ldr ip , [ r6 , hexvar ] mov r2 , r4 mov r1 , r7 mov r0 , r5 pop { r4 , r5 , r6 , r7 , r8 , lr } ldr r3 , [ ip , hexvar ] bx r3 andeq r3 , r0 , r5 , lsr sb strdeq r4 , r5 , [ ip ] , -r8
ldrb r3 , [ r0 , hexvar ] and r2 , r3 , num cmp r2 , num bne hexvar tst r3 , num bne hexvar str r1 , [ r0 , hexvar ] ldr r3 , [ r0 , num ] ldr r3 , [ r3 , hexvar ] bics r3 , r1 , r3 ldrne r3 , [ pc , hexvar ] movne r2 , num strne r2 , [ r3 ] movne r0 , num moveq r0 , num bx lr ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] mov r0 , num bx lr ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] mov r0 , num bx lr andeq r7 , sp , r0 , lsl num
test rdi , rdi je hexvar mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar test esi , esi je hexvar add esi , - num push rax mov rdi , qword ptr [ rdi + num ] call hexvar add rsp , num ret
mov rax , qword ptr [ rdi + hexvar ] mov rdx , qword ptr [ rdi + hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rdi + hexvar ] mov rdx , qword ptr [ rdi + hexvar ] mov qword ptr [ rax + hexvar ] , rdx cmp qword ptr [ rip + hexvar ] , rdi je hexvar ret mov rax , qword ptr [ rdi + hexvar ] cmp rax , rdi mov edx , num cmove rax , rdx mov qword ptr [ rip + hexvar ] , rax jmp hexvar
push ebp mov ebp , esp push ebx push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx ] , ecx mov bl , num and bl , num movzx ecx , bl mov dword ptr [ ebp - num ] , eax mov eax , ecx add esp , num pop ebx pop ebp ret
test rdi , rdi je hexvar push rbx mov rbx , rdi mov rax , qword ptr [ rdi ] test rax , rax je hexvar mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , rbx call rax test eax , eax je hexvar mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar mov rax , qword ptr [ rbx ] movsxd rsi , dword ptr [ rax + hexvar ] call hexvar mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar call hexvar mov rdi , qword ptr [ rbx + num ] test rdi , rdi je hexvar call hexvar xorps xmm0 , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx ] , xmm0 mov qword ptr [ rbx + hexvar ] , num mov rdi , rbx pop rbx jmp hexvar ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] and al , num mov byte ptr [ ebp - num ] , al mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ edi + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp + hexvar ] cmp dword ptr [ eax + num ] , num jne hexvar mov al , byte ptr [ ebp - num ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov byte ptr [ ebp - hexvar ] , al call hexvar mov ecx , dword ptr [ ebp + num ] mov dl , byte ptr [ ebp - hexvar ] and dl , num movzx esi , dl mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , num lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 lui a1 , hexvar addiu a1 , a1 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s4 , v0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s3 , v0 move a3 , zero move a2 , zero move a1 , zero move a0 , s4 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s1 , v0 b hexvar move s0 , zero addiu s0 , s0 , num move a0 , s1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) slt v0 , s0 , v0 beqz v0 , hexvar move a1 , s0 move a0 , s1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw a1 , ( v0 )
test byte ptr [ rdi + hexvar ] , hexvar jne hexvar movzx eax , byte ptr [ rdi + hexvar ] lea edx , [ rax - num ] cmp dl , num jbe hexvar cmp al , num je hexvar cmp al , num je hexvar mov eax , num ret
mov eax , dword ptr [ esp + num ] mov edx , dword ptr [ esp + num ] mov dword ptr [ eax + hexvar ] , edx mov eax , num ret
push esi push ebx mov esi , eax call hexvar add ebx , hexvar sub esp , hexvar push eax call hexvar add esp , hexvar test eax , eax je hexvar add esp , num pop ebx pop esi ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s4 , hexvar ( sp ) lw s4 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lw v0 , ( s4 ) sw v0 , hexvar ( sp ) bal hexvar nop beqz v0 , hexvar lw gp , hexvar ( sp ) lui s3 , hexvar lui s2 , hexvar addiu s1 , sp , hexvar addiu s3 , s3 , hexvar addiu s2 , s2 , - hexvar move s0 , v0 lw t9 , hexvar ( s0 )
push { r4 , lr } mov r1 , num mov r4 , r0 bl hexvar adds r4 , r4 , num movne r4 , num cmp r0 , num movne r4 , num cmp r4 , num popeq { r4 , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) sw a3 , hexvar ( sp ) sw a2 , hexvar ( sp ) move a3 , a1 move a2 , a0 lui a1 , hexvar addiu a1 , a1 , - hexvar lw a0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbp push rbx sub rsp , num mov rbp , rdi movzx ebx , byte ptr [ rdi ] test bl , bl je hexvar call hexvar mov rdx , rbp movzx ebx , bl mov rcx , qword ptr [ rax ] test byte ptr [ rcx + rbx * num ] , num je hexvar mov byte ptr [ rdx ] , hexvar add rdx , num movzx ebx , byte ptr [ rdx ] test bl , bl jne hexvar mov rax , rbp add rsp , num pop rbx pop rbp ret
test rdi , rdi je hexvar push rbx mov rbx , rdi mov rax , qword ptr [ rdi ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , rbx call rax mov rdi , rbx pop rbx jmp hexvar ret
sub rsp , hexvar mov qword ptr [ rsp + num ] , rsi mov qword ptr [ rsp + hexvar ] , rdx lea rcx , [ rsp + num ] mov esi , hexvar xor edx , edx call hexvar add rsp , hexvar ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , hexvar mov dword ptr [ ebp - num ] , eax call hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] sub eax , ecx setne dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
cmp qword ptr [ rdi + hexvar ] , num je hexvar mov rdx , rdi mov edi , hexvar mov esi , hexvar mov ecx , hexvar mov r8d , num mov r9d , num jmp hexvar mov eax , num ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] test eax , eax setne dl movzx eax , dl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , esp mov dword ptr [ eax ] , hexvar call hexvar mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] mov ecx , esp lea edx , [ ebp - hexvar ] mov dword ptr [ ecx + num ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ ecx + num ] , edx mov dword ptr [ ecx ] , eax call hexvar test eax , eax setne bl movzx eax , bl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , esp mov dword ptr [ edx + hexvar ] , ecx mov dword ptr [ edx + hexvar ] , eax lea eax , [ ebp - hexvar ] mov dword ptr [ edx + hexvar ] , eax mov dword ptr [ edx + num ] , hexvar mov dword ptr [ edx + num ] , hexvar mov dword ptr [ edx ] , hexvar call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp lea edx , [ ebp - hexvar ] mov dword ptr [ ecx + num ] , edx mov dword ptr [ ecx ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov edx , esp mov dword ptr [ edx + hexvar ] , ecx mov dword ptr [ edx + num ] , eax mov dword ptr [ edx + num ] , hexvar mov dword ptr [ edx ] , hexvar call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx lea eax , [ hexvar ] add esp , hexvar pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar lui a1 , hexvar addiu a2 , zero , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) addiu a1 , a1 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 addiu a0 , zero , num beqz v0 , hexvar lw ra , hexvar ( sp ) sw zero , ( v0 )
push r15 push r14 push r12 push rbx sub rsp , hexvar test rdx , rdx je hexvar mov rbx , rdx mov r14 , rsi mov r15 , rdi mov rdi , rdx xor esi , esi call r15
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] xor edx , edx mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi ] , ecx mov dword ptr [ esi + num ] , hexvar mov dword ptr [ ebp - num ] , eax call hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar xor ecx , ecx mov dl , cl mov dword ptr [ eax ] , hexvar and dl , num movzx eax , dl add esp , num pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , ecx mov dword ptr [ esi ] , eax mov dword ptr [ ebp - hexvar ] , edi call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] test eax , eax setne bl movzx eax , bl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , ecx mov dword ptr [ esi ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] sub eax , - num sete bl movzx ecx , bl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax mov dword ptr [ edx + num ] , num call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] push eax lea eax , [ ebx - hexvar ] push eax push hexvar lea eax , [ esp + hexvar ] push eax call hexvar add esp , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] lea eax , [ esp + hexvar ] push eax lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] je hexvar call hexvar add esp , hexvar pop ebx ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r15 , rdx mov r12 , rsi mov rbx , rdi xor r14d , r14d xor edi , edi xor esi , esi mov rdx , rbx mov ecx , hexvar call hexvar test eax , eax jle hexvar mov ebp , eax mov esi , hexvar mov edi , eax mov edx , hexvar call hexvar test rax , rax je hexvar mov r13 , rax mov rdi , rax mov esi , ebp mov rdx , rbx mov ecx , hexvar call hexvar test eax , eax je hexvar mov edi , dword ptr [ rip + hexvar ] lea ecx , [ rdi + num ] mov dword ptr [ rip + hexvar ] , ecx mov rsi , r13 mov edx , eax mov rcx , r12 mov r8 , r15 call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax call hexvar mov r14d , eax jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar xor r14d , r14d xor ebx , ebx mov rdi , rbx call hexvar mov rdi , r13 call hexvar mov eax , r14d add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push edi push esi xor eax , eax push ebx mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar test esi , esi je hexvar mov edx , dword ptr [ esi + hexvar ] mov eax , num test edx , edx jne hexvar pop ebx pop esi pop edi ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , num mov dword ptr [ esp + hexvar ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar pop esi pop edi pop ebp ret
ldr r3 , [ r1 , hexvar ] mov r2 , r1 cmp r3 , num cmpne r3 , num ldr r1 , [ r0 , hexvar ] moveq r3 , num movne r3 , num cmp r1 , num cmpne r1 , num beq hexvar ldr r1 , [ r0 , hexvar ] cmp r3 , num and r1 , r1 , hexvar beq hexvar cmp r1 , hexvar beq hexvar mov r0 , num bx lr cmp r3 , num bne hexvar ldr r3 , [ r2 , hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar beq hexvar mvn r0 , num bx lr ldr r3 , [ r2 , hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar beq hexvar cmp r1 , hexvar beq hexvar push { r4 , r5 , r6 , r7 } add r5 , r0 , hexvar ldm r5 , { r4 , r5 } add r7 , r2 , hexvar ldm r7 , { r6 , r7 } cmp r4 , r6 sbcs r3 , r5 , r7 blt hexvar cmp r6 , r4 sbcs r3 , r7 , r5 movlt r0 , num bge hexvar pop { r4 , r5 , r6 , r7 } bx lr ldr r1 , [ r0 ] pop { r4 , r5 , r6 , r7 } ldr r0 , [ r2 ] b hexvar mvn r0 , num b hexvar
push ebp mov ebp , esp sub esp , hexvar call hexvar add eax , hexvar sub esp , hexvar push dword ptr [ ebp + num ] call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jg hexvar mov eax , num jmp hexvar sub esp , num push dword ptr [ ebp - hexvar ] push dword ptr [ ebp + num ] call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] leave ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu a2 , zero , num sw s3 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a1 lw s3 , - hexvar ( gp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) sw s1 , hexvar ( sp ) addiu a1 , a1 , - hexvar move s1 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) move a0 , zero sw s2 , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) lw v0 , ( s3 ) sw v0 , hexvar ( sp ) jalr t9 nop move a1 , s1 jal hexvar move a0 , v0 lw gp , hexvar ( sp ) lw v0 , hexvar ( s0 )
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - num ] ldr r3 , [ fp , - num ] ldr r2 , [ fp , - hexvar ] str r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] ldr r2 , [ r3 , num ] ldr r3 , [ fp , - num ] str r2 , [ r3 , num ] ldr r3 , [ fp , - num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ fp , - num ] mov r2 , num str r2 , [ r3 , num ] ldr r3 , [ fp , - num ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ fp , - num ] mov r0 , r3 sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] xor esi , esi mov edi , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , edi mov dword ptr [ ebp - hexvar ] , edx mov edx , esi mov esi , dword ptr [ ebp - hexvar ] div esi
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) bnez v0 , hexvar nop lui v0 , hexvar addiu a1 , v0 , hexvar move a0 , zero lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lui v0 , hexvar addiu a1 , v0 , hexvar move a0 , zero lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
sub rsp , hexvar mov rax , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] lea rcx , [ rax + hexvar ] mov qword ptr [ rsp + hexvar ] , rcx mov rcx , qword ptr [ rsp + hexvar ] mov rsi , qword ptr [ rcx ] lea rcx , [ rax + hexvar ] mov qword ptr [ rsp + hexvar ] , rcx mov rcx , qword ptr [ rsp + hexvar ] mov rcx , qword ptr [ rcx ] add rax , hexvar mov qword ptr [ rsp + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] mov r8d , dword ptr [ rax ] mov edx , hexvar call hexvar mov dword ptr [ rsp + hexvar ] , eax mov edx , hexvar mov ecx , hexvar jmp hexvar mov rax , qword ptr [ rsp + hexvar ] mov edx , dword ptr [ rsp + hexvar ] mov dword ptr [ rax ] , edx mov rax , qword ptr [ rsp + hexvar ] mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rsp + hexvar ] mov qword ptr [ rdx ] , rax mov edx , hexvar mov eax , num nop dword ptr [ rax ] cmp edx , hexvar jle hexvar cmp edx , hexvar je hexvar cmp edx , hexvar jne hexvar jmp hexvar nop word ptr [ rax + rax ] cmp edx , hexvar je hexvar cmp edx , hexvar jne hexvar mov edx , hexvar xor eax , eax jmp hexvar cmp dword ptr [ rsp + hexvar ] , num mov edx , hexvar cmovs edx , ecx jmp hexvar add rsp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rdi , num movabs rsi , num movabs rdx , num call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num mov rdi , qword ptr [ rbp - num ] call hexvar movabs rdi , num movabs rsi , num movabs rdx , num mov dword ptr [ rbp - hexvar ] , eax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num mov rdi , qword ptr [ rbp - num ] call hexvar movabs rdi , num movabs rsi , num movabs rdx , num mov dword ptr [ rbp - hexvar ] , eax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num mov rdi , qword ptr [ rbp - num ] call hexvar movabs rdi , num movabs rsi , num movabs rdx , num mov dword ptr [ rbp - hexvar ] , eax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num mov rdi , qword ptr [ rbp - num ] call hexvar mov edx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rdx add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rdx + hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rip + hexvar ] jmp rdx mov rax , qword ptr [ rbp - hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call rax test eax , eax setne cl movzx eax , cl mov edx , eax mov rdx , qword ptr [ rdx * num + hexvar ] jmp rdx mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbx test byte ptr [ rip + hexvar ] , hexvar je hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov esi , hexvar mov rdi , rax call hexvar test eax , eax je hexvar mov esi , hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx mov esi , num call hexvar test eax , eax je hexvar mov esi , hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov esi , hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar mov rdi , rbx call hexvar pop rbx jmp hexvar pop rbx ret
push rbx sub rsp , hexvar mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rsp + num ] , rax mov ecx , hexvar mov ebx , hexvar jmp hexvar call hexvar mov qword ptr [ rip + hexvar ] , rax mov ecx , hexvar nop cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar cmp qword ptr [ rsp + num ] , num mov ecx , hexvar cmove ecx , ebx jmp hexvar add rsp , hexvar pop rbx ret
push rbx sub rsp , hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov qword ptr [ rsp + num ] , rax mov eax , hexvar mov ebx , hexvar jmp hexvar cmp qword ptr [ rsp + num ] , num mov eax , hexvar cmove eax , ebx cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar mov esi , hexvar xor edi , edi call hexvar mov esi , hexvar xor edi , edi call hexvar mov eax , hexvar jmp hexvar add rsp , hexvar pop rbx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move s0 , a0 move v1 , zero addiu v0 , v0 , num addiu t0 , zero , hexvar move a1 , s0 addu a3 , s0 , v1 lb a0 , ( a3 ) beq a0 , t0 , hexvar addiu a2 , v1 , num sb a0 , ( a1 ) move v1 , a2 sltu a0 , v1 , v0 bnez a0 , hexvar addiu a1 , a1 , num lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu v1 , v1 , num sltu t1 , v1 , v0 beqz t1 , hexvar addu t2 , s0 , a2 lb t1 , ( t2 ) addiu t1 , t1 , - hexvar andi t2 , t1 , hexvar sltiu t2 , t2 , num beqz t2 , hexvar nop lb t2 , num ( a3 ) addiu t2 , t2 , - hexvar andi t3 , t2 , hexvar sltiu t3 , t3 , num beqz t3 , hexvar sll t1 , t1 , num lbu t3 , num ( a3 ) addu a3 , t1 , t2 addiu t1 , t3 , - hexvar sll a3 , a3 , num andi t1 , t1 , hexvar addu a3 , t1 , a3 sltiu t1 , t1 , num beqz t1 , hexvar nop b hexvar sb a3 , ( a1 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a3 , hexvar ( sp ) sw a2 , hexvar ( sp ) move a3 , a1 move a2 , a0 lui a1 , hexvar addiu a1 , a1 , - hexvar lw a0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar xor ecx , ecx mov dword ptr [ eax ] , hexvar mov eax , ecx add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax call hexvar xor ecx , ecx mov dword ptr [ eax ] , hexvar mov eax , ecx add esp , num pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r5 , [ r0 , hexvar ] ldrb r2 , [ r5 ] cmp r2 , hexvar addeq r3 , r5 , num streq r3 , [ r0 , hexvar ] ldrbeq r2 , [ r5 , num ] moveq r5 , r3 sub r3 , r2 , hexvar moveq r6 , num movne r6 , num cmp r3 , num bhi hexvar mov r4 , num mvn lr , hexvar ldr r7 , [ pc , hexvar ] b hexvar umull r2 , r3 , ip , r7 cmp r4 , r3 , lsr num mov r2 , r1 bgt hexvar add r5 , r5 , num str r5 , [ r0 , hexvar ] ldrb r1 , [ r5 ] add r4 , r4 , r4 , lsl num sub r3 , r1 , hexvar sub ip , lr , r3 and r3 , r3 , hexvar add r4 , r2 , r4 , lsl num cmp r3 , num sub r4 , r4 , hexvar bls hexvar cmp r4 , num orrle r6 , r6 , num cmp r6 , num bne hexvar ldr r3 , [ r0 , num ] mov r6 , r0 sub r3 , r3 , r5 cmp r4 , r3 bgt hexvar ldr r2 , [ r0 , num ] add r3 , r5 , r4 tst r2 , num str r3 , [ r0 , hexvar ] beq hexvar ldrb r2 , [ r5 , r4 ] cmp r2 , hexvar addeq r3 , r3 , num streq r3 , [ r0 , hexvar ] cmp r4 , num ldr r7 , [ r6 , hexvar ] ldr r8 , [ r6 , hexvar ] ble hexvar ldr r1 , [ pc , hexvar ] mov r2 , num mov r0 , r5 bl hexvar subs r1 , r0 , num bne hexvar ldrb r2 , [ r5 , num ] cmp r2 , hexvar cmpne r2 , hexvar moveq r3 , num movne r3 , num cmp r2 , hexvar orreq r3 , r3 , num cmp r3 , num beq hexvar ldrb r3 , [ r5 , num ] cmp r3 , hexvar beq hexvar cmp r7 , r8 blt hexvar mov r0 , num str r0 , [ r6 , hexvar ] pop { r4 , r5 , r6 , r7 , r8 , pc }
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r4 , r0 ldr r5 , [ pc , hexvar ] ldr r8 , [ pc , hexvar ] ldr r1 , [ r5 ] ldr r0 , [ r8 ] sub sp , sp , hexvar cmp r1 , r4 str r0 , [ sp , hexvar ] mov r6 , r2 mov r7 , r3 ldr sb , [ sp , hexvar ] ldreq r0 , [ r1 , num ] beq hexvar ldr r3 , [ r4 , hexvar ] cmp sb , num moveq sl , num movne sl , num tst r3 , hexvar bne hexvar ldr r3 , [ r4 , hexvar ] cmp r3 , num beq hexvar ldrb r3 , [ r3 , hexvar ] lsrs r3 , r3 , num beq hexvar ldr r0 , [ r4 , num ] cmp r0 , num beq hexvar ldr r3 , [ r4 , hexvar ] ldr r2 , [ r4 , hexvar ] cmp r1 , num str r2 , [ r3 , hexvar ] ldr r2 , [ r4 , hexvar ] str r4 , [ r5 ] str r3 , [ r2 , hexvar ] ldrne r3 , [ r1 , hexvar ] strne r1 , [ r4 , hexvar ] strne r3 , [ r4 , hexvar ] strne r4 , [ r3 , hexvar ] ldrne r3 , [ r4 , hexvar ] streq r4 , [ r4 , hexvar ] streq r4 , [ r4 , hexvar ] strne r4 , [ r3 , hexvar ] str sb , [ sp ] mov r2 , r6 mov r3 , r7 bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r8 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push r15 push r14 mov r15 , r8 push r13 push r12 mov r12 , rdi push rbp push rbx mov rbx , rdx mov r14 , rcx sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rsi mov rsi , qword ptr [ rdx + hexvar ] mov rdx , rdi mov rdi , rcx call hexvar mov rbp , rax xor eax , eax cmp rbp , qword ptr [ rbx + hexvar ] je hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r15 , rdx mov r14 , rsi mov r13 , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rbp , rax mov rdi , r13 call hexvar mov rbx , rax mov rdi , r14 call hexvar add eax , ebx cmp eax , hexvar jl hexvar mov rdi , qword ptr [ rip + hexvar ] xor r12d , r12d mov esi , hexvar xor eax , eax call hexvar jmp hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar xor r12d , r12d jmp hexvar lea rdi , [ rsp + hexvar ] xor r12d , r12d mov esi , hexvar mov edx , hexvar mov rcx , r13 xor eax , eax call hexvar lea rdi , [ rsp + hexvar ] mov esi , hexvar mov edx , hexvar mov rcx , r13 mov r8 , r14 xor eax , eax call hexvar mov rbx , rsp mov esi , hexvar mov edx , hexvar mov rdi , rbx mov rcx , r13 mov r8 , r14 xor eax , eax call hexvar mov edx , num mov rdi , rbp mov esi , hexvar mov rcx , rbx call hexvar test rax , rax jle hexvar mov rsi , qword ptr [ r15 + num ] mov rdi , rbp call hexvar test eax , eax jle hexvar mov rdi , rbp call hexvar call hexvar mov rdi , rax call hexvar mov rbx , rax mov edx , num mov rdi , rax mov esi , hexvar lea rcx , [ rsp + hexvar ] call hexvar test rax , rax jle hexvar cmp dword ptr [ r15 ] , num mov eax , hexvar mov edx , hexvar cmove rdx , rax mov esi , hexvar mov rdi , rbx xor eax , eax call hexvar mov rdi , rbx call hexvar mov r12d , num mov eax , r12d add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push { r4 , lr } ldr r3 , [ r0 , num ] ldr r3 , [ r3 , num ] cmp r3 , num bne hexvar mov ip , r1 ldr r3 , [ r0 , hexvar ] ldr r2 , [ r3 , hexvar ] mov r4 , r2 cmp r2 , num bne hexvar mov r0 , r4 pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , num ( a2 )
push rbx mov rbx , rdi mov rax , qword ptr [ rip + hexvar ] cmp rax , rdi je hexvar mov esi , num call hexvar mov rdi , rax test rdi , rdi je hexvar call hexvar pop rbx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) addiu s7 , zero , num sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) move s5 , a1 sw s4 , hexvar ( sp ) addiu s4 , zero , - num sw s3 , hexvar ( sp ) addiu s3 , zero , num sw s2 , hexvar ( sp ) addiu s2 , zero , num sw s1 , hexvar ( sp ) move s1 , a0 sw s0 , hexvar ( sp ) move a0 , a1 sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw fp , hexvar ( sp ) addiu a1 , zero , hexvar lw gp , hexvar ( sp ) move a0 , s1 lw t9 , - hexvar ( gp ) bal hexvar move s6 , v0 lw s0 , hexvar ( s1 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] lea rdx , [ rip + hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar lea rdi , [ rip + hexvar ] call hexvar mov rdi , rax mov eax , num call hexvar lea rdi , [ rip + hexvar ] call hexvar mov rdi , rax mov eax , num call hexvar mov edi , num call hexvar
push r15 push r14 push r13 push r12 mov r13 , rdx push rbp push rbx mov rbp , rsi mov r12 , rdi mov rsi , rdx mov rdi , rbp sub rsp , num call r12
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp + hexvar ] mov ecx , eax add ecx , - num mov dword ptr [ ebp + hexvar ] , ecx cmp eax , num jbe hexvar mov eax , dword ptr [ ebp + hexvar ] movzx eax , byte ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov ecx , dword ptr [ ebp + hexvar ] add ecx , num mov dword ptr [ ebp + hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , lr } mov r5 , r0 mov r4 , r1 ldr r3 , [ r1 , num ] cmp r3 , hexvar beq hexvar cmp r3 , hexvar beq hexvar cmp r3 , hexvar beq hexvar cmp r3 , hexvar beq hexvar cmp r3 , hexvar beq hexvar cmp r3 , hexvar beq hexvar mov r0 , num pop { r4 , r5 , r6 , pc }
push rbx test rdi , rdi je hexvar mov rbx , rdi test byte ptr [ rdi + num ] , num jne hexvar pop rbx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov edi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax xor esi , esi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax mov edx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
lui gp , hexvar lw v1 , num ( a0 ) addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu v0 , zero , hexvar sw s1 , hexvar ( sp ) addiu a3 , zero , - num sw v0 , hexvar ( sp ) addiu v0 , sp , hexvar lw s1 , - hexvar ( gp ) addiu a2 , zero , hexvar sw v0 , hexvar ( sp ) addiu a1 , zero , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) lw v0 , ( s1 ) lw t9 , hexvar ( v1 )
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx lea edx , [ ebp - num ] mov dword ptr [ esp + num ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar cmp eax , num je hexvar call hexvar xor ecx , ecx mov eax , dword ptr [ eax ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ esp ] , num mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp + num ] sub ecx , edx mov edx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , ecx imul edx add edx , ecx mov eax , edx shr eax , hexvar sar edx , hexvar add edx , eax mov dword ptr [ ebp - num ] , edx cvtsi2ss xmm0 , dword ptr [ ebp - num ] mov eax , esp movss dword ptr [ eax ] , xmm0 call hexvar fst dword ptr [ ebp - num ] movss xmm0 , dword ptr [ ebp - num ] movss dword ptr [ ebp - hexvar ] , xmm0 add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r4 , r2 ldr r2 , [ r1 , hexvar ] ldr r3 , [ r4 ] ands r2 , r2 , num str r1 , [ r3 ] bne hexvar ldmib r4 , { r0 , r1 } str r2 , [ r0 ] str r2 , [ r1 ] add r3 , r3 , num add r0 , r0 , num add r1 , r1 , num str r3 , [ r4 ] stmib r4 , { r0 , r1 } pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
mov r8 , rcx mov rcx , qword ptr [ rdi + hexvar ] test rcx , rcx je hexvar mov rdi , rsi mov rsi , rdx jmp hexvar push rax mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rcx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , esp mov dword ptr [ eax ] , hexvar call hexvar mov dword ptr [ hexvar ] , eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] sub eax , hexvar setl cl movzx edx , cl mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - num ] , eax jmp edx mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax + ecx * num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] inc eax mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax add esp , hexvar pop ebp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax + num ] mov dword ptr [ esp ] , ecx call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar add esp , num pop ebp ret
ldr r3 , [ r1 , hexvar ] ldr r2 , [ pc , hexvar ] tst r2 , r3 bne hexvar ldr r1 , [ r1 , num ] cmp r1 , num beq hexvar push { r4 , lr } ldr r3 , [ r0 , num ] ldr r3 , [ r3 , hexvar ] blx r3 pop { r4 , pc }
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] cmp eax , hexvar jne hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ esp + hexvar ] , eax sub esp , num push num push num push num push hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax + hexvar ] , hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax + hexvar ] , hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax + hexvar ] , num sub esp , num push num push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar sub esp , num push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar add esp , hexvar pop ebx ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edx , dword ptr [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax lea eax , [ edx - num ] cmp eax , num jbe hexvar mov eax , dword ptr [ ebx + hexvar ] mov dword ptr [ esp + num ] , edx test eax , eax je hexvar sub esp , num lea edx , [ esp + hexvar ] push edx push eax call hexvar add esp , hexvar cmp eax , - num je hexvar add eax , num mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , hexvar ( fp ) bnez v0 , hexvar nop lui v0 , hexvar addiu v0 , v0 , hexvar sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) addiu v1 , zero , hexvar sw v1 , ( v0 ) lw v0 , hexvar ( fp ) beqz v0 , hexvar nop lw v0 , hexvar ( fp ) bnez v0 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw v0 , hexvar ( fp ) lw v1 , hexvar ( fp ) sw v1 , hexvar ( v0 ) lw v0 , hexvar ( fp ) lw v1 , hexvar ( fp ) sw v1 , hexvar ( v0 ) nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ ebp + num ] mov dword ptr [ esi + num ] , eax mov edi , dword ptr [ ebp + num ] test edi , edi jle hexvar sub esp , hexvar mov dword ptr [ esi ] , eax shl eax , num push eax call hexvar add esp , hexvar test eax , eax mov dword ptr [ esi + num ] , eax je hexvar sub esp , num shl edi , num push edi push dword ptr [ ebp + num ] push eax call hexvar add esp , hexvar xor eax , eax add esp , hexvar pop ebx pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , num ( v0 )
push r14 push rbx push rax mov r14 , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , r14 call hexvar test rax , rax je hexvar mov r14 , rax mov rdi , rbx mov rsi , rax call hexvar test rax , rax je hexvar add rsp , num pop rbx pop r14 ret
push ebp mov ebp , esp push esi sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] and al , num mov byte ptr [ ebp - num ] , al mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + hexvar ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp + hexvar ] jne hexvar cmp dword ptr [ ebp - hexvar ] , - hexvar je hexvar call hexvar jmp hexvar test byte ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp + num ] add eax , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar xor ecx , ecx mov dword ptr [ ebp - hexvar ] , eax cmp ecx , dword ptr [ ebp - hexvar ] jg hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] and eax , num cmp eax , num jne hexvar xor eax , eax cmp eax , dword ptr [ ebp - hexvar ] jg hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , eax add esp , hexvar pop esi pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , eax mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ esp + hexvar ] , ecx push dword ptr [ esp + hexvar ] call hexvar mov edi , eax mov dword ptr [ esp ] , eax call hexvar add esp , hexvar test esi , esi je hexvar mov ebp , eax sub esp , num push dword ptr [ eax ] push dword ptr [ esi ] call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , dword ptr [ esi + num ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar add esp , hexvar cmp eax , num jne hexvar mov eax , dword ptr [ ebp + num ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar add esp , hexvar cmp eax , num jne hexvar sub esp , hexvar push dword ptr [ edi + num ] call hexvar mov esi , eax add esp , hexvar cmp eax , dword ptr [ esp + num ] je hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] add ecx , num adc eax , num mov edx , esp mov dword ptr [ edx + num ] , eax mov dword ptr [ edx ] , ecx call hexvar cmp eax , num sete bl and bl , num movzx eax , bl add esp , hexvar pop ebx pop ebp ret
push r12 push rbp push rbx mov rbp , rsi mov ebx , dword ptr [ rdi + hexvar ] mov rax , qword ptr [ rdi + hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax jne hexvar mov r12 , rdi mov edx , ebx test rdx , rdx jne hexvar test ebx , ebx je hexvar lea edi , [ rbx - num ] add rdi , num lea rsi , [ rdi + rdi * num ] shl rsi , num add rsi , rax mov rdx , rbp lea rcx , [ rax + hexvar ] add rdx , num mov qword ptr [ rdx - num ] , rax mov rax , rcx cmp rsi , rcx jne hexvar lea rbp , [ rbp + rdi * num ] mov qword ptr [ rbp ] , num mov eax , ebx pop rbx pop rbp pop r12 ret
movzx eax , byte ptr [ rdi + hexvar ] and eax , num cmp al , num jne hexvar movzx eax , byte ptr [ rsi + hexvar ] and eax , num cmp al , num jne hexvar mov rax , qword ptr [ rdi + num ] jmp qword ptr [ rax + hexvar ] sub rsp , num mov edi , num call hexvar xor eax , eax add rsp , num ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu a1 , zero , hexvar sw s2 , hexvar ( sp ) move s2 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) subu s0 , v0 , s2 lw t9 , - hexvar ( gp ) jalr t9 addiu a0 , s0 , hexvar move a2 , s0 lw gp , hexvar ( sp ) move s1 , v0 move a1 , s2 lw t9 , - hexvar ( gp ) jalr t9 move a0 , v0 addu v0 , s1 , s0 addiu v1 , zero , hexvar lw gp , hexvar ( sp ) addiu s0 , s0 , num sb v1 , ( v0 ) lui v1 , hexvar lw t9 , - hexvar ( gp ) addu v0 , s1 , s0 addiu a2 , v1 , - hexvar lw a1 , - hexvar ( v1 ) move a0 , s1 lw v1 , num ( a2 ) lbu a2 , num ( a2 ) swl a1 , ( v0 ) swr a1 , num ( v0 ) swl v1 , num ( v0 ) swr v1 , num ( v0 ) jalr t9 sb a2 , num ( v0 ) addiu v1 , zero , - num beq v0 , v1 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , v0 lw ra , hexvar ( sp ) move v0 , s1 lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) addiu a0 , zero , num jalr t9 move s0 , zero lw gp , hexvar ( sp ) b hexvar move s1 , v0 lw t9 , - hexvar ( gp )
sub rsp , hexvar mov r8 , r9 lea r9 , [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , r9 mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp ] , r9 xor r9d , r9d call hexvar mov dword ptr [ rsp + hexvar ] , eax mov esi , hexvar mov rcx , qword ptr [ rsp + hexvar ] mov edx , hexvar jmp hexvar mov esi , hexvar mov rax , rcx nop cmp esi , hexvar jg hexvar cmp esi , hexvar je hexvar cmp esi , hexvar jne hexvar cmp dword ptr [ rsp + hexvar ] , num mov esi , hexvar cmove esi , edx jmp hexvar nop word ptr [ rax + rax ] cmp esi , hexvar je hexvar cmp esi , hexvar jne hexvar mov esi , hexvar xor eax , eax jmp hexvar mov rcx , qword ptr [ rsp + hexvar ] add rsp , hexvar ret
mov rax , qword ptr [ rdi ] mov rdx , qword ptr [ rsi ] mov rax , qword ptr [ rax + num ] mov rdx , qword ptr [ rdx + num ] test rax , rax je hexvar test rdx , rdx je hexvar mov rcx , qword ptr [ rdx + hexvar ] cmp qword ptr [ rax + hexvar ] , rcx jb hexvar seta al movzx eax , al ret
mov eax , dword ptr [ rip + hexvar ] push r12 push rbp push rbx mov rbx , rdi test eax , eax je hexvar mov ebp , eax mov r12 , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rbx ] cmp ebp , num jne hexvar jmp hexvar nop dword ptr [ rax ] mov rdi , qword ptr [ rdi ] mov rsi , r12 call hexvar test eax , eax je hexvar mov rax , qword ptr [ rbx ] mov rdi , qword ptr [ rax + hexvar ] lea rbx , [ rax + hexvar ] test rdi , rdi jne hexvar mov rax , rbx pop rbx pop rbp pop r12 ret
sub r3 , r1 , num cmp r3 , num push { r4 , r5 , r6 , r7 , r8 , lr } mvnhi r7 , hexvar ldr r8 , [ pc , hexvar ] sub sp , sp , hexvar ldr r2 , [ r8 ] mov r5 , r0 str r2 , [ sp , hexvar ] ldrls r2 , [ pc , hexvar ] mov r6 , r1 addls r3 , r2 , r3 , lsl num ldrls r7 , [ r3 , hexvar ] mov r2 , hexvar ldr r3 , [ pc , hexvar ] mov r1 , num str r7 , [ sp ] add r0 , sp , num bl hexvar mov r0 , hexvar bl hexvar mov r4 , r0 add r0 , sp , num bl hexvar mov r3 , num ldr ip , [ sp , hexvar ] ldr r1 , [ r8 ] ldr r2 , [ r5 , hexvar ] cmp ip , r1 stmib r4 , { r0 , r7 } str r6 , [ r4 , hexvar ] str r2 , [ r4 ] str r4 , [ r5 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] str r3 , [ r4 , hexvar ] mov r0 , num bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , hexvar jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp + num ] cmp dword ptr [ eax + num ] , num je hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , eax mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) lui s0 , hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , - hexvar ( s0 ) beqz v0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 lw a0 , ( v0 ) lw gp , hexvar ( sp ) move s1 , v0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) blez v0 , hexvar lw a0 , - hexvar ( s0 ) lw v0 , hexvar ( a0 ) lui v1 , hexvar or v0 , v0 , v1 sw v0 , hexvar ( a0 ) lw t9 , - hexvar ( gp ) bal hexvar nop lui v0 , hexvar lw gp , hexvar ( sp ) move a2 , zero move a0 , s1 lw t9 , - hexvar ( gp ) bal hexvar lw a1 , - hexvar ( v0 ) move a0 , s1 lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) sw zero , - hexvar ( s0 ) lw t9 , - hexvar ( gp ) lw s0 , hexvar ( sp ) jr t9 addiu sp , sp , hexvar lw v0 , - hexvar ( gp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , zero , num addiu a1 , a1 , - hexvar move a0 , zero jalr t9 lw s0 , ( v0 ) addiu a1 , zero , num lw gp , hexvar ( sp ) move a2 , v0 move a0 , s0 lw v0 , - hexvar ( gp )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui a1 , hexvar addiu a1 , a1 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax call hexvar sub esp , num lea esi , [ esp + hexvar ] push esi lea eax , [ ebx + hexvar ] push eax push num call hexvar mov eax , num call hexvar add esp , hexvar push num push esi push num call hexvar mov dword ptr [ esp ] , num call hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 move s0 , a1 beqz a0 , hexvar move s2 , a2 beqz s0 , hexvar move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s3 , v0 move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s0 , v0 move a0 , s2 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a3 , s0 move a2 , v0 move a1 , s3 move a0 , s1 jal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) b hexvar move s1 , v0 move a0 , s2 lw t9 , - hexvar ( gp )
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) lui s0 , hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , - hexvar ( s0 ) beqz v0 , hexvar lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) bal hexvar nop lw ra , hexvar ( sp ) sw v0 , - hexvar ( s0 )
push dword ptr [ esp + hexvar ] push num push dword ptr [ esp + hexvar ] push ecx call hexvar mov esi , eax mov ecx , edx add esp , hexvar test edx , edx jne hexvar mov eax , dword ptr [ esp + hexvar ] add eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax push dword ptr [ esp + hexvar ] push num push dword ptr [ esp + hexvar ] push eax call hexvar mov dword ptr [ esp + hexvar ] , eax mov ecx , edx add esp , hexvar test edx , edx jne hexvar mov eax , dword ptr [ esp + hexvar ] add eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax add eax , dword ptr [ esp + hexvar ] jb hexvar mov dword ptr [ esp + hexvar ] , eax mov edx , esi mov eax , edi call hexvar test eax , eax js hexvar mov eax , dword ptr [ edi + hexvar ] mov word ptr [ eax + esi * num ] , num jmp hexvar sub esp , hexvar push num mov edx , eax mov eax , dword ptr [ esp + hexvar ] call hexvar mov dword ptr [ esp + hexvar ] , eax add esp , hexvar push num lea eax , [ ebp - hexvar ] push eax push num mov ebx , ebp call hexvar push dword ptr [ esp + hexvar ] push hexvar lea edx , [ ebp - hexvar ] push edx push eax call hexvar add esp , hexvar jmp hexvar sub esp , hexvar push num mov edx , eax mov eax , dword ptr [ esp + hexvar ] call hexvar mov dword ptr [ esp + hexvar ] , eax add esp , hexvar push num lea eax , [ ebp - hexvar ] push eax push num mov ebx , ebp call hexvar push dword ptr [ esp + hexvar ] push hexvar lea edx , [ ebp - hexvar ] push edx push eax call hexvar add esp , hexvar jmp hexvar sub esp , num push num lea eax , [ ebp - hexvar ] push eax push num mov ebx , ebp call hexvar add esp , num push dword ptr [ esp + hexvar ] push eax call hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax add esp , hexvar jmp hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , rsp add rdx , - hexvar mov rsp , rdx mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rsi mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rdi mov rdi , qword ptr [ rax ] mov rsi , qword ptr [ rcx ] mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , rdx call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax cmp qword ptr [ rcx ] , num setne r8b mov byte ptr [ rbp - hexvar ] , r8b mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar xor esi , esi mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rcx ] call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsp , rbp pop rbp ret
push r14 push r13 mov r13 , rdi push r12 push rbp mov rbp , rdx push rbx mov rbx , rsi mov rdi , rbx sub rsp , hexvar mov esi , dword ptr [ rdx ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar test al , al jne hexvar mov edi , dword ptr [ rbp ] lea r12 , [ rsp + hexvar ] mov rsi , r12 call hexvar mov ebp , dword ptr [ rbp ] mov rsi , rbx mov edi , num mov byte ptr [ rsp + hexvar ] , num call hexvar and ebp , hexvar cmp byte ptr [ r13 + hexvar ] , num mov r14 , rax mov rbx , qword ptr [ rip + hexvar ] mov edx , num jne hexvar test dword ptr [ r13 + hexvar ] , hexvar je hexvar lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdx , rax sub rsp , num add r12 , num mov rdi , qword ptr [ rip + hexvar ] push r12 mov r9 , rbp mov r8 , r14 mov rcx , rbx mov esi , num xor eax , eax call hexvar pop rax pop rdx jmp hexvar nop dword ptr [ rax ] mov rsi , rbx mov edi , num call hexvar lea rsi , [ rip + hexvar ] mov rbx , qword ptr [ rip + hexvar ] mov edx , num xor edi , edi mov rbp , rax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rdx , rax mov r8 , rbp mov rcx , rbx mov esi , num xor eax , eax call hexvar call hexvar mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] or eax , hexvar mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jge hexvar mov dword ptr [ ebp - hexvar ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx ] , eax jmp hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
lea eax , [ ebx - hexvar ] lea esi , [ esi ] lea edi , [ edi ] sub esp , num push eax lea eax , [ ebx - hexvar ] mov dword ptr [ esp + num ] , eax push eax push num call hexvar movzx edx , byte ptr [ esi + hexvar ] mov eax , ebp shr dl , num movzx edx , dl call hexvar add esp , hexvar push eax lea eax , [ ebx - hexvar ] push eax push num call hexvar add esp , hexvar mov eax , dword ptr [ esp + num ] cmp byte ptr [ eax + hexvar ] , num je hexvar movzx ecx , byte ptr [ esi + hexvar ] lea eax , [ ebx - hexvar ] and ecx , num cmp cl , num je hexvar cmp cl , num lea eax , [ ebx - hexvar ] je hexvar lea eax , [ ebx - hexvar ] lea edx , [ ebx - hexvar ] cmp cl , num cmovne eax , edx mov byte ptr [ esp + hexvar ] , cl sub esp , num push eax push dword ptr [ esp + num ] push num call hexvar add esp , hexvar movzx edx , byte ptr [ esi + hexvar ] movzx ecx , byte ptr [ esp + hexvar ] cmp dl , cl je hexvar mov eax , dword ptr [ esp + num ] xor edx , ecx movzx edx , dl call hexvar sub esp , num push eax lea eax , [ ebx - hexvar ] push eax push num call hexvar add esp , hexvar mov eax , dword ptr [ esp + num ] mov edx , dword ptr [ esi + hexvar ] call hexvar sub esp , num push eax lea eax , [ ebx - hexvar ] push eax push num call hexvar mov edx , dword ptr [ ebx + hexvar ] add esp , hexvar mov esi , dword ptr [ esi + hexvar ] test edx , edx je hexvar cmp esi , dword ptr [ ebx + hexvar ] jb hexvar lea eax , [ ebx - hexvar ] sub esp , num push num push eax push num call hexvar add esp , hexvar push esi push eax push num call hexvar add esp , hexvar sub esp , num push dword ptr [ edi ] push hexvar call hexvar add esp , hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , hexvar ( a0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) beqz v0 , hexvar nop lui v0 , hexvar addiu v0 , v0 , - hexvar b hexvar nop lui v0 , hexvar addiu v0 , v0 , - hexvar sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move s2 , v0 lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) addu v0 , s2 , v0 addiu v0 , v0 , num move s1 , v0 move s0 , zero move a3 , s1 move a2 , s0 lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) sw v0 , hexvar ( fp ) lw a3 , hexvar ( fp ) lw a2 , hexvar ( fp ) lui v0 , hexvar addiu a1 , v0 , - hexvar lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lw v0 , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx lea edx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx mov ah , cl test al , num mov byte ptr [ ebp - hexvar ] , ah jne hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num mov byte ptr [ ebp - hexvar ] , al lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx call hexvar mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp push r15 push r14 push r12 push rbx mov r12d , ecx mov r14 , rsi mov rbx , rdi mov rdi , rdx call hexvar test rax , rax je hexvar mov r15 , rax mov rdi , rbx call hexvar test eax , eax jle hexvar xor ebp , ebp nop mov rdi , rbx mov esi , ebp call hexvar mov rdi , r15 mov rsi , rax mov edx , r12d call hexvar test rax , rax je hexvar add ebp , num mov rdi , rbx call hexvar cmp ebp , eax jl hexvar test r12b , hexvar jne hexvar mov rdi , r15 xor esi , esi call hexvar test r12d , hexvar jne hexvar mov rdi , r15 mov rsi , r14 xor edx , edx mov ecx , r12d call hexvar test eax , eax jne hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov rdi , r15 call hexvar xor r15d , r15d mov rax , r15 pop rbx pop r12 pop r14 pop r15 pop rbp ret
push { r4 , r5 , r6 , lr } mov r4 , r0 mov r5 , r1 ldr r1 , [ r0 , num ] ldr r0 , [ pc , hexvar ] umull r2 , r3 , r1 , r0 lsr r3 , r3 , num add r3 , r3 , r3 , lsl num cmp r1 , r3 beq hexvar ldr r2 , [ r4 , hexvar ] ldr r3 , [ r4 , num ] add r1 , r3 , num str r1 , [ r4 , num ] str r5 , [ r2 , r3 , lsl num ] mov r0 , num pop { r4 , r5 , r6 , pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar or v0 , a2 , a1 andi v0 , v0 , num sw s3 , hexvar ( sp ) lw v1 , - hexvar ( gp ) move s3 , a2 sw s2 , hexvar ( sp ) move s2 , a1 sw ra , hexvar ( sp ) sw v1 , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v1 , ( v1 ) sw v1 , hexvar ( sp ) bnez v0 , hexvar addiu s4 , sp , hexvar lw v0 , ( a2 )
sub rsp , hexvar mov rax , qword ptr [ rdi + num ] mov r9 , rcx lea rcx , [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] cmp dword ptr [ rax + hexvar ] , num lea rax , [ rip + hexvar ] push r8 mov r8d , hexvar cmove rcx , rax call hexvar add rsp , hexvar ret
addiu sp , sp , - hexvar lui gp , hexvar sw s2 , hexvar ( sp ) addiu gp , gp , hexvar lw s2 , hexvar ( a0 ) sw s7 , hexvar ( sp ) move s7 , a0 sw s1 , hexvar ( sp ) move s1 , a1 addiu a3 , s2 , num sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sltu v0 , a3 , s2 sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) srl a2 , a3 , hexvar sw s6 , hexvar ( sp ) sll v0 , v0 , num sw s5 , hexvar ( sp ) sll a3 , a3 , num sw s4 , hexvar ( sp ) or a2 , a2 , v0 sw s3 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw s0 , hexvar ( a0 ) beqz v0 , hexvar lw gp , hexvar ( sp ) beqz s2 , hexvar sw v0 , hexvar ( s7 ) lw t3 , - hexvar ( gp ) sll t2 , s2 , num move a2 , s0 addu t1 , s0 , t2 addiu t3 , t3 , hexvar move a0 , s0 move a3 , v0 lw v1 , ( a0 ) lw a1 , hexvar ( v1 )
sub rsp , hexvar mov dword ptr [ rsp + hexvar ] , num mov rax , qword ptr [ rip ] jmp rax mov eax , dword ptr [ rsp + hexvar ] sub eax , num setl cl movzx edx , cl mov esi , edx mov rsi , qword ptr [ rsi * num ] mov dword ptr [ rsp + hexvar ] , eax jmp rsi lea rax , [ rsp + hexvar ] mov rdi , rax mov qword ptr [ rsp + hexvar ] , rax call hexvar movsxd rdi , dword ptr [ rsp + hexvar ] imul rdi , rdi , hexvar lea rsi , [ rdi ] movsxd rdx , dword ptr [ rdi ] mov rdi , qword ptr [ rsp + hexvar ] mov dword ptr [ rsp + hexvar ] , eax call hexvar lea rdx , [ rsp + hexvar ] mov rdi , qword ptr [ rsp + hexvar ] mov rsi , rdx mov dword ptr [ rsp + hexvar ] , eax mov qword ptr [ rsp + hexvar ] , rdx call hexvar movsxd rdx , dword ptr [ rsp + hexvar ] mov ecx , edx imul rdx , rdx , hexvar lea rdx , [ rdx ] mov r8d , num mov esi , hexvar mov rdi , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp + num ] , rsi mov r9 , qword ptr [ rsp + num ] mov dword ptr [ rsp + num ] , ecx mov rcx , r9 mov r10d , dword ptr [ rsp + num ] mov r9d , r10d mov dword ptr [ rsp ] , eax call hexvar test eax , eax setne r11b movzx eax , r11b mov ecx , eax mov rcx , qword ptr [ rcx * num ] jmp rcx mov dword ptr [ rsp + hexvar ] , num mov rax , qword ptr [ rip ] jmp rax mov rax , qword ptr [ rip ] jmp rax mov eax , dword ptr [ rsp + hexvar ] add eax , num mov dword ptr [ rsp + hexvar ] , eax mov rcx , qword ptr [ rip ] jmp rcx mov dword ptr [ rsp + hexvar ] , num mov rax , qword ptr [ rip ] jmp rax mov eax , dword ptr [ rsp + hexvar ] add rsp , hexvar ret
push rbp push rbx push rax mov rax , qword ptr [ rdi + hexvar ] mov ebp , num test rax , rax je hexvar mov rbx , rdi mov rdx , rsp xor esi , esi xor ecx , ecx call rax test eax , eax jle hexvar mov rcx , qword ptr [ rsp ] mov edi , hexvar mov esi , hexvar mov rdx , rbx mov r8d , eax xor r9d , r9d call hexvar mov ebp , eax mov eax , ebp add rsp , num pop rbx pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi movsd qword ptr [ rbp - hexvar ] , xmm0 mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rsi + hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar movsd xmm0 , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 mov dword ptr [ rbp - num ] , num jmp hexvar mov edi , num mov esi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] add rax , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar mov r8d , hexvar movabs r9 , hexvar movabs r10 , hexvar mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar movsd xmm0 , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , rax call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , rcx mov rsi , rax mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - num ] , eax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop lui a1 , hexvar lw gp , hexvar ( sp ) addiu a2 , zero , num addiu a1 , a1 , - hexvar lw s0 , ( v0 ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , zero addiu a0 , zero , num lw gp , hexvar ( sp ) move a2 , v0 lw t9 , - hexvar ( gp ) jalr t9 move a1 , s0
push ebx sub esp , hexvar call hexvar add ebx , hexvar push num push num push num push num push num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] lea eax , [ ebx - hexvar ] push eax push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar lui gp , hexvar sw s1 , hexvar ( sp ) lui s1 , hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) beqz a1 , hexvar lbu s0 , - hexvar ( s1 ) addu a3 , a0 , a1 move v0 , a0 addiu v0 , v0 , num sb s0 , - num ( v0 ) andi v1 , v0 , hexvar addiu v1 , v1 , hexvar bne v0 , a3 , hexvar addu s0 , s0 , v1 lw t9 , - hexvar ( gp ) move a2 , a1 jalr t9 andi a1 , s0 , hexvar beqz v0 , hexvar lw ra , hexvar ( sp ) addiu s0 , s0 , hexvar addu s0 , v0 , s0 lw ra , hexvar ( sp ) sb s0 , - hexvar ( s1 ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
mov rax , qword ptr [ rdi + num ] cmp dword ptr [ rax + num ] , num je hexvar sub rsp , num call hexvar cmp eax , hexvar sbb eax , eax and eax , hexvar add eax , hexvar add rsp , num ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push num push num push num push num push num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push eax push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar pop ebx ret
push r15 push r14 mov r14 , rdi push r13 push r12 mov r12 , rsi push rbp push rbx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov qword ptr [ rsp + hexvar ] , num call hexvar test byte ptr [ r12 + hexvar ] , num mov dword ptr [ rsp + hexvar ] , eax jne hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi call hexvar mov ecx , dword ptr [ rax ] sub ecx , num sete dl movzx esi , dl mov eax , esi mov rax , qword ptr [ rax * num + hexvar ] mov dword ptr [ rbp - hexvar ] , ecx jmp rax call hexvar mov ecx , dword ptr [ rax ] sub ecx , hexvar sete dl movzx esi , dl mov eax , esi mov rax , qword ptr [ rax * num + hexvar ] xor esi , esi mov dl , sil mov dword ptr [ rbp - hexvar ] , ecx mov byte ptr [ rbp - hexvar ] , dl jmp rax mov rax , qword ptr [ rbp - num ] mov cl , byte ptr [ rax + hexvar ] xor cl , num mov rax , qword ptr [ rip + hexvar ] mov byte ptr [ rbp - hexvar ] , cl jmp rax mov al , byte ptr [ rbp - hexvar ] and al , num movzx eax , al add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r4 , r0 ldr r3 , [ pc , hexvar ] ldr r0 , [ r3 ] bl hexvar ldr r3 , [ pc , hexvar ] ldr r5 , [ r3 ] mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] mov r2 , r0 mov r1 , num mov r0 , r5 bl hexvar ldr r3 , [ r4 ] cmp r3 , num beq hexvar ldr r7 , [ pc , hexvar ] ldr r6 , [ pc , hexvar ] mov r5 , num mov r2 , r7 mov r1 , r5 ldr r0 , [ r6 ] bl hexvar ldr r3 , [ r4 , num ] ! cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] ldr r1 , [ r3 ] mov r0 , hexvar bl hexvar pop { r4 , r5 , r6 , r7 , r8 , pc }
str fp , [ sp , - num ] ! add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - num ] str r1 , [ fp , - hexvar ] ldr r2 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] add r3 , r3 , hexvar ldm r3 , { r0 , r1 } stm r2 , { r0 , r1 } ldr r0 , [ fp , - num ] add sp , fp , num pop { fp } bx lr
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r2 , [ sp , num ] ldr r1 , [ sp , num ] mov r0 , r3 bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovl ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov dword ptr [ esp ] , num call hexvar mov dword ptr [ hexvar ] , eax mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov eax , dword ptr [ hexvar ] cmp eax , num lea eax , [ hexvar ] lea ecx , [ hexvar ] cmovne ecx , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call ecx add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov edi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , rdx mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov edx , hexvar call hexvar mov rdx , qword ptr [ rbp - hexvar ] cmp dword ptr [ rdx + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rsi mov edi , num mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov bl , byte ptr [ edx + hexvar ] and bl , num movzx edx , bl cmp edx , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call eax mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx call eax mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebx pop ebp ret
push ebp mov ebp , esp push eax mov al , byte ptr [ ebp + num ] and al , num mov byte ptr [ ebp - num ] , al mov al , byte ptr [ ebp - num ] and al , num mov byte ptr [ hexvar ] , al add esp , num pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar movsd qword ptr [ rbp - hexvar ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 movsd qword ptr [ rbp - hexvar ] , xmm2 movsd qword ptr [ rbp - hexvar ] , xmm3 movsd xmm0 , qword ptr [ rbp - hexvar ] subsd xmm0 , qword ptr [ rbp - hexvar ] movq rax , xmm0 movq xmm0 , rax call hexvar movq rax , xmm0 mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] movq xmm0 , rax call hexvar movq rdx , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] subsd xmm0 , qword ptr [ rbp - hexvar ] mulsd xmm0 , qword ptr [ rbp - hexvar ] movq rax , xmm0 movq xmm1 , rdx movq xmm0 , rax call hexvar movq rax , xmm0 movsd xmm0 , qword ptr [ rip + hexvar ] movq xmm4 , rax mulsd xmm4 , xmm0 movapd xmm0 , xmm4 movsd qword ptr [ rbp - num ] , xmm0 movsd xmm0 , qword ptr [ rbp - num ] movq rax , xmm0 movq xmm0 , rax leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rsi mov rcx , qword ptr [ rcx ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] cmp rax , num jae hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rdi mov esi , hexvar mov edx , num mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] cmp eax , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov eax , dword ptr [ rbp - num ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] mov rsp , rbp pop rbp ret
push ebx sub esp , num call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] add eax , hexvar sub esp , hexvar push eax call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] add eax , hexvar sub esp , hexvar push eax call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] add eax , hexvar sub esp , hexvar push eax call hexvar add esp , hexvar nop add esp , num pop ebx ret
lui gp , hexvar lw v0 , hexvar ( a0 ) addiu sp , sp , - hexvar addiu gp , gp , - hexvar lw v1 , hexvar ( v0 ) sw s5 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s3 , hexvar ( sp ) move s3 , a1 lw s5 , - hexvar ( gp ) lw s1 , hexvar ( v0 ) sw ra , hexvar ( sp ) sw s6 , hexvar ( sp ) subu s1 , s1 , v1 sw s4 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s0 , hexvar ( sp ) srl s1 , s1 , num sw gp , hexvar ( sp ) lw a1 , ( s5 ) sw a1 , hexvar ( sp ) beqz s1 , hexvar lw t9 , - hexvar ( gp ) lw s0 , hexvar ( a0 ) sll s1 , s1 , num addiu s6 , sp , hexvar move s2 , a0 addu s0 , s0 , v1 move s4 , a2 addu s1 , s0 , s1 lw t9 , - hexvar ( gp ) move a0 , s2 bal hexvar lw a1 , ( s0 )
cmp rdi , num ja hexvar lea rdx , [ rip + hexvar ] movsxd rax , dword ptr [ rdx + rdi * num ] add rax , rdx jmp rax lea rax , [ rip + hexvar ] ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } sub sp , sp , hexvar mov r8 , r0 mov r0 , sp ldr r6 , [ pc , hexvar ] ldr ip , [ pc , hexvar ] ldr lr , [ r6 ] ldr r3 , [ pc , hexvar ] cmp r2 , r1 strh ip , [ r0 ] mov r5 , num ldr r4 , [ pc , hexvar ] str lr , [ sp , hexvar ] str r3 , [ sp , num ] addls ip , sp , num bls hexvar add r3 , r0 , hexvar sub lr , r1 , num sub sl , r2 , num ldrb ip , [ lr , num ] ! add r3 , r3 , num and r7 , ip , hexvar ldrb sb , [ r4 , r7 ] ldrb r7 , [ r4 , ip , lsr num ] cmp sl , lr strb sb , [ r3 , - num ] strb r7 , [ r3 , - num ] add r5 , r5 , ip bne hexvar sub r1 , r2 , r1 add r3 , sp , num add ip , r3 , r1 , lsl num add r3 , r0 , num sub r3 , ip , r3 add r3 , r3 , r3 , lsr num asr r1 , r3 , num and r2 , r1 , hexvar add r5 , r2 , r5 mvn r5 , r5 asr r3 , r3 , num and r3 , r3 , hexvar ldrb r3 , [ r4 , r3 ] lsr r2 , r5 , num and r2 , r2 , hexvar and r1 , r1 , hexvar and r5 , r5 , hexvar strb r3 , [ sp , num ] ldrb r1 , [ r4 , r1 ] ldrb lr , [ r4 , r2 ] ldrb r5 , [ r4 , r5 ] ldr r3 , [ pc , hexvar ] add r4 , ip , num sub r4 , r4 , r0 strb r1 , [ sp , num ] mov r2 , r8 strh r3 , [ ip , num ] mov r1 , r4 strb lr , [ ip ] strb r5 , [ ip , num ] bl hexvar sub r0 , r4 , r0 clz r0 , r0 ldr r2 , [ sp , hexvar ] ldr r3 , [ r6 ] lsr r0 , r0 , num cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push ebx sub esp , hexvar call hexvar add ebx , hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax ] , num mov eax , num jmp hexvar sub esp , num lea eax , [ esp + hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov edx , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax ] , edx sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , num add esp , hexvar pop ebx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) lw s2 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , ( s2 ) sw v0 , hexvar ( sp ) beqz a0 , hexvar lw t9 , - hexvar ( gp ) move s1 , a0 lw t9 , - hexvar ( gp ) addiu a1 , sp , hexvar jalr t9 addiu a0 , sp , hexvar lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw v1 , hexvar ( v0 ) addiu v0 , v1 , - hexvar sltiu v0 , v0 , hexvar beqz v0 , hexvar move v0 , zero lw s3 , num ( s1 )
push { r4 , fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldr r2 , [ fp , - hexvar ] eor r4 , r2 , hexvar mov r0 , r3 mov r1 , r4 bl hexvar mov r3 , r0 mov r4 , r1 rsbs r3 , r3 , num rsc r4 , r4 , num mov r0 , r3 mov r1 , r4 sub sp , fp , num pop { r4 , fp , pc }
push rbx mov rbx , rsi cmp edi , num je hexvar mov eax , num test edi , edi jne hexvar call hexvar xor ecx , ecx test rax , rax setne cl mov qword ptr [ rbx ] , rax add ecx , ecx mov eax , ecx pop rbx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rsi mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] cmp rax , num mov ecx , hexvar mov edx , hexvar cmovb edx , ecx mov dword ptr [ rbp - hexvar ] , edx jmp hexvar mov dword ptr [ rbp - hexvar ] , num mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , hexvar mov edx , num call hexvar cmp eax , num mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ rbp - hexvar ] , ecx jmp hexvar mov dword ptr [ rbp - hexvar ] , num mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov dword ptr [ rbp - hexvar ] , num mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] cmp qword ptr [ rdx + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] cmp qword ptr [ rax ] , num sete cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rsi , qword ptr [ rax ] call hexvar cmp eax , num setne cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rcx mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov qword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) lui v0 , hexvar addiu a3 , v0 , hexvar lw a2 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbx mov rbx , rdi mov rdi , qword ptr [ rdi ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx ] , num pop rbx ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] mov r3 , num str r3 , [ sp , hexvar ] mov r0 , num bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] mov r1 , r3 ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - hexvar ] , eax je hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jne hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax + num ] cmp eax , hexvar jne hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax + num ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax + num ] cmp eax , hexvar jne hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar test al , num mov al , num mov byte ptr [ ebp - hexvar ] , al jne hexvar mov eax , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jne hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ eax + num ] mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ esi ] mov esi , dword ptr [ esi + num ] xor edx , esi xor ecx , edi xor ebx , ebx or ecx , edx mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , bl jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + num ] mov edx , dword ptr [ eax + hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + num ] mov edx , dword ptr [ eax + hexvar ] mov esi , dword ptr [ ebp - hexvar ] xor esi , edx mov edx , dword ptr [ ebp - hexvar ] xor edx , ecx or edx , esi sete bl mov dword ptr [ ebp - hexvar ] , edx mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] xor ecx , ecx test al , num mov edx , num cmovne ecx , edx cmp ecx , num setne al and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar test rcx , rcx je hexvar mov rbx , rcx mov r14 , rdx mov r15 , rsi mov r12 , rdi mov rax , rcx shr rax , hexvar movabs r13 , hexvar cmove r13 , rcx lea rax , [ rdi + hexvar ] mov qword ptr [ rsp + hexvar ] , rax lea rbp , [ rdi + hexvar ] nop word ptr cs : [ rax + rax ] nop dword ptr [ rax + rax ] mov rcx , qword ptr [ r12 + hexvar ] mov eax , dword ptr [ r12 + hexvar ] mov dword ptr [ rsp ] , eax mov rdi , r14 mov rsi , r15 mov rdx , rbx mov r8 , qword ptr [ rsp + hexvar ] mov r9 , rbp call hexvar sub rbx , r13 add r14 , r13 add r15 , r13 cmp rbx , r13 cmovb r13 , rbx test rbx , rbx jne hexvar mov eax , num add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar swc1 f12 , hexvar ( sp ) move a3 , zero sw s1 , hexvar ( sp ) addiu a2 , zero , num lw s1 , - hexvar ( gp ) addiu a1 , zero , hexvar lw t9 , - hexvar ( gp ) sw s0 , hexvar ( sp ) addiu s0 , sp , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) move a0 , s0 lw v0 , ( s1 ) sw v0 , hexvar ( sp ) bal hexvar nop lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , s0 lw v1 , hexvar ( sp ) lw v0 , ( s1 ) bne v1 , v0 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop
push rbp push r14 push rbx mov rbx , qword ptr [ rdi + hexvar ] test rsi , rsi je hexvar mov r14 , rsi mov rdi , qword ptr [ rsi ] mov bpl , num test rdi , rdi jne hexvar mov edi , dword ptr [ rbx ] mov esi , hexvar mov edx , hexvar call hexvar mov rdi , rax mov qword ptr [ r14 ] , rax xor ebp , ebp mov rsi , qword ptr [ rbx + num ] movsxd rdx , dword ptr [ rbx ] call hexvar test bpl , bpl je hexvar movsxd rax , dword ptr [ rbx ] add qword ptr [ r14 ] , rax mov eax , dword ptr [ rbx ] pop rbx pop r14 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rcx mov rdx , qword ptr [ rax ] cmp qword ptr [ rdx + hexvar ] , num setne sil mov qword ptr [ rbp - hexvar ] , rax mov byte ptr [ rbp - hexvar ] , sil mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov rdi , qword ptr [ rcx + hexvar ] call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rcx ] mov qword ptr [ rdi + hexvar ] , rax mov rsp , rbp pop rbp ret
push rbp push rbx sub rsp , num mov rbp , rsi mov rbx , rdx call hexvar test eax , eax jne hexvar mov rcx , rbx lea rdx , [ rip + hexvar ] mov esi , num mov rdi , rbp mov eax , num call hexvar add rsp , num pop rbx pop rbp ret
push { r4 , r5 , r6 , lr } ldr r3 , [ pc , hexvar ] sub sp , sp , num ldr r0 , [ r3 ] bl hexvar cmp r0 , num beq hexvar bl hexvar ldr r5 , [ pc , hexvar ] mov r4 , r0 ldrb r3 , [ r5 , num ] cmp r3 , num beq hexvar ldr r3 , [ r0 ] cmp r3 , hexvar bne hexvar ldr r3 , [ pc , hexvar ] ldr r0 , [ r3 ] bl hexvar cmp r0 , num bne hexvar add sp , sp , num pop { r4 , r5 , r6 , pc } stcl p2 , c7 , [ sb ] , hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) addiu a2 , zero , num lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) jal hexvar nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebx sub esp , num call hexvar add eax , hexvar sub esp , num lea edx , [ eax - hexvar ] push edx push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov ebx , eax call hexvar add esp , hexvar add esp , num pop ebx ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + num ] cmp eax , num je hexvar cmp eax , num jg hexvar cmp eax , num je hexvar jmp hexvar cmp eax , num je hexvar cmp eax , num je hexvar jmp hexvar call hexvar mov byte ptr [ ebp - num ] , al jmp hexvar call hexvar mov byte ptr [ ebp - num ] , al jmp hexvar call hexvar mov byte ptr [ ebp - num ] , al jmp hexvar mov eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ ebx + hexvar ] shl edx , num add eax , edx mov eax , dword ptr [ eax ] sub esp , num lea edx , [ ebx - hexvar ] push edx push eax call hexvar add esp , hexvar test eax , eax jne hexvar sub esp , hexvar push num call hexvar add esp , hexvar call hexvar movzx eax , al test eax , eax setne al xor eax , num movzx eax , al mov byte ptr [ ebp - num ] , al and byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ ebx + hexvar ] shl edx , num add eax , edx mov eax , dword ptr [ eax ] sub esp , num lea edx , [ ebx - hexvar ] push edx push eax call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ ebx + hexvar ] add edx , num shl edx , num add eax , edx mov eax , dword ptr [ eax ] sub esp , num lea edx , [ ebx - hexvar ] push edx push eax call hexvar add esp , hexvar test eax , eax jne hexvar sub esp , hexvar push num call hexvar add esp , hexvar call hexvar mov byte ptr [ ebp - num ] , al sub esp , hexvar push num call hexvar add esp , hexvar jmp hexvar cmp dword ptr [ ebp + num ] , num jg hexvar call hexvar call hexvar mov byte ptr [ ebp - num ] , al movzx eax , byte ptr [ ebp - num ] mov ebx , dword ptr [ ebp - num ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar move a3 , zero move a2 , zero sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) sw zero , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) bal hexvar sw v0 , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar nop
push ebp mov ebp , esp push esi sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esi ] , edx mov edx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ edx + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esi + hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + hexvar ] , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx add esp , num pop esi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] add r0 , sp , hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp ] ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bge hexvar mvn r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] mov r1 , r3 ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] mov r0 , r3 bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r2 , r3 bne hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , num bl hexvar ldr r3 , [ sp , hexvar ] b hexvar mvn r3 , num mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) sb v0 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) sb v0 , hexvar ( fp ) lbu v0 , hexvar ( fp ) beqz v0 , hexvar nop lbu v0 , hexvar ( fp ) xori v0 , v0 , num andi v0 , v0 , hexvar beqz v0 , hexvar nop addiu v0 , zero , - num b hexvar nop lbu v0 , hexvar ( fp ) xori v0 , v0 , num andi v0 , v0 , hexvar beqz v0 , hexvar nop lbu v0 , hexvar ( fp ) beqz v0 , hexvar nop addiu v0 , zero , num b hexvar nop lw a2 , - hexvar ( gp ) lw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar mov r8d , hexvar movabs r9 , hexvar movabs r10 , hexvar mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov esi , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] call hexvar mov dword ptr [ rbp - num ] , eax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) addiu v0 , zero , num sw v0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) bnez v0 , hexvar nop lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) move a1 , zero move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) move v1 , v0 lw v0 , - hexvar ( gp ) sw v1 , ( v0 ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) move a1 , zero move a0 , v0 lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw v0 , hexvar ( sp ) addiu v0 , v0 , num sw v0 , hexvar ( sp ) b hexvar nop lw v0 , hexvar ( sp ) lw v1 , ( v0 )
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edx , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ ebx + hexvar ] call hexvar xor edx , edx add dword ptr [ ebx + hexvar ] , eax mov esi , eax adc dword ptr [ ebx + hexvar ] , edx cmp dword ptr [ ebx + hexvar ] , eax jne hexvar add dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebx + hexvar ] , num adc dword ptr [ ebx + hexvar ] , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
lui gp , hexvar lui v0 , hexvar addiu gp , gp , - hexvar addiu sp , sp , - hexvar lui a3 , hexvar lui a2 , hexvar lw t9 , - hexvar ( gp ) addiu v0 , v0 , - hexvar sw gp , hexvar ( sp ) addiu a3 , a3 , - hexvar sw ra , hexvar ( sp ) addiu a2 , a2 , - hexvar sw v0 , hexvar ( sp ) move a1 , zero bal hexvar addiu a0 , zero , hexvar lui v1 , hexvar lw gp , hexvar ( sp ) beqz v0 , hexvar sw v0 , hexvar ( v1 ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) bal hexvar nop
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , edi xor edi , edi mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esi + hexvar ] mov dword ptr [ esp + hexvar ] , esi mov ecx , dword ptr [ esi + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp + hexvar ] , edx and esi , num mov dword ptr [ esp + hexvar ] , eax je hexvar mov edi , eax cmp ecx , ebp sete byte ptr [ esp + hexvar ] cmp edx , edi movzx eax , byte ptr [ esp + hexvar ] jne hexvar test al , al je hexvar xor esi , esi mov edi , dword ptr [ esp + hexvar ] xor edi , dword ptr gs : [ hexvar ] mov eax , esi jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jmp edx mov eax , dword ptr [ ebp + num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ ebp + hexvar ] mov edx , esp mov dword ptr [ edx ] , ecx call hexvar mov byte ptr [ ebp - num ] , al movzx ecx , byte ptr [ ebp - num ] and ecx , num mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx movzx eax , byte ptr [ ebp - num ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov dword ptr [ ebp - num ] , hexvar mov eax , dword ptr [ hexvar ] jmp eax movzx eax , byte ptr [ ebp - num ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax movzx eax , byte ptr [ ebp - num ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax mov dword ptr [ edx + num ] , hexvar call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push rbp push r15 push r14 push r12 push rbx mov ebp , edx mov rbx , rsi mov r14 , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov r12 , rax mov edx , num mov rdi , rax mov esi , hexvar mov rcx , rbx call hexvar test rax , rax jle hexvar cmp ebp , num je hexvar cmp ebp , num jne hexvar mov rdi , r12 xor esi , esi call hexvar mov r15 , rax mov edx , hexvar test r15 , r15 je hexvar add r14 , hexvar mov rdi , r14 call hexvar test eax , eax je hexvar mov rdi , qword ptr [ r14 ] mov rsi , r15 call hexvar mov ebp , eax jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar xor ebp , ebp jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , num mov r8d , hexvar jmp hexvar mov rax , qword ptr [ r14 + hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov rdi , r12 xor esi , esi call hexvar mov r15 , rax mov edx , num test r15 , r15 jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebp , ebp jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebp , ebp mov rdi , r15 call hexvar mov rdi , r12 call hexvar mov eax , ebp pop rbx pop r12 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] and al , num mov byte ptr [ ebp - num ] , al mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ edi + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp + hexvar ] cmp dword ptr [ eax + num ] , num jne hexvar mov al , byte ptr [ ebp - num ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov byte ptr [ ebp - hexvar ] , al call hexvar mov ecx , dword ptr [ ebp + num ] mov dl , byte ptr [ ebp - hexvar ] and dl , num movzx esi , dl mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push r14 push r13 push r12 push rbp mov r12 , rdi push rbx mov rbp , rsi sub rsp , hexvar mov r14d , dword ptr [ rip + hexvar ] mov r13 , qword ptr [ rsi + hexvar ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax cmp qword ptr [ rip + hexvar ] , num jg hexvar mov rdi , qword ptr [ rsi + num ] lea rsi , [ rip + hexvar ] mov rbx , rsp call qword ptr [ rbp ] mov rax , qword ptr [ rbp + hexvar ] mov rdx , r12 mov rsi , rbx mov rdi , qword ptr [ rax ] call hexvar test r14d , r14d mov rdx , rbx jne hexvar movzx eax , byte ptr [ rsp ] cmp al , hexvar jne hexvar nop add rdx , num movzx eax , byte ptr [ rdx ] cmp al , hexvar je hexvar cmp al , num sbb rdx , num xor eax , eax mov rdi , qword ptr [ rbp + num ] lea rsi , [ rip + hexvar ] call qword ptr [ rbp ] mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp mov edx , ecx add edx , - hexvar mov esp , edx mov edx , esp mov esi , edx add esi , - hexvar mov esp , esi mov esi , esp mov edi , esi add edi , - hexvar mov esp , edi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx - hexvar ] , edi mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx - hexvar ] , ecx mov edx , dword ptr [ edx - hexvar ] mov dword ptr [ esi - hexvar ] , edx mov edx , dword ptr [ esi - hexvar ] mov ebx , dword ptr [ edx + num ] mov ecx , dword ptr [ edx + hexvar ] add ebx , num adc ecx , num mov dword ptr [ edx + num ] , ebx mov dword ptr [ edx + hexvar ] , ecx mov edx , dword ptr [ esi - hexvar ] mov esi , dword ptr [ edx ] mov edx , dword ptr [ edx + num ] sub ebx , esi sbb ecx , edx setae dl mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ebx mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] mov r3 , num str r3 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r1 , [ sp ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r3 , num b hexvar mov r0 , r0 b hexvar mov r0 , r0 b hexvar mov r0 , r0 ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax lea eax , [ ebx - hexvar ] push eax lea eax , [ esp + hexvar ] push eax push hexvar push num push esi call hexvar add esp , hexvar test eax , eax je hexvar cmp eax , num je hexvar sub esp , hexvar push esi call hexvar mov esi , eax add esp , hexvar push num lea eax , [ ebx - hexvar ] push eax push num call hexvar push esi push eax push num push num call hexvar add esp , hexvar mov eax , num jmp hexvar sub esp , num push num lea eax , [ ebx - hexvar ] push eax push num call hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , num mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi ret
ldr r3 , [ pc , hexvar ] add ip , r1 , num push { r4 , r5 , r6 , r7 , r8 , lr } umull r4 , r5 , ip , r3 lsr r5 , r5 , num lsl r5 , r5 , num add r4 , r5 , num cmp r1 , r4 bls hexvar mov r4 , num str r4 , [ r2 ] mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , pc }
push { r4 , r5 , r6 , r7 , lr } mov r4 , num ldr r5 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r5 ] add r2 , sp , num str r4 , [ r2 , - num ] ! mov r7 , r1 ldr r1 , [ pc , hexvar ] str r3 , [ sp , num ] mov r6 , r0 bl hexvar ldr r3 , [ sp ] cmp r3 , r4 movne r0 , r4 bne hexvar mov r1 , r7 mov r0 , r6 bl hexvar ldr r2 , [ sp , num ] ldr r3 , [ r5 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov dword ptr [ esp ] , hexvar mov dword ptr [ esp + num ] , num lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , eax add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , rdx mov eax , num leave ret
ldr r3 , [ pc , hexvar ] tst r2 , hexvar push { r4 , r5 , r6 , r7 , r8 , lr } ldr r6 , [ pc , hexvar ] movne r6 , r3 mov r7 , r2 mov r8 , r0 mov r4 , r1 blx r6 mov r2 , r0 clz r0 , r0 tst r7 , hexvar lsr r0 , r0 , num popne { r4 , r5 , r6 , r7 , r8 , pc } ldrb r3 , [ r4 ] cmp r3 , num popeq { r4 , r5 , r6 , r7 , r8 , pc } cmp r2 , num beq hexvar cmp r3 , hexvar add r5 , r4 , num ldrb r3 , [ r4 , num ] beq hexvar cmp r3 , num mov r4 , r5 bne hexvar mov r0 , r3 pop { r4 , r5 , r6 , r7 , r8 , pc }
push { fp , lr } add fp , sp , num sub sp , sp , num str r0 , [ fp , - num ] ldr r3 , [ pc , hexvar ] ldrb r3 , [ r3 ] eor r3 , r3 , num and r3 , r3 , hexvar cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] mov r2 , num strb r2 , [ r3 ] mov r0 , num bl hexvar mov r3 , r0 cmp r3 , num blt hexvar bl hexvar bl hexvar ldr r3 , [ fp , - num ] ldr r0 , [ r3 , num ] ldr r3 , [ fp , - num ] ldr r1 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] mov r2 , num bl hexvar mov r0 , r0 sub sp , fp , num pop { fp , pc }
push rbp mov rbp , rsp movsd xmm3 , qword ptr [ rip + hexvar ] movsd xmm4 , qword ptr [ rip + hexvar ] movsd xmm5 , qword ptr [ rip + hexvar ] movsd xmm6 , qword ptr [ rip + hexvar ] movsd xmm7 , qword ptr [ rip + hexvar ] movsd xmm8 , qword ptr [ rip + hexvar ] movsd xmm9 , qword ptr [ rip + hexvar ] movsd xmm10 , qword ptr [ rip + hexvar ] movsd qword ptr [ rbp - num ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 movsd qword ptr [ rbp - hexvar ] , xmm2 mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx movsd xmm0 , qword ptr [ rbp - num ] movsd xmm1 , qword ptr [ rbp - hexvar ] subsd xmm1 , xmm5 mulsd xmm10 , xmm1 addsd xmm0 , xmm10 movsd xmm1 , qword ptr [ rbp - hexvar ] subsd xmm1 , xmm5 mulsd xmm9 , xmm1 subsd xmm0 , xmm9 movaps xmm1 , xmm3 mulsd xmm1 , xmm0 mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm1 movsd xmm0 , qword ptr [ rbp - num ] movsd xmm1 , qword ptr [ rbp - hexvar ] subsd xmm1 , xmm5 mulsd xmm8 , xmm1 subsd xmm0 , xmm8 movsd xmm1 , qword ptr [ rbp - hexvar ] subsd xmm1 , xmm5 mulsd xmm7 , xmm1 addsd xmm0 , xmm7 movaps xmm1 , xmm3 mulsd xmm1 , xmm0 mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm1 movsd xmm0 , qword ptr [ rbp - num ] movsd xmm1 , qword ptr [ rbp - hexvar ] subsd xmm1 , xmm5 mulsd xmm6 , xmm1 addsd xmm0 , xmm6 movsd xmm1 , qword ptr [ rbp - hexvar ] subsd xmm1 , xmm5 mulsd xmm4 , xmm1 subsd xmm0 , xmm4 mulsd xmm3 , xmm0 mov rdx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rdx ] , xmm3 pop rbp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , esp mov dword ptr [ edi ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , num lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu a0 , zero , hexvar sw s1 , hexvar ( sp ) move s1 , a1 sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move s0 , a2 addiu a0 , zero , num sb zero , num ( v0 ) sb zero , num ( v0 ) sb zero , hexvar ( v0 ) sb zero , hexvar ( v0 ) sw s1 , num ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx ] test rdx , rdx sete cl movzx eax , cl mov edx , eax mov rdx , qword ptr [ rdx * num + hexvar ] jmp rdx call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax mov dword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edi , dword ptr [ edx + num ] mov ebx , dword ptr [ edx + hexvar ] mov edx , dword ptr [ edx + num ] xor esi , edx xor edi , ebx mov edx , dword ptr [ ebp + hexvar ] mov ebx , esp mov dword ptr [ ebx + num ] , edx mov dword ptr [ ebx + num ] , edi mov dword ptr [ ebx ] , esi mov dword ptr [ ebx + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , num mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ esi + num ] push dword ptr [ eax ] call hexvar mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ esp ] , eax call hexvar mov ebp , eax add esp , hexvar xor eax , eax test ebp , ebp je hexvar sub esp , hexvar lea edi , [ esp + hexvar ] push edi call hexvar pop eax push dword ptr [ esi + hexvar ] push num push ebp lea eax , [ esp + hexvar ] push eax push edi call hexvar add esp , hexvar test eax , eax jg hexvar mov eax , dword ptr [ esp + hexvar ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar add esp , hexvar sub esp , hexvar push edi call hexvar add esp , hexvar xor eax , eax mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , num mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx + hexvar ] , ecx cmp dword ptr [ hexvar ] , num mov dword ptr [ ebp - num ] , eax jne hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax jmp hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp dword ptr [ eax + hexvar ] , num je hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + hexvar ] , eax add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ ebp + num ] movsx ecx , byte ptr [ ebp + num ] add ecx , - hexvar mov edx , ecx sub edx , hexvar mov byte ptr [ ebp - num ] , al mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov ecx , dword ptr [ ebp + num ] add ecx , hexvar mov dword ptr [ ebp - hexvar ] , ecx xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx ] mov esi , esp mov dword ptr [ esi ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ esp + hexvar ] , num call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jge hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov bl , byte ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov cl , bl mov dword ptr [ ebp - hexvar ] , eax mov eax , esi shl eax , cl mov cl , bl mov dword ptr [ ebp - hexvar ] , eax mov eax , edi shld eax , esi , cl xor ecx , ecx test bl , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] cmovne eax , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmovne ecx , eax mov bh , hexvar sub bh , bl mov dword ptr [ ebp - hexvar ] , ecx mov cl , bh mov eax , edi shr eax , cl mov cl , bh shrd esi , edi , cl test bh , hexvar cmovne esi , eax mov edi , dword ptr [ ebp - hexvar ] cmovne eax , edi mov ecx , dword ptr [ ebp - hexvar ] or ecx , esi mov esi , dword ptr [ ebp - hexvar ] or esi , eax mov eax , ecx mov dword ptr [ ebp - hexvar ] , edx mov edx , esi add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , fp , lr } add fp , sp , hexvar sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldrb r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar mov r1 , hexvar ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bge hexvar bl hexvar mov r3 , r0 ldr r3 , [ r3 ] mov r0 , r3 bl hexvar mov r3 , r0 eor r3 , r3 , num and r3 , r3 , hexvar cmp r3 , num beq hexvar bl hexvar mov r3 , r0 ldr r4 , [ r3 ] ldr r0 , [ pc , hexvar ] bl hexvar mov r5 , r0 ldr r1 , [ fp , - hexvar ] mov r0 , num bl hexvar mov r3 , r0 mov r2 , r5 mov r1 , r4 mov r0 , num bl hexvar ldr r1 , [ pc , hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar ldr r3 , [ fp , - hexvar ] mov r0 , r3 sub sp , fp , hexvar pop { r4 , r5 , fp , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s4 , a0 move s5 , a1 move s3 , a2 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s2 , v0 lw v0 , num ( s4 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar add esp , hexvar pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] lea edi , [ ebx - hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ ebp ] mov dword ptr [ esp + hexvar ] , eax push edi push dword ptr [ esp + hexvar ] lea eax , [ esp + hexvar ] push eax push num call hexvar add esp , hexvar test eax , eax je hexvar mov edx , eax mov eax , dword ptr [ eax + num ] test eax , eax jne hexvar mov eax , dword ptr [ edx + num ] test eax , eax je hexvar mov eax , edx mov dword ptr [ esp + hexvar ] , edx call hexvar mov edx , dword ptr [ esp + hexvar ] mov esi , eax sub esp , num push edi push edx call hexvar add esp , hexvar test esi , esi je hexvar mov edi , dword ptr [ esp + hexvar ] sub esp , hexvar push esi call hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] test eax , eax je hexvar mov esi , dword ptr [ esp + num ] mov dword ptr [ ebp ] , edi test esi , esi je hexvar mov dword ptr [ esp + num ] , eax sub esp , hexvar push dword ptr [ esi ] call hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar mov dword ptr [ esi ] , eax mov edi , dword ptr [ esp + hexvar ] xor edi , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar add esp , num pop ebp ret
push rbx mov rbx , rdi sub rsp , hexvar test al , al mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov eax , dword ptr [ rbx + hexvar ] test eax , eax je hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx ret
lui gp , num addiu gp , gp , - hexvar addu gp , gp , t9 addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw zero , hexvar ( fp ) sw zero , hexvar ( fp ) lw v0 , hexvar ( fp ) lb v1 , ( v0 ) addiu v0 , zero , hexvar bne v1 , v0 , hexvar nop addiu v0 , zero , num sw v0 , hexvar ( fp ) b hexvar nop lw v0 , hexvar ( fp ) lb v1 , ( v0 ) addiu v0 , zero , hexvar bne v1 , v0 , hexvar nop addiu v0 , zero , num sw v0 , hexvar ( fp ) b hexvar nop sw zero , hexvar ( fp ) addiu a2 , zero , hexvar move a1 , zero lw a0 , hexvar ( fp ) lw v0 , - hexvar ( gp )
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov ecx , dword ptr [ hexvar ] lea edx , [ hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , edx call hexvar cmp eax , num jge hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ esp ] , num mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , esi mov esi , dword ptr [ ebp - num ] test byte ptr [ esi + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx je hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar cmp eax , num jge hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar xor ecx , ecx mov dword ptr [ esp ] , num mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
test rsi , rsi je hexvar mov rax , qword ptr [ rdi ] mov qword ptr [ rsi ] , rax mov rax , qword ptr [ rdi + num ] cmp dword ptr [ rax ] , num je hexvar test rdx , rdx je hexvar mov dword ptr [ rdx ] , hexvar test rcx , rcx je hexvar mov rax , qword ptr [ rax + num ] mov qword ptr [ rcx ] , rax test r8 , r8 jne hexvar jmp hexvar test rdx , rdx je hexvar mov eax , dword ptr [ rax + num ] mov dword ptr [ rdx ] , eax test rcx , rcx je hexvar mov qword ptr [ rcx ] , num test r8 , r8 je hexvar mov rax , qword ptr [ rdi + hexvar ] mov qword ptr [ r8 ] , rax ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - num ] , eax call hexvar mov byte ptr [ hexvar ] , num mov dword ptr [ hexvar ] , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar jmp hexvar call hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar jmp hexvar add esp , hexvar pop ebp ret
push rbp push rbx mov rbx , rdi sub rsp , hexvar test al , al mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rdi , qword ptr [ rip + hexvar ] call hexvar lea rax , [ rsp + hexvar ] lea rsi , [ rip + hexvar ] xor edi , edi mov rbp , qword ptr [ rip + hexvar ] mov edx , num mov dword ptr [ rsp ] , num mov qword ptr [ rsp + num ] , rax lea rax , [ rsp + hexvar ] mov dword ptr [ rsp + num ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rdx , rax mov rcx , rbp mov esi , num xor eax , eax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rcx , rsp mov rdx , rbx mov esi , num call hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp ret
mov r3 , r0 ldr r0 , [ r0 , hexvar ] push { r4 , lr } cmp r0 , num beq hexvar ldr r2 , [ r0 ] str r2 , [ r3 , hexvar ] bl hexvar mov r0 , num pop { r4 , pc }
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r14 , r9 mov rbp , r8 mov qword ptr [ rsp + hexvar ] , rcx mov r12 , rdx mov r13 , rsi call hexvar mov ebx , hexvar test rax , rax je hexvar mov r15 , rax mov qword ptr [ rsp + num ] , r14 mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov r14 , rax mov qword ptr [ rax ] , r13 mov qword ptr [ rax + num ] , r12 mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ r14 + hexvar ] , rax mov qword ptr [ r14 + hexvar ] , rbp mov rax , qword ptr [ rsp + num ] mov qword ptr [ r14 + hexvar ] , rax mov edx , hexvar mov edi , num mov esi , num mov ecx , hexvar call hexvar mov rdi , qword ptr [ r15 + num ] call hexvar mov ebx , dword ptr [ r15 + hexvar ] cmp eax , ebx jg hexvar mov rdi , qword ptr [ r15 + num ] xor esi , esi call hexvar test eax , eax jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov rdi , r14 call hexvar mov ebx , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar lea eax , [ rbx + num ] mov dword ptr [ r15 + hexvar ] , eax mov rdi , qword ptr [ r15 + num ] mov esi , ebx mov rdx , r14 call hexvar mov edx , hexvar mov edi , hexvar mov esi , num mov ecx , hexvar call hexvar mov eax , ebx add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
sub esp , hexvar call hexvar add edx , hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ edx + hexvar ] , eax cmp eax , hexvar ja hexvar add esp , hexvar ret
push rbx mov rbx , rdi mov edi , hexvar call hexvar mov r8 , rax test rax , rax je hexvar mov eax , num mov rcx , - num mov rdi , r8 repne scasb al , byte ptr [ rdi ] not rcx mov rsi , rcx cmp rcx , hexvar ja hexvar mov rdx , rcx mov rsi , r8 mov rdi , rbx call hexvar mov r8 , rbx jmp hexvar mov rdi , r8 call hexvar mov r8 , rax mov rax , r8 pop rbx ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx ] mov esi , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ esi + num ] mov edi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ edi + num ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + hexvar ] , ebx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) lw s3 , ( a1 )
test byte ptr [ rip + hexvar ] , num jne hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar cmp eax , hexvar je hexvar cmp dword ptr [ rip + hexvar ] , num je hexvar ret sub rsp , num call hexvar add rsp , num ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , ecx sub edx , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push r15 push r14 mov r15 , r9 push r13 push r12 lea r9 , [ rip + hexvar ] push rbp push rbx mov r14 , rsi mov rbx , r8 xor r12d , r12d mov r8d , hexvar sub rsp , hexvar mov qword ptr [ rsp ] , rdx mov qword ptr [ rsp + num ] , rcx mov edx , hexvar mov esi , edx mov r13d , r8d sub esi , r12d shr esi , num add esi , r12d cmp rdi , r13 jbe hexvar jmp hexvar nop dword ptr [ rax ] mov eax , esi mov r10 , r9 sub eax , r12d shr eax , num lea edx , [ rax + r12 ] mov rax , rdx shl rdx , num mov r13d , dword ptr [ r9 + rdx ] cmp rdi , r13 ja hexvar mov esi , eax cmp r12d , esi jne hexvar cmp rdi , r13 ja hexvar mov edx , hexvar mov esi , num mov rdi , rbx call r15
push { r4 , r5 , r6 , lr } ldr r3 , [ r0 , hexvar ] ldr r6 , [ r0 , hexvar ] ldr r4 , [ r0 , hexvar ] cmp r6 , r3 movge r6 , r3 cmp r6 , r4 mov r5 , r0 ble hexvar bl hexvar ldr r3 , [ r5 ] ldr r1 , [ r5 , hexvar ] ldr r2 , [ r5 , hexvar ] add r3 , r3 , r4 ldrb r3 , [ r3 , r1 ] cmp r2 , num ldrbne r3 , [ r2 , r3 ] ldr r1 , [ r0 ] ldr r2 , [ r5 , num ] ldr r3 , [ r1 , r3 , lsl num ] strb r3 , [ r2 , r4 ] add r4 , r4 , num cmp r6 , r4 bne hexvar str r4 , [ r5 , hexvar ] str r4 , [ r5 , hexvar ] pop { r4 , r5 , r6 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp push r15 push r14 push r12 push rbx mov r14 , rsi mov r15 , rdi mov rax , qword ptr [ rdi ] mov rdi , qword ptr [ rax + hexvar ] mov r12d , hexvar mov esi , hexvar mov edx , hexvar call hexvar mov ebx , eax mov rax , qword ptr [ r14 ] mov rdi , qword ptr [ rax + hexvar ] mov esi , hexvar mov edx , hexvar call hexvar test eax , ebx js hexvar mov ebp , eax test ebx , ebx js hexvar test ebp , ebp js hexvar test ebx , ebx jns hexvar mov r12d , num test ebp , ebp jns hexvar mov rax , qword ptr [ r15 ] mov rdi , qword ptr [ rax + hexvar ] mov esi , ebx call hexvar mov rbx , rax mov rax , qword ptr [ r14 ] mov rdi , qword ptr [ rax + hexvar ] mov esi , ebp call hexvar mov rdi , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rax + hexvar ] call hexvar xor r12d , r12d test eax , eax sete r12b jmp hexvar mov r12d , num mov eax , r12d pop rbx pop r12 pop r14 pop r15 pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax test rdi , rdi je hexvar mov rbp , rcx test rcx , rcx je hexvar or edx , hexvar mov ebx , num cmp edx , hexvar jne hexvar mov r14d , esi mov eax , esi or eax , num mov ebx , num cmp eax , hexvar jne hexvar mov r12 , rdi xor esi , esi mov rdx , rbp call hexvar lea r15 , [ r12 + num ] mov rdx , rbp sub rdx , - hexvar mov rdi , r15 mov esi , num call hexvar cmp r14d , hexvar jne hexvar lea rdi , [ r12 + hexvar ] lea rdx , [ rbp + hexvar ] jmp hexvar lea rdx , [ rbp + hexvar ] mov rdi , r12 xor esi , esi call hexvar lea rdx , [ rbp + hexvar ] mov rdi , r12 mov esi , num call hexvar lea r13 , [ rbp + hexvar ] add rbp , hexvar xor ebx , ebx mov rdi , r15 xor esi , esi mov rdx , rbp call hexvar cmp r14d , hexvar jne hexvar add r12 , hexvar mov rdi , r12 mov esi , num mov rdx , r13 call hexvar mov eax , ebx add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
test rdi , rdi lea rcx , [ rsi + hexvar ] mov byte ptr [ rsi + hexvar ] , num movabs r9 , hexvar movabs rsi , hexvar mov r8d , hexvar js hexvar nop word ptr [ rax + rax ] mov rax , rdi sub rcx , num mul rsi shr rdx , num lea rax , [ rdx + rdx * num ] add rax , rax sub rdi , rax add edi , hexvar test rdx , rdx mov byte ptr [ rcx ] , dil mov rdi , rdx jne hexvar mov rax , rcx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , num mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ eax + hexvar ] xor eax , eax test edx , edx je hexvar sub esp , num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push edx call hexvar add esp , hexvar add esp , num pop ebx ret
push rbp push rbx mov rbp , rdi sub rsp , hexvar mov rbx , qword ptr [ rdi + hexvar ] test rbx , rbx je hexvar cmp qword ptr [ rbx ] , rsi je hexvar mov rdi , qword ptr [ rbp ] mov qword ptr [ rbx ] , rsi mov rsi , rbx call hexvar test rax , rax je hexvar cmp rbx , rax je hexvar mov rax , qword ptr [ rax + num ] mov qword ptr [ rbx + num ] , rax add rsp , hexvar pop rbx pop rbp ret
sub rsp , hexvar mov rax , qword ptr [ rsp + hexvar ] mov r10 , qword ptr [ rsp + hexvar ] mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax call hexvar add rsp , hexvar ret
push rax add rdi , hexvar call hexvar xor ecx , ecx test rax , rax setne cl mov eax , ecx pop rcx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw gp , hexvar ( sp ) beqz a2 , hexvar lw s0 , hexvar ( a0 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] test byte ptr [ hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax jne hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar test byte ptr [ hexvar ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + num ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + num ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add eax , - num mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ hexvar ] add eax , - num mov dword ptr [ hexvar ] , eax add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor ebx , ebx and bl , num movzx esi , bl mov dword ptr [ ebp - hexvar ] , eax mov eax , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx add esp , hexvar pop esi pop ebx pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , - num jne hexvar call hexvar mov eax , dword ptr [ eax ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ esp ] , num mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , esp mov dword ptr [ edx ] , ecx mov dword ptr [ edx + num ] , hexvar call hexvar cmp eax , num sete bl mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebx pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx xor eax , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , esp add esi , - hexvar mov esp , esi mov edi , esp add edi , - hexvar mov esp , edi mov ebx , esp add ebx , - hexvar mov esp , ebx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esi ] , eax mov eax , edi sub esp , hexvar mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , ebx call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ecx ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ edi ] sub esp , hexvar mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , ebx call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ecx ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call eax mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax + num ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] cmp eax , dword ptr [ ebp - hexvar ] mov cl , num mov byte ptr [ ebp - hexvar ] , cl je hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax + num ] , num sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
mov eax , dword ptr [ edi + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ edi + hexvar ] mov ebx , num cmp edx , ebx ja hexvar cmp edx , ebx jb hexvar cmp eax , ecx jae hexvar mov ecx , dword ptr [ edi + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + num ] lea esi , [ ecx + eax ] sub esp , hexvar lea eax , [ edi - hexvar ] push eax mov ebx , edi call hexvar add esp , hexvar sub esp , num push esi push eax mov ebx , edi call hexvar add esp , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + num ] push edx push eax lea eax , [ edi - hexvar ] push eax lea eax , [ ebp - hexvar ] push eax mov ebx , edi call hexvar add esp , hexvar sub esp , hexvar lea eax , [ edi - hexvar ] push eax mov ebx , edi call hexvar add esp , hexvar mov edx , eax sub esp , num lea eax , [ ebp - hexvar ] push eax push edx mov ebx , edi call hexvar add esp , hexvar jmp hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s2 , a0 move s4 , a1 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) addiu v0 , zero , - num sw v0 , hexvar ( sp ) lw v1 , ( a0 )
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jae hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx ecx , byte ptr [ rax ] cmp ecx , num sete dl mov byte ptr [ rbp - hexvar ] , dl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx ecx , byte ptr [ rax + num ] cmp ecx , num sete dl mov byte ptr [ rbp - hexvar ] , dl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx ecx , byte ptr [ rax + num ] cmp ecx , num sete dl mov byte ptr [ rbp - hexvar ] , dl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx ecx , byte ptr [ rax + num ] cmp ecx , num sete dl mov byte ptr [ rbp - hexvar ] , dl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx ecx , byte ptr [ rax + num ] cmp ecx , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov eax , dword ptr [ rbp - num ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] pop rbp ret
push r12 push rbp push rbx mov rdx , qword ptr [ rdi + hexvar ] test rdx , rdx je hexvar mov rbx , rdi mov rsi , qword ptr [ rdx + hexvar ] test rsi , rsi je hexvar mov eax , num test byte ptr [ rdx + hexvar ] , num jne hexvar mov ebp , dword ptr [ rsi ] cmp qword ptr [ rsi + hexvar ] , num je hexvar add rsi , num mov rdi , rbx call hexvar test eax , eax jne hexvar pop rbx pop rbp pop r12 ret
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov edi , num call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov esi , num mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar jmp hexvar mov ebx , num jmp hexvar mov rax , rbx lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] lea r12 , [ rdx + rax ] mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ r12 ] , rax mov rax , rbx lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov rax , qword ptr [ rax ] test rax , rax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar jmp hexvar add rbx , num mov rax , qword ptr [ rbp - hexvar ] cmp rbx , rax jl hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbx pop r12 pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) lw s2 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s3 , hexvar ( sp ) move s3 , a0 sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a1 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) lw v0 , ( s2 ) sw v0 , hexvar ( sp ) jalr t9 nop move s1 , v0 slti v0 , v0 , hexvar beqz v0 , hexvar lw gp , hexvar ( sp ) lw v0 , hexvar ( s0 )
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r13d , esi mov r14 , rdi xor r12d , r12d test edx , edx jle hexvar mov ebp , edx call hexvar test rax , rax je hexvar mov rbx , rax movsxd rsi , ebp mov rdi , rax call hexvar test eax , eax je hexvar call hexvar test rax , rax je hexvar mov r15 , rax mov edi , r13d call hexvar xor ecx , ecx test rbx , rbx setne cl lea edx , [ rcx + rcx * num ] add edx , - num mov rdi , r15 mov rsi , rax mov rcx , rbx call hexvar mov rdi , qword ptr [ r14 ] test rdi , rdi jne hexvar call hexvar mov rdi , rax mov qword ptr [ r14 ] , rax test rax , rax je hexvar mov rsi , r15 call hexvar mov r12d , num test eax , eax jne hexvar mov rdi , r15 call hexvar xor r12d , r12d jmp hexvar xor ebx , ebx call hexvar test rax , rax jne hexvar xor r12d , r12d test rbx , rbx je hexvar mov rdi , rbx call hexvar mov eax , r12d add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar cmp dword ptr [ esp + hexvar ] , hexvar mov esi , dword ptr [ esp + hexvar ] jbe hexvar lea eax , [ esi + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ esp + hexvar ] mov esi , edi mov edi , dword ptr [ esp + hexvar ] lea edx , [ eax - hexvar ] shr edx , hexvar mov dword ptr [ esp + hexvar ] , edx shl edx , hexvar lea eax , [ ebp + edx + hexvar ] mov dword ptr [ esp + num ] , eax sub esp , num push dword ptr [ edi + num ] push dword ptr [ esp + hexvar ] push dword ptr [ edi + hexvar ] push hexvar push esi add esi , hexvar push ebp add ebp , hexvar call hexvar add esp , hexvar cmp ebp , dword ptr [ esp + num ] jne hexvar mov eax , dword ptr [ esp + hexvar ] and dword ptr [ esp + hexvar ] , hexvar mov esi , edi add eax , num shl eax , hexvar add dword ptr [ esp + hexvar ] , eax add dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] test eax , eax je hexvar lea eax , [ esi + hexvar ] sub esp , num push dword ptr [ esi + num ] push eax push dword ptr [ esi + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar add esp , hexvar mov eax , num pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , esp lea esi , [ ebp - hexvar ] mov dword ptr [ edx + hexvar ] , esi mov dword ptr [ edx ] , ecx mov dword ptr [ edx + hexvar ] , hexvar mov dword ptr [ edx + num ] , num mov dword ptr [ edx + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , eax test eax , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] xor edx , edx mov esi , hexvar sub esi , eax sbb edx , ecx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edx jb hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar xor eax , eax mov ecx , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , ecx mov byte ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov dword ptr [ hexvar ] , hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add eax , hexvar mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + num ] test edx , edx jne hexvar lea edx , [ eax - hexvar ] push edx push hexvar lea edx , [ eax - hexvar ] push edx lea edx , [ eax - hexvar ] push edx mov ebx , eax call hexvar mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ edx ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx + num ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ edx + num ] mov dword ptr [ ebp - hexvar ] , edx sub esp , hexvar push dword ptr [ ebp - hexvar ] mov ebx , eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - num ] leave ret
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 addiu gp , gp , hexvar sw ra , hexvar ( sp ) lw v0 , ( s0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar addiu a0 , v0 , hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
ldr r3 , [ r0 , hexvar ] push { r4 , r5 , r6 , lr } mov r5 , r1 ldr r1 , [ r3 , hexvar ] mov r4 , r2 cmp r1 , num beq hexvar ldr r1 , [ r5 , hexvar ] ldr r2 , [ r1 , hexvar ] cmp r2 , num beq hexvar pop { r4 , r5 , r6 , lr } ldr r2 , [ r3 , hexvar ] mov r0 , r3 bx r2 mov r3 , r0 mov r0 , r5 mov r5 , r3 cmp r4 , num beq hexvar ldr r0 , [ r5 , hexvar ] pop { r4 , r5 , r6 , pc }
push rbp mov rbp , rsp movss dword ptr [ rbp - num ] , xmm0 movss xmm0 , dword ptr [ rbp - num ] movss xmm1 , dword ptr [ rip + hexvar ] ucomiss xmm0 , xmm1 jbe hexvar movss xmm0 , dword ptr [ rip + hexvar ] jmp hexvar pxor xmm0 , xmm0 ucomiss xmm0 , dword ptr [ rbp - num ] jbe hexvar pxor xmm0 , xmm0 jmp hexvar movss xmm0 , dword ptr [ rbp - num ] pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx call hexvar and al , num mov byte ptr [ ebp - num ] , al test byte ptr [ ebp - num ] , num je hexvar test byte ptr [ ebp - num ] , num jne hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar test byte ptr [ ebp - num ] , num jne hexvar test byte ptr [ ebp - num ] , num je hexvar mov dword ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar sub esp , num push hexvar push dword ptr [ ebp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov eax , num jmp hexvar sub esp , num push dword ptr [ ebp + hexvar ] push dword ptr [ ebp + hexvar ] push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] leave ret
ldr r3 , [ r1 , hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar bxne lr
push { r4 , lr } mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r2 , [ pc , hexvar ] mov r1 , r0 mov r0 , num bl hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r3 , [ pc , hexvar ] mov r1 , r0 ldr r2 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r1 , [ pc , hexvar ] mov r2 , num mov r0 , num bl hexvar pop { r4 , lr } ldr r3 , [ pc , hexvar ] ldr r1 , [ r3 ] b hexvar andeq ip , r2 , r4 , lsr num strheq ip , [ r2 ] , -ip ldrdeq ip , sp , [ r2 ] , -r4 andeq fp , r2 , r4 , lsl num andeq fp , r2 , ip , lsr num andeq ip , r2 , r8 , ror num ldrdeq sp , lr , [ r3 ] , -r4
push rbx mov eax , hexvar cmp esi , num jne hexvar mov rbx , rcx mov rdi , rcx mov esi , num call hexvar test eax , eax jle hexvar mov rdi , rbx call hexvar mov eax , num pop rbx ret
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] push esi call hexvar add esp , hexvar test eax , eax jne hexvar test esi , esi jne hexvar add esp , num pop ebx pop esi ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esi ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + num ] , num mov dword ptr [ edx + num ] , num mov edx , dword ptr [ ebp + hexvar ] mov byte ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + hexvar ] mov byte ptr [ edx + hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar xor ecx , ecx test al , num mov edx , num cmovne ecx , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ edx + hexvar ] , ecx add esp , hexvar pop esi pop ebp ret
test edi , edi js hexvar mov esi , edi cmp edi , num jg hexvar movsxd rax , esi lea rax , [ rax + rax * num ] lea rax , [ rax * num + hexvar ] ret
ldrb r3 , [ r0 , hexvar ] and r2 , r3 , num cmp r2 , num bne hexvar tst r3 , num bne hexvar str r1 , [ r0 , hexvar ] ldr r3 , [ r0 , num ] ldr r3 , [ r3 , hexvar ] bics r3 , r1 , r3 ldrne r3 , [ pc , hexvar ] movne r2 , num strne r2 , [ r3 ] movne r0 , num moveq r0 , num bx lr ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] mov r0 , num bx lr ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] mov r0 , num bx lr andeq r7 , sp , r0 , lsl num
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar sub esp , num mov esi , eax push dword ptr [ esp + hexvar ] push eax call hexvar mov dword ptr [ esp ] , esi mov edi , eax call hexvar add esp , hexvar test eax , eax jne hexvar add esp , hexvar mov eax , edi pop ebx pop esi pop edi pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } mov r5 , r0 mov r6 , r1 mov sb , r2 mov r7 , r3 ldr r8 , [ r0 , hexvar ] mov r1 , hexvar ldr r0 , [ r0 ] bl hexvar subs r4 , r0 , num beq hexvar mov r3 , num str r3 , [ r4 ] str r6 , [ r4 , num ] strb sb , [ r4 , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ r4 , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ r4 , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ r4 , hexvar ] ldr r3 , [ sp , hexvar ] strb r3 , [ r4 , hexvar ] cmp r7 , num beq hexvar ldrb r3 , [ r7 ] cmp r3 , num bne hexvar mov r3 , num str r3 , [ r4 , num ] cmp r8 , num beq hexvar ldr r3 , [ r8 , num ] ldr r2 , [ r3 , num ] cmp r2 , r6 beq hexvar ldrb r1 , [ r3 , hexvar ] cmp r1 , num beq hexvar mov r0 , hexvar bl hexvar cmp r0 , num beq hexvar str r6 , [ r0 ] ldr r3 , [ r5 , hexvar ] str r3 , [ r0 , num ] str r4 , [ r0 , num ] str r4 , [ r5 , hexvar ] str r0 , [ r5 , hexvar ] ldr r3 , [ r5 , hexvar ] add r3 , r3 , num str r3 , [ r5 , hexvar ] mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andeq r0 , r0 , r0 strhs ip , [ sb , - hexvar ]
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s0 , a0 move s3 , a1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s1 , v0 lw s2 , ( v0 ) addiu v0 , zero , num beq s2 , v0 , hexvar addiu v0 , s2 , - hexvar sltiu v0 , v0 , num beqz v0 , hexvar addiu a2 , zero , num move a0 , s0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar lw ra , hexvar ( sp ) lw s0 , ( s1 ) addiu v0 , zero , num beq s0 , v0 , hexvar addiu v0 , s0 , - hexvar sltiu v0 , v0 , num beqz v0 , hexvar addiu a2 , zero , num lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move v0 , zero lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a1 , hexvar addiu a1 , a1 , - hexvar move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a3 , s3 move a2 , v0 move a1 , s2 move a0 , zero lw t9 , - hexvar ( gp )
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar ldr r5 , [ r1 , hexvar ] cmp r5 , num beq hexvar ldr r3 , [ r1 , hexvar ] movle r0 , num ble hexvar add r3 , r3 , num ldr r2 , [ r3 , - num ] ldr r1 , [ r3 , - num ] str r1 , [ r2 , hexvar ] add r3 , r3 , num subs r5 , r5 , num bne hexvar mov r0 , num add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } ldclle p4 , c9 , [ r1 , - hexvar ] !
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) addiu a2 , zero , hexvar lui a1 , hexvar addiu a1 , a1 , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 sw zero , num ( v0 )
push ebp mov ebp , esp push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar xor esi , esi push hexvar call hexvar lea ecx , [ eax + hexvar ] lea edx , [ eax + hexvar ] xor ebx , ebx mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , num and ecx , hexvar sub edx , ecx add edx , hexvar and edx , hexvar mov dword ptr [ ecx + esi ] , ebx add esi , num cmp esi , edx jb hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ eax + num ] , num add esp , hexvar mov dword ptr [ eax + num ] , num and byte ptr [ eax + hexvar ] , hexvar mov edx , dword ptr [ ecx + hexvar ] mov dword ptr [ ecx + hexvar ] , eax mov dword ptr [ eax ] , edx lea esp , [ ebp - num ] mov eax , num pop ebx pop esi pop ebp ret
cmp qword ptr [ rdi + hexvar ] , num je hexvar mov rdx , rdi mov edi , hexvar mov esi , hexvar mov ecx , hexvar mov r8d , num mov r9d , num jmp hexvar mov eax , num ret
mov rcx , qword ptr [ rdi ] mov rdx , qword ptr [ rsi ] mov esi , dword ptr [ rcx + hexvar ] mov r10d , dword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rcx + num ] mov rdx , qword ptr [ rdx + num ] lea r8 , [ rcx + rsi - num ] mov ecx , r10d cmp esi , r10d lea r9 , [ rdx + rcx - num ] mov edx , r10d mov rax , rsi cmovbe edx , esi test edx , edx je hexvar movzx esi , byte ptr [ r8 ] movzx ecx , byte ptr [ r9 ] cmp sil , cl jne hexvar lea edi , [ rdx - num ] mov rdx , - num not rdi jmp hexvar nop movzx esi , byte ptr [ r8 + rdx ] sub rdx , num movzx ecx , byte ptr [ r9 + rdx + num ] cmp sil , cl jne hexvar cmp rdi , rdx jne hexvar sub eax , r10d ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rdi , hexvar call hexvar movabs rdi , hexvar mov dword ptr [ rbp - num ] , eax call hexvar movabs rdi , hexvar mov dword ptr [ rbp - num ] , eax call hexvar movabs rdi , hexvar mov dword ptr [ rbp - hexvar ] , eax call hexvar movabs rdi , hexvar mov dword ptr [ rbp - hexvar ] , eax call hexvar movabs rdi , hexvar mov dword ptr [ rbp - hexvar ] , eax call hexvar movabs rdi , hexvar mov dword ptr [ rbp - hexvar ] , eax call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar lui gp , hexvar sw s6 , hexvar ( sp ) lui s6 , hexvar sw s1 , hexvar ( sp ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw s1 , - hexvar ( s6 ) beqz s1 , hexvar lw v0 , - hexvar ( gp ) beqz a0 , hexvar move s0 , a0 lui fp , hexvar lw s5 , - hexvar ( gp ) lui s7 , hexvar addiu v0 , fp , - hexvar lw fp , hexvar ( s1 ) addiu s1 , s1 , hexvar sw v0 , hexvar ( sp ) addiu v0 , s7 , - hexvar beqz fp , hexvar sw v0 , hexvar ( sp ) lw s4 , - hexvar ( gp ) move s2 , zero b hexvar lw s3 , - hexvar ( gp ) addiu s1 , fp , hexvar lw fp , hexvar ( fp )
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp + num ] , eax mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] add esp , hexvar pop ebp ret
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar push hexvar push eax call hexvar add esp , hexvar test eax , eax mov esi , eax js hexvar sub esp , num push num push num push eax call hexvar add esp , hexvar test eax , eax jne hexvar add esp , num mov eax , esi pop ebx pop esi ret
push ebp push edi xor edx , edx push esi push ebx call hexvar add eax , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esi + hexvar ] mov dword ptr [ esi + hexvar ] , num mov dword ptr [ esp ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ esi + hexvar ] shl eax , num div ecx cmp dword ptr [ esi + hexvar ] , eax jbe hexvar mov edx , dword ptr [ esp ] lea ecx , [ esp + hexvar ] mov eax , esi call hexvar mov edx , dword ptr [ eax ] mov edi , eax test edx , edx je hexvar mov edi , dword ptr [ esp ] mov eax , dword ptr [ edx ] mov dword ptr [ edx ] , edi add dword ptr [ esi + hexvar ] , num mov edi , dword ptr [ esp + hexvar ] xor edi , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] test esi , esi sete bl movzx esi , bl mov esi , dword ptr [ esi * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jmp esi mov eax , dword ptr [ hexvar ] jmp eax mov eax , esp mov dword ptr [ eax ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp + hexvar ] movsd xmm0 , qword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] movsd qword ptr [ eax + num ] , xmm0 mov eax , dword ptr [ ebp + hexvar ] movsd xmm0 , qword ptr [ eax ] mov eax , dword ptr [ ebp - hexvar ] movsd qword ptr [ eax + hexvar ] , xmm0 mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] test eax , eax sete bl movzx eax , bl mov eax , dword ptr [ eax * num + hexvar ] jmp eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] sub eax , ecx setne dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov eax , dword ptr [ hexvar ] jmp eax add esp , hexvar pop esi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s0 , a0 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a3 , s0 lui a2 , hexvar addiu a2 , a2 , hexvar lw a1 , ( v0 )
push r14 push rbx push rax mov rbx , r8 mov r14 , rdx mov rdx , rsi mov rax , qword ptr [ rdi + hexvar ] mov rsi , qword ptr [ rdi + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov r8d , dword ptr [ rsi + hexvar ] mov edi , ebx mov rsi , rcx mov rcx , rax call hexvar test eax , eax js hexvar cdqe mov qword ptr [ r14 ] , rax mov eax , num add rsp , num pop rbx pop r14 ret
mov r3 , num mvn r2 , num push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r6 , r1 ldr r1 , [ r1 , hexvar ] ldr r4 , [ pc , hexvar ] ldr lr , [ r1 , hexvar ] ldr ip , [ r4 ] sub sp , sp , hexvar cmp lr , num str ip , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r2 , [ sp , hexvar ] movne r0 , r3 beq hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
mov rax , qword ptr [ rdi ] movzx ecx , byte ptr [ rax ] test rcx , rcx je hexvar sub rsp , hexvar xorps xmm0 , xmm0 movaps xmmword ptr [ rsp - hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp ] , xmm0 movaps xmmword ptr [ rsp - hexvar ] , xmm0 movaps xmmword ptr [ rsp - hexvar ] , xmm0 movaps xmmword ptr [ rsp - hexvar ] , xmm0 movaps xmmword ptr [ rsp - hexvar ] , xmm0 movaps xmmword ptr [ rsp - hexvar ] , xmm0 movaps xmmword ptr [ rsp - hexvar ] , xmm0 movaps xmmword ptr [ rsp - hexvar ] , xmm0 mov byte ptr [ rsp - hexvar ] , num mov dl , byte ptr [ rsi ] test dl , dl je hexvar add rsi , num nop word ptr [ rax + rax ] movzx edx , dl mov byte ptr [ rsp + rdx - hexvar ] , num movzx edx , byte ptr [ rsi ] add rsi , num test dl , dl jne hexvar cmp byte ptr [ rsp + rcx - hexvar ] , num mov rdx , rax je hexvar test cl , cl lea rsp , [ rsp + hexvar ] je hexvar mov byte ptr [ rdx ] , num add qword ptr [ rdi ] , num ret
push { r4 , fp } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] mvn r3 , hexvar str r3 , [ fp , - num ] ldr r4 , [ fp , - hexvar ] b hexvar ldr r3 , [ fp , - num ] sub r3 , r3 , num str r3 , [ fp , - num ] ldr r3 , [ fp , - num ] cmp r3 , num beq hexvar ldr r3 , [ fp , - hexvar ] add r3 , r3 , num str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] add r3 , r3 , num str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldrb r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] ldrb r3 , [ r3 ] cmp r2 , r3 bne hexvar ldr r3 , [ fp , - hexvar ] ldrb r3 , [ r3 ] cmp r3 , num bne hexvar b hexvar mov r0 , r0 ldr r3 , [ fp , - hexvar ] mov r2 , r4 sub r3 , r3 , r2 mov r0 , r3 sub sp , fp , num pop { r4 , fp } bx lr
push rbp mov rbp , rsp sub rsp , hexvar mov al , sil mov qword ptr [ rbp - num ] , rdi mov byte ptr [ rbp - hexvar ] , al mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , rdx mov al , byte ptr [ rbp - hexvar ] and al , num mov byte ptr [ rbp - num ] , al mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - num ] movabs rcx , hexvar cmp qword ptr [ rax ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] add rax , - hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov rdi , qword ptr [ rcx + hexvar ] mov dl , byte ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] and dl , num movzx r8d , dl mov qword ptr [ rbp - hexvar ] , rsi mov esi , r8d mov rdx , rcx mov rcx , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push rbx mov rdi , rsi mov rbx , rdx call hexvar mov rdx , rbx mov esi , eax mov edi , num pop rbx jmp hexvar nop dword ptr [ rax ]
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr r6 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r6 , num mov r7 , r1 str r3 , [ sp , hexvar ] ldr r5 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] moveq r0 , num beq hexvar mov r3 , num adds sl , r5 , r6 adc fp , r1 , r3 cmp sl , r6 sbcs r3 , fp , r3 mov sb , r2 blt hexvar mov r3 , num ldr r1 , [ r7 , hexvar ] cmp r1 , sl sbcs r3 , r3 , fp blt hexvar ldr sl , [ r7 , hexvar ] cmp sl , num beq hexvar mov r2 , r6 add r1 , sl , r5 mov r0 , sb bl hexvar mov r0 , num ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] movzx eax , word ptr [ rax + hexvar ] and ax , hexvar cmp ax , hexvar je hexvar mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] movzx edx , word ptr [ rax + hexvar ] and dx , hexvar mov word ptr [ rax + hexvar ] , dx nop leave ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) lw s0 , - hexvar ( gp ) lw v1 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s2 , hexvar ( sp ) move s2 , a0 sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( s0 ) lw a0 , ( v1 ) lw s1 , - hexvar ( gp ) sw a3 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw v0 , hexvar ( sp ) jalr t9 nop lui a1 , hexvar lw gp , hexvar ( sp ) addiu v0 , sp , hexvar addiu a2 , zero , num lw s3 , ( s1 ) addiu a1 , a1 , hexvar sw v0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , zero addiu a1 , zero , num lw gp , hexvar ( sp ) move a2 , v0 move a0 , s3 lw v0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) jalr t9 lw a3 , ( v0 ) addiu a1 , zero , num lw gp , hexvar ( sp ) move a2 , s2 lw a3 , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw a0 , ( s1 ) lw v1 , hexvar ( sp ) lw v0 , ( s0 ) bne v1 , v0 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , num cmp eax , ecx mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar cmp dword ptr [ ebp + num ] , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp + num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rbx , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar add rax , rbx add rax , num mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax mov eax , num call hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbx pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] test byte ptr [ edx + hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ecx + num ] sub eax , ecx sar eax , num cmp eax , num setne dl and dl , num mov byte ptr [ ebp - num ] , dl mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ecx + hexvar ] sub eax , ecx sar eax , num cmp eax , num setne dl and dl , num mov byte ptr [ ebp - num ] , dl test byte ptr [ ebp - num ] , num je hexvar test byte ptr [ ebp - num ] , num jne hexvar mov eax , dword ptr [ ebp + hexvar ] cmp dword ptr [ eax + hexvar ] , num jne hexvar jmp hexvar test byte ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] cmp dword ptr [ eax + hexvar ] , num jne hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar jmp hexvar add esp , hexvar pop ebp ret
push esi push ebx sub esp , num call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] add dword ptr [ ebx + hexvar ] , num adc dword ptr [ ebx + hexvar ] , num push esi lea eax , [ ebx - hexvar ] push eax push num mov eax , dword ptr [ ebx + hexvar ] push dword ptr [ eax ] call hexvar add esp , hexvar lea eax , [ ebx + hexvar ] mov eax , dword ptr [ eax + hexvar ] cmp eax , num je hexvar cmp eax , num jb hexvar cmp eax , num jne hexvar sub esp , num push dword ptr [ esp + hexvar ] push esi call hexvar add esp , hexvar jmp hexvar sub esp , num push dword ptr [ esp + hexvar ] push esi call hexvar add esp , hexvar add esp , num pop ebx pop esi ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r14 , r9 mov ebp , r8d mov rbx , rcx mov r13d , edx mov r12 , rsi mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp ] , num call hexvar mov qword ptr [ rsp + num ] , rax test rax , rax je hexvar movsxd r15 , ebp lea rdi , [ rsp + num ] lea rsi , [ rsp + hexvar ] mov ecx , hexvar mov rdx , r15 call hexvar test rax , rax je hexvar mov dword ptr [ rsp + hexvar ] , r13d mov qword ptr [ rsp + hexvar ] , r14 mov rdi , qword ptr [ rsp + num ] mov rsi , rsp mov edx , hexvar call hexvar mov r14d , eax mov r13d , hexvar cmp eax , ebp jne hexvar mov rsi , qword ptr [ rsp ] mov rdi , rbx mov rdx , r15 call hexvar test eax , eax jne hexvar mov rdx , qword ptr [ rsp + num ] mov rdi , r12 mov esi , dword ptr [ rsp + hexvar ] mov rcx , qword ptr [ rsp + hexvar ] call hexvar mov r13d , eax test r14d , r14d jle hexvar mov rdi , qword ptr [ rsp ] movsxd rsi , r14d call hexvar mov rdi , qword ptr [ rsp ] call hexvar jmp hexvar mov r13d , hexvar jmp hexvar mov r13d , hexvar mov rdi , qword ptr [ rsp + num ] call hexvar mov eax , r13d add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push r15 push r14 push r13 push r12 push rbx mov r14 , rcx mov r15 , rdx mov r12 , rsi mov r13 , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax mov esi , hexvar xor edx , edx mov rcx , r13 call hexvar mov rdi , rbx mov rsi , r12 mov rdx , r15 mov rcx , r14 call hexvar mov r14 , rax mov rdi , rbx call hexvar mov rax , r14 jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar xor eax , eax pop rbx pop r12 pop r13 pop r14 pop r15 ret
xor eax , eax mov rdx , qword ptr [ rsi ] cmp qword ptr [ rdi ] , rdx je hexvar ret nop dword ptr [ rax ] mov rax , qword ptr [ rsi + num ] cmp qword ptr [ rdi + num ] , rax sete al ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r14 , rsi mov r12 , rdi mov dword ptr [ rdi + hexvar ] , num mov rdi , rsi call qword ptr [ r12 + hexvar ]
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] add rsp , hexvar pop rbp ret
addiu sp , sp , - num sw fp , num ( sp ) move fp , sp sw a0 , num ( fp ) lw v0 , num ( fp ) addiu v0 , v0 , num sltiu v0 , v0 , num andi v0 , v0 , hexvar move sp , fp lw fp , num ( sp ) addiu sp , sp , num jr ra nop
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov byte ptr [ ebp - num ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ hexvar ] , num je hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp + num ] cmp dword ptr [ eax ] , - num je hexvar jmp hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar and al , num movzx ecx , al mov al , byte ptr [ ebp - num ] and al , num movzx edx , al and edx , ecx cmp edx , num setne al and al , num mov byte ptr [ ebp - num ] , al call hexvar and al , num movzx ecx , al mov al , byte ptr [ ebp - num ] and al , num movzx edx , al and edx , ecx cmp edx , num setne al and al , num mov byte ptr [ ebp - num ] , al jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push edi push esi push ebx call hexvar add ebx , hexvar sub esp , num lea eax , [ ebx - hexvar ] lea esi , [ ebx + hexvar ] lea edi , [ ebx + hexvar ] push eax push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar lea esi , [ esi ] sub esp , hexvar push esi add esi , hexvar call hexvar add esp , hexvar cmp esi , edi jne hexvar mov dword ptr [ ebx + hexvar ] , num pop ebx pop esi pop edi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ eax ] mov edx , dword ptr [ edx ] sub esp , hexvar mov dword ptr [ esp ] , edx mov dword ptr [ ebp - num ] , eax call hexvar add esp , hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] mov ecx , dword ptr [ ecx + num ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] mov ecx , dword ptr [ ecx + num ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] sub esp , hexvar mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar mov esp , ebp pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar nop leave ret
mov byte ptr [ ebx + hexvar ] , num sub esp , hexvar lea eax , [ ebx - hexvar ] push eax lea eax , [ ebp - hexvar ] push eax push hexvar push num mov eax , dword ptr [ ebp - hexvar ] push dword ptr [ eax ] call hexvar add esp , hexvar test eax , eax jne hexvar cmp dword ptr [ ebp - hexvar ] , num jg hexvar sub esp , hexvar mov eax , dword ptr [ ebp - hexvar ] push dword ptr [ eax ] call hexvar mov esi , eax add esp , hexvar push num lea eax , [ ebx - hexvar ] push eax push num call hexvar push esi push eax push num push num call hexvar add esp , hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebx + hexvar ] , eax mov byte ptr [ ebp - hexvar ] , num jmp hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + num ] lea edx , [ rax - num ] mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + num ] , edx mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar lea rsi , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov ecx , num mov edx , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] lea rdx , [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax mov eax , num call hexvar mov eax , num mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push ebp push edi push esi push ebx mov esi , edx call hexvar add edi , hexvar sub esp , hexvar mov ebx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edi mov ebp , ebx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , ebx shl ebp , num neg ebp cmp byte ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , ebp lea edi , [ ecx + ebp ] je hexvar mov edx , dword ptr [ eax + hexvar ] mov ebp , edi mov ecx , edx shr ecx , num mov ebx , ecx sub edx , ecx shl ebx , num mov dword ptr [ esp + hexvar ] , edx sub ebp , ebx lea ebx , [ eax + num ] mov dword ptr [ esi + hexvar ] , eax mov eax , dword ptr [ eax + hexvar ] lea edx , [ esi + hexvar ] sub esp , num mov dword ptr [ esi + hexvar ] , ebx mov dword ptr [ esi + num ] , edi mov dword ptr [ esp + hexvar ] , edx mov edx , dword ptr [ esp + hexvar ] add eax , num mov dword ptr [ esi ] , edi mov dword ptr [ esi + hexvar ] , ebp mov dword ptr [ esi + hexvar ] , eax lea eax , [ esi + hexvar ] mov dword ptr [ esi + num ] , ebp mov dword ptr [ esi + hexvar ] , ecx mov dword ptr [ esi + hexvar ] , edx mov byte ptr [ esi + hexvar ] , num push num push eax mov ebx , dword ptr [ esp + hexvar ] call hexvar add esp , hexvar cmp dword ptr [ esp + num ] , num ja hexvar mov dword ptr [ esi + hexvar ] , num mov dword ptr [ esi + hexvar ] , num mov eax , dword ptr [ esp + num ] add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar cmp dword ptr [ eax + hexvar ] , num je hexvar sub esp , num push edx push ebp push dword ptr [ esp + hexvar ] push edi push dword ptr [ esp + hexvar ] push esi push ecx call hexvar add esp , hexvar mov edi , dword ptr [ esp + hexvar ] xor edi , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push r14 push rbx push rax mov r14 , rsi mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] call hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov rax , qword ptr [ rbx + hexvar ] add rax , hexvar jmp hexvar mov rax , qword ptr [ rbx + hexvar ] add rax , num mov rdi , qword ptr [ rax ] mov rsi , r14 call hexvar mov ecx , eax xor eax , eax test ecx , ecx setne al add rsp , num pop rbx pop r14 ret
push r14 push rbx push rax test rdi , rdi je hexvar mov rax , qword ptr [ rdi ] test rax , rax je hexvar mov rbx , rsi mov rdi , qword ptr [ rax + hexvar ] call hexvar test rax , rax je hexvar mov r14 , rax mov rdi , rax mov rsi , rbx call hexvar test eax , eax je hexvar mov ebx , eax cmp eax , - num je hexvar cmp ebx , - num jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov rdi , r14 call hexvar xor eax , eax add rsp , num pop rbx pop r14 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx mov rcx , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov r9 , rcx mov r8d , edx mov ecx , num mov edx , num mov rsi , rax mov edi , num call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , - num jne hexvar mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] leave ret
push ebp mov ebp , esp push ebx sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov edx , dword ptr [ ebp + num ] mov byte ptr [ edx ] , num mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx + num ] , num mov edx , dword ptr [ ebp + num ] mov byte ptr [ edx + num ] , num mov edx , dword ptr [ ebp + num ] mov byte ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + num ] mov byte ptr [ edx + num ] , num mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx + hexvar ] , num mov edx , dword ptr [ ebp + num ] mov byte ptr [ edx + hexvar ] , num mov dword ptr [ esp ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar cmp eax , num setne bl mov eax , dword ptr [ ebp + num ] and bl , num mov byte ptr [ eax + hexvar ] , bl mov eax , dword ptr [ ebp + num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp + num ] mov byte ptr [ eax + hexvar ] , num add esp , hexvar pop ebx pop ebp ret
push rbx mov rbx , qword ptr [ rdi + hexvar ] mov rcx , rdx mov rdx , rsi mov r8 , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rbx ] call qword ptr [ rbx + num ] test rax , rax js hexvar add qword ptr [ rbx + hexvar ] , rax pop rbx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu v0 , zero , num sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) beq a2 , v0 , hexvar sw gp , hexvar ( sp ) addiu v0 , zero , num beq a2 , v0 , hexvar move s0 , a2 slti v0 , a2 , hexvar beqz v0 , hexvar lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) lw s7 , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) j hexvar addiu sp , sp , hexvar sra s5 , a2 , num lw t9 , - hexvar ( gp ) move s1 , a0 sll v0 , s5 , num move a0 , a1 addu fp , a1 , v0 sw v0 , hexvar ( sp ) move s3 , a1 move a2 , s5 sll s4 , s0 , num move a1 , fp sll s6 , s0 , num bal hexvar move s2 , a3 lw gp , hexvar ( sp ) addu s6 , s2 , s6 bgtz v0 , hexvar addu s7 , s2 , s4 bnez v0 , hexvar lw t9 , - hexvar ( gp )
push rbp push r14 push rbx mov r14d , edx mov rbp , rsi mov rbx , rdi call hexvar mov dword ptr [ rax ] , num mov rdi , rbx call hexvar test eax , hexvar je hexvar cmp dword ptr [ rbx + hexvar ] , num je hexvar mov rdi , rbx call hexvar mov eax , hexvar pop rbx pop r14 pop rbp ret
sub rsp , num mov rax , rsi mov rsi , qword ptr [ rdi + hexvar ] xor edx , edx mov rdi , rax call hexvar cmp eax , num sbb eax , eax add rsp , num and eax , hexvar add eax , num ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] test rdi , rdi setne al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num ] jmp rdi mov rax , qword ptr [ rip ] jmp rax movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov ecx , hexvar sub rax , rcx sete dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rip ] jmp rax movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] test ecx , ecx setne dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num ] jmp rax mov rax , qword ptr [ rbp - num ] add rax , num mov esi , num mov edx , num mov r8d , num xor ecx , ecx mov dil , cl mov ecx , hexvar mov r9d , hexvar mov byte ptr [ rbp - hexvar ] , dil mov edi , ecx mov rcx , r9 mov r9 , rax mov al , byte ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rip ] mov dword ptr [ rbp - hexvar ] , eax jmp rcx movsd xmm0 , qword ptr [ rip ] mov rax , qword ptr [ rbp - num ] mulsd xmm0 , qword ptr [ rax + hexvar ] add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar lw v0 , hexvar ( sp ) sw a3 , hexvar ( sp ) lui a3 , hexvar sw ra , hexvar ( sp ) sw v0 , hexvar ( sp ) addiu v0 , zero , hexvar addiu a3 , a3 , hexvar jal hexvar sw v0 , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) lw v0 , num ( v0 ) lw v0 , hexvar ( v0 )
push ebp mov ebp , esp call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] movzx eax , word ptr [ eax + hexvar ] movzx eax , ax cmp eax , hexvar jne hexvar cmp dword ptr [ ebp + hexvar ] , hexvar sete al movzx eax , al jmp hexvar mov eax , num pop ebp ret
push r12 push rbp push rbx mov rbx , rdi cmp dword ptr [ rip + hexvar ] , num je hexvar mov rax , rbx pop rbx pop rbp pop r12 ret
push { r4 , lr } sub sp , sp , hexvar str r0 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] ldr r4 , [ r3 , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] add r2 , sp , hexvar str r2 , [ sp , num ] str r3 , [ sp ] mvn r3 , num ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ sp , hexvar ] blx r4 str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ sp , hexvar ] b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] mov r2 , num str r2 , [ r3 , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , hexvar beq hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num bne hexvar mov r3 , num b hexvar mov r3 , num mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
xor eax , eax cmp rsi , rcx mov r8d , hexvar seta al cmovb eax , r8d cmp rdi , rdx je hexvar mov r8d , dword ptr [ rdi + hexvar ] cmp r8 , rsi jb hexvar mov rsi , qword ptr [ rdi + hexvar ] test rsi , rsi cmovne rdi , rsi mov esi , dword ptr [ rdx + hexvar ] cmp rsi , rcx jae hexvar cmp rdi , rdx jb hexvar mov edx , num cmova eax , edx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s3 , hexvar ( sp ) move s3 , a2 sw s2 , hexvar ( sp ) move s2 , a1 sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move s1 , a0 lw gp , hexvar ( sp ) bnez v0 , hexvar move s0 , v0 lw ra , hexvar ( sp ) move v0 , s0 lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop addiu v1 , zero , num lw v0 , ( v0 )
ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num bxne lr mov r2 , r1 mov r0 , num ldr r1 , [ pc , num ] b hexvar muleq pc , r8 , r0
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax xor eax , eax mov edi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rbx , rax mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbx ] , eax add rbx , num mov dword ptr [ rbp - hexvar ] , num mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbx ] , eax add rbx , num mov dword ptr [ rbp - hexvar ] , num mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbx ] , eax add rbx , num mov dword ptr [ rbp - hexvar ] , num mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbx ] , eax add rbx , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar sub rbx , rax mov rax , rbx mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rbx , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rsi , rbx mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret
push r12 push rbp push rbx mov rbp , rdi mov r12 , rdx mov edx , num call hexvar mov rbx , rax mov eax , num test rbx , rbx je hexvar mov esi , hexvar mov rdi , rbp call hexvar mov rdx , rax mov eax , num test rdx , rdx je hexvar mov qword ptr [ rdx + num ] , r12 mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rdx ] , rax mov qword ptr [ rbx + hexvar ] , rdx mov eax , num pop rbx pop rbp pop r12 ret
push rbx mov rbx , rsi sub rsp , hexvar test al , al mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax lea rax , [ rsp + hexvar ] lea rsi , [ rip + hexvar ] mov edi , num mov qword ptr [ rsp + num ] , rax lea rax , [ rsp + hexvar ] mov dword ptr [ rsp ] , hexvar mov dword ptr [ rsp + num ] , hexvar mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rdx , rbx mov rcx , rsp mov esi , num call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edi , hexvar call hexvar xor eax , eax mov rdx , qword ptr [ rsp + hexvar ] xor rdx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx ret
ldr r0 , [ r0 ] ldr r3 , [ r1 ] cmp r0 , r3 blo hexvar cmp r0 , r3 movls r0 , num movhi r0 , num bx lr mvn r0 , num bx lr
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx call hexvar and al , num mov byte ptr [ ebp - num ] , al test byte ptr [ ebp - num ] , num je hexvar test byte ptr [ ebp - num ] , num jne hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar test byte ptr [ ebp - num ] , num jne hexvar test byte ptr [ ebp - num ] , num je hexvar mov dword ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi xor eax , eax mov cl , al mov eax , dword ptr [ ebp + hexvar ] and eax , dword ptr [ ebp - hexvar ] cmp eax , num mov byte ptr [ ebp - hexvar ] , cl je hexvar mov eax , dword ptr [ ebp + hexvar ] cmp eax , dword ptr [ ebp + num ] setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call eax mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp + num ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push r14 push rbx push rax mov rbx , r8 mov r14 , rdx mov rdx , rsi mov rax , qword ptr [ rdi + hexvar ] mov rsi , qword ptr [ rdi + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov r8d , dword ptr [ rsi + hexvar ] mov edi , ebx mov rsi , rcx mov rcx , rax call hexvar test eax , eax js hexvar cdqe mov qword ptr [ r14 ] , rax mov eax , num add rsp , num pop rbx pop r14 ret
call hexvar add eax , hexvar sub esp , hexvar lea eax , [ eax - hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push hexvar push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw a0 , hexvar ( a0 )
mov r3 , hexvar push { r4 , r5 , r6 , r7 , r8 , sb , lr } ldr r7 , [ pc , hexvar ] sub sp , sp , hexvar add r6 , sp , num str r3 , [ r6 , - num ] ! ldr r3 , [ r7 ] mov r8 , num str r3 , [ sp , num ] bl hexvar mov r4 , r8 mov r5 , r0 mov r0 , r8 mov r1 , r6 bl hexvar ldr r1 , [ sp ] mov r8 , r0 sub sb , r1 , num strb r4 , [ r0 , sb ] sub r1 , r1 , num str r4 , [ r5 ] bl hexvar cmp r0 , num bne hexvar ldrb r3 , [ r8 , sb ] cmp r3 , num bne hexvar mov r0 , r8 bl hexvar ldr r3 , [ sp ] add r1 , r0 , num cmp r3 , r1 bhi hexvar ldr r2 , [ sp , num ] ldr r3 , [ r7 ] mov r0 , r8 cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar movabs r8 , hexvar mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , hexvar movabs rdx , hexvar mov ecx , hexvar mov r8d , hexvar movabs r9 , hexvar movabs r10 , hexvar mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov qword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push r14 push rbx push rax mov r14 , rsi mov rbx , rdi test rsi , rsi je hexvar mov qword ptr [ r14 ] , num mov edi , hexvar call hexvar mov rdi , rbx mov rsi , rax mov edx , hexvar mov ecx , hexvar call hexvar test rax , rax je hexvar mov esi , hexvar mov rdi , rax call hexvar test rax , rax je hexvar test r14 , r14 je hexvar mov qword ptr [ r14 ] , rax jmp hexvar xor eax , eax add rsp , num pop rbx pop r14 ret
push ebp mov ebp , esp sub esp , hexvar call hexvar add eax , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax sub esp , hexvar push num push num push num push num push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar leave ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , esp add edx , - hexvar mov esp , edx mov esi , esp add esi , - hexvar mov esp , esi mov edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , edi mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ edx ] , ebx mov ecx , dword ptr [ ecx ] mov ecx , dword ptr [ ecx + hexvar ] sub esp , hexvar mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax call hexvar add esp , hexvar cmp eax , num setne al mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] push esi call hexvar add esp , hexvar xor edx , edx test ah , hexvar jne hexvar mov eax , dword ptr [ esi + hexvar ] mov edx , dword ptr [ eax + hexvar ] add esp , num mov eax , edx pop ebx pop esi ret
sub rsp , hexvar mov r8 , qword ptr [ rsi ] add rdx , num mov qword ptr [ rsi ] , rdx mov r9 , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax sub rdx , r8 cmp rdx , num jle hexvar lea rdi , [ rip + hexvar ] mov ecx , num mov rsi , r8 repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] seta al sbb al , num test al , al je hexvar cmp byte ptr [ r8 ] , hexvar mov eax , num je hexvar mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ecx + hexvar ] , num mov dl , num mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , dl jne hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ eax + hexvar ] , num mov cl , num mov byte ptr [ ebp - num ] , cl jne hexvar mov eax , dword ptr [ ebp + num ] test byte ptr [ eax + hexvar ] , num mov cl , num mov byte ptr [ ebp - num ] , cl jne hexvar mov eax , dword ptr [ ebp + num ] test byte ptr [ eax + hexvar ] , num mov cl , num mov byte ptr [ ebp - num ] , cl jne hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar test al , num mov al , num mov byte ptr [ ebp - num ] , al jne hexvar mov eax , dword ptr [ ebp + num ] test byte ptr [ eax + hexvar ] , num mov cl , num mov byte ptr [ ebp - num ] , cl jne hexvar mov eax , dword ptr [ ebp + num ] test byte ptr [ eax + hexvar ] , num mov cl , num mov byte ptr [ ebp - num ] , cl jne hexvar mov eax , dword ptr [ ebp + num ] mov cl , byte ptr [ eax + hexvar ] mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] xor al , hexvar and al , num movzx eax , al add esp , hexvar pop ebp ret
push r15 push r14 push rbx mov r14 , rsi mov rbx , rdi call hexvar test rax , rax je hexvar mov r15 , rax mov edi , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax xor esi , esi call hexvar mov edx , num mov rdi , rbx mov esi , hexvar mov rcx , r15 call hexvar jmp hexvar call hexvar mov r15 , rax mov edx , dword ptr [ rax ] mov ecx , hexvar mov edi , num mov esi , num mov r8d , hexvar call hexvar mov esi , hexvar mov ecx , hexvar mov r9d , hexvar mov edi , num mov rdx , rbx mov r8 , r14 xor eax , eax call hexvar cmp dword ptr [ r15 ] , num jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov rdi , r15 call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar xor ebx , ebx mov rax , rbx pop rbx pop r14 pop r15 ret
push ebp mov ebp , esp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] add eax , hexvar adc edx , hexvar push num push hexvar push edx push eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax sub esp , hexvar lea eax , [ ebp - hexvar ] push eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ eax ] mov eax , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ eax + num ] mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + num ] mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] add eax , hexvar sub esp , num push edi push esi push ecx push edx push dword ptr [ ebp - hexvar ] push eax lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar nop mov eax , dword ptr [ ebp - hexvar ] xor eax , dword ptr gs : [ hexvar ] je hexvar call hexvar lea esp , [ ebp - hexvar ] pop ebx pop esi pop edi pop ebp ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax movabs rax , hexvar xor ecx , ecx mov edx , ecx div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - num ] jb hexvar mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax cmp rax , num setne cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp push rbx sub rsp , num mov rbx , rdi call hexvar mov edi , eax call hexvar mov rbp , rax mov rdi , qword ptr [ rip + hexvar ] call hexvar test rbx , rbx je hexvar mov r9 , rbp mov r8 , rbx mov rcx , qword ptr [ rip + hexvar ] lea rdx , [ rip + hexvar ] mov esi , num mov rdi , qword ptr [ rip + hexvar ] mov eax , num call hexvar add rsp , num pop rbx pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move a3 , a1 move a2 , a0 lw a1 , - hexvar ( gp ) lw a0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r0 mov r7 , r2 ldr r3 , [ r0 , num ] ldr r6 , [ r3 , hexvar ] ldr r3 , [ r1 , hexvar ] ldr r0 , [ r1 , hexvar ] add r2 , r0 , num str r2 , [ r1 , hexvar ] ldr r2 , [ r6 , hexvar ] ldrb r2 , [ r2 , num ] mla r4 , r2 , r0 , r3 add r2 , r4 , r2 ldr r1 , [ r1 , hexvar ] add r3 , r3 , r1 cmp r2 , r3 bhi hexvar ldr r3 , [ r6 , hexvar ] ldr r3 , [ r3 , hexvar ] mov r2 , r4 mov r1 , r7 mov r0 , r5 blx r3 pop { r4 , r5 , r6 , r7 , r8 , pc }
push { r4 , lr } bl hexvar mov r4 , hexvar mov r2 , num str r4 , [ r0 ] ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar mov r1 , r4 pop { r4 , lr } mov r2 , r0 mov r0 , num b hexvar andeq r4 , r2 , r0 , ror lr
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov byte ptr [ eax + num ] , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax ] , num add esp , num pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } mov r7 , r0 mov r5 , r1 mov r0 , r1 bl hexvar clz r3 , r7 lsr r3 , r3 , num cmp r0 , num moveq r0 , r3 movne r0 , num cmp r0 , num bne hexvar ldr r4 , [ r5 , hexvar ] ldr r3 , [ r5 , hexvar ] ldr r2 , [ pc , hexvar ] mov r1 , num ldr r0 , [ r5 , hexvar ] blx r3 subs r6 , r0 , num beq hexvar ldr r8 , [ r4 , hexvar ] cmp r8 , num beq hexvar mov r3 , num ldr r1 , [ r4 , hexvar ] ldr r8 , [ r5 , hexvar ] mov r2 , r3 lsl r1 , r3 , r1 ldr r0 , [ r5 , hexvar ] blx r8 subs r8 , r0 , num beq hexvar mov r2 , hexvar mov r1 , r5 mov r0 , r7 bl hexvar ldr r2 , [ pc , hexvar ] mov r1 , r4 mov r0 , r6 bl hexvar str r7 , [ r6 ] ldr r3 , [ r4 , hexvar ] add r2 , r4 , hexvar add r2 , r2 , num cmp r3 , r2 blo hexvar add r1 , r4 , hexvar cmp r3 , r1 bhi hexvar add r1 , r6 , hexvar add r1 , r1 , num sub r3 , r3 , r2 add r3 , r1 , r3 str r3 , [ r6 , hexvar ] ldr r3 , [ r4 , hexvar ] sub r3 , r3 , r2 add r1 , r1 , r3 str r1 , [ r6 , hexvar ] add r3 , r6 , hexvar add r3 , r3 , num ldr r1 , [ r4 , hexvar ] sub r2 , r1 , r2 add r3 , r3 , r2 str r3 , [ r6 , hexvar ] cmp r8 , num beq hexvar ldr r3 , [ r4 , hexvar ] mov r2 , num lsl r2 , r2 , r3 ldr r1 , [ r4 , hexvar ] mov r0 , r8 bl hexvar str r8 , [ r6 , hexvar ] str r6 , [ r7 , hexvar ] mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , pc } bhs hexvar andeq r0 , r0 , r0
push r15 push r14 push r13 push r12 push rbx test rdi , rdi je hexvar mov r15 , rcx mov rbx , rdi mov rcx , qword ptr [ rdi ] test rcx , rcx je hexvar mov rax , qword ptr [ rcx + hexvar ] test rax , rax je hexvar cmp dword ptr [ rbx + hexvar ] , num jne hexvar mov r14 , r8 mov r12 , rdx mov r13 , rsi test byte ptr [ rcx + num ] , num je hexvar mov rdi , qword ptr [ rbx + hexvar ] call hexvar cdqe test r13 , r13 je hexvar cmp qword ptr [ r12 ] , rax jae hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov eax , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov ebp , dword ptr [ esp + hexvar ] mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov esi , dword ptr [ eax ] test esi , esi je hexvar lea eax , [ ebx - hexvar ] mov dword ptr [ esp + num ] , eax jmp hexvar nop lea esi , [ esi ] mov esi , dword ptr [ esi ] test esi , esi je hexvar cmp dword ptr [ esi + num ] , num jne hexvar mov eax , dword ptr [ esi + hexvar ] cmp eax , num jbe hexvar mov edi , dword ptr [ esi + eax * num + hexvar ] mov edx , dword ptr [ edi + hexvar ] test edx , edx jne hexvar mov eax , dword ptr [ edi + hexvar ] test eax , hexvar je hexvar test al , hexvar je hexvar mov edx , dword ptr [ edi + hexvar ] mov eax , dword ptr [ edi + hexvar ] mov ecx , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , ecx or ecx , eax je hexvar mov eax , dword ptr [ ebp + num ] push num mov eax , dword ptr [ eax + num ] test eax , eax sete al movzx eax , al push eax mov eax , dword ptr [ ebp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call dword ptr [ eax + hexvar ] add esp , hexvar test eax , eax mov ecx , eax je hexvar mov dword ptr [ esp + num ] , eax push num push dword ptr [ edi + hexvar ] push dword ptr [ edi + hexvar ] push ebp call hexvar add esp , hexvar test eax , eax mov ecx , dword ptr [ esp + num ] jne hexvar push ebp push dword ptr [ edi + hexvar ] push dword ptr [ edi + hexvar ] push ecx mov dword ptr [ esp + hexvar ] , ecx call hexvar xor eax , dword ptr [ edi + hexvar ] xor edx , dword ptr [ edi + hexvar ] add esp , hexvar mov ecx , dword ptr [ esp + num ] or edx , eax je hexvar nop mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax + hexvar ] , hexvar sub esp , hexvar push ecx call hexvar mov esi , dword ptr [ esi ] add esp , hexvar test esi , esi jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push edi push esi push ebx mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar call hexvar test eax , eax jne hexvar lea eax , [ ebx - hexvar ] sub esp , num push num push eax push num call hexvar add esp , hexvar mov edi , eax mov eax , dword ptr [ ebx + hexvar ] sub esp , hexvar push dword ptr [ eax ] call hexvar add esp , hexvar test esi , esi je hexvar lea eax , [ ebx + hexvar ] sub esp , num push edi push esi push dword ptr [ eax ] lea eax , [ ebx - hexvar ] push eax mov eax , dword ptr [ ebx + hexvar ] push num push dword ptr [ eax ] call hexvar add esp , hexvar pop ebx pop esi pop edi ret
push rbp mov rbp , rsp sub rsp , hexvar cmp dword ptr [ hexvar ] , num jne hexvar mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al movabs rdi , hexvar mov dword ptr [ rip + hexvar ] , num call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
push r14 push r13 mov r14 , rsi push r12 push rbp mov r13 , rdx push rbx mov r12 , rcx mov rbp , r8 mov ebx , r9d mov edi , hexvar call hexvar mov qword ptr [ rax ] , r14 mov qword ptr [ rax + num ] , r13 mov dword ptr [ rax + hexvar ] , num mov dword ptr [ rax + hexvar ] , r12d mov dword ptr [ rax + hexvar ] , ebp mov dword ptr [ rax + hexvar ] , ebx pop rbx pop rbp pop r12 pop r13 pop r14 ret
push { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r3 , [ r0 , num ] mov r4 , r0 ldr r3 , [ r3 , hexvar ] ldr r6 , [ r0 , hexvar ] blx r3 subs r3 , r0 , num beq hexvar ldr r5 , [ r3 , num ] bl hexvar cmp r5 , num bhi hexvar mov r0 , num pop { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , num pop ebp ret
push rbx test byte ptr [ rip + hexvar ] , hexvar je hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov esi , hexvar mov rdi , rax call hexvar test eax , eax je hexvar mov esi , hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx mov esi , num call hexvar test eax , eax je hexvar mov esi , hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov esi , hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar mov rdi , rbx call hexvar pop rbx jmp hexvar pop rbx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lw v0 , - hexvar ( v0 ) lw v1 , ( v0 ) beqz v1 , hexvar move a1 , zero addiu v0 , v0 , num lw v1 , ( v0 ) bnez v1 , hexvar addiu a1 , a1 , num addiu a1 , a1 , num move a0 , zero sll a1 , a1 , num lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar lui v1 , hexvar lw v1 , - hexvar ( v1 ) lw a0 , ( v1 ) beqz a0 , hexvar move a1 , v0 b hexvar lui a3 , hexvar lw a0 , ( a0 )
lea eax , [ rsi - hexvar ] sub rsp , num cmp al , num ja hexvar movzx eax , al jmp qword ptr [ rax * num + hexvar ] nop dword ptr [ rax ] add rdi , hexvar mov rax , qword ptr [ rdi + hexvar ] sub rax , qword ptr [ rdi + num ] add rsp , num ret
mov rdx , rdi mov qword ptr [ rdi ] , num mov qword ptr [ rdi + hexvar ] , num lea rdi , [ rdi + num ] and rdi , hexvar mov rcx , rdx sub rcx , rdi add ecx , hexvar shr ecx , num mov ecx , ecx mov eax , num rep stosq qword ptr [ rdi ] , rax mov dword ptr [ rdx + hexvar ] , hexvar mov dword ptr [ rdx + hexvar ] , hexvar mov dword ptr [ rdx + hexvar ] , hexvar mov dword ptr [ rdx + hexvar ] , hexvar mov dword ptr [ rdx + hexvar ] , num mov dword ptr [ rdx + hexvar ] , num ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sltiu v0 , a1 , num sw s1 , hexvar ( sp ) lw s1 , - hexvar ( gp ) sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v1 , ( s1 ) sw v1 , hexvar ( sp ) beqz v0 , hexvar lui v1 , hexvar sll v0 , a1 , num addiu v1 , v1 , - hexvar move s0 , a1 addu v1 , v1 , v0 move s3 , a0 lw v0 , ( v1 ) jr v0 move s2 , a3 beqz a2 , hexvar addiu v0 , zero , num b hexvar nop beqz a2 , hexvar move v0 , a1 lw a0 , hexvar ( sp ) lw v1 , ( s1 ) bne a0 , v1 , hexvar lw ra , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar bnez a2 , hexvar addiu v0 , zero , num jal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw t9 , - hexvar ( gp )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s1 , a0 move s0 , a1 sw zero , ( a1 )
mov r8 , qword ptr [ rdi ] mov eax , num cmp byte ptr [ r8 + rsi ] , hexvar je hexvar ret mov r10 , qword ptr [ rdi + num ] movzx eax , byte ptr [ r10 + rsi ] test al , al jne hexvar lea rdx , [ rsi + num ] mov r9 , qword ptr [ rdi + hexvar ] cmp rdx , r9 jae hexvar movzx edi , byte ptr [ r8 + rsi + num ] movzx eax , dil sub eax , hexvar cmp eax , num ja hexvar movzx eax , byte ptr [ r10 + rsi + num ] test al , al jne hexvar add rdx , num cmp rdx , r9 jae hexvar movzx edi , byte ptr [ r8 + rdx ] movzx ecx , dil sub ecx , hexvar cmp ecx , num ja hexvar cmp byte ptr [ r10 + rdx ] , num je hexvar mov eax , num and eax , num ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] add eax , hexvar push eax call hexvar test eax , eax setne al movzx eax , al add esp , hexvar pop ebx ret
push r12 push rbp mov r12 , rdi push rbx mov rax , qword ptr [ rdi + num ] mov rbp , rdx mov rbx , rsi mov rdi , rsi call qword ptr [ rax + hexvar ] mov qword ptr [ rbp ] , rax mov rax , qword ptr [ r12 + num ] lea rdi , [ rbx + num ] call qword ptr [ rax + hexvar ] mov qword ptr [ rbp + num ] , rax mov rax , qword ptr [ r12 + num ] lea rdi , [ rbx + hexvar ] call qword ptr [ rax + hexvar ] mov qword ptr [ rbp + hexvar ] , rax pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp push edi push esi push ebx sub esp , hexvar call hexvar add esi , hexvar mov esi , dword ptr [ ebp + num ] mov esi , dword ptr [ esi + num ] mov esi , dword ptr [ esi + num ] cmp esi , num jne hexvar cmp dword ptr [ ebp + hexvar ] , num jne hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] shr eax , num and eax , hexvar and eax , hexvar test eax , eax jne hexvar mov eax , num jmp hexvar mov esi , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ esi + hexvar ] mov edi , dword ptr [ esi + hexvar ] mov esi , dword ptr [ esi + num ] mov eax , esi and eax , hexvar mov ecx , eax mov eax , edi and eax , num mov ebx , eax mov eax , ecx xor ah , num mov dword ptr [ ebp - hexvar ] , eax mov eax , ebx xor ah , num mov dword ptr [ ebp - hexvar ] , eax mov edx , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov eax , edx or eax , ecx test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov eax , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] movzx eax , byte ptr [ eax + hexvar ] cmp al , num jne hexvar mov eax , hexvar jmp hexvar mov eax , hexvar jmp hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
call hexvar add eax , hexvar mov edx , dword ptr [ esp + num ] mov ecx , dword ptr [ esp + num ] lea eax , [ eax + hexvar ] test edx , edx cmove edx , eax mov eax , dword ptr [ edx + num ] mov dword ptr [ edx + num ] , ecx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rdi + hexvar ] , rax add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , lr } sub sp , sp , hexvar mov r5 , r2 ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] ldr r3 , [ r0 , hexvar ] ldr r2 , [ r3 , hexvar ] cmp r2 , num movne r0 , num beq hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc }
sub sp , sp , num str r0 , [ sp , num ] ldr r3 , [ sp , num ] ldr r3 , [ r3 ] ldr r2 , [ pc , hexvar ] cmp r3 , r2 bne hexvar ldr r3 , [ pc , hexvar ] b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 ] ldr r2 , [ pc , hexvar ] cmp r3 , r2 bne hexvar ldr r3 , [ pc , hexvar ] b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 ] ldr r2 , [ pc , hexvar ] cmp r3 , r2 bne hexvar ldr r3 , [ pc , hexvar ] b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 ] cmp r3 , hexvar bne hexvar ldr r3 , [ pc , hexvar ] b hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] b hexvar ldr r3 , [ pc , hexvar ] mov r0 , r3 add sp , sp , num bx lr andeq r0 , r0 , r3 , lsl num eoreq r0 , r5 , r8 , asr num andeq r0 , r0 , r2 , lsl num eoreq r0 , r5 , r0 , asr r4 andeq r0 , r0 , r1 , lsl num eoreq r0 , r5 , r8 , asr r4 eoreq r0 , r5 , r0 , ror num eoreq r0 , r5 , ip , asr num eoreq r0 , r5 , r8 , ror num
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ edi + hexvar ] mov edx , dword ptr [ eax + hexvar ] test edx , edx je hexvar cmp dword ptr [ eax + hexvar ] , ecx jbe hexvar lea ebp , [ edx + ecx * num ] mov eax , dword ptr [ ebp ] test eax , eax je hexvar mov esi , dword ptr [ eax + hexvar ] test esi , esi je hexvar add esp , hexvar mov eax , esi pop ebx pop esi pop edi pop ebp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num beq hexvar ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num blt hexvar ldr r3 , [ fp , - hexvar ] cmp r3 , num bgt hexvar ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bge hexvar bl hexvar mov r3 , r0 ldr r3 , [ r3 ] str r3 , [ fp , - num ] ldr r0 , [ fp , - hexvar ] bl hexvar bl hexvar mov r2 , r0 ldr r3 , [ fp , - num ] str r3 , [ r2 ] mov r3 , num b hexvar ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar bl hexvar mov r3 , r0 ldr r3 , [ r3 ] str r3 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar bl hexvar mov r2 , r0 ldr r3 , [ fp , - hexvar ] str r3 , [ r2 ] mov r3 , num b hexvar ldr r3 , [ fp , - hexvar ] mov r0 , r3 sub sp , fp , num pop { fp , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s4 , a0 move s2 , a2 move a0 , a1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s1 , v0 lw v0 , num ( s4 )
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , num mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push rbx sub rsp , hexvar mov esi , edi lea rdi , [ rsp + num ] call hexvar test rax , rax je hexvar mov ebx , dword ptr [ rax ] mov rdi , qword ptr [ rsp + num ] test rdi , rdi je hexvar call hexvar mov eax , ebx add rsp , hexvar pop rbx ret
push rbx mov ebx , edi sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar test rax , rax je hexvar mov rdi , qword ptr [ rax ] call hexvar mov rdx , qword ptr [ rsp + hexvar ] xor rdx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] test ecx , ecx setne dl movzx ecx , dl mov ecx , dword ptr [ ecx * num + hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub eax , ecx sar eax , num mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov eax , dword ptr [ ebp - num ] add esp , num pop ebp ret
push rbx mov rbx , rdi mov rdx , qword ptr [ rsi ] test dl , num jne hexvar test edx , hexvar je hexvar mov qword ptr [ rbx ] , num mov eax , num pop rbx ret
ldr r3 , [ pc , hexvar ] add r1 , r3 , r0 ldrb r2 , [ r1 , hexvar ] cmp r2 , num beq hexvar add r3 , r3 , r0 , lsl num add r1 , r3 , hexvar ldm r1 , { r0 , r1 } bx lr push { r4 , lr } mov r4 , r0 mov ip , num sub sp , sp , num add r4 , r3 , r4 , lsl num add r2 , r3 , r0 , lsl num ldr r0 , [ r2 , hexvar ] ldm r4 , { r2 , r3 } str ip , [ sp ] strb ip , [ r1 , hexvar ] bl hexvar str r0 , [ r4 , hexvar ] str r1 , [ r4 , hexvar ] add sp , sp , num pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar movabs rax , num mov rdi , rax mov rsi , rax movabs rdx , num call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] xor ecx , num mov dword ptr [ rax + hexvar ] , ecx mov rdi , qword ptr [ rbp - num ] call hexvar mov edx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rdx add rsp , hexvar pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , num ] ldr r0 , [ r3 , hexvar ] ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] ldr r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] ldr r3 , [ r3 , hexvar ] mov r1 , num bl hexvar ldr r3 , [ sp , num ] ldr r3 , [ r3 , hexvar ] mov r2 , num str r2 , [ r3 , hexvar ] mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax je hexvar cmp dword ptr [ ebp + num ] , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov ecx , dword ptr [ ecx ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar cmp eax , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
lui gp , hexvar addiu v1 , zero , - num beq a1 , v1 , hexvar addiu gp , gp , hexvar lw t9 , - hexvar ( gp ) move v0 , a1 move a0 , v0 jr t9 move a1 , a2 lw t9 , - hexvar ( gp ) jr t9 move a1 , a2
mov edx , dword ptr [ esp + num ] mov eax , dword ptr [ esp + num ] mov edx , dword ptr [ edx + hexvar ] mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , hexvar mov dword ptr [ eax ] , edx mov edx , dword ptr [ eax + hexvar ] mov dword ptr [ eax + hexvar ] , edx ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar call hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , num jmp hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax jne hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax ] , - num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar and al , num movzx ecx , al mov al , byte ptr [ ebp - num ] and al , num movzx edx , al and edx , ecx cmp edx , num setne al mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num mov byte ptr [ ebp - num ] , al call hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx ecx , al mov al , byte ptr [ ebp - num ] and al , num movzx edx , al and edx , ecx cmp edx , num setne al and al , num mov byte ptr [ ebp - num ] , al jmp hexvar mov al , byte ptr [ ebp - num ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] mov rax , rdi sub rax , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rax ja hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax * num + hexvar ] jmp rcx movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar movabs rax , hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] pop rbp ret
mov eax , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ eax ] sub esp , num lea eax , [ ebx - hexvar ] push eax push edx call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ ebx + hexvar ] , al movzx ecx , byte ptr [ ebx + hexvar ] movzx eax , cl mov edx , num mov edi , eax xor edi , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , edi mov eax , edx xor eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov esi , dword ptr [ ebp - hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov eax , edi or eax , esi test eax , eax je hexvar push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] lea eax , [ ebx - hexvar ] push eax lea eax , [ ebp - hexvar ] push eax call hexvar add esp , hexvar movzx eax , byte ptr [ ebx + hexvar ] movzx esi , al sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar mov edx , eax sub esp , num push esi lea eax , [ ebp - hexvar ] push eax push edx call hexvar add esp , hexvar mov dword ptr [ ebx + hexvar ] , num jmp hexvar
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add eax , hexvar mov dword ptr [ esp + num ] , eax mov ebp , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ eax + num ] mov eax , dword ptr [ eax ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , edx cmp dword ptr [ esp + hexvar ] , num jbe hexvar mov ebx , num lea esi , [ ecx - num ] lea edi , [ esp + hexvar ] jmp hexvar mov ebx , eax lea eax , [ esi + ebx ] push eax push edi push ebp call hexvar lea eax , [ ebx + num ] add esp , hexvar cmp eax , dword ptr [ esp + hexvar ] jbe hexvar mov esi , eax cmp dword ptr [ esp + hexvar ] , ebx ja hexvar cmp ebx , num je hexvar sub esp , num push dword ptr [ esp + num ] push dword ptr [ esp + hexvar ] lea eax , [ esp + hexvar ] push eax call hexvar add esp , hexvar mov eax , num mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { r4 , fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] ldr r4 , [ fp , - hexvar ] b hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 ] ldr r2 , [ fp , - hexvar ] ldr r2 , [ r2 , num ] mov r1 , r2 ldr r0 , [ fp , - hexvar ] blx r3 mov r4 , r0 ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] and r3 , r3 , r4 cmp r3 , num beq hexvar ldr r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 bne hexvar mov r3 , r4 mov r0 , r3 sub sp , fp , num pop { r4 , fp , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ebx mov ebx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ebx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jge hexvar call hexvar cmp dword ptr [ eax ] , hexvar jne hexvar call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r4 , [ r0 , hexvar ] cmp r4 , num beq hexvar ldr r3 , [ r4 , hexvar ] mov r5 , r0 cmp r3 , num beq hexvar ldrb r2 , [ r4 , hexvar ] tst r2 , num bne hexvar ldr r7 , [ r0 , hexvar ] add r6 , r0 , hexvar cmp r7 , num beq hexvar ldr r2 , [ r6 ] cmp r2 , num ldrne r2 , [ r6 , num ] streq r3 , [ r6 ] strne r3 , [ r2 ] ldr r3 , [ r4 , hexvar ] str r3 , [ r6 , num ] ldr r3 , [ r4 ] mov r0 , r4 str r3 , [ r5 , hexvar ] bl hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , pc }
push edi push esi push ebx mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov edi , dword ptr [ esp + hexvar ] test esi , esi je hexvar test edi , edi je hexvar sub esp , hexvar push dword ptr [ esi ] call hexvar mov dword ptr [ esp ] , edi call hexvar add esp , hexvar mov dword ptr [ esi ] , eax mov eax , num pop ebx pop esi pop edi ret
push ebx sub esp , num call hexvar add ebx , hexvar mov edx , dword ptr [ eax + hexvar ] test edx , edx je hexvar mov ecx , dword ptr [ edx ] mov dword ptr [ eax + hexvar ] , ecx sub esp , hexvar push edx call hexvar add esp , hexvar pop ebx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar lui a1 , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw gp , hexvar ( sp ) addiu a1 , a1 , - hexvar sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s1 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) lw v1 , hexvar ( s0 )
push rbp push r14 push rbx sub rsp , hexvar mov qword ptr [ rsp ] , num cmp qword ptr [ rdi + hexvar ] , num je hexvar mov rbx , rdi mov rax , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rax ] call hexvar mov edi , eax call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rbp , rax lea r14 , [ rsp + hexvar ] mov rdi , r14 call hexvar mov r8 , qword ptr [ rbx + hexvar ] lea rsi , [ rsp + num ] mov rdi , r14 mov rdx , rbp xor ecx , ecx call hexvar mov ebp , hexvar test eax , eax jle hexvar mov rdi , qword ptr [ rbx + hexvar ] mov rsi , rsp mov edx , hexvar call hexvar mov rsi , qword ptr [ rsp ] test rsi , rsi je hexvar movsxd rdx , eax lea rdi , [ rsp + hexvar ] call hexvar mov r14d , eax mov rdi , qword ptr [ rsp ] call hexvar test r14d , r14d jle hexvar mov rax , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rax + num ] movsxd rdx , dword ptr [ rax ] lea rdi , [ rsp + hexvar ] call hexvar mov ebp , eax test eax , eax jg hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar lea rdi , [ rsp + hexvar ] call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov ebp , hexvar mov eax , ebp add rsp , hexvar pop rbx pop r14 pop rbp ret
lw v0 , num ( a1 ) sw v0 , num ( a0 ) lw v1 , num ( a1 ) beqz v1 , hexvar lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw s1 , hexvar ( sp ) sll a0 , v0 , num sw gp , hexvar ( sp ) move s1 , a1 sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar sw v0 , ( s0 ) lw gp , hexvar ( sp ) beqz v0 , hexvar sw v0 , num ( s0 ) lw a2 , num ( s1 ) move a0 , v0 lw t9 , - hexvar ( gp ) lw a1 , num ( s1 ) jalr t9 sll a2 , a2 , num move v0 , zero lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar move v0 , zero sb zero , ( a0 ) sb zero , num ( a0 ) sb zero , num ( a0 ) sb zero , num ( a0 ) sb zero , num ( a0 ) sb zero , num ( a0 ) sb zero , num ( a0 ) sb zero , num ( a0 ) sb zero , num ( a0 ) sb zero , num ( a0 ) sb zero , hexvar ( a0 ) jr ra sb zero , hexvar ( a0 ) sw zero , num ( s0 )
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx lea esi , [ hexvar ] mov dword ptr [ esp + hexvar ] , esi lea esi , [ hexvar ] mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v0 , ( a2 )
push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebx + hexvar ] mov esi , dword ptr [ eax ] mov dword ptr [ eax ] , num cmp byte ptr [ esp + hexvar ] , num lea eax , [ ebx - hexvar ] lea edx , [ ebx - hexvar ] cmove eax , edx push num lea edx , [ ebx - hexvar ] push edx push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar cmp eax , - num je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar lea eax , [ ebx + hexvar ] mov eax , dword ptr [ eax ] sub esp , hexvar push eax call dword ptr [ esp + hexvar ] add esp , hexvar jmp hexvar sub esp , hexvar push num call dword ptr [ esp + hexvar ] add esp , hexvar mov eax , dword ptr [ ebx + hexvar ] mov dword ptr [ eax ] , esi add esp , num pop ebx pop esi ret
push rbp push rbx mov rbp , rdx mov rbx , rsi sub rsp , num call hexvar test eax , eax mov r8d , ebp lea rcx , [ rip + hexvar ] jne hexvar lea rcx , [ rip + hexvar ] mov r8 , rbp add rsp , num mov rdi , rbx mov rdx , - num pop rbx pop rbp mov esi , num xor eax , eax jmp hexvar nop nop word ptr cs : [ rax + rax ]
push { r4 , lr } mov r0 , hexvar bl hexvar cmp r0 , num beq hexvar ldrb r2 , [ r0 ] ldr r3 , [ pc , hexvar ] cmp r2 , num moveq r0 , r3 pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov edi , hexvar call hexvar xor ecx , ecx mov edi , ecx mov qword ptr [ rbp - num ] , rax mov rsi , qword ptr [ rbp - num ] call hexvar mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push r14 push r13 push r12 push rbp mov ebp , esi push rbx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax test rdi , rdi je hexvar cmp byte ptr [ rip + hexvar ] , num mov rbx , rdi je hexvar mov rdi , rbx mov byte ptr [ rip + hexvar ] , num call hexvar lea rsi , [ rip + hexvar ] mov rdi , rax mov r14 , rax call hexvar test rax , rax mov rbx , rax je hexvar test bpl , bpl mov r12 , rsp lea r13 , [ rip + hexvar ] jne hexvar lea r13 , [ rip + hexvar ] jmp hexvar jle hexvar mov esi , eax mov rdi , r13 call hexvar lea rdi , [ rip + hexvar ] mov esi , ebp call hexvar lea rsi , [ rip + hexvar ] xor edi , edi call hexvar test rax , rax mov rbx , rax je hexvar mov rsi , r12 mov rdi , rbx call hexvar cmp eax , num mov ebp , eax jne hexvar mov rdi , rbx call hexvar lea rsi , [ rip + hexvar ] mov rbx , rax mov edx , num xor edi , edi call hexvar mov rcx , rbx mov rdx , rax xor esi , esi xor edi , edi xor eax , eax call hexvar mov edi , dword ptr [ rip + hexvar ] call hexvar jle hexvar mov esi , eax mov rdi , r13 call hexvar lea rdi , [ rip + hexvar ] mov esi , ebp call hexvar lea rsi , [ rip + hexvar ] xor edi , edi call hexvar test rax , rax mov rbx , rax je hexvar mov rsi , r12 mov rdi , rbx call hexvar cmp eax , num mov ebp , eax jne hexvar jmp hexvar nop word ptr [ rax + rax ] mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar mov rdi , r14 pop rbx pop rbp pop r12 pop r13 pop r14 jmp hexvar nop dword ptr [ rax + rax ] lea rdi , [ rip + hexvar ] call hexvar lea rdi , [ rip + hexvar ] call hexvar jmp hexvar nop dword ptr [ rax ] test sil , sil je hexvar lea rdi , [ rip + hexvar ] call hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] mov byte ptr [ rip + hexvar ] , num jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) bnez v0 , hexvar nop lui v0 , hexvar addiu v0 , v0 , - hexvar b hexvar nop lw v1 , hexvar ( sp ) addiu v0 , zero , num bne v1 , v0 , hexvar nop lui v0 , hexvar addiu a3 , v0 , - hexvar lui v0 , hexvar addiu a2 , v0 , - hexvar addiu a1 , zero , hexvar lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lui v0 , hexvar addiu v0 , v0 , - hexvar b hexvar nop lw v1 , hexvar ( sp ) addiu v0 , zero , num bne v1 , v0 , hexvar nop lui v0 , hexvar addiu a3 , v0 , - hexvar lui v0 , hexvar addiu a2 , v0 , - hexvar addiu a1 , zero , hexvar lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lui v0 , hexvar addiu v0 , v0 , - hexvar b hexvar nop lw v1 , hexvar ( sp ) addiu v0 , zero , num bne v1 , v0 , hexvar nop lui v0 , hexvar addiu a3 , v0 , - hexvar lui v0 , hexvar addiu a2 , v0 , - hexvar addiu a1 , zero , hexvar lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) lui v0 , hexvar addiu v0 , v0 , - hexvar b hexvar nop lw v1 , hexvar ( sp ) addiu v0 , zero , num bne v1 , v0 , hexvar nop lui v0 , hexvar addiu v0 , v0 , - hexvar b hexvar nop lui v0 , hexvar addiu v0 , v0 , - hexvar lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push { r4 , r5 , r6 , r7 , r8 , sb , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr ip , [ r4 ] ands lr , r1 , hexvar str ip , [ sp , hexvar ] bne hexvar mov r2 , r1 sub r1 , r3 , r0 cmp r1 , num ble hexvar lsl r1 , r2 , num ldrb r7 , [ r0 ] and r1 , r1 , hexvar orrs r1 , r1 , r7 , lsr num add r5 , r0 , num beq hexvar add r3 , sp , hexvar mov r0 , lr mov r6 , lr mov r8 , hexvar mov lr , r3 mov sb , hexvar tst r1 , num beq hexvar cmp r6 , num moveq ip , lr addne ip , lr , num strbne sb , [ lr ] mov lr , ip mov r6 , num add r2 , r0 , hexvar strb r8 , [ lr ] , num strb r2 , [ ip , num ] lsrs r1 , r1 , num movne ip , num moveq ip , num add r0 , r0 , num cmp r0 , num movgt ip , num andle ip , ip , num cmp ip , num bne hexvar mov r2 , num and r7 , r7 , hexvar strb r2 , [ lr ] ldr r1 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] str r7 , [ sp ] mov r0 , num bl hexvar b hexvar mov r2 , r3 bl hexvar mov r5 , r0 ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] mov r0 , r5 cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc }
str fp , [ sp , - num ] ! add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] str r3 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] ldrb r3 , [ r3 ] cmp r3 , hexvar bne hexvar ldr r3 , [ fp , - hexvar ] add r3 , r3 , num ldrb r3 , [ r3 ] cmp r3 , num beq hexvar b hexvar ldr r2 , [ fp , - num ] add r3 , r2 , num str r3 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] add r1 , r3 , num str r1 , [ fp , - hexvar ] ldrb r2 , [ r2 ] strb r2 , [ r3 ] ldr r3 , [ fp , - num ] ldrb r3 , [ r3 ] cmp r3 , num bne hexvar ldr r2 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 bls hexvar ldr r3 , [ fp , - num ] sub r3 , r3 , num ldrb r3 , [ r3 ] cmp r3 , hexvar beq hexvar ldr r3 , [ fp , - hexvar ] add r2 , r3 , num str r2 , [ fp , - hexvar ] mov r2 , hexvar strb r2 , [ r3 ] b hexvar ldr r2 , [ fp , - hexvar ] add r3 , r2 , num str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] add r1 , r3 , num str r1 , [ fp , - hexvar ] ldrb r2 , [ r2 ] strb r2 , [ r3 ] ldr r3 , [ fp , - hexvar ] ldrb r3 , [ r3 ] cmp r3 , num bne hexvar ldr r3 , [ fp , - hexvar ] mov r2 , num strb r2 , [ r3 ] mov r0 , r0 add sp , fp , num pop { fp } bx lr
push { r4 , lr } mov r1 , num bl hexvar subs r4 , r0 , num beq hexvar mov r1 , num bl hexvar cmp r0 , num beq hexvar mov r0 , r4 pop { r4 , pc }
push rbp mov rbp , rsp mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - num ] , hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov eax , dword ptr [ rbp - num ] shl rax , num mov rdx , rax lea rax , [ rip + hexvar ] mov eax , dword ptr [ rdx + rax ] cmp dword ptr [ rbp - hexvar ] , eax jne hexvar mov eax , dword ptr [ rbp - num ] shl rax , num mov rdx , rax lea rax , [ rip + hexvar ] mov rax , qword ptr [ rdx + rax ] jmp hexvar add dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] cmp eax , dword ptr [ rbp - num ] jb hexvar lea rax , [ rip + hexvar ] pop rbp ret
push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov r12 , qword ptr [ rip + hexvar ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] mov rbp , qword ptr [ r12 + hexvar ] lea rbx , [ rax + num ] mov rsi , qword ptr [ rbp ] cmp rbx , rsi ja hexvar movzx r8d , byte ptr [ rax ] mov qword ptr [ rip + hexvar ] , rbx cmp r8d , num ja hexvar mov rax , qword ptr [ rip + hexvar ] movzx edx , byte ptr [ rax - num ] cmp dl , hexvar je hexvar lea rdi , [ rax - num ] mov byte ptr [ rsp ] , dl movzx eax , byte ptr [ rax - num ] mov byte ptr [ rsp + num ] , num mov byte ptr [ rsp + num ] , al mov r8d , r8d lea rbx , [ rip + hexvar ] lea rcx , [ rip + hexvar ] shl r8 , num mov r9 , rsp mov rdx , - num add rbx , r8 mov esi , num xor eax , eax mov r8 , qword ptr [ rbx ] call hexvar mov eax , dword ptr [ rbx + num ] add qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , edx sub esp , hexvar mov dword ptr [ esp ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax ] add edx , num sub esp , hexvar mov dword ptr [ esp ] , edx call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx ] mov dword ptr [ edx + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax ] mov esi , dword ptr [ ecx ] mov dword ptr [ esi ] , edx mov edx , dword ptr [ ecx ] mov dword ptr [ edx + hexvar ] , num mov edx , dword ptr [ ecx ] mov dword ptr [ edx + hexvar ] , num mov eax , dword ptr [ ecx ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea esp , [ ebp - num ] pop esi pop ebp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax jne hexvar cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov eax , dword ptr [ eax + num ] sub esp , num push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , num jmp hexvar cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov eax , dword ptr [ eax + num ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + num ] , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , num push dword ptr [ esp + hexvar ] push eax call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] cmp eax , num jne hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] sub esp , num push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax jne hexvar mov eax , num jmp hexvar nop add dword ptr [ esp + num ] , num mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar cmp dword ptr [ esp + num ] , eax jl hexvar mov eax , num add esp , hexvar pop ebx ret
push rax mov eax , dword ptr [ rip ] test eax , eax je hexvar mov dword ptr [ rip ] , num mov dword ptr [ rip ] , num add dword ptr [ rax ] , eax add byte ptr [ rax ] , al test byte ptr [ rdx + rax ] , bl add byte ptr [ rax ] , al test rdi , rdi je hexvar test rsi , rsi je hexvar pop rax jmp hexvar mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al fadd dword ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al xor dword ptr [ rip ] , eax xor dword ptr [ rip ] , eax add eax , hexvar add byte ptr [ rax ] , al add byte ptr [ rdx + num ] , cl add byte ptr [ rsp + rsi * num ] , dh mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al jnp hexvar add byte ptr [ rax ] , al add byte ptr [ rax ] , al xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al movabs byte ptr [ hexvar ] , al add eax , num mov al , byte ptr [ rip ] xor al , num mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al
cmp qword ptr [ rdi + hexvar ] , num je hexvar mov rdx , rdi mov edi , hexvar mov esi , hexvar mov ecx , hexvar mov r8d , num xor r9d , r9d jmp hexvar mov eax , num ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] test eax , eax je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov eax , dword ptr [ eax + hexvar ] test eax , eax jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push num call hexvar add esp , hexvar mov eax , hexvar jmp hexvar cmp dword ptr [ esp + hexvar ] , - num je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov eax , dword ptr [ eax ] cmp dword ptr [ esp + hexvar ] , eax je hexvar mov eax , hexvar jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] test eax , eax jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push num call hexvar add esp , hexvar mov eax , hexvar jmp hexvar cmp dword ptr [ esp + hexvar ] , - num je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] and eax , dword ptr [ esp + hexvar ] test eax , eax jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push num call hexvar add esp , hexvar mov eax , hexvar jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov eax , dword ptr [ eax + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call eax add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , - num jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push num call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move s0 , a0 lw v0 , hexvar ( a1 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov ecx , eax sub eax , num mov dword ptr [ rbp - hexvar ] , ecx mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , num mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - num ] , eax mov rsi , qword ptr [ rip + hexvar ] jmp rsi mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - num ] , eax mov rsi , qword ptr [ rip + hexvar ] jmp rsi mov edi , num call hexvar mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov esi , dword ptr [ rbp - hexvar ] mov dword ptr [ rcx ] , esi mov edi , dword ptr [ rcx ] mov rax , qword ptr [ rax ] mov r8w , di mov r9w , word ptr [ rax + hexvar ] and r8w , num and r9w , hexvar or r9w , r8w mov word ptr [ rax + hexvar ] , r9w mov eax , num mov rsp , rbp pop rbp ret
push rbx mov rbx , rdi mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi jne hexvar mov edi , hexvar call hexvar mov rdi , rax mov qword ptr [ rip + hexvar ] , rax test rax , rax je hexvar mov rsi , rbx call hexvar mov ecx , eax mov eax , num test ecx , ecx je hexvar pop rbx ret
push r14 push rbx push rax mov r14 , rdi call hexvar test rax , rax je hexvar mov rbx , rax cmp qword ptr [ rax + num ] , num je hexvar mov rdi , qword ptr [ rbx ] call hexvar cmp eax , hexvar je hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov edi , hexvar call hexvar mov qword ptr [ rbx + num ] , rax test rax , rax je hexvar mov qword ptr [ rax ] , num mov edi , hexvar call hexvar mov rcx , qword ptr [ rbx + num ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rcx ] , rax mov rdi , qword ptr [ rbx ] call hexvar mov edi , hexvar call hexvar mov qword ptr [ rbx ] , rax mov rax , qword ptr [ rbx + num ] test rax , rax je hexvar mov rdi , qword ptr [ rax + hexvar ] mov rsi , r14 xor edx , edx xor ecx , ecx call hexvar test eax , eax jne hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov rdi , rbx call hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx mov rax , rbx add rsp , num pop rbx pop r14 ret
ldr r3 , [ pc , hexvar ] ldr r2 , [ r0 , hexvar ] cmp r2 , r3 beq hexvar mov r0 , num bx lr ldr r3 , [ r0 , num ] cmp r3 , num beq hexvar push { r4 , lr } mov r4 , r0 mov r0 , r3 bl hexvar cmp r0 , num bne hexvar ldr r1 , [ r4 , hexvar ] ldr r2 , [ r4 , hexvar ] ldr r3 , [ pc , hexvar ] str r1 , [ r2 , hexvar ] ldr ip , [ r3 ] ldr r1 , [ r4 , hexvar ] cmp r4 , ip str r2 , [ r1 , hexvar ] bne hexvar cmp r4 , r1 moveq r2 , num strne r1 , [ r3 ] streq r2 , [ r3 ] mov r1 , num ldr r2 , [ r3 , num ] str r1 , [ r4 , num ] sub r2 , r2 , num str r2 , [ r3 , num ] pop { r4 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar stmib sp , { r0 , r1 } mov r0 , hexvar mov r4 , r1 mov r5 , r2 bl hexvar mov r1 , num mov sb , r0 mov r0 , r4 bl hexvar subs r4 , r0 , num blt hexvar mov r2 , r5 mov r1 , r4 mov r0 , num bl hexvar cmp r0 , num blt hexvar ldr r6 , [ r5 , hexvar ] str r6 , [ sb , hexvar ] mov r0 , r6 bl hexvar subs r5 , r0 , num beq hexvar mov r2 , r6 mov r1 , r5 mov r0 , r4 bl hexvar ldr r3 , [ sb , hexvar ] cmp r0 , r3 beq hexvar mov r0 , r5 bl hexvar mov r0 , r4 bl hexvar mov r0 , sb mov sb , num bl hexvar mov r0 , sb add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push { r4 , r5 , r6 , r7 , r8 , lr } subs r8 , r1 , num moveq r5 , num beq hexvar ldrb ip , [ r8 ] clz r5 , r3 lsr r5 , r5 , num cmp ip , num moveq r5 , num cmp r5 , num movne r5 , num beq hexvar mov r0 , r5 pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ ebp + num ] movsx ecx , byte ptr [ ebp + num ] add ecx , - hexvar mov edx , ecx sub edx , hexvar mov byte ptr [ ebp - num ] , al mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx ja hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov byte ptr [ ebp - num ] , hexvar jmp hexvar mov byte ptr [ ebp - num ] , hexvar jmp hexvar mov byte ptr [ ebp - num ] , hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar movsx eax , byte ptr [ ebp - num ] add esp , hexvar pop ebp ret
lea eax , [ ebx - hexvar ] push ecx push ecx mov dword ptr [ ebp - hexvar ] , edx push eax push edx call hexvar add esp , hexvar test eax , eax je hexvar mov edx , dword ptr [ ebp - hexvar ] push eax push eax lea eax , [ ebx - hexvar ] push eax push edx call hexvar add esp , hexvar test eax , eax je hexvar mov edx , dword ptr [ ebp - hexvar ] push eax push eax lea eax , [ ebx - hexvar ] push eax push edx call hexvar add esp , hexvar test eax , eax je hexvar mov edx , dword ptr [ ebp - hexvar ] push eax push eax lea eax , [ ebx - hexvar ] push eax push edx call hexvar add esp , hexvar test eax , eax je hexvar mov edx , dword ptr [ ebp - hexvar ] push eax push eax lea eax , [ ebx - hexvar ] push eax push edx call hexvar add esp , hexvar test eax , eax je hexvar mov edx , dword ptr [ ebp - hexvar ] push eax push eax lea eax , [ ebx - hexvar ] push eax push edx call hexvar add esp , hexvar test eax , eax je hexvar mov edx , dword ptr [ ebp - hexvar ] push eax push eax lea eax , [ ebx - hexvar ] push eax push edx call hexvar add esp , hexvar test eax , eax mov edx , dword ptr [ ebp - hexvar ] jne hexvar mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , num jmp hexvar
push rbp mov rbp , rsp mov rax , qword ptr [ rip + hexvar ] add rax , num mov qword ptr [ rip + hexvar ] , rax lea rdi , [ rip + hexvar ] call hexvar nop pop rbp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov dword ptr [ esp + num ] , eax mov ebp , edx mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov edi , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , edi xor edi , edi lea ecx , [ ebx + hexvar ] cmp dword ptr [ ecx ] , num je hexvar test ebp , ebp jne hexvar sub esp , hexvar push eax lea eax , [ ebx - hexvar ] push eax push - num push num push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] xor eax , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , rsp add rax , - hexvar mov rsp , rax mov rcx , rsp add rcx , - hexvar mov rsp , rcx mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rsi mov rcx , qword ptr [ rcx ] mov rax , qword ptr [ rax ] mov qword ptr [ rax + hexvar ] , rcx mov eax , num mov rsp , rbp pop rbp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - num ] cmp dword ptr [ rdx + hexvar ] , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , - num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jae hexvar mov rax , qword ptr [ rbp - hexvar ] movsx ecx , byte ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] movsx edx , byte ptr [ rax ] xor ecx , edx mov sil , cl mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax ] , sil mov rax , qword ptr [ rbp - hexvar ] movsx ecx , byte ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] movsx edx , byte ptr [ rax ] xor ecx , edx mov sil , cl mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax ] , sil mov rax , qword ptr [ rbp - hexvar ] movsx ecx , byte ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] movsx edx , byte ptr [ rax ] xor ecx , edx mov sil , cl mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax ] , sil mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , - num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) b hexvar nop lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push rbx mov rbx , rsi xor esi , esi call hexvar test rax , rax mov rdx , rax jne hexvar jmp hexvar nop dword ptr [ rax ] mov rdx , qword ptr [ rdx + hexvar ] test rdx , rdx je hexvar cmp rax , rdx je hexvar cmp dword ptr [ rdx + num ] , num jne hexvar mov rcx , qword ptr [ rdx + hexvar ] mov rdx , qword ptr [ rdx + hexvar ] test rdx , rdx mov qword ptr [ rcx + hexvar ] , rbx jne hexvar pop rbx ret
push edi push num lea eax , [ esp + hexvar ] push eax push esi call hexvar mov edi , eax add esi , dword ptr [ esp + hexvar ] add esp , num lea eax , [ ebx - hexvar ] push eax push num call hexvar add esp , hexvar cmp edi , num je hexvar cmp edi , num jbe hexvar cmp edi , num je hexvar cmp edi , num jne hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar jmp hexvar cmp edi , num jne hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar jmp hexvar sub esp , num push num lea eax , [ ebx - hexvar ] push eax push num call hexvar add esp , num push eax push num call hexvar add esp , hexvar jmp hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar jmp hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar jmp hexvar
push ebp mov ebp , esp sub esp , hexvar mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - num ] , hexvar mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , dword ptr [ hexvar ] mov eax , hexvar mov ecx , hexvar cmovb ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ hexvar ] imul ecx , dword ptr [ ebp - num ] , hexvar add eax , ecx mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp - num ] mov dword ptr [ ecx + edx * num ] , eax mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , hexvar jmp hexvar add esp , hexvar pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx xor ecx , ecx mov edx , dword ptr [ esp + hexvar ] test edi , edi je hexvar lea ecx , [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax lea eax , [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , edx xor esi , esi mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp + hexvar ] , eax jmp hexvar lea esi , [ esi ] sub esp , num push esi push edi call hexvar mov ebp , eax pop eax pop edx push dword ptr [ esp + hexvar ] push ebp call hexvar add esp , hexvar test eax , eax je hexvar add esi , num sub esp , hexvar push edi call hexvar add esp , hexvar cmp eax , esi jg hexvar xor ebp , ebp mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] mov eax , ebp jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu a2 , zero , num sw s1 , hexvar ( sp ) move s1 , a1 lui a1 , hexvar sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) move s0 , a0 sw gp , hexvar ( sp ) addiu a1 , a1 , hexvar lw t9 , - hexvar ( gp ) jalr t9 move a0 , zero addiu a0 , zero , num lw gp , hexvar ( sp ) move a2 , s0 lw t9 , - hexvar ( gp ) jalr t9 move a1 , v0 subu a1 , s1 , s0 lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , s0 move a1 , s1 jal hexvar addu a0 , s0 , v0 move v0 , s1 lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbx mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] call hexvar test eax , eax mov esi , num jne hexvar mov rcx , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rbx + hexvar ] cmp rbx , qword ptr [ rip + hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov rdx , qword ptr [ rbx + hexvar ] mov qword ptr [ rdx + hexvar ] , rcx jne hexvar cmp rbx , rdx mov eax , num cmove rdx , rax mov qword ptr [ rip + hexvar ] , rdx mov qword ptr [ rbx + hexvar ] , num mov eax , esi sub dword ptr [ rip + hexvar ] , num pop rbx ret
push rbp mov rbp , rsp movlps qword ptr [ rbp - hexvar ] , xmm0 movlps qword ptr [ rbp - num ] , xmm1 movlps qword ptr [ rbp - hexvar ] , xmm2 movlps qword ptr [ rbp - hexvar ] , xmm3 mov qword ptr [ rbp - hexvar ] , rdi movss xmm0 , dword ptr [ rbp - hexvar ] subss xmm0 , dword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] movss dword ptr [ rdi ] , xmm0 movss xmm0 , dword ptr [ rbp - hexvar ] subss xmm0 , dword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] movss dword ptr [ rdi + num ] , xmm0 movss xmm0 , dword ptr [ rbp - num ] subss xmm0 , dword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] movss dword ptr [ rdi + num ] , xmm0 movss xmm0 , dword ptr [ rbp - num ] subss xmm0 , dword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - hexvar ] movss dword ptr [ rdi + hexvar ] , xmm0 pop rbp ret
ldrb r3 , [ r0 ] cmp r3 , num movne ip , r1 bne hexvar ldrb r0 , [ r1 ] clz r0 , r0 lsr r0 , r0 , num bx lr mov r0 , num bx lr sub r1 , r2 , hexvar cmp r1 , hexvar bhi hexvar add r2 , r2 , hexvar and r2 , r2 , hexvar cmp r2 , r3 bne hexvar mov r1 , ip ldrb r3 , [ r0 , num ] ! cmp r3 , num beq hexvar ldrb r2 , [ ip ] , num cmp r2 , r3 beq hexvar sub r1 , r3 , hexvar cmp r1 , hexvar bhi hexvar add r3 , r3 , hexvar and r3 , r3 , hexvar sub r1 , r2 , hexvar cmp r1 , hexvar bhi hexvar b hexvar mov r0 , num bx lr
push ebp mov ebp , esp sub esp , hexvar cmp dword ptr [ hexvar ] , num jne hexvar mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov dword ptr [ hexvar ] , num test byte ptr [ hexvar ] , num je hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar cmp eax , num je hexvar call hexvar lea ecx , [ hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , ecx call hexvar add esp , hexvar pop ebp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] mov r2 , hexvar ldr r1 , [ fp , - hexvar ] ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 eor r3 , r3 , num and r3 , r3 , hexvar cmp r3 , num beq hexvar mov r3 , num b hexvar ldr r3 , [ fp , - hexvar ] add r3 , r3 , num str r3 , [ fp , - num ] b hexvar ldr r3 , [ fp , - hexvar ] ldr r2 , [ r3 ] ldr r3 , [ fp , - num ] add r3 , r2 , r3 ldrb r3 , [ r3 ] mov r0 , r3 bl hexvar mov r3 , r0 sub r3 , r3 , hexvar cmp r3 , num bhi hexvar ldr r3 , [ fp , - hexvar ] ldr r2 , [ r3 , num ] ldr r3 , [ fp , - num ] add r3 , r2 , r3 ldrb r3 , [ r3 ] cmp r3 , num beq hexvar mov r2 , hexvar ldr r1 , [ fp , - num ] ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 b hexvar ldr r3 , [ fp , - num ] add r3 , r3 , num str r3 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 , num ] ldr r2 , [ fp , - num ] cmp r2 , r3 blo hexvar mov r3 , num mov r0 , r3 sub sp , fp , num pop { fp , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] test rcx , rcx sete al movzx r9d , al mov ecx , r9d mov rcx , qword ptr [ rcx * num + hexvar ] jmp rcx mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax + hexvar ] call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax sete cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rsi , rax call hexvar test eax , eax setne cl movzx eax , cl mov edx , eax mov rdx , qword ptr [ rdx * num + hexvar ] jmp rdx mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] add rax , rcx mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rax call hexvar mov dword ptr [ rbp - num ] , num mov rcx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] ldr r3 , [ sp , num ] cmp r3 , hexvar bne hexvar bl hexvar mov r3 , r0 b hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar push dword ptr [ ebp + num ] call hexvar add esp , num mov byte ptr [ ebp - hexvar ] , al push dword ptr [ ebp + hexvar ] call hexvar add esp , num mov byte ptr [ ebp - num ] , al cmp byte ptr [ ebp - hexvar ] , num je hexvar movzx eax , byte ptr [ ebp - num ] xor eax , num test al , al je hexvar mov eax , hexvar jmp hexvar movzx eax , byte ptr [ ebp - hexvar ] xor eax , num test al , al je hexvar cmp byte ptr [ ebp - num ] , num je hexvar mov eax , num jmp hexvar sub esp , num mov eax , dword ptr [ ebx + hexvar ] push eax push dword ptr [ ebp + num ] push dword ptr [ ebp + hexvar ] call hexvar add esp , hexvar mov ebx , dword ptr [ ebp - num ] leave ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 addiu s2 , a1 , hexvar lw a0 , hexvar ( a1 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov ecx , dword ptr [ rax + num ] mov dword ptr [ rbp - num ] , ecx mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r6 , r0 ldr sl , [ pc , hexvar ] mov r4 , r1 mov r8 , r2 ldr r1 , [ pc , hexvar ] mov r2 , num mov r0 , num bl hexvar ldr r1 , [ sl ] bl hexvar ldr fp , [ r6 ] cmp fp , num beq hexvar mov sb , num mov r5 , sb b hexvar mov r0 , fp bl hexvar ldr r2 , [ pc , hexvar ] mov r3 , r0 mov r1 , num mov r0 , r7 bl hexvar mov sb , r4 ldr fp , [ r6 , num ] ! add r5 , r5 , num cmp fp , num add r4 , r4 , r8 beq hexvar cmp r5 , num ldr r7 , [ sl ] beq hexvar mov r2 , r8 mov r1 , r4 mov r0 , sb bl hexvar cmp r0 , num bne hexvar mov r0 , fp bl hexvar ldr r2 , [ pc , hexvar ] mov r3 , r0 mov r1 , num mov r0 , r7 bl hexvar b hexvar ldr r0 , [ sl ] ldr r3 , [ r0 , hexvar ] ldr r2 , [ r0 , hexvar ] cmp r3 , r2 bhs hexvar mov r2 , hexvar add r1 , r3 , num str r1 , [ r0 , hexvar ] strb r2 , [ r3 ] pop { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ hexvar ] cmp eax , dword ptr [ hexvar ] jne hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar call hexvar mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] mov edx , ecx inc edx mov dword ptr [ hexvar ] , edx shl ecx , num add eax , ecx mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax + num ] , num mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] lea esi , [ ebp - hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ edi ] mov edi , dword ptr [ edi + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp mov dword ptr [ eax + num ] , esi mov dword ptr [ eax + num ] , edi mov dword ptr [ eax ] , ebx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] lea ecx , [ ebp + num ] and al , num mov byte ptr [ ebp - num ] , al mov edx , dword ptr [ ecx + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] shr edx , hexvar mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx jmp edx mov eax , dword ptr [ ebp - hexvar ] neg eax mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + num ] sub ecx , num sete dl movzx esi , dl mov esi , dword ptr [ esi * num + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx jmp esi mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov edx , hexvar mov esi , hexvar cmovl esi , edx add eax , esi mov dword ptr [ ebp - hexvar ] , eax movzx eax , byte ptr [ ebp - num ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx jmp eax mov eax , esp mov dword ptr [ eax ] , hexvar call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx + num ] mov esi , dword ptr [ ebp - hexvar ] mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi + num ] , edx mov dword ptr [ edi ] , eax call hexvar mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) addiu v0 , sp , hexvar move a2 , v0 lui v0 , hexvar addiu a1 , v0 , - hexvar addiu a0 , zero , num lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) nop lw v0 , - hexvar ( gp ) lw v1 , hexvar ( sp ) lw v0 , ( v0 ) beq v1 , v0 , hexvar nop lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move v0 , a1 lw a1 , hexvar ( a0 )
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - hexvar ] setb cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] add eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] movsx ecx , byte ptr [ eax ] mov dword ptr [ esp ] , ecx call hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] movzx ecx , al mov dl , byte ptr [ ecx + hexvar ] mov ecx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp - hexvar ] mov byte ptr [ ecx + esi ] , dl mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea ecx , [ hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov bl , num and bl , num movzx eax , bl add esp , hexvar pop esi pop ebx pop ebp ret
sub rsp , num mov rdi , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + hexvar ] lea rsi , [ rdx + num ] cmp rsi , qword ptr [ rax ] jbe hexvar call hexvar mov rdx , qword ptr [ rip + hexvar ] lea rsi , [ rdx + num ] movzx eax , byte ptr [ rdx + num ] movzx ecx , byte ptr [ rdx + num ] movzx edi , byte ptr [ rdx ] movzx edx , byte ptr [ rdx + num ] mov qword ptr [ rip + hexvar ] , rsi add rsp , num shl rax , num shl rcx , hexvar or rax , rcx shl rdx , hexvar or rax , rdi or rax , rdx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lw s1 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw s0 , ( s1 ) bal hexvar move a0 , s0 bnez v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar move a0 , s0 bnez v0 , hexvar lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) lw t9 , - hexvar ( gp ) b hexvar addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) bal hexvar lw a0 , ( s1 )
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ esp ] , eax call hexvar add esp , num pop ebp ret
adds r3 , r0 , num movne r3 , num cmp r1 , num movne r3 , num cmp r3 , num push { r4 , lr } bne hexvar mov r4 , r1 bl hexvar adds r4 , r4 , num movne r4 , num cmp r0 , num movne r4 , num cmp r4 , num popeq { r4 , pc }
push ebx sub esp , num call hexvar add ebx , hexvar mov eax , dword ptr [ ebx + hexvar ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar mov dword ptr [ ebx + hexvar ] , num add esp , hexvar add esp , num pop ebx ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] mov eax , num mov edi , dword ptr [ esp + hexvar ] mov edx , dword ptr [ edi + num ] cmp dword ptr [ ebp + num ] , edx je hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { r4 , r5 , r6 , r7 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r4 ] mov r6 , r0 mov r5 , r1 mov r7 , r2 ldr r1 , [ pc , hexvar ] add r2 , sp , num mov r0 , num str r3 , [ sp , hexvar ] bl hexvar cmp r0 , num beq hexvar bl hexvar ldr r1 , [ r0 ] cmp r1 , hexvar bne hexvar mov r3 , num str r3 , [ sp , num ] str r3 , [ sp , num ] cmp r6 , num strhge r6 , [ sp , num ] add r2 , sp , num cmp r5 , num ldr r1 , [ pc , hexvar ] mov r0 , num strhge r5 , [ sp , num ] bl hexvar cmp r0 , num beq hexvar bl hexvar mov r3 , r7 ldr r1 , [ r0 ] ldr r2 , [ pc , hexvar ] mov r0 , num bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc } ldrbgt r0 , [ r3 , hexvar ] ! andeq r0 , r0 , r0
push r15 push r14 push rbx mov rbx , rsi mov r14 , rdi mov rdi , rsi call hexvar movsxd r15 , eax mov rdi , r14 mov rsi , rbx mov rdx , r15 call hexvar test eax , eax je hexvar pop rbx pop r14 pop r15 ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , hexvar jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp + num ] cmp dword ptr [ eax + num ] , num je hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , eax mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
lui v1 , hexvar lui gp , hexvar addiu sp , sp , - hexvar lbu v1 , - hexvar ( v1 ) move v0 , a0 addiu gp , gp , hexvar addiu a0 , a0 , hexvar sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) addiu s1 , v0 , num sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw gp , hexvar ( sp ) sw zero , num ( v0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) bnez v0 , hexvar addiu v1 , zero , num lui v0 , hexvar sw v1 , hexvar ( v0 ) lui v0 , hexvar lw v0 , hexvar ( v0 ) bnez v0 , hexvar lui v0 , hexvar lui v0 , hexvar sw v1 , hexvar ( v0 ) lui v0 , hexvar lw v0 , hexvar ( v0 ) beqz v0 , hexvar lw v0 , - hexvar ( gp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) beqz v0 , hexvar lw v0 , - hexvar ( gp ) lui v0 , hexvar lw v0 , hexvar ( v0 ) beqz v0 , hexvar lui v1 , hexvar lw v1 , hexvar ( v1 ) sll v1 , v1 , num addu v0 , v0 , v1 lw v0 , ( v0 ) beqz v0 , hexvar nop jal hexvar nop lw gp , hexvar ( sp ) lui fp , hexvar lui s0 , hexvar addiu s0 , s0 , hexvar lui s2 , hexvar addiu s2 , s2 , hexvar addiu s3 , fp , hexvar lui v0 , hexvar lw s1 , hexvar ( v0 ) lui v0 , hexvar lbu v0 , hexvar ( v0 ) sb v0 , ( s1 ) lui v0 , hexvar lw v0 , hexvar ( v0 ) move s5 , s1 lui v1 , hexvar lw t4 , hexvar ( v1 ) lui v1 , hexvar lw t6 , hexvar ( v1 ) move t5 , zero move t3 , zero lui t0 , hexvar addiu t0 , t0 , hexvar addiu t2 , zero , num lui a1 , hexvar addiu a1 , a1 , hexvar lui a2 , hexvar addiu a2 , a2 , hexvar lui a3 , hexvar addiu a3 , a3 , hexvar b hexvar addiu t1 , zero , hexvar lw v1 , ( v0 )
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] push hexvar call hexvar add esp , hexvar test eax , eax je hexvar mov dword ptr [ eax ] , num mov dword ptr [ eax + hexvar ] , esi mov dword ptr [ eax + hexvar ] , esi add esp , num pop ebx pop esi ret
push r15 push r14 mov ecx , esi push r13 push r12 push rbp push rbx mov rbx , rdi sub rsp , hexvar lea rdx , [ rsp + hexvar ] lea rsi , [ rsp + num ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar test eax , eax je hexvar call hexvar mov esi , dword ptr [ rax ] mov rcx , rbx mov edx , hexvar mov edi , num xor eax , eax call hexvar mov rbp , qword ptr [ rsp + num ] mov esi , num mov rbx , qword ptr [ rsp + hexvar ] mov rdi , rbp call hexvar test rbp , rbp mov r14 , rax je hexvar xor r13d , r13d nop word ptr [ rax + rax ] cmp byte ptr [ rbx + hexvar ] , num je hexvar cmp word ptr [ rbx ] , num je hexvar add rbx , hexvar sub rbp , num jne hexvar mov ecx , hexvar mov edx , num mov rsi , r13 mov rdi , r14 call hexvar test r13 , r13 je hexvar lea r15 , [ r13 - num ] xor ebx , ebx jmp hexvar nop dword ptr [ rax + rax ] lea rdx , [ rax + num ] add rbx , num cmp rbx , r13 mov qword ptr [ rdi + hexvar ] , rdx mov byte ptr [ rax ] , bpl je hexvar cmp rbx , r15 mov rdi , qword ptr [ r14 + rbx * num ] mov rsi , qword ptr [ rip + hexvar ] sbb r12d , r12d and r12d , hexvar add r12d , hexvar cmp rbx , r15 sbb ebp , ebp call hexvar mov rdi , qword ptr [ rip + hexvar ] and ebp , hexvar add ebp , hexvar mov rax , qword ptr [ rdi + hexvar ] cmp rax , qword ptr [ rdi + hexvar ] jb hexvar mov esi , r12d add rbx , num call hexvar cmp rbx , r13 jne hexvar nop word ptr [ rax + rax ] xor ebx , ebx nop word ptr [ rax + rax ] mov rdi , qword ptr [ r14 + rbx * num ] add rbx , num call hexvar cmp rbx , r13 jne hexvar mov rdi , r14 call hexvar mov rdi , qword ptr [ rsp + hexvar ] call hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea ecx , [ hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov bl , num and bl , num movzx eax , bl add esp , hexvar pop esi pop ebx pop ebp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a3 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v1 , hexvar ( fp ) or v0 , v0 , v1 beqz v0 , hexvar nop lw v0 , hexvar ( fp ) lw a1 , hexvar ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov eax , esi mov byte ptr [ rbp - hexvar ] , al mov qword ptr [ rbp - hexvar ] , num mov byte ptr [ rbp - hexvar ] , num add qword ptr [ rbp - hexvar ] , num lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax ] , num mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar xor eax , num test al , al je hexvar mov byte ptr [ rbp - hexvar ] , num mov rdx , qword ptr [ rip + hexvar ] mov eax , dword ptr [ rip + hexvar ] cmp eax , hexvar je hexvar mov eax , dword ptr [ rip + hexvar ] jmp hexvar mov eax , hexvar mov rsi , rdx mov edi , eax call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar xor eax , num test al , al je hexvar mov byte ptr [ rbp - hexvar ] , num nop cmp byte ptr [ rbp - hexvar ] , num je hexvar movzx eax , byte ptr [ rip + hexvar ] movzx eax , al mov edi , eax call hexvar movzx eax , byte ptr [ rbp - hexvar ] leave ret
mov rax , qword ptr [ rdi + num ] cmp rax , rsi jbe hexvar sub rax , num mov qword ptr [ rdi + num ] , rax cmp rsi , rax jae hexvar lea rax , [ rsi * num ] mov rdx , qword ptr [ rdi + hexvar ] add rsi , num mov rcx , qword ptr [ rdx + rax + num ] mov qword ptr [ rdx + rax ] , rcx lea rax , [ rax + num ] cmp qword ptr [ rdi + num ] , rsi ja hexvar ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov edi , dword ptr [ edi + num ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call edx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx + num ] jb hexvar call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] shl ecx , num add eax , ecx add esp , hexvar pop esi pop edi pop ebp ret
addiu sp , sp , - hexvar lw v0 , hexvar ( sp ) sw a3 , hexvar ( sp ) lui a3 , hexvar sw ra , hexvar ( sp ) sw v0 , hexvar ( sp ) addiu v0 , zero , hexvar addiu a3 , a3 , hexvar jal hexvar sw v0 , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push esi sub esp , hexvar xor eax , eax mov dword ptr [ esp ] , num lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar cmp eax , num je hexvar mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar lea eax , [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar jmp hexvar movsd xmm0 , qword ptr [ ebp - hexvar ] movsd qword ptr [ ebp - hexvar ] , xmm0 jmp hexvar mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , esp mov dword ptr [ eax + hexvar ] , num mov dword ptr [ eax + num ] , num mov dword ptr [ eax + num ] , num mov dword ptr [ eax ] , num call hexvar mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] shr eax , hexvar mov cl , al mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov dword ptr [ ebp - hexvar ] , hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ ebp - hexvar ] sub edx , eax sbb esi , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi movsd xmm0 , qword ptr [ ebp - hexvar ] movsd qword ptr [ ebp - hexvar ] , xmm0 mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num jle hexvar mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] add eax , hexvar add eax , - num sub eax , hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar add esp , hexvar pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] mov r1 , hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r1 , num ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar add r2 , sp , hexvar add r3 , sp , hexvar mov r1 , r3 ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , num mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] mov r2 , r3 add r3 , sp , hexvar mov r1 , r3 ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num b hexvar mov r3 , num mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { pc }
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) addiu gp , gp , - hexvar lw a0 , ( a0 )
mov r3 , num push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r8 , r1 ldr r7 , [ pc , hexvar ] sub sp , sp , hexvar str r3 , [ sp , hexvar ] ldr r3 , [ r7 ] str r0 , [ sp ] str r3 , [ sp , hexvar ] bl hexvar ldr r3 , [ r8 , hexvar ] tst r3 , hexvar bne hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r7 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov al , byte ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] and al , num mov byte ptr [ ebp - num ] , al mov edx , dword ptr [ ebp + num ] movsx edx , byte ptr [ edx ] add edx , - hexvar mov esi , edx sub esi , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov eax , dword ptr [ ebp + num ] cmp byte ptr [ eax + num ] , num je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] cmp byte ptr [ eax + num ] , num je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov al , byte ptr [ ebp - num ] xor al , hexvar and al , num mov byte ptr [ ebp - num ] , al jmp hexvar mov eax , dword ptr [ ebp + num ] cmp byte ptr [ eax + num ] , num je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push rbp push r15 push r14 push r12 push rbx test rdi , rdi je hexvar mov r15 , rcx mov rcx , rsi test rsi , rsi je hexvar mov ebp , r9d mov rbx , rdi cmp qword ptr [ rdi + hexvar ] , num je hexvar mov r14 , r8 mov r12 , rdx mov rdi , rbx mov esi , hexvar xor edx , edx xor r8d , r8d call hexvar test eax , eax jle hexvar mov rdi , rbx mov esi , eax mov rdx , r12 mov rcx , r15 mov r8 , r14 call hexvar mov ecx , eax xor eax , eax test ecx , ecx setg al jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax jmp hexvar test ebp , ebp je hexvar call hexvar mov eax , num pop rbx pop r12 pop r14 pop r15 pop rbp ret
push rbp push r14 push rbx sub rsp , hexvar mov r14 , rdi xor ebp , ebp mov rdi , rsi xor esi , esi call hexvar test rax , rax je hexvar mov rbx , rax mov rcx , qword ptr [ rip + hexvar ] test rcx , rcx jne hexvar call hexvar mov rcx , rax mov qword ptr [ rip + hexvar ] , rax lea rbp , [ rsp + num ] mov rdi , rbp call qword ptr [ rcx + hexvar ] mov qword ptr [ rsp + hexvar ] , r14 mov rax , qword ptr [ rsp + num ] mov rdi , rbp mov rsi , rbx call qword ptr [ rax + hexvar ] mov ebp , eax mov rdi , rbx call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar mov eax , ebp add rsp , hexvar pop rbx pop r14 pop rbp ret
push rbp mov rbp , rsp mov eax , dword ptr [ num ] cmp eax , num jne hexvar jmp hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar call hexvar mov dword ptr [ num ] , num pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r13d , r9d mov r12d , r8d mov rbp , rcx mov dword ptr [ rsp + num ] , edx mov r15 , rsi mov r14d , edi call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , rax mov esi , hexvar call hexvar test eax , eax je hexvar mov edi , r14d call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rdi , rax mov esi , r13d mov rdx , rbp mov ecx , r12d call hexvar mov rbp , rax test rax , rax je hexvar mov r14 , qword ptr [ rsp + hexvar ] mov rax , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rax + num ] mov rdi , qword ptr [ rax + num ] call hexvar mov rax , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rax + num ] , rbp mov rax , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rax + num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov esi , hexvar mov rdi , rbp mov rdx , r15 mov ecx , dword ptr [ rsp + num ] mov r8 , r14 mov r9d , num call hexvar mov rcx , qword ptr [ rbx + hexvar ] mov rcx , qword ptr [ rcx + num ] mov qword ptr [ rcx + hexvar ] , rax test rax , rax jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov edi , r14d mov esi , r13d mov rdx , rbp mov ecx , r12d call hexvar mov rbp , rax test rax , rax jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx mov rax , rbx add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbx sub rsp , hexvar movzx eax , byte ptr [ rip + hexvar ] xor eax , num mov dword ptr [ rsp + hexvar ] , eax mov eax , hexvar mov ebx , hexvar jmp hexvar cmp dword ptr [ rsp + hexvar ] , num mov eax , hexvar cmove eax , ebx nop dword ptr [ rax ] cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar mov qword ptr [ rsp ] , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov ecx , hexvar mov r8d , hexvar mov r9d , hexvar xor eax , eax call hexvar mov byte ptr [ rip + hexvar ] , num mov eax , hexvar jmp hexvar mov eax , hexvar add rsp , hexvar pop rbx ret
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw s0 , hexvar ( a0 ) beqz s0 , hexvar lw ra , hexvar ( sp ) lw a0 , num ( s0 )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 move s0 , a1 move a0 , a1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move a2 , v0 move a1 , s0 move a0 , s1 lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbp mov rbp , rsp push r14 push rbx mov r14 , rsi mov eax , dword ptr [ rip ] test eax , eax jne hexvar movaps xmm0 , xmmword ptr [ rip ] xorps xmm0 , xmmword ptr [ rip ] movaps xmmword ptr [ rip ] , xmm0 movaps xmmword ptr [ rip ] , xmm0 add byte ptr [ rsi ] , bh add byte ptr [ rax ] , al add byte ptr [ rax ] , al test dword ptr [ rax + hexvar ] , ebp or eax , hexvar add byte ptr [ rbx + rsi ] , dh mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al lea eax , [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al lodsd eax , dword ptr [ rsi ] add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al fiadd word ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al add byte ptr [ rip ] , al add byte ptr [ rip ] , al xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al push num add byte ptr [ rax + rdx ] , dh mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al push num add byte ptr [ rsp + rdi * num ] , dh mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al push num add byte ptr [ rbx + rsi * num ] , dh mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al push num add byte ptr [ rbx * num + hexvar ] , dh add byte ptr [ rax ] , al mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al sub eax , dword ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al pop rdi add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al test al , num add byte ptr [ rax ] , al add byte ptr [ rax ] , al xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al int num
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovg ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov eax , dword ptr [ hexvar ] add eax , - num mov dword ptr [ hexvar ] , eax mov dword ptr [ ebp - num ] , hexvar jmp hexvar add esp , hexvar pop ebp ret
push r15 push r14 push rbx mov r15 , rdi call hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov r14 , rax mov edi , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , r15 call hexvar test rax , rax je hexvar mov r15 , rax mov rdi , rax call hexvar mov edx , num mov rdi , rbx mov esi , hexvar mov rcx , r15 call hexvar mov rdi , rbx mov rsi , r14 call hexvar test rax , rax je hexvar pop rbx pop r14 pop r15 ret
push edi push esi push ebx mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov eax , dword ptr [ esi ] cmp dword ptr [ edi ] , eax jne hexvar mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar mov edx , dword ptr [ eax + hexvar ] test edx , edx je hexvar sub esp , hexvar push esi call edx add esp , hexvar test eax , eax jne hexvar mov eax , dword ptr [ esi + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ esp + hexvar ] , edi pop ebx pop esi pop edi jmp eax lea esi , [ esi ] lea eax , [ ebx - hexvar ] sub esp , hexvar push hexvar push eax push hexvar push hexvar push num call hexvar add esp , hexvar pop ebx xor eax , eax pop esi pop edi ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r5 , [ pc , hexvar ] ldr r4 , [ pc , hexvar ] ldr ip , [ r5 ] ldr r3 , [ r4 ] sub sp , sp , hexvar cmp ip , num str r3 , [ sp , hexvar ] bne hexvar ldr r3 , [ r5 , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push r15 push r14 push rbx test rdi , rdi je hexvar mov r14 , rsi test rsi , rsi je hexvar mov r15 , rdx test rdx , rdx je hexvar cmp word ptr [ r15 + hexvar ] , num je hexvar mov rbx , rdi mov rsi , r14 call hexvar add r15 , hexvar mov rdi , rbx mov rsi , rbx mov rdx , r14 mov rcx , r15 call hexvar xor ecx , ecx test eax , eax cmove rcx , r14 mov rax , rcx pop rbx pop r14 pop r15 ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov ebp , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] push hexvar push dword ptr [ ebp ] call hexvar pop edx pop ecx push hexvar push dword ptr [ edi ] mov esi , eax call hexvar lea edx , [ ebx - hexvar ] add esp , hexvar test eax , eax cmove eax , edx test esi , esi cmove esi , edx mov edx , eax mov eax , esi call hexvar test eax , eax jne hexvar mov edx , dword ptr [ edi ] mov eax , dword ptr [ ebp ] add esp , hexvar pop ebx pop esi pop edi pop ebp jmp hexvar lea esi , [ esi ] add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] str r1 , [ fp , - hexvar ] str r2 , [ fp , - hexvar ] bl hexvar mov r3 , r0 ldr r3 , [ r3 ] str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] mov r2 , hexvar ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 ] ldr r1 , [ fp , - hexvar ] mov r0 , r3 bl hexvar str r0 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 ] cmp r3 , num bne hexvar ldr r3 , [ fp , - hexvar ] cmp r3 , num beq hexvar ldr r3 , [ pc , hexvar ] mov r2 , hexvar ldr r1 , [ pc , hexvar ] ldr r0 , [ pc , hexvar ] bl hexvar ldr r3 , [ fp , - hexvar ] ldr r2 , [ fp , - num ] str r2 , [ r3 ] ldr r0 , [ fp , - num ] bl hexvar mov r3 , r0 str r3 , [ fp , - hexvar ] b hexvar ldr r3 , [ fp , - hexvar ] ldr r3 , [ r3 ] ldr r2 , [ fp , - num ] cmp r2 , r3 beq hexvar ldr r3 , [ fp , - hexvar ] ldr r2 , [ fp , - num ] str r2 , [ r3 ] ldr r1 , [ fp , - num ] ldr r0 , [ fp , - hexvar ] bl hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num bne hexvar bl hexvar mov r3 , r0 ldr r3 , [ r3 ] str r3 , [ fp , - hexvar ] b hexvar ldr r3 , [ fp , - hexvar ] str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] cmp r3 , num beq hexvar bl hexvar mov r2 , r0 ldr r3 , [ fp , - hexvar ] str r3 , [ r2 ] ldr r3 , [ fp , - hexvar ] mov r0 , r3 sub sp , fp , num pop { fp , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] lea ecx , [ hexvar ] cmp ecx , eax mov eax , hexvar mov ecx , hexvar cmove ecx , eax mov dword ptr [ ebp - num ] , ecx mov byte ptr [ ebp - num ] , num jmp hexvar lea eax , [ hexvar ] cmp eax , dword ptr [ ebp + num ] sete cl mov dword ptr [ ebp - num ] , hexvar and cl , num mov byte ptr [ ebp - num ] , cl jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
lui v0 , hexvar lw v0 , hexvar ( v0 ) beqz v0 , hexvar lui gp , hexvar jr ra nop move a3 , a1 addiu gp , gp , hexvar lui a1 , hexvar move a2 , a0 lw t9 , - hexvar ( gp ) addiu a0 , zero , num jr t9 addiu a1 , a1 , hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) move a3 , a2 move a2 , a1 move a1 , a0 lui a0 , hexvar addiu a0 , a0 , - hexvar jal hexvar nop lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esi mov dword ptr [ ebp - hexvar ] , edx cdq mov esi , hexvar idiv esi mov edi , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ edi + eax * num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , ebx cdq idiv esi mov dword ptr [ ebp - hexvar ] , ecx mov ecx , edx mov edx , dword ptr [ ebp - hexvar ] shr edx , cl and edx , num cmp edx , num setne cl and cl , num movzx edx , cl mov eax , edx add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov bl , num and bl , num movzx esi , bl mov dword ptr [ ebp - hexvar ] , eax mov eax , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx add esp , hexvar pop esi pop ebx pop ebp ret
mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , eax shl eax , num add eax , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] add eax , dword ptr [ ebp - hexvar ] cmp ecx , num je hexvar cmp ecx , num je hexvar lea ecx , [ ebp - hexvar ] sub esp , num push ecx push edx push dword ptr [ ebp - hexvar ] push - num push num push esi push eax call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov ecx , dword ptr [ ebp - hexvar ] test ecx , ecx js hexvar cmp ecx , esi mov dword ptr [ ebp - hexvar ] , ecx jae hexvar mov edx , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] add edx , ecx cmp byte ptr [ edx + eax ] , num jne hexvar cmp ecx , dword ptr [ ebp - hexvar ] jl hexvar mov edx , dword ptr [ ebp - hexvar ] lea eax , [ edx + num ] cmp eax , esi jb hexvar cmp esi , hexvar je hexvar lea ecx , [ edi + edi ] test edi , edi mov eax , hexvar cmovns eax , ecx add edx , dword ptr [ ebp - hexvar ] cmp dword ptr [ ebp - hexvar ] , edx ja hexvar cmp eax , edx cmovae edx , eax cmp edi , edx jae hexvar test edi , edi js hexvar cmp ecx , edx mov edi , ecx jae hexvar cmp edx , - num je hexvar mov edi , edx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] cmp eax , ecx sete dl test eax , eax je hexvar test dl , dl jne hexvar sub esp , num push edi push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar nop lea esi , [ esi ]
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) jal hexvar nop lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebx sub esp , num call hexvar add ebx , hexvar push dword ptr [ esp + hexvar ] push num push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] and edx , num mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + num ] sar edx , num mov esi , dword ptr [ ebp + hexvar ] mov edi , esi sar edi , num mov ebx , dword ptr [ ebp - hexvar ] and ebx , esi add edi , ebx add edx , edi mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] sub edx , hexvar setg bl movzx esi , bl mov esi , dword ptr [ esi * num + hexvar ] xor ebx , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov byte ptr [ ebp - hexvar ] , bl jmp esi mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar setl cl mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , cl jmp edx mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar xor eax , eax mov dword ptr [ esp ] , hexvar mov dword ptr [ esp + num ] , num lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ hexvar ] , eax cmp dword ptr [ hexvar ] , num jne hexvar call hexvar add esp , hexvar pop ebp ret
mov ecx , num xor eax , eax nop word ptr [ rax + rax ] cmp dword ptr [ rcx * num ] , edi je hexvar cmp dword ptr [ rcx * num ] , edi je hexvar cmp dword ptr [ rcx * num ] , edi je hexvar cmp dword ptr [ rcx * num ] , edi je hexvar cmp dword ptr [ rcx * num ] , edi je hexvar cmp dword ptr [ rcx * num ] , edi je hexvar add rax , num lea rdx , [ rcx + num ] add rcx , num cmp rcx , hexvar mov rcx , rdx jb hexvar mov eax , hexvar ret
test rdi , rdi je hexvar test rdx , rdx je hexvar lea ecx , [ rsi - num ] xor eax , eax cmp ecx , num ja hexvar mov dword ptr [ rdi + num ] , num mov dword ptr [ rdi ] , num mov eax , num mov dword ptr [ rdi + num ] , esi mov qword ptr [ rdi + hexvar ] , rdx ret
push rbx test rdi , rdi je hexvar mov rbx , rdi mov rax , qword ptr [ rdi ] test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num je hexvar mov dword ptr [ rbx + hexvar ] , hexvar mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , rbx call rax test eax , eax jle hexvar pop rbx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax lea eax , [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax call hexvar test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx call hexvar test al , num jne hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] add eax , - num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov al , byte ptr [ ebp - num ] mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop ebp ret
lui gp , hexvar lw v0 , num ( a0 ) addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) beqz v0 , hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move s0 , a0 lw a0 , num ( v0 ) jalr t9 addiu a1 , zero , hexvar move a0 , s0 beqz v0 , hexvar lw gp , hexvar ( sp ) lb v1 , num ( v0 ) addiu v0 , zero , hexvar beq v1 , v0 , hexvar lw ra , hexvar ( sp ) lui a1 , hexvar lw ra , hexvar ( sp ) lw s0 , hexvar ( sp ) addiu sp , sp , hexvar j hexvar addiu a1 , a1 , hexvar lui a1 , hexvar lw s0 , hexvar ( sp ) addiu sp , sp , hexvar j hexvar addiu a1 , a1 , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) lui a1 , hexvar lui a0 , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar addiu a1 , a1 , hexvar jalr t9 addiu a0 , a0 , hexvar
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dl , al mov byte ptr [ esp + hexvar ] , dl add esp , hexvar ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , lr } ldr r4 , [ pc , hexvar ] ldr r5 , [ pc , hexvar ] sub sp , sp , hexvar ldmib r4 , { r1 , r3 } ldr r2 , [ r4 ] ldm r5 , { r8 , sb } str r3 , [ sp , num ] stm sp , { r8 , sb } mov r0 , num bl hexvar ldm r5 , { r2 , r3 } ldr r1 , [ r4 , hexvar ] ldr r0 , [ r4 , hexvar ] adds r6 , r2 , r1 adc r7 , r3 , r0 cmp r6 , r2 sbcs r3 , r7 , r3 bge hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , num bl hexvar mov r1 , num mov r2 , r0 mov r0 , num bl hexvar stm r5 , { r6 , r7 } add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , pc }
addiu sp , sp , - hexvar lui v0 , hexvar lui gp , hexvar sw s0 , hexvar ( sp ) addiu s0 , a1 , num ori v0 , v0 , hexvar sw s1 , hexvar ( sp ) multu s0 , v0 sw ra , hexvar ( sp ) addiu gp , gp , hexvar sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) mfhi s0 srl s0 , s0 , num sll s0 , s0 , num addiu s1 , s0 , num sltu v0 , s1 , a1 beqz v0 , hexvar sw gp , hexvar ( sp ) move s1 , zero sw zero , ( a2 )
mov ip , num str lr , [ sp , - num ] ! sub sp , sp , hexvar ldr lr , [ sp , hexvar ] str ip , [ sp , hexvar ] ldr ip , [ sp , hexvar ] str r2 , [ sp , num ] str lr , [ sp ] str ip , [ sp , num ] bl hexvar add sp , sp , hexvar pop { pc }
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r12 , r9 mov r13 , r8 mov rbp , rcx mov r14 , rdx mov rbx , rsi mov r15 , qword ptr [ rsp + hexvar ] mov rdi , rsp call hexvar mov rdi , rbx mov rsi , r14 mov r14 , qword ptr [ rsp + hexvar ] mov rdx , rbp mov rcx , r15 mov r8 , r14 call hexvar xor ebp , ebp test eax , eax je hexvar mov rdi , rsp mov rsi , r13 mov rdx , r12 mov rcx , r15 mov r8 , r14 call hexvar test eax , eax je hexvar mov rdx , rsp mov rdi , rbx mov rsi , rbx mov rcx , r15 mov r8 , r14 call hexvar xor ebp , ebp test eax , eax setne bpl mov rdi , rsp call hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push edi push esi push ebx mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov eax , dword ptr [ edi + hexvar ] mov edx , dword ptr [ esi + hexvar ] cmp eax , num sete cl cmp eax , num sete al or ecx , eax cmp edx , num sete al cmp edx , num sete dl or dl , al jne hexvar test cl , cl jne hexvar test cl , cl jne hexvar test dl , dl mov eax , num je hexvar pop ebx pop esi pop edi ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ebp + hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar cmp dword ptr [ ebp + num ] , num je hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp + num ] , eax cmp dword ptr [ ebp + num ] , num jne hexvar cmp dword ptr [ ebp + hexvar ] , num je hexvar call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push rbp push r15 push r14 push rbx push rax mov ebp , edx mov r15 , rsi mov r14 , rdi mov rsi , qword ptr [ rdi + hexvar ] xor ebx , ebx cmp dword ptr [ rsi ] , num je hexvar mov rdi , r14 call hexvar mov ebx , eax test eax , eax jle hexvar test r15 , r15 je hexvar call hexvar mov dword ptr [ rax ] , num mov edi , dword ptr [ r14 + hexvar ] movsxd rdx , ebp mov rsi , r15 call hexvar mov rbx , rax mov rdi , r14 mov esi , hexvar call hexvar test ebx , ebx jg hexvar mov edi , ebx call hexvar test eax , eax je hexvar mov rdi , r14 mov esi , num call hexvar mov eax , ebx add rsp , num pop rbx pop r14 pop r15 pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r15d , r9d mov rbp , r8 mov r12 , rcx mov qword ptr [ rsp + hexvar ] , rdx mov r14 , rsi mov rbx , rdi test rcx , rcx je hexvar mov rdi , rbx call hexvar mov r13 , rax mov rdi , rax call hexvar test eax , eax jle hexvar mov qword ptr [ rsp + hexvar ] , rbx mov qword ptr [ rsp + hexvar ] , rbp mov dword ptr [ rsp + hexvar ] , r15d mov rdi , r13 call hexvar xor ebx , ebx test eax , eax jle hexvar lea rbp , [ rsp + hexvar ] xor r15d , r15d nop mov rdi , r13 mov esi , r15d call hexvar mov rdi , rax xor esi , esi mov rdx , rbp xor ecx , ecx xor r8d , r8d call hexvar cmp qword ptr [ rsp + hexvar ] , num sbb ebx , - num add r15d , num mov rdi , r13 call hexvar cmp r15d , eax jl hexvar mov rdi , r13 call hexvar cmp ebx , eax jne hexvar mov ebp , dword ptr [ rsp + hexvar ] mov rdi , r13 call hexvar cmp ebx , eax je hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov rdi , rbx call hexvar test rax , rax je hexvar cmp qword ptr [ rax ] , num jne hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebp , ebp jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov qword ptr [ rsp + hexvar ] , rax xor r13d , r13d xor ebp , ebp xor r15d , r15d test r12 , r12 je hexvar cmp r15 , r12 jne hexvar mov r14 , qword ptr [ rsp + hexvar ] mov rdi , rbp call hexvar mov rbx , rax mov rdi , rbp call hexvar mov rbp , rbx cmp rbx , r12 jne hexvar test r14 , r14 je hexvar mov esi , hexvar mov rdi , r14 call hexvar mov rdi , qword ptr [ rsp + hexvar ] test rdi , rdi je hexvar mov esi , hexvar call hexvar mov ebp , r13d mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r4 , [ pc , hexvar ] subs fp , r0 , num ldr r3 , [ r4 , num ] ldr r7 , [ pc , hexvar ] add r5 , r3 , num strne r5 , [ r4 , num ] addne r5 , r3 , num ldr r3 , [ r4 , num ] ldr r1 , [ r7 ] sub r3 , r3 , num sub sp , sp , hexvar cmp r3 , r5 str r1 , [ sp , hexvar ] ldr r6 , [ r4 ] ble hexvar add r3 , r5 , num ldr r0 , [ r6 , r3 , lsl num ] ldr r1 , [ pc , hexvar ] bl hexvar cmp r0 , num streq r5 , [ r4 , num ] moveq r8 , num bne hexvar ldr r0 , [ r6 , r5 , lsl num ] lsl sb , r5 , num ldrb r3 , [ r0 ] cmp r3 , hexvar beq hexvar cmp r3 , hexvar beq hexvar ldr r1 , [ pc , hexvar ] bl hexvar cmp r0 , num bne hexvar ldr r5 , [ r4 , num ] add r3 , r6 , r5 , lsl num ldr r0 , [ r6 , r5 , lsl num ] ldr r1 , [ r3 , num ] bl hexvar adds r8 , r0 , num movne r8 , num add r5 , r5 , num str r5 , [ r4 , num ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r7 ] mov r0 , r8 cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp push r14 push rbx mov r14d , edx mov rbp , rsi mov rbx , rdi call hexvar mov dword ptr [ rax ] , num mov rdi , rbx call hexvar test eax , hexvar je hexvar cmp dword ptr [ rbx + hexvar ] , num je hexvar mov rdi , rbx call hexvar mov eax , hexvar pop rbx pop r14 pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push esi push ebx call hexvar add edx , hexvar mov ecx , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] test ecx , ecx je hexvar test eax , eax je hexvar cmp eax , hexvar mov ebx , hexvar cmovbe ebx , eax test eax , eax je hexvar lea edx , [ edx - hexvar ] mov eax , num mov esi , dword ptr [ edx ] mov dword ptr [ ecx + eax * num ] , esi mov esi , dword ptr [ edx + hexvar ] mov dword ptr [ ecx + eax * num + num ] , esi add eax , num add edx , hexvar cmp ebx , eax ja hexvar mov eax , hexvar pop ebx pop esi ret
push rbp push rbx sub rsp , num mov rbx , rdi mov rbp , rsi cmp qword ptr [ rip + hexvar ] , num jne hexvar call hexvar mov rsi , - num mov eax , num mov rcx , rsi mov rdi , rbp repne scasb al , byte ptr [ rdi ] not rcx add rcx , rsi mov r8 , qword ptr [ rip + hexvar ] mov rdx , rbp mov rdi , rbx call hexvar add rax , rbx add rsp , num pop rbx pop rbp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov edi , dword ptr [ esp + hexvar ] mov eax , num test edi , edi je hexvar mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr [ eax ] lea eax , [ ebx - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , num test esi , esi je hexvar movzx eax , byte ptr [ esi ] test al , al jne hexvar sub esp , num push edi push hexvar call hexvar add esp , hexvar cmp eax , - num je hexvar add dword ptr [ esp + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] mov esi , dword ptr [ eax ] test esi , esi jne hexvar mov eax , num jmp hexvar sub esp , num push edi push hexvar call hexvar add esp , hexvar cmp eax , - num je hexvar sub esp , num push edi push ebp call hexvar add esp , hexvar cmp eax , - num je hexvar add esi , num movzx eax , byte ptr [ esi ] test al , al je hexvar movsx ebp , al movzx edx , al mov ecx , dword ptr [ esp + hexvar ] test byte ptr [ ecx + edx * num ] , hexvar jne hexvar cmp al , hexvar sete cl cmp al , hexvar sete dl or cl , dl jne hexvar cmp al , hexvar je hexvar jmp hexvar mov eax , num jmp hexvar mov eax , num add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp mov dword ptr [ rbp - num ] , edi mov eax , dword ptr [ rbp - num ] cmp eax , num jl hexvar cmp eax , hexvar jle hexvar cmp eax , hexvar jne hexvar mov eax , num jmp hexvar mov eax , num pop rbp ret
mov rax , qword ptr [ rip + hexvar ] bt rax , hexvar jae hexvar movq xmm0 , rsi movq xmm1 , rcx movq xmm2 , rdx movq xmm3 , r8 movdqa xmm4 , xmm0 movdqa xmm5 , xmm1
mov eax , dword ptr [ rsi ] cmp eax , num jne hexvar mov rax , qword ptr [ rsi + hexvar ] mov rdx , qword ptr [ rax ] mov rsi , qword ptr [ rdx ] test rsi , rsi jne hexvar mov rax , qword ptr [ rax + num ] ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) sw zero , hexvar ( sp ) move a3 , a1 move a2 , a0 lui a1 , hexvar addiu a1 , a1 , - hexvar lw a0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ eax ] mov dword ptr [ edx + hexvar ] , hexvar mov edx , dword ptr [ eax ] mov edx , dword ptr [ edx + hexvar ] sub esp , hexvar mov dword ptr [ esp ] , edx mov dword ptr [ ebp - num ] , eax call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - num ] mov edx , dword ptr [ ecx ] mov dword ptr [ edx + hexvar ] , eax mov esp , ebp pop ebp ret
push r13 push r12 push rbp push rbx sub rsp , hexvar mov r12 , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax mov rbx , qword ptr [ rsi ] cmp byte ptr [ rbx ] , hexvar jne hexvar mov rbp , rsi mov r13 , rdx lea rax , [ rbx + num ] mov qword ptr [ rsi ] , rax movzx eax , byte ptr [ rbx + num ] or ah , hexvar cmp eax , hexvar je hexvar mov edx , num lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rdx , rax mov rsi , rbx mov rdi , r12 call hexvar mov eax , num jmp hexvar mov edx , num lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rdx , rax mov rsi , rbx mov rdi , r12 call hexvar mov eax , num mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r4 , [ r1 , - hexvar ] mov r5 , r0 cmp r4 , num ldr r6 , [ r1 , - num ] ldr r7 , [ r1 ] bne hexvar b hexvar ldr r4 , [ r4 ] cmp r4 , num beq hexvar ldr r3 , [ r4 , num ] cmp r3 , r6 bne hexvar mov r1 , r7 ldr r0 , [ r4 , num ] bl hexvar cmp r0 , num bne hexvar add r0 , r4 , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ hexvar ] , eax lea ecx , [ hexvar ] mov dword ptr [ hexvar ] , ecx mov dl , byte ptr [ hexvar ] mov byte ptr [ ebp - num ] , dl mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , ecx jmp hexvar mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] add rsp , hexvar pop rbp ret
test rdi , rdi je hexvar cmp qword ptr [ rdi + hexvar ] , num je hexvar cmp qword ptr [ rdi + hexvar ] , num je hexvar mov rdx , qword ptr [ rdi + hexvar ] mov eax , hexvar test rdx , rdx je hexvar cmp rdi , qword ptr [ rdx ] je hexvar ret nop dword ptr [ rax + rax ] mov ecx , dword ptr [ rdx + num ] sub ecx , hexvar cmp ecx , hexvar ja hexvar test byte ptr [ rdx + hexvar ] , num je hexvar mov qword ptr [ rdx + hexvar ] , rsi xor eax , eax mov dword ptr [ rsi + hexvar ] , num ret
mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov edx , dword ptr [ eax + hexvar ] mov eax , dword ptr [ eax + hexvar ] add eax , dword ptr [ ecx + hexvar ] adc edx , dword ptr [ ecx + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , edx jmp hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) beqz a3 , hexvar move s6 , a0 move s4 , a3 move s0 , a1 move s1 , a2 move s2 , zero addiu s5 , sp , hexvar b hexvar addiu s7 , sp , hexvar lw v0 , ( s1 )
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw s1 , hexvar ( sp ) move s1 , a1 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 lw a0 , hexvar ( a0 )
mov rcx , qword ptr [ rsi ] mov rsi , qword ptr [ rdx ] mov r8 , rcx imul r8 , rsi test rcx , rcx je hexvar test rsi , rsi je hexvar mov rax , rcx mov r9 , rsi mov rdx , r8 shr rax , hexvar shr r9 , hexvar shr rdx , hexvar xor eax , r9d cmp al , dl jne hexvar mov rax , r8 cqo idiv rcx cmp rax , rsi jne hexvar mov qword ptr [ rdi ] , r8 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) sw a3 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) beqz v0 , hexvar nop addiu v0 , zero , num sw v0 , hexvar ( fp ) b hexvar nop sw zero , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v0 , hexvar ( v0 ) lw v0 , hexvar ( v0 )
push ebx sub esp , hexvar call hexvar add ebx , hexvar call hexvar sub esp , hexvar push eax call hexvar add esp , hexvar mov dword ptr [ esp + num ] , eax cmp dword ptr [ esp + num ] , num jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push num push hexvar push num call hexvar add esp , hexvar mov eax , num jmp hexvar push dword ptr [ esp + hexvar ] push num push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , num mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] test byte ptr [ hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ eax + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ eax ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , esp mov dword ptr [ edx + num ] , eax mov dword ptr [ edx ] , ecx call hexvar test byte ptr [ hexvar ] , num je hexvar mov dword ptr [ esp ] , num call hexvar mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ hexvar ] mov edi , dword ptr [ edx + hexvar ] mov edx , dword ptr [ edx + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax call hexvar xor eax , eax mov ecx , dword ptr [ ebp + hexvar ] mov dl , byte ptr [ hexvar ] test dl , num mov esi , hexvar cmovne esi , eax lea eax , [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , esi call hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop esi pop edi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) move s4 , a2 sw s3 , hexvar ( sp ) move s3 , a1 sw s1 , hexvar ( sp ) move s1 , a3 sw s0 , hexvar ( sp ) move s0 , a0 sw gp , hexvar ( sp ) move a0 , a3 lw t9 , - hexvar ( gp ) jalr t9 sw s2 , hexvar ( sp ) lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move a0 , s1 beqz v0 , hexvar lw gp , hexvar ( sp ) move s2 , v0 lw v0 , ( s0 )
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] push num push ebp call hexvar add esp , hexvar and eax , num mov esi , num je hexvar mov eax , esi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbx mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov edi , hexvar call hexvar mov qword ptr [ rbx + num ] , rax mov dword ptr [ rbx ] , num call hexvar mov qword ptr [ rbx + hexvar ] , rax xorps xmm0 , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 call hexvar mov qword ptr [ rbx + hexvar ] , rax test rax , rax je hexvar mov rdx , rbx add rdx , hexvar xorps xmm0 , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 movups xmmword ptr [ rbx + hexvar ] , xmm0 mov qword ptr [ rbx + hexvar ] , num mov edi , num mov rsi , rbx call hexvar test eax , eax je hexvar mov dword ptr [ rbx + hexvar ] , num mov rax , rbx pop rbx ret
beqz a0 , hexvar lui gp , hexvar addiu sp , sp , - hexvar sw s1 , hexvar ( sp ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) lw s1 , hexvar ( a0 )
addiu sp , sp , - num sw fp , num ( sp ) move fp , sp sw a0 , num ( fp ) addiu v0 , zero , hexvar move sp , fp lw fp , num ( sp ) addiu sp , sp , num jr ra nop
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx jmp hexvar mov rax , qword ptr [ rbp - num ] movzx eax , byte ptr [ rax + hexvar ] and eax , num test al , al jne hexvar mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] jmp hexvar add qword ptr [ rbp - num ] , hexvar mov rax , qword ptr [ rbp - num ] cmp rax , qword ptr [ rbp - hexvar ] jb hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] xor ebx , ebx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , ebx call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar call hexvar add eax , hexvar mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov byte ptr [ eax + hexvar ] , num sub esp , num push dword ptr [ ebp + hexvar ] push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar leave ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , hexvar mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
lui gp , hexvar lw v0 , hexvar ( a0 ) addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) move s5 , a1 sw s4 , hexvar ( sp ) move s4 , a0 sw s2 , hexvar ( sp ) move s2 , a3 sw s1 , hexvar ( sp ) move s1 , a2 sw ra , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) bnez v0 , hexvar lw s6 , hexvar ( a0 ) beqz s6 , hexvar nop addu a1 , a1 , s6 move s3 , zero move a0 , s5 addiu a0 , a0 , num lbu v1 , - num ( a0 ) sll v0 , v1 , hexvar addu v0 , v0 , v1 addu s3 , v0 , s3 srl v0 , s3 , num bne a0 , a1 , hexvar xor s3 , v0 , s3 lw v1 , hexvar ( s4 ) lw v0 , ( s4 ) teq v1 , zero , num
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , num jb hexvar mov rdi , qword ptr [ rbp - num ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rax , rdi add rax , num mov qword ptr [ rbp - hexvar ] , rax movsd qword ptr [ rdi ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] sub rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar cmp qword ptr [ rbp - hexvar ] , num jbe hexvar mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov edx , num call hexvar mov qword ptr [ rbp - hexvar ] , rax add rsp , hexvar pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] str r1 , [ sp ] bl hexvar str r0 , [ sp , num ] ldr r3 , [ sp , num ] cmp r3 , num beq hexvar ldr r1 , [ sp ] ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num b hexvar mov r3 , num mov r2 , num ldr r1 , [ sp , num ] ldr r0 , [ sp , num ] bl hexvar str r0 , [ sp , hexvar ] ldr r0 , [ sp , num ] bl hexvar ldr r3 , [ sp , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { pc }
adds r3 , r0 , num movne r3 , num cmp r1 , num movne r3 , num cmp r3 , num push { r4 , lr } bne hexvar mov r4 , r1 bl hexvar adds r4 , r4 , num movne r4 , num cmp r0 , num movne r4 , num cmp r4 , num popeq { r4 , pc }
push rbp mov rbp , rsp cmp qword ptr [ hexvar ] , num jne hexvar call hexvar mov qword ptr [ hexvar ] , rax mov eax , num pop rbp ret
push edi push esi push ebx mov edi , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar push dword ptr [ esp + hexvar ] push num push edi call hexvar mov edx , eax mov dword ptr [ esi ] , eax add esp , hexvar xor eax , eax test edx , edx je hexvar cmp edi , hexvar je hexvar cmp edi , hexvar je hexvar cmp edi , hexvar mov eax , num je hexvar pop ebx pop esi pop edi ret
tst r3 , num push { r4 , lr } bne hexvar cmp r3 , num add ip , r3 , num movlt r3 , ip asr r3 , r3 , num cmp r3 , num pople { r4 , pc } ldr ip , [ sp , num ] add r3 , r2 , r3 cmp ip , num bne hexvar sub r3 , r3 , num sub r2 , r2 , num strb r0 , [ r2 , num ] ! cmp r2 , r3 lsr r0 , r0 , num orr r0 , r0 , r1 , lsl num lsr r1 , r1 , num bne hexvar pop { r4 , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move v0 , a1 lw a1 , hexvar ( a0 )
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ hexvar ] mov eax , dword ptr [ eax ] sub esp , hexvar lea esi , [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar call hexvar mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx mov edx , dword ptr [ hexvar ] mov eax , dword ptr [ eax ] sub esp , hexvar lea esi , [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar call hexvar jmp hexvar nop nop nop nop nop nop
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ebp + hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx jl hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx + num ] jl hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ eax + num ] add ecx , - num mov dword ptr [ eax + num ] , ecx mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] cmp eax , dword ptr [ ecx + num ] jge hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + ecx * num + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ecx + edx * num ] , eax mov eax , dword ptr [ ebp + hexvar ] add eax , num mov dword ptr [ ebp + hexvar ] , eax jmp hexvar add esp , num pop ebp ret
test byte ptr [ rip + hexvar ] , hexvar je hexvar push rbx mov rbx , rdi mov rcx , qword ptr [ rip + hexvar ] mov edx , hexvar mov esi , num mov edi , hexvar call hexvar mov rsi , rbx mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edi , hexvar call hexvar pop rbx ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov dword ptr [ rbp - hexvar ] , edx mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , num jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] cmp eax , dword ptr [ rbp - hexvar ] setl cl mov byte ptr [ rbp - hexvar ] , cl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov dword ptr [ rbp - hexvar ] , ecx mov eax , dword ptr [ rbp - hexvar ] movsxd rcx , eax mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] imul rcx , rax , hexvar mov rdx , qword ptr [ rbp - hexvar ] add rdx , rcx mov esi , dword ptr [ rdx + num ] cmp esi , dword ptr [ rbp - hexvar ] jne hexvar mov rax , qword ptr [ rbp - hexvar ] movsxd rcx , dword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] imul rcx , rax , hexvar mov rdx , qword ptr [ rbp - hexvar ] add rdx , rcx mov rcx , qword ptr [ rdx ] mov qword ptr [ rbp - num ] , rcx jmp hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] add eax , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] pop rbp ret
push ebp mov ebp , esp sub esp , num mov ax , word ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov word ptr [ ebp - num ] , ax mov eax , dword ptr [ ebp - num ] movsx eax , word ptr [ eax * num + hexvar ] cmp eax , - num je hexvar mov eax , dword ptr [ ebp - num ] movsx eax , word ptr [ eax * num + hexvar ] movsx ecx , word ptr [ ebp + num ] cmp eax , ecx jne hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax * num + hexvar ] add esp , num pop ebp ret
push ebp mov ebp , esp push edi push esi call hexvar add edi , hexvar push ebx mov esi , edx mov edx , num sub esp , hexvar mov dword ptr [ ebp - hexvar ] , edi mov edi , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov eax , edx mul ecx jo hexvar xor ecx , ecx test eax , eax js hexvar test ecx , ecx jne hexvar mov eax , dword ptr [ ebp - hexvar ] shl eax , num cmp eax , hexvar ja hexvar add eax , hexvar and eax , hexvar sub esp , eax lea eax , [ esp + hexvar ] and eax , hexvar test eax , eax je hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num cmp ecx , num jbe hexvar mov dword ptr [ ebp - hexvar ] , edi xor edx , edx mov ebx , num mov edi , ecx nop lea esi , [ esi ] movzx ecx , byte ptr [ esi + ebx - num ] cmp cl , byte ptr [ esi + edx ] jne hexvar jmp hexvar mov esi , esi lea edi , [ edi ] sub edx , dword ptr [ eax + edx * num ] cmp byte ptr [ esi + edx ] , cl je hexvar test edx , edx jne hexvar mov dword ptr [ eax + ebx * num ] , ebx xor edx , edx add ebx , num cmp edi , ebx jne hexvar mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ ebp - hexvar ] xor edx , edx mov dword ptr [ ebx ] , num movzx ecx , byte ptr [ edi ] mov ebx , edi nop test cl , cl je hexvar cmp byte ptr [ esi + edx ] , cl je hexvar test edx , edx je hexvar add edi , dword ptr [ eax + edx * num ] sub edx , dword ptr [ eax + edx * num ] test cl , cl jne hexvar sub esp , hexvar mov ebx , dword ptr [ ebp - hexvar ] push eax call hexvar add esp , hexvar mov eax , num jmp hexvar lea esi , [ esi ] xor eax , eax mov edi , dword ptr [ ebp - hexvar ] xor edi , dword ptr gs : [ hexvar ] jne hexvar lea esp , [ ebp - hexvar ] pop ebx pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , eax mov edi , edx mov dword ptr [ esp + hexvar ] , ecx cmp dword ptr [ ebx + hexvar ] , num je hexvar sub esp , num push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar call hexvar mov esi , eax add esp , hexvar test eax , eax je hexvar mov dword ptr [ eax ] , ebp sub esp , hexvar push edi call hexvar mov dword ptr [ esi + num ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esi + num ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esi + hexvar ] , eax mov dword ptr [ esi + hexvar ] , num add esp , num push esi push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar mov eax , esi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dl , al mov byte ptr [ esp + hexvar ] , dl add esp , hexvar ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov eax , dword ptr [ rbp - hexvar ] shl eax , hexvar mov edx , eax mov eax , dword ptr [ rbp - hexvar ] add eax , edx mov eax , eax add qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] shr rax , num xor qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rbp - hexvar ] , rdx movzx eax , byte ptr [ rax ] movzx eax , al mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jne hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] sub rdx , rax mov rax , rdx sub eax , num mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] shl eax , hexvar mov edx , eax mov eax , dword ptr [ rbp - hexvar ] add eax , edx mov eax , eax add qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] shr rax , num xor qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax ] , edx mov rax , qword ptr [ rbp - num ] pop rbp ret
beqz a1 , hexvar nop lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) move s1 , a1 sw s6 , hexvar ( sp ) addiu s6 , zero , num sw s5 , hexvar ( sp ) move s5 , a2 sw s4 , hexvar ( sp ) move s4 , a3 sw s3 , hexvar ( sp ) move s3 , a0 sw s2 , hexvar ( sp ) move a0 , s1 sw s0 , hexvar ( sp ) move s0 , zero sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 move s2 , a2 slt v0 , s0 , v0 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a1 , s0 jalr t9 move a0 , s1 lw v1 , hexvar ( v0 )
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] test edi , edi je hexvar mov edx , dword ptr [ edi ] mov eax , dword ptr [ edx + hexvar ] test eax , eax je hexvar sub esp , hexvar push edi call eax add esp , hexvar mov esi , dword ptr [ edi + hexvar ] test esi , esi je hexvar nop lea esi , [ esi ] mov ebp , dword ptr [ esi ] sub esp , hexvar push dword ptr [ esi + num ] call dword ptr [ esi + hexvar ] mov dword ptr [ esp ] , esi call hexvar add esp , hexvar test ebp , ebp mov esi , ebp jne hexvar mov esi , dword ptr [ edi + num ] mov dword ptr [ edi + hexvar ] , num test esi , esi je hexvar mov edx , dword ptr [ esi ] mov eax , dword ptr [ edx + hexvar ] test eax , eax je hexvar sub esp , hexvar push esi call eax add esp , hexvar sub esp , num push hexvar push esi call hexvar mov dword ptr [ esp ] , esi call hexvar add esp , hexvar lea eax , [ edi + num ] sub esp , hexvar push eax call hexvar lea eax , [ edi + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ edi + hexvar ] add esp , hexvar test eax , eax je hexvar sub esp , num push dword ptr [ edi + hexvar ] push eax call hexvar pop eax push dword ptr [ edi + hexvar ] call hexvar add esp , hexvar sub esp , num push hexvar push edi call hexvar mov dword ptr [ esp ] , edi call hexvar add esp , hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push r14 push r13 push r12 push rbp push rbx mov r14d , edi mov r13 , rsi mov r12d , edx mov ebp , ecx call hexvar mov ecx , ebp mov edx , r12d mov rsi , r13 mov edi , r14d call hexvar mov ebx , eax test eax , eax jns hexvar call hexvar cmp dword ptr [ rax ] , num je hexvar mov eax , ebx pop rbx pop rbp pop r12 pop r13 pop r14 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v1 , num ( v0 )
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) sw s6 , hexvar ( sp ) move s6 , a3 sw s5 , hexvar ( sp ) move a3 , zero sw s4 , hexvar ( sp ) move s5 , a2 sw s3 , hexvar ( sp ) move s4 , a1 sw gp , hexvar ( sp ) move s3 , a0 sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) sw zero , hexvar ( sp ) lw s2 , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal hexvar sw s2 , hexvar ( sp ) beqz v0 , hexvar lw gp , hexvar ( sp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , zero , hexvar addiu a1 , a1 , - hexvar move a0 , v0 jalr t9 move s0 , v0 lw gp , hexvar ( sp ) beqz v0 , hexvar move s1 , v0 lw t9 , - hexvar ( gp ) move a3 , v0 sw s2 , hexvar ( sp ) move a2 , s5 sw s0 , hexvar ( sp ) move a1 , s4 bal hexvar move a0 , s3 beqz v0 , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move a2 , s6 move a1 , s0 bal - hexvar move a0 , s1 move a0 , s1 lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw v0 , hexvar ( sp ) lw ra , hexvar ( sp ) lw v0 , hexvar ( sp ) lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw t9 , - hexvar ( gp ) jalr t9 move a0 , s1 lw ra , hexvar ( sp ) move v0 , zero lw s6 , hexvar ( sp ) lw s5 , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push { r4 , r5 , r6 , lr } subs r4 , r0 , num beq hexvar mov r1 , hexvar bl hexvar subs r5 , r0 , num beq hexvar add r6 , r5 , num sub r3 , r6 , r4 cmp r3 , num ble hexvar mov r2 , num ldr r1 , [ pc , hexvar ] sub r0 , r5 , num bl hexvar cmp r0 , num bne hexvar mov r2 , num ldr r1 , [ pc , hexvar ] mov r0 , r6 bl hexvar cmp r0 , num movne r4 , r6 ldreq r3 , [ pc , hexvar ] addeq r4 , r5 , num streq r4 , [ r3 ] ldr r2 , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] str r4 , [ r2 ] str r4 , [ r3 ] pop { r4 , r5 , r6 , pc }
push rbp push rbx mov rbp , rsi lea rsi , [ rip + hexvar ] mov rbx , rdi sub rsp , hexvar lea rdx , [ rsp + num ] mov dword ptr [ rsp + num ] , num mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax call hexvar mov eax , dword ptr [ rsp + num ] test eax , eax je hexvar xor eax , eax mov rcx , qword ptr [ rsp + num ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp ret
mov eax , dword ptr [ esp + num ] test eax , eax je hexvar mov eax , dword ptr [ eax + num ] ret
push ebp mov ebp , esp sub esp , hexvar cmp dword ptr [ hexvar ] , - num jne hexvar xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ hexvar ] , eax mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] add esp , hexvar pop ebp ret
push esi push ebx mov ecx , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ ecx + hexvar ] mov esi , dword ptr [ ebx + hexvar ] cmp edx , num sete al cmp edx , num sete dl or eax , edx cmp esi , num je hexvar cmp esi , num je hexvar mov edx , dword ptr [ ebx + hexvar ] and edx , hexvar test al , al je hexvar cmp edx , hexvar je hexvar mov eax , num pop ebx pop esi ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] sub r3 , r3 , hexvar ldr r2 , [ sp , num ] cmp r2 , r3 ble hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , num bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r2 , r3 , num str r2 , [ sp , hexvar ] mov r2 , num strb r2 , [ r3 ] ldr r3 , [ sp , hexvar ] add r2 , r3 , num str r2 , [ sp , hexvar ] mov r2 , num strb r2 , [ r3 ] ldr r3 , [ sp , hexvar ] sub r2 , r3 , num ldr r3 , [ sp , num ] sub r3 , r2 , r3 str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] mov r2 , r3 mov r1 , hexvar ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , hexvar ] add r3 , r2 , r3 str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] add r2 , r3 , num str r2 , [ sp , hexvar ] mov r2 , num strb r2 , [ r3 ] ldr r3 , [ sp , num ] mov r2 , r3 ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebx sub esp , hexvar call hexvar add eax , hexvar cmp dword ptr [ esp + hexvar ] , num jne hexvar mov edx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ edx ] mov dword ptr [ esp + hexvar ] , edx mov edx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ edx + hexvar ] sub esp , hexvar push edx mov ebx , eax call hexvar add esp , hexvar mov eax , num add esp , hexvar pop ebx ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax push edi push num lea eax , [ esp + hexvar ] push eax push esi call hexvar add esi , dword ptr [ esp + hexvar ] add esp , hexvar lea edx , [ eax - num ] cmp edx , hexvar ja hexvar mov ecx , ebx add ecx , dword ptr [ ebx + edx * num - hexvar ] jmp ecx
push ebp mov ebp , esp sub esp , hexvar call hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - num ] sub eax , hexvar setne cl movzx edx , cl mov edx , dword ptr [ edx * num + hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp edx mov eax , dword ptr [ ebp - num ] inc eax mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax xor eax , eax mov ecx , dword ptr [ ebp - num ] lea edx , [ ebp - hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
push rbx mov rbx , qword ptr [ rip + hexvar ] test rbx , rbx je hexvar mov rdi , rbx call hexvar mov rdi , rbx call hexvar mov rbx , qword ptr [ rip + hexvar ] test rbx , rbx je hexvar mov rdi , rbx call hexvar mov rdi , rbx call hexvar pop rbx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] test ecx , ecx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , hexvar call hexvar cmp eax , num je hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , hexvar lea ecx , [ hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax ] , num mov byte ptr [ ebp - num ] , num jmp hexvar call hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbx test rdi , rdi je hexvar mov rbx , rdi cmp dword ptr [ rdi + hexvar ] , num je hexvar cmp dword ptr [ rbx + hexvar ] , num je hexvar mov edi , dword ptr [ rbx + hexvar ] mov esi , num call hexvar mov edi , dword ptr [ rbx + hexvar ] call hexvar mov dword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rbx + hexvar ] mov ebx , num test rdi , rdi je hexvar call hexvar mov eax , ebx pop rbx ret
push r15 push r14 mov eax , ecx push r13 push r12 push rbp push rbx sub rsp , hexvar mov qword ptr [ rsp ] , rdx mov rdx , qword ptr [ rsp + hexvar ] mov dword ptr [ rsp + hexvar ] , ecx mov qword ptr [ rsp + hexvar ] , rsi mov rcx , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rcx xor ecx , ecx cmp eax , num mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 mov qword ptr [ rsp + hexvar ] , rdx mov byte ptr [ rsp + hexvar ] , dil jle hexvar sub eax , num mov r12d , num mov dword ptr [ rsp + hexvar ] , eax nop movsxd r13 , r12d lea rax , [ r13 * num ] mov qword ptr [ rsp + num ] , rax mov rax , qword ptr [ rsp ] mov rbx , qword ptr [ rax + r13 * num ] test rbx , rbx je hexvar cmp byte ptr [ rbx ] , hexvar je hexvar mov edi , hexvar mov ecx , num mov rsi , rbx repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] je hexvar mov byte ptr [ rsp + hexvar ] , num mov r14d , hexvar mov r15d , hexvar xor ebp , ebp jmp hexvar nop dword ptr [ rax ] add r14 , hexvar mov r15 , qword ptr [ r14 - hexvar ] add ebp , num test r15 , r15 je hexvar mov rsi , r15 mov rdi , rbx call hexvar test eax , eax jne hexvar movsxd rbp , ebp mov rax , rbp shl rax , num movzx eax , byte ptr [ rax + hexvar ] test al , hexvar je hexvar mov edi , hexvar mov ecx , num mov rsi , rbx repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] jne hexvar cmp dword ptr [ rsp + hexvar ] , r12d je hexvar mov rax , qword ptr [ rsp ] cmp qword ptr [ rax + r13 * num + num ] , num je hexvar add r12d , num cmp byte ptr [ rsp + hexvar ] , num je hexvar nop dword ptr [ rax + rax ] add r12d , num cmp dword ptr [ rsp + hexvar ] , r12d jg hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar test byte ptr [ eax + num ] , num mov dword ptr [ esp + hexvar ] , ebx jne hexvar lea edx , [ ebx - hexvar ] mov eax , num mov esi , num jmp hexvar nop mov ebx , dword ptr [ edx ] mov esi , eax add edx , num mov eax , ebx cmp ecx , eax jb hexvar test eax , eax jne hexvar cmp esi , num mov dword ptr [ esp + hexvar ] , esi ja hexvar test byte ptr [ esp + hexvar ] , num mov eax , num cmove eax , esi mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push { r4 , r5 , r6 , lr } cmp r2 , num beq hexvar ldrb r2 , [ r2 ] cmp r3 , hexvar cmpeq r2 , hexvar bne hexvar cmp r0 , num beq hexvar mov r3 , num str r3 , [ r0 , hexvar ] ldr r3 , [ r0 , hexvar ] cmp r3 , num ldreq r3 , [ pc , hexvar ] streq r3 , [ r0 , hexvar ] moveq r3 , num streq r3 , [ r0 , hexvar ] ldr r3 , [ r0 , hexvar ] cmp r3 , num ldreq r3 , [ pc , hexvar ] streq r3 , [ r0 , hexvar ] mov r6 , r1 mov r4 , r0 ldr r3 , [ r0 , hexvar ] ldr r2 , [ pc , hexvar ] mov r1 , num ldr r0 , [ r0 , hexvar ] blx r3 subs r5 , r0 , num beq hexvar str r5 , [ r4 , hexvar ] str r4 , [ r5 ] mov r3 , num str r3 , [ r5 , hexvar ] ldr r3 , [ pc , hexvar ] str r3 , [ r5 , num ] mov r1 , r6 mov r0 , r4 bl hexvar subs r6 , r0 , num beq hexvar ldr r3 , [ r4 , hexvar ] mov r1 , r5 ldr r0 , [ r4 , hexvar ] blx r3 mov r3 , num str r3 , [ r4 , hexvar ] mov r0 , r6 pop { r4 , r5 , r6 , pc } beq hexvar andeq r3 , r0 , r4 , lsr pc
push ebp push edi push esi push ebx sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] test eax , eax je hexvar test ebp , ebp je hexvar mov ebx , dword ptr [ eax + hexvar ] test ebx , ebx je hexvar mov esi , num jmp hexvar mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar mov esi , num mov edx , edi and edx , dword ptr [ eax + hexvar ] cmp edx , num sbb esi , - num mov eax , dword ptr [ eax ] test eax , eax jne hexvar jmp hexvar mov ebx , dword ptr [ ebx ] test ebx , ebx je hexvar mov eax , dword ptr [ ebx + hexvar ] test eax , edi je hexvar add esi , num sub esp , num push dword ptr [ ebx + hexvar ] push dword ptr [ ebx + hexvar ] push dword ptr [ ebx + num ] push dword ptr [ ebx + num ] push eax push dword ptr [ esp + hexvar ] call ebp add esp , hexvar test eax , eax jne hexvar mov eax , esi add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov ebp , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] cmp edi , hexvar ja hexvar imul eax , edx , hexvar lea ecx , [ edi + edi * num ] lea esi , [ eax + ecx * num + hexvar ] add esi , dword ptr [ ebp + hexvar ] test edx , edx je hexvar cmp edx , num jne hexvar cmp edi , hexvar je hexvar and edi , num mov eax , num cmovne edx , eax jmp hexvar mov eax , dword ptr [ ebp + num ] sub esp , hexvar mov eax , dword ptr [ eax + hexvar ] push edi call dword ptr [ eax + hexvar ] add esp , hexvar mov edx , eax sub esp , hexvar mov dword ptr [ esi ] , edx push dword ptr [ esp + hexvar ] call hexvar lea edi , [ eax + num ] add esp , hexvar xor edx , edx push edx push edi push ebp call hexvar add esp , hexvar push edi push dword ptr [ esp + hexvar ] push eax call hexvar mov dword ptr [ esi + num ] , eax add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov edx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , edx mov ecx , dword ptr [ ecx ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] add eax , - hexvar sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax ja hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov byte ptr [ eax ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov cl , byte ptr [ eax ] and cl , num movzx eax , cl mov esp , ebp pop ebp ret
push ebx sub esp , num call hexvar add eax , hexvar sub esp , num lea edx , [ eax - hexvar ] push edx push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov ebx , eax call hexvar add esp , hexvar add esp , num pop ebx ret
push r15 push r14 push r13 push r12 push rbp push rbx mov rbx , rdi mov rbp , rsi mov rdx , rbx sub rsp , hexvar mov rdi , qword ptr [ rip + hexvar ] mov rcx , qword ptr [ rip + hexvar ] mov esi , dword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + num ] call qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov r15 , rax mov rcx , qword ptr [ rip + hexvar ] mov rdx , rbp mov esi , dword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + num ] call qword ptr [ rax + hexvar ] test r15 , r15 mov r14 , rax sete cl test rax , rax sete al or cl , al jne hexvar mov rdi , qword ptr [ r15 + hexvar ] lea rax , [ rip + hexvar ] mov rsi , qword ptr [ r14 + hexvar ] cmp rdi , rax je hexvar cmp rsi , rax je hexvar mov rax , qword ptr [ rsi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] mov r9 , qword ptr [ r15 + hexvar ] mov rsi , qword ptr [ r14 + hexvar ] add r9 , rdi add rsi , rax cmp r9 , rsi je hexvar sbb eax , eax or eax , num add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push rbx test rdi , rdi je hexvar mov rbx , rdi lea rdi , [ rdi + hexvar ] mov ecx , hexvar mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar test eax , eax jle hexvar pop rbx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move v1 , v0 lui v0 , hexvar addiu a1 , v0 , - hexvar move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move v1 , v0 lui v0 , hexvar addiu a2 , v0 , - hexvar lui v0 , hexvar addiu a1 , v0 , - hexvar move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) lui v0 , hexvar addiu a0 , v0 , - hexvar lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) move v1 , v0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) move a1 , v0 move a0 , v1 lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( fp ) nop move sp , fp lw ra , hexvar ( sp ) lw fp , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop nop
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov edi , dword ptr [ ebp + num ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push esi push ebx sub esp , num call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] push num push num push dword ptr [ esp + hexvar ] lea eax , [ esi + hexvar ] push eax call hexvar add esp , hexvar test eax , eax je hexvar mov ebx , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebx + hexvar ] mov edx , dword ptr [ ebx + num ] sub esp , num movzx eax , byte ptr [ ebx + hexvar ] shr al , num and eax , num push eax movzx eax , byte ptr [ ebx + hexvar ] and eax , num push eax mov eax , esi call hexvar add esp , hexvar test eax , eax je hexvar mov eax , dword ptr [ esi + hexvar ] mov edx , dword ptr [ ebx + num ] mov dword ptr [ eax + num ] , edx mov edx , dword ptr [ ebx + hexvar ] mov dword ptr [ eax + num ] , edx mov edx , dword ptr [ ebx + hexvar ] mov dword ptr [ eax + hexvar ] , edx mov edx , dword ptr [ ebx + hexvar ] mov dword ptr [ eax + hexvar ] , edx mov edx , dword ptr [ ebx + hexvar ] mov dword ptr [ eax + hexvar ] , edx mov edx , dword ptr [ ebx + hexvar ] mov dword ptr [ eax + hexvar ] , edx mov edx , dword ptr [ ebx + hexvar ] mov dword ptr [ eax + hexvar ] , edx mov edx , dword ptr [ ebx + hexvar ] mov dword ptr [ eax + hexvar ] , edx mov edx , dword ptr [ ebx + hexvar ] mov dword ptr [ eax + hexvar ] , edx mov eax , num add esp , num pop ebx pop esi ret
cmp edi , num jne hexvar push rbx mov rbx , qword ptr [ rsi ] mov edi , hexvar call hexvar mov qword ptr [ rbx ] , rax pop rbx mov eax , num ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov dword ptr [ esp ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar nop word ptr [ eax + eax ]
push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] lea eax , [ ebx - hexvar ] push eax push esi call hexvar add esp , hexvar test eax , eax je hexvar mov ecx , eax mov edx , dword ptr [ esp + hexvar ] mov eax , esi call hexvar add esp , num pop ebx pop esi ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov rax , qword ptr [ rdi ] movsxd r13 , dword ptr [ rax + num ] cmp r13 , rcx ja hexvar mov r12 , rcx mov r14 , rdx mov r15 , rsi mov rbx , rdi sub r12 , r13 xor ebp , ebp nop dword ptr [ rax + rax ] lea rdi , [ r14 + rbp ] lea rsi , [ r15 + rbp ] mov rdx , qword ptr [ rbx + hexvar ] add rdx , num mov ecx , dword ptr [ rbx + hexvar ] call hexvar add rbp , r13 cmp rbp , r12 jbe hexvar mov eax , num add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ hexvar ] add edx , num adc dword ptr [ hexvar ] , num mov dword ptr [ hexvar ] , edx mov edx , dword ptr [ hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , esp mov dword ptr [ edi + num ] , esi mov dword ptr [ edi ] , edx mov dword ptr [ edi + num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov ecx , dword ptr [ hexvar ] test ecx , ecx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovl ecx , eax mov dword ptr [ ebp - num ] , ecx jmp hexvar mov dword ptr [ esp ] , num call hexvar mov dword ptr [ hexvar ] , eax mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov eax , dword ptr [ hexvar ] cmp eax , num lea eax , [ hexvar ] lea ecx , [ hexvar ] cmovne ecx , eax mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call ecx add esp , hexvar pop ebp ret
push rbp push rbx mov rbp , rsi mov rbx , rdi sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax cmp byte ptr [ rip + hexvar ] , num jne hexvar cmp byte ptr [ rip + hexvar ] , num jne hexvar cmp byte ptr [ rip + hexvar ] , num je hexvar cmp dword ptr [ rip + hexvar ] , num mov edx , num mov rcx , qword ptr [ rbx + hexvar ] cmovne edx , dword ptr [ rip + hexvar ] mov esi , hexvar mov edi , num xor eax , eax call hexvar cmp byte ptr [ rip + hexvar ] , num mov rdi , qword ptr [ rbx + hexvar ] mov r8d , dword ptr [ rbx + hexvar ] movzx ecx , byte ptr [ rbx + hexvar ] movzx edx , byte ptr [ rbx + hexvar ] je hexvar test dl , dl je hexvar mov esi , dword ptr [ rbx + hexvar ] push rbp push rdi xor r9d , r9d mov rdi , qword ptr [ rbx ] call hexvar mov ecx , dword ptr [ rip + hexvar ] mov rbp , rax pop rax pop rdx test ecx , ecx je hexvar movzx edi , byte ptr [ rbx + hexvar ] mov edx , dword ptr [ rbx + hexvar ] mov esi , dword ptr [ rbx + hexvar ] call hexvar movzx eax , al add rbp , rax mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] mov rax , rbp jne hexvar add rsp , hexvar pop rbx pop rbp ret
push rax mov rcx , rsi mov rax , qword ptr [ rdi ] lea rsi , [ rdi + num ] lea rdx , [ rdi + hexvar ] mov rdi , rax call hexvar mov rdi , rax xor eax , eax test rdi , rdi je hexvar call hexvar mov ecx , eax mov eax , num test ecx , ecx je hexvar pop rcx ret
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov rbx , rsi test edx , edx mov eax , hexvar mov r14d , hexvar cmove r14d , eax mov eax , hexvar mov r12d , hexvar mov r13d , hexvar jmp hexvar mov eax , hexvar mov ebp , num nop dword ptr [ rax ] cmp eax , hexvar jg hexvar cmp eax , hexvar jle hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov eax , hexvar xor r15d , r15d jmp hexvar nop word ptr cs : [ rax + rax ] nop cmp eax , hexvar jle hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] nop cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar test byte ptr [ rbx + hexvar ] , num mov eax , hexvar mov ecx , hexvar cmove eax , ecx jmp hexvar nop word ptr cs : [ rax + rax ] nop cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov eax , r14d jmp hexvar mov eax , hexvar mov r15d , dword ptr [ rsp + num ] jmp hexvar mov rdi , rbx call hexvar mov dword ptr [ rsp + num ] , eax mov eax , dword ptr [ rsp + num ] cmp eax , num mov eax , hexvar cmove eax , r12d jmp hexvar mov eax , hexvar xor ebp , ebp jmp hexvar mov eax , hexvar mov ebp , r15d jmp hexvar test byte ptr [ rbx + hexvar ] , num mov eax , hexvar cmove eax , r13d jmp hexvar mov eax , ebp add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , num lea eax , [ esp + hexvar ] sub esp , num push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar pop ebx ret
push { r4 , r5 , r6 , r7 , r8 , lr } ldmib r0 , { ip , lr } sub sp , sp , num cmp lr , ip mov r4 , r0 ldr r5 , [ sp , hexvar ] beq hexvar mov r0 , r4 str r5 , [ sp , hexvar ] add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , lr } b hexvar ldr lr , [ r0 , hexvar ] ldr ip , [ r0 , hexvar ] cmp lr , ip bne hexvar ldr r8 , [ r0 , hexvar ] cmp r8 , num bne hexvar mov r6 , r2 mov r7 , r3 bl hexvar mov r2 , r6 mov r3 , r7 str r5 , [ sp ] bl hexvar mvn r3 , num mvn r2 , num cmp r1 , r3 cmpeq r0 , r2 beq hexvar str r0 , [ r4 , hexvar ] str r1 , [ r4 , hexvar ] mov r0 , r8 ldr r3 , [ r4 ] bic r3 , r3 , hexvar str r3 , [ r4 ] add sp , sp , num pop { r4 , r5 , r6 , r7 , r8 , pc }
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lw v1 , hexvar ( a1 )
push { r4 , r5 , r6 , lr } mov r5 , r1 cmp r1 , r3 mov r1 , r2 movlo r2 , r5 movhs r2 , r3 mov r4 , r3 bl hexvar cmp r0 , num popne { r4 , r5 , r6 , pc }
lbu a2 , ( a0 ) beqz a2 , hexvar nop move v0 , zero sll v1 , v0 , num subu v0 , v1 , v0 addu v0 , v0 , a2 teq a1 , zero , num divu zero , v0 , a1 addiu a0 , a0 , num lbu a2 , ( a0 ) bnez a2 , hexvar mfhi v0 jr ra nop jr ra move v0 , zero
push { r4 , r5 , lr } ldr r4 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r4 ] mov r5 , r0 str r3 , [ sp , hexvar ] bl hexvar subs r1 , r0 , num beq hexvar ldr r0 , [ r1 ] bl hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r4 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , pc }
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] add r0 , r3 , hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp ] ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar lea esi , [ esp + hexvar ] mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax push esi push hexvar push num call hexvar add esp , hexvar test eax , eax je hexvar xor eax , eax mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - num ] mov dword ptr [ eax ] , ecx call hexvar mov dword ptr [ eax ] , hexvar xor eax , eax mov esp , ebp pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rcx , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] cmp rax , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov eax , hexvar mov rcx , qword ptr [ rbp - hexvar ] cmp qword ptr [ rcx ] , rax sete dl mov byte ptr [ rbp - hexvar ] , dl mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , ecx mov eax , dword ptr [ rbp - hexvar ] cmp eax , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , qword ptr [ rbp - hexvar ] mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] lea rsi , [ rbp - hexvar ] call hexvar mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rcx + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rdx mov rdi , qword ptr [ rbp - hexvar ] lea rsi , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push { r4 , lr } mov r4 , r0 ldr r3 , [ r0 , num ] cmp r3 , num beq hexvar bl hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 , num ] cmp r0 , r3 bgt hexvar bl hexvar cmp r0 , num popeq { r4 , pc } ldr r3 , [ pc , hexvar ] str r3 , [ r4 , hexvar ] mov r0 , r4 bl hexvar ldr r2 , [ pc , hexvar ] ldr r3 , [ r2 , num ] add r3 , r3 , num str r3 , [ r2 , num ] mov r0 , num pop { r4 , pc }
push rbp push rbx sub rsp , num mov rax , qword ptr [ rdi + hexvar ] cmp rax , rsi ja hexvar mov rdx , qword ptr [ rdi + hexvar ] mov rbx , rdi mov rbp , rsi lea rax , [ rax + rdx * num ] cmp rsi , rax jae hexvar mov rdi , qword ptr [ rsi ] cmp rdi , num jbe hexvar mov rax , qword ptr [ rbx + hexvar ] test rax , rax je hexvar call rax mov qword ptr [ rbp ] , num add qword ptr [ rbx + hexvar ] , num add rsp , num pop rbx pop rbp ret
push rax cmp edx , hexvar jb hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor eax , eax pop rcx ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr r3 , [ r0 , num ] ldr r8 , [ r0 ] cmp r3 , r8 bls hexvar mov r7 , r2 mov r6 , r1 mov sb , r0 mov r5 , num ldr r0 , [ r8 ] cmp r0 , num beq hexvar mov r4 , r8 b hexvar ldr r0 , [ r4 ] mov r1 , r7 blx r6 cmp r0 , num beq hexvar ldr r4 , [ r4 , num ] add r5 , r5 , num cmp r4 , num bne hexvar ldr r3 , [ sb , num ] add r8 , r8 , num cmp r3 , r8 bhi hexvar mov r0 , r5 pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } ldcpl p15 , c8 , [ r5 , - hexvar ] ! andeq r0 , r0 , r0
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , edx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 mov byte ptr [ rbp - hexvar ] , al cmp byte ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] add rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - num ] add rax , rdx movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] lea rdx , [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx jmp hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - num ] add rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov rdi , rdx call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov eax , num leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx mov dword ptr [ rbp - hexvar ] , ecx mov dword ptr [ rbp - hexvar ] , r8d cmp qword ptr [ rbp - hexvar ] , num je hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp dword ptr [ rbp - hexvar ] , num je hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov cx , word ptr [ rax + hexvar ] mov dx , hexvar xor dx , hexvar mov si , cx xor si , dx and si , cx movzx edi , si cmp edi , num mov r8b , num mov byte ptr [ rbp - hexvar ] , r8b je hexvar mov rax , qword ptr [ rbp - hexvar ] mov cx , word ptr [ rax + hexvar ] mov dx , hexvar xor dx , hexvar mov si , cx xor si , dx and si , cx movzx edi , si cmp edi , num sete r8b mov byte ptr [ rbp - hexvar ] , r8b mov al , byte ptr [ rbp - hexvar ] test al , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] movsx ecx , byte ptr [ rax ] cmp ecx , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] add rax , hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov dword ptr [ rbp - num ] , num mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , hexvar sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp byte ptr [ eax ] , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , - num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r8 , num mov r7 , r0 mov sl , r1 mov r5 , r0 mov fp , r0 mov r6 , r8 mov sb , r8 sub sp , sp , hexvar stm sp , { r2 , r3 } ldrb r3 , [ r5 ] , num cmp r3 , num beq hexvar ldrb r4 , [ r5 ] cmp r4 , hexvar beq hexvar sub r3 , r3 , hexvar clz r3 , r3 cmp r4 , num lsr r3 , r3 , num movne r4 , r3 moveq r4 , num cmp r4 , num beq hexvar cmp r6 , num beq hexvar sub r3 , r6 , fp cmp r3 , num beq hexvar cmp r3 , num strb sb , [ r6 ] beq hexvar ldr r2 , [ sp , num ] mov r1 , fp mov r0 , r7 ldr r3 , [ sp ] blx r3 cmp r0 , num movge r8 , r4 movge r2 , num movge r4 , num bge hexvar bl hexvar mov r2 , r8 ldr r4 , [ r0 ] mov r1 , fp mov r3 , num mov r0 , sl bl hexvar cmn r0 , num beq hexvar mov r3 , hexvar cmp r0 , num strb r3 , [ r6 ] bne hexvar mov fp , r5 ldrb r3 , [ r5 ] , num cmp r3 , num bne hexvar sub r3 , fp , r7 mov r0 , r3 add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , pc , lsr num andeq r0 , r0 , r0
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov edi , dword ptr [ hexvar ] mov ebx , dword ptr [ hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar xor ecx , ecx cmp ecx , eax sete al and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebx sub esp , num call hexvar add eax , hexvar lea edx , [ eax - hexvar ] push edx push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov ebx , eax call hexvar add esp , hexvar add esp , num pop ebx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov dword ptr [ rcx + hexvar ] , eax mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s1 , hexvar ( sp ) lw s1 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) sw s0 , hexvar ( sp ) move s0 , a1 addiu a1 , zero , num sw s2 , hexvar ( sp ) sw gp , hexvar ( sp ) move s2 , a2 sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) lw v0 , ( s1 ) sw zero , ( a2 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - num ] , eax jne hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp + num ] , eax cmp dword ptr [ ebp + num ] , num je hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] cmp eax , num je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov ecx , dword ptr [ ebp - num ] cmp ecx , eax jne hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ hexvar ] , eax add esp , hexvar pop ebp ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] add ecx , num mov dword ptr [ ebp - num ] , eax mov eax , ecx cdq mov ecx , num idiv ecx shl eax , num add esp , num pop ebp ret
push { fp , lr } add fp , sp , num sub sp , sp , hexvar str r0 , [ fp , - hexvar ] ldr r3 , [ pc , hexvar ] mov r2 , num str r2 , [ r3 ] b hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] add r3 , r3 , num ldr r2 , [ pc , hexvar ] str r3 , [ r2 ] ldr r3 , [ fp , - hexvar ] add r3 , r3 , num str r3 , [ fp , - hexvar ] ldr r3 , [ fp , - hexvar ] ldrb r3 , [ r3 ] cmp r3 , hexvar beq hexvar ldr r2 , [ pc , hexvar ] ldr r3 , [ fp , - hexvar ] str r3 , [ r2 ] ldr r0 , [ fp , - hexvar ] bl hexvar mov r3 , r0 mov r2 , r3 ldr r3 , [ pc , hexvar ] str r2 , [ r3 ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] mov r2 , r3 ldr r3 , [ fp , - hexvar ] add r3 , r3 , r2 str r3 , [ fp , - num ] b hexvar ldr r3 , [ fp , - num ] sub r3 , r3 , num str r3 , [ fp , - num ] ldr r2 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] cmp r2 , r3 bls hexvar ldr r3 , [ fp , - num ] sub r3 , r3 , num ldrb r3 , [ r3 ] cmp r3 , hexvar beq hexvar ldr r3 , [ fp , - num ] mov r2 , num strb r2 , [ r3 ] ldr r2 , [ fp , - num ] ldr r3 , [ fp , - hexvar ] sub r3 , r2 , r3 ldr r2 , [ pc , hexvar ] str r3 , [ r2 ] mov r0 , r0 sub sp , fp , num pop { fp , pc }
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw fp , hexvar ( sp ) lw fp , - hexvar ( gp ) sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw s7 , hexvar ( sp ) sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , ( fp ) sw v0 , hexvar ( sp ) beqz a2 , hexvar addiu v0 , zero , num lw v0 , num ( a2 )
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dl , byte ptr [ eax + hexvar ] shr dl , num and dl , num movzx eax , dl cmp eax , num je hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar add esp , num pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar ldr r6 , [ sp , hexvar ] ldr r5 , [ sp , hexvar ] ldr r2 , [ pc , hexvar ] ldr r2 , [ r2 ] str r2 , [ sp , hexvar ] mov r2 , num str r2 , [ r5 ] ldr r2 , [ r0 , hexvar ] lsr r2 , r2 , num and r2 , r2 , hexvar cmp r2 , num cmpne r3 , num movle r5 , num bgt hexvar mov r0 , r5 ldr r2 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push { r4 , r5 , r6 , r7 , r8 , lr } bl hexvar subs r4 , r0 , num beq hexvar bl hexvar cmp r0 , num bls hexvar mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] xor edi , edi cmp edi , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi jne hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dl , byte ptr [ eax + ecx ] mov byte ptr [ ebp - hexvar ] , dl mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov byte ptr [ eax + ecx ] , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax mov dl , byte ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov byte ptr [ eax + ecx ] , dl mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp push eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , hexvar mov dword ptr [ ebp - num ] , eax add esp , num pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax movzx eax , byte ptr [ ebx + hexvar ] test al , al je hexvar sub esp , num push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] jmp hexvar sub esp , num push dword ptr [ ebp - hexvar ] push dword ptr [ ebp - hexvar ] call hexvar add esp , hexvar mov ebx , dword ptr [ ebp - num ] leave ret
push rbp push r15 push r14 push rbx push rax mov r14 , rsi mov rbx , rdi test rdi , rdi mov r15d , hexvar mov ebp , hexvar cmove ebp , r15d mov ecx , hexvar jmp hexvar mov rdi , qword ptr [ rsp ] add rdi , hexvar mov rsi , r14 call hexvar mov ecx , hexvar nop dword ptr [ rax + rax ] cmp ecx , hexvar jle hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar mov rcx , qword ptr [ rbx ] mov qword ptr [ rsp ] , rcx cmp qword ptr [ rsp ] , num mov ecx , hexvar cmove ecx , r15d jmp hexvar nop word ptr [ rax + rax ] cmp ecx , hexvar je hexvar cmp ecx , hexvar jne hexvar jmp hexvar mov ecx , ebp jmp hexvar mov ecx , hexvar xor eax , eax jmp hexvar add rsp , num pop rbx pop r14 pop r15 pop rbp ret
add edi , num xor eax , eax cmp edi , num ja hexvar push rax call hexvar mov ecx , dword ptr [ rax ] mov eax , num lea edx , [ rcx - hexvar ] cmp edx , hexvar lea rsp , [ rsp + num ] ja hexvar movabs rsi , hexvar bt rsi , rdx jb hexvar cmp ecx , num je hexvar cmp ecx , hexvar jne hexvar ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov dword ptr [ esp ] , hexvar mov dword ptr [ esp + num ] , num lea edx , [ hexvar ] mov dword ptr [ esp + num ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx lea edx , [ hexvar ] mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + hexvar ] , eax add esp , hexvar pop ebp ret
push ebx sub esp , hexvar call hexvar add eax , hexvar sub esp , num push hexvar lea edx , [ eax - hexvar ] push edx push hexvar mov ebx , eax call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num jne hexvar mov eax , num jmp hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
push { r4 , r5 , r6 , r7 , lr } ldr r4 , [ r0 , num ] sub sp , sp , hexvar cmp r4 , r1 bhi hexvar ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , r1 movhs r6 , num movlo r6 , num cmp r3 , num moveq r6 , num cmp r6 , num bne hexvar add r3 , r1 , num cmp r3 , num str r3 , [ r0 , num ] beq hexvar cmp r3 , hexvar mov r7 , r1 mov r5 , r0 bhi hexvar lsl r1 , r3 , num ldr r0 , [ r0 , hexvar ] bl hexvar ldr r1 , [ r5 , num ] str r0 , [ r5 , hexvar ] cmn r1 , hexvar ldr r0 , [ r5 , hexvar ] bhi hexvar lsl r1 , r1 , num bl hexvar ldr r3 , [ r5 , hexvar ] str r0 , [ r5 , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ r5 , num ] cmp r4 , r2 bhs hexvar mov r1 , r6 mvn ip , num sub r2 , r4 , hexvar add r3 , r3 , r2 , lsl num sub r2 , r4 , hexvar add r0 , r0 , r2 , lsl num strh ip , [ r3 , num ] ! str r1 , [ r0 , num ] ! ldr r2 , [ r5 , num ] add r4 , r4 , num cmp r2 , r4 bhi hexvar mov r0 , num add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , pc }
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ edx + hexvar ] mov edi , dword ptr [ edx + hexvar ] mov dword ptr [ esp + hexvar ] , edi or edi , esi mov dword ptr [ esp + num ] , esi jne hexvar mov dword ptr [ ecx ] , num xor esi , esi add esp , hexvar pop ebx mov eax , esi pop esi pop edi pop ebp ret
push rbp push r15 push r14 push rbx sub rsp , hexvar mov rax , rdi shr rax , hexvar mov ebp , hexvar jne hexvar mov r15 , r8 mov r14 , rcx mov rcx , rdi cmp rdi , hexvar jb hexvar xor ebp , ebp lea rbx , [ rsp + hexvar ] mov esi , hexvar mov edx , hexvar mov rdi , rbx xor eax , eax call hexvar mov rdi , r15 mov rsi , rbx mov edx , hexvar call r14
push ebp mov ebp , esp sub esp , hexvar xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num jle hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov dword ptr [ ebp - num ] , hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + hexvar ] mov ecx , eax add ecx , - num mov dword ptr [ ebp + hexvar ] , ecx cmp eax , num je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] movsx eax , byte ptr [ eax + ecx ] lea ecx , [ hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar mov eax , dword ptr [ ebp - num ] cmp byte ptr [ eax + num ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov cl , byte ptr [ eax + num ] mov eax , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov byte ptr [ eax + edx ] , cl mov byte ptr [ ebp - num ] , num jmp hexvar mov al , byte ptr [ hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov byte ptr [ ecx + edx ] , al jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rdx + hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rdx + hexvar ] mov rdx , qword ptr [ rdx + hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rdx + hexvar ] mov rdx , qword ptr [ rdx + hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rdx + hexvar ] mov qword ptr [ rbp - hexvar ] , rsi movups xmm0 , xmmword ptr [ rdx + hexvar ] movaps xmmword ptr [ rbp - hexvar ] , xmm0 movups xmm0 , xmmword ptr [ rdx ] movups xmm1 , xmmword ptr [ rdx + hexvar ] movups xmm2 , xmmword ptr [ rdx + hexvar ] movups xmm3 , xmmword ptr [ rdx + hexvar ] movaps xmmword ptr [ rbp - hexvar ] , xmm3 movaps xmmword ptr [ rbp - hexvar ] , xmm2 movaps xmmword ptr [ rbp - hexvar ] , xmm1 movaps xmmword ptr [ rbp - hexvar ] , xmm0 mov qword ptr [ rbp - hexvar ] , num mov qword ptr [ rbp - hexvar ] , num mov rdi , qword ptr [ rbp - num ] lea rsi , [ rbp - hexvar ] lea rdx , [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdx call hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov edi , hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , rax mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , rcx mov r8 , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdx mov rdx , r8 mov r9 , qword ptr [ rbp - hexvar ] call r9
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , esp mov dword ptr [ eax + num ] , ebx mov dword ptr [ eax + num ] , edi mov dword ptr [ eax ] , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] test eax , eax sete al movzx ecx , al mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov edi , esp mov dword ptr [ edi + hexvar ] , esi mov dword ptr [ edi + num ] , edx mov dword ptr [ edi + num ] , ecx mov dword ptr [ edi ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebx pop ebp ret
cmp edi , num jne hexvar push rax mov rax , qword ptr [ rsi ] mov rdi , qword ptr [ rax + hexvar ] call hexvar add rsp , num mov eax , num ret
push { r4 , r5 , r6 , lr } subs r4 , r1 , num mov r5 , r0 beq hexvar bl hexvar subs r6 , r0 , num ldrne r0 , [ r6 ] beq hexvar ldr r3 , [ pc , hexvar ] ldr r1 , [ r3 ] bl hexvar mov r0 , r4 pop { r4 , r5 , r6 , pc }
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } subs sb , r1 , num beq hexvar sub r3 , r2 , num cmp r3 , num mov r5 , r2 mov r7 , r0 bhi hexvar mov r0 , hexvar bl hexvar mov r6 , num mov r8 , r0 mov r2 , num add r0 , r0 , num mov r1 , r6 bl hexvar ldr r4 , [ r7 , num ] str r5 , [ r8 ] cmp r4 , r6 str r6 , [ r8 , num ] beq hexvar mov r0 , hexvar bl hexvar mov r2 , num mov r1 , r6 mov r4 , r0 add r0 , r0 , r2 bl hexvar mov r3 , hexvar mov r0 , num stm r4 , { r3 , r6 } bl hexvar mov r5 , r0 mov r0 , hexvar str r8 , [ r5 , num ] str r5 , [ r4 , hexvar ] strb r6 , [ r5 ] strb r6 , [ r5 , num ] strb r6 , [ r5 , num ] strb r6 , [ r5 , num ] ldr r8 , [ r7 , num ] bl hexvar mov r2 , hexvar mov r1 , r6 mov r7 , r0 bl hexvar mov r3 , num mov r2 , num ldr r0 , [ r8 , num ] str r3 , [ r7 , hexvar ] cmp r0 , num str sb , [ r7 , num ] str r2 , [ r7 , hexvar ] ldrne r3 , [ r0 , num ] beq hexvar str r7 , [ r3 ] str r7 , [ r0 , num ] str r4 , [ r7 , hexvar ] str r7 , [ r5 ] mov r0 , r4 pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx cmp dword ptr [ ebp + hexvar ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] and eax , num cmp eax , num je hexvar mov eax , dword ptr [ ebp - hexvar ] cmp byte ptr [ eax ] , num je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] sub eax , hexvar add eax , - num add eax , hexvar mov dword ptr [ ebp + hexvar ] , eax cmp dword ptr [ ebp + hexvar ] , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov cl , byte ptr [ eax ] mov byte ptr [ ebp - hexvar ] , cl cmp byte ptr [ ebp - hexvar ] , num je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] add ecx , num mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp + hexvar ] sub eax , num add ecx , eax mov dword ptr [ ebp + hexvar ] , ecx cmp dword ptr [ ebp + hexvar ] , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + hexvar ] and eax , hexvar cmp eax , num jne hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , ecx mov dword ptr [ esi ] , eax call hexvar cmp eax , num sete bl and bl , num mov byte ptr [ ebp - num ] , bl mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop ebx pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov ebp , dword ptr [ esp + hexvar ] push ebp call hexvar mov edi , eax call hexvar add esp , hexvar cmp edi , num mov esi , eax je hexvar cmp edi , num je hexvar test edi , edi je hexvar sub esp , num push num push num call hexvar add esp , hexvar cmp eax , num setne byte ptr [ esp + hexvar ] sub esp , num push num push num call hexvar add esp , hexvar cmp eax , num setne byte ptr [ esp + hexvar ] sub esp , num push num push num call hexvar add esp , hexvar test eax , eax je hexvar lea eax , [ ebx - hexvar ] sub esp , num push num push eax call hexvar add esp , hexvar test eax , eax je hexvar js hexvar sub esp , hexvar mov edi , num xor ebp , ebp push eax call hexvar add esp , hexvar mov dword ptr [ esi ] , num mov byte ptr [ esp + hexvar ] , num jmp hexvar lea esi , [ esi ] mov byte ptr [ esp + hexvar ] , num mov byte ptr [ esp + hexvar ] , num mov byte ptr [ esp + hexvar ] , num sub esp , num push ebp push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar mov edi , dword ptr [ esi ] mov ebp , eax add esp , hexvar cmp byte ptr [ esp + hexvar ] , num jne hexvar cmp byte ptr [ esp + hexvar ] , num jne hexvar cmp byte ptr [ esp + hexvar ] , num jne hexvar test ebp , ebp jne hexvar mov dword ptr [ esi ] , edi add esp , hexvar mov eax , ebp pop ebx pop esi pop edi pop ebp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov dword ptr [ esp + hexvar ] , num cmp dword ptr [ esp + hexvar ] , num jne hexvar sub esp , num lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num je hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax jne hexvar sub esp , num lea eax , [ ebx - hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar jmp hexvar mov dword ptr [ esp + hexvar ] , num mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar test eax , eax mov esi , eax je hexvar sub esp , hexvar push hexvar call hexvar mov dword ptr [ esi ] , eax mov dword ptr [ esp ] , eax call hexvar add esp , hexvar cmp eax , hexvar je hexvar jle hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar mov edi , dword ptr [ esi + num ] cmp dword ptr [ edi ] , num jne hexvar add edi , num lea esi , [ esi ] mov eax , dword ptr [ edi ] test eax , eax je hexvar or dword ptr [ eax + hexvar ] , hexvar mov eax , esi pop ebx pop esi pop edi ret
addiu sp , sp , - hexvar lui gp , hexvar addiu gp , gp , hexvar sw s0 , hexvar ( sp ) move s0 , a1 sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) move s2 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) jal hexvar move s1 , a2 beqz s0 , hexvar lw gp , hexvar ( sp ) lw v0 , ( s1 )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp eax , num jne hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi jne hexvar lea eax , [ hexvar ] mov dword ptr [ ebp + num ] , eax add esp , hexvar pop esi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] mov r3 , num str r3 , [ sp , hexvar ] b hexvar ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r1 , r0 ldr r3 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] str r3 , [ sp ] ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] add r3 , r3 , num str r3 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r2 , r0 ldr r3 , [ sp , hexvar ] cmp r3 , r2 blt hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbx test rdi , rdi je hexvar mov rbx , rdi mov eax , dword ptr [ rdi + hexvar ] test al , num jne hexvar test al , num jne hexvar test al , num jne hexvar pop rbx ret
push { r4 , r5 , r6 , lr } add r5 , r0 , hexvar mov r4 , r0 mov r0 , r5 bl hexvar cmp r0 , num bne hexvar ldr r3 , [ r4 , hexvar ] mov r0 , r5 add r3 , r3 , num str r3 , [ r4 , hexvar ] bl hexvar cmp r0 , num popeq { r4 , r5 , r6 , pc } ldr r2 , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] ldr r0 , [ r2 ] ldr r4 , [ r3 ] ldr r2 , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] blx r4 ldr r2 , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] ldr r0 , [ r2 ] ldr r4 , [ r3 ] ldr r2 , [ pc , hexvar ] ldr r3 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] blx r4 andeq r0 , r0 , sp , ror num andeq r0 , r0 , r4 , lsr num andeq r0 , r0 , r8 , lsl r0 andeq r0 , r0 , sb , ror num andeq r0 , r0 , r0
push rbx mov rbx , rdi mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi jne hexvar mov edi , hexvar call hexvar mov rdi , rax mov qword ptr [ rip + hexvar ] , rax test rax , rax je hexvar mov rsi , rbx call hexvar test eax , eax je hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov eax , num pop rbx ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] mov r3 , num str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] str r3 , [ sp ] ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + num ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi + num ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rdi + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push eax call hexvar add esp , hexvar pop ebx ret
push rbp push r14 push rbx test rdi , rdi je hexvar mov rbx , rdi mov r14d , num cmp dword ptr [ rdi + hexvar ] , num je hexvar mov rbp , qword ptr [ rbx + hexvar ] mov edi , dword ptr [ rbp + hexvar ] cmp edi , - num je hexvar mov esi , num call hexvar mov edi , dword ptr [ rbp + hexvar ] call hexvar mov dword ptr [ rbp + hexvar ] , hexvar mov dword ptr [ rbx + hexvar ] , hexvar mov rdi , qword ptr [ rbp + num ] test rdi , rdi jne hexvar jmp hexvar xor r14d , r14d jmp hexvar test rbp , rbp je hexvar mov rdi , qword ptr [ rbp + num ] test rdi , rdi je hexvar call hexvar mov rdi , qword ptr [ rbp + hexvar ] test rdi , rdi je hexvar call hexvar mov rdi , qword ptr [ rbp + hexvar ] test rdi , rdi je hexvar call hexvar mov rdi , rbp call hexvar mov qword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx + hexvar ] , num mov eax , r14d pop rbx pop r14 pop rbp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r13 , r9 mov rbp , r8 mov r12 , rcx mov r14 , rdx mov rbx , rdi mov eax , dword ptr [ rip ] test eax , eax jne hexvar mov al , byte ptr [ rip ] xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al add eax , num xor al , hexvar mov byte ptr [ rip ] , al mov byte ptr [ rip ] , al
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax movsd xmm0 , qword ptr [ rip ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rax , qword ptr [ rax + rcx * num ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx + hexvar ] mov rax , qword ptr [ rax + rcx * num ] mov rdi , qword ptr [ rax + hexvar ] lea rsi , [ rbp - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax movsd xmm0 , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rcx ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] movsd qword ptr [ rcx ] , xmm0 mov eax , dword ptr [ rbp - hexvar ] and eax , num cmp eax , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax ] , xmm0 jmp hexvar mov eax , num add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov cl , byte ptr [ eax + hexvar ] and cl , num movzx eax , cl mov edx , dword ptr [ ebp - num ] mov cl , byte ptr [ edx + hexvar ] and cl , num movzx edx , cl add eax , edx mov edx , dword ptr [ ebp - num ] mov cl , byte ptr [ edx + hexvar ] and cl , num movzx edx , cl add eax , edx mov edx , dword ptr [ ebp - num ] mov cl , byte ptr [ edx + hexvar ] and cl , num movzx edx , cl add eax , edx mov edx , dword ptr [ ebp - num ] mov cl , byte ptr [ edx + hexvar ] and cl , num movzx edx , cl mov esi , dword ptr [ ebp - num ] mov cl , byte ptr [ esi + hexvar ] and cl , num movzx esi , cl or edx , esi mov esi , dword ptr [ ebp - num ] cmp dword ptr [ esi + hexvar ] , num setne cl xor cl , hexvar xor cl , hexvar and cl , num movzx esi , cl or edx , esi add eax , edx mov edx , num cmp edx , eax jge hexvar lea eax , [ ebp - hexvar ] mov ecx , dword ptr [ ebp - num ] mov byte ptr [ ecx + hexvar ] , num mov ecx , dword ptr [ ebp - num ] mov byte ptr [ ecx + hexvar ] , num mov ecx , dword ptr [ ebp - num ] mov byte ptr [ ecx + hexvar ] , num mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar lea eax , [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rsi + hexvar ] mov ecx , eax xor ecx , hexvar and ecx , eax mov eax , ecx sub eax , hexvar mov dword ptr [ rbp - hexvar ] , ecx mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + num ] mov qword ptr [ rcx + hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + num ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rcx + hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + num ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + num ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rcx + hexvar ] , rax jmp hexvar xor eax , eax pop rbp ret
push ebx call hexvar add ebx , hexvar sub esp , num mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ ecx + hexvar ] test dl , num je hexvar xor eax , eax and edx , num jne hexvar add esp , num pop ebx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar add rsp , hexvar pop rbp ret
push r12 push rbp mov ebp , esi push rbx mov esi , hexvar mov rbx , rdi mov r12 , rdx call hexvar test eax , eax jne hexvar pop rbx xor eax , eax pop rbp pop r12 ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov eax , eax mov edx , eax mov rsi , qword ptr [ rbp - hexvar ] cmp rdx , qword ptr [ rsi ] jb hexvar mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] shl rcx , num mov qword ptr [ rax ] , rcx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] shl rax , num mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov esi , dword ptr [ rdx + hexvar ] mov edx , esi mov qword ptr [ rcx + rdx * num ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax + hexvar ] add ecx , num mov dword ptr [ rax + hexvar ] , ecx mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax add esp , hexvar pop ebp ret
add eax , num mov dword ptr [ edi ] , eax mov eax , edi call hexvar cmp eax , - num mov ebx , eax je hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ eax + hexvar ] test edx , edx je hexvar cmp dword ptr [ eax + hexvar ] , ebx jg hexvar lea esi , [ esi ]
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jmp edx mov eax , dword ptr [ ebp + num ] mov cl , byte ptr [ eax ] mov byte ptr [ ebp - num ] , cl test cl , cl setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] mov ecx , eax shl ecx , num sub ecx , eax movzx eax , byte ptr [ ebp - num ] add ecx , eax mov eax , dword ptr [ ebp + hexvar ] xor edx , edx mov dword ptr [ ebp - hexvar ] , eax mov eax , ecx mov ecx , dword ptr [ ebp - hexvar ] div ecx
ldr r3 , [ pc , hexvar ] mov r2 , hexvar str r2 , [ r3 ] str r0 , [ r3 , num ] str r1 , [ r3 , num ] cmp r1 , hexvar bxls lr push { r4 , lr } ldr r2 , [ pc , hexvar ] mov r1 , hexvar ldr r0 , [ pc , num ] bl hexvar strdeq r6 , r7 , [ sp ] , -r4 ldrdeq r1 , r2 , [ sl ] , -r0 strdeq r1 , r2 , [ sl ] , -ip
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push esi sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ edx ] , esi mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx add esp , num pop esi pop ebp ret
push rbx movzx edi , dil call hexvar mov ebx , eax test al , al je hexvar mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + hexvar ] cmp rax , qword ptr [ rdi + hexvar ] jae hexvar lea rdx , [ rax + num ] mov qword ptr [ rdi + hexvar ] , rdx mov byte ptr [ rax ] , bl add qword ptr [ rip + hexvar ] , num test bl , bl setne al pop rbx ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rdi , hexvar call hexvar movabs rdi , hexvar mov dword ptr [ rbp - num ] , eax call hexvar mov dword ptr [ rbp - num ] , eax add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 cmp qword ptr [ rbp - hexvar ] , num je hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , hexvar cmp qword ptr [ rax + hexvar ] , rcx jne hexvar jmp hexvar movabs rdi , num movabs rsi , num mov edx , hexvar movabs rcx , num call hexvar mov rax , qword ptr [ rbp - hexvar ] cmp dword ptr [ rax + hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov edi , hexvar movabs rsi , num movabs rdx , num mov ecx , hexvar movabs r8 , num mov r9 , rax mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] add rax , num movabs rsi , num movabs rdx , num mov ecx , hexvar mov r8d , hexvar movabs r9 , num movabs r10 , num mov qword ptr [ rsp ] , r10 mov qword ptr [ rsp + num ] , rax mov al , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + hexvar ] movsd xmm0 , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rax + hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - num ] , eax mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
mov ecx , esi not cl and cl , num mov edx , num shl edx , cl xor eax , eax test rdi , rdi je hexvar mov ecx , esi sar ecx , hexvar shr ecx , hexvar add ecx , esi sar ecx , num cmp dword ptr [ rdi ] , ecx jle hexvar mov rsi , qword ptr [ rdi + num ] test rsi , rsi je hexvar movsxd rax , ecx movzx ecx , byte ptr [ rsi + rax ] xor eax , eax test edx , ecx setne al ret
push rbp push rbx mov rsi , rdi mov rbx , rdi mov edi , num sub rsp , hexvar mov rdx , rsp mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax call hexvar test eax , eax jne hexvar mov eax , dword ptr [ rsp + hexvar ] and eax , hexvar cmp eax , hexvar sete al mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp ret
addiu sp , sp , - hexvar lui gp , hexvar lw v0 , hexvar ( sp ) addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw gp , hexvar ( sp ) beqz v0 , hexvar lw s0 , num ( a0 )
cmp r0 , num beq hexvar ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ r0 , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ r3 ] cmp r0 , r2 beq hexvar mvn r0 , num bx lr ldr r2 , [ r3 , num ] sub r2 , r2 , hexvar sub r2 , r2 , hexvar cmp r2 , hexvar bhi hexvar mov r2 , num ldr r1 , [ r3 , hexvar ] push { r4 , lr } cmp r1 , r2 andne r1 , r1 , num str r2 , [ r3 , hexvar ] str r2 , [ r3 , hexvar ] str r2 , [ r3 , hexvar ] str r2 , [ r3 , hexvar ] mov r4 , hexvar str r2 , [ r0 , hexvar ] str r2 , [ r0 , num ] str r2 , [ r0 , hexvar ] strne r1 , [ r0 , hexvar ] mov ip , num mov r0 , num mvn r1 , num add r2 , r3 , hexvar add r2 , r2 , num ldr lr , [ pc , hexvar ] str r2 , [ r3 , hexvar ] str r2 , [ r3 , hexvar ] str r2 , [ r3 , hexvar ] add r2 , r3 , hexvar str r0 , [ r3 , num ] str r0 , [ r3 , hexvar ] str r0 , [ r3 , hexvar ] str r0 , [ r3 , hexvar ] str r0 , [ r3 , hexvar ] str r4 , [ r3 , hexvar ] str lr , [ r3 , num ] str ip , [ r2 , hexvar ] str r1 , [ r2 , hexvar ] pop { r4 , pc } vrshl.s8 d26 , d11 , d14
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax call hexvar cmp eax , num jbe hexvar xor eax , eax mov dword ptr [ ebp - num ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , num lea ecx , [ ebp - hexvar ] add ecx , num mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov byte ptr [ ebp - hexvar ] , num lea eax , [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar xor eax , eax mov cl , al test byte ptr [ ebp - hexvar ] , num mov byte ptr [ ebp - hexvar ] , cl je hexvar cmp dword ptr [ ebp - hexvar ] , num sete al mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] xor al , hexvar test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - hexvar ] add eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov byte ptr [ ebp - hexvar ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] cmp byte ptr [ eax ] , num jne hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - hexvar ] movsx eax , byte ptr [ eax + ecx ] cmp eax , hexvar sete dl mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , num mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax lea eax , [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , num mov dword ptr [ esp + hexvar ] , eax push eax call hexvar add esp , hexvar cmp dword ptr [ esi + hexvar ] , hexvar mov dword ptr [ esp + hexvar ] , num je hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar pop edx push dword ptr [ esp + hexvar ] call hexvar pop ecx pop edi push hexvar push esi call hexvar add esp , hexvar mov esi , dword ptr [ esp + hexvar ] xor esi , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp mov eax , dword ptr [ hexvar ] cmp dword ptr [ eax ] , num sete cl and cl , num movzx eax , cl pop ebp ret
addiu sp , sp , - num sw fp , num ( sp ) move fp , sp sw a0 , num ( fp ) sw a1 , hexvar ( fp ) lw v0 , hexvar ( fp ) beqz v0 , hexvar nop addiu v1 , zero , num beq v0 , v1 , hexvar nop lw v0 , num ( fp ) bltz v0 , hexvar nop lw v0 , num ( fp ) slti v0 , v0 , hexvar beqz v0 , hexvar nop lw v0 , num ( fp ) b hexvar nop addiu v0 , zero , - num b hexvar nop lw v0 , num ( fp ) blez v0 , hexvar nop lw v0 , num ( fp ) slti v0 , v0 , hexvar bnez v0 , hexvar nop lw v1 , num ( fp ) addiu v0 , zero , hexvar bne v1 , v0 , hexvar nop move v0 , zero b hexvar nop addiu v0 , zero , - num b hexvar nop lw v0 , num ( fp ) b hexvar nop lw v0 , num ( fp ) blez v0 , hexvar nop lw v0 , num ( fp ) slti v0 , v0 , hexvar beqz v0 , hexvar nop lw v0 , num ( fp ) addiu v0 , v0 , hexvar b hexvar nop lw v1 , num ( fp ) addiu v0 , zero , hexvar bne v1 , v0 , hexvar nop addiu v0 , zero , hexvar b hexvar nop addiu v0 , zero , - num move sp , fp lw fp , num ( sp ) addiu sp , sp , num jr ra nop
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax + num ] cmp eax , num je hexvar mov eax , dword ptr [ ebp + num ] add eax , num mov ecx , dword ptr [ ebp - num ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax call hexvar cmp eax , num je hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] cmp byte ptr [ eax + num ] , num jne hexvar mov eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar test al , num jne hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov eax , dword ptr [ rip + hexvar ] mov esi , eax lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov edx , dword ptr [ rip + hexvar ] mov rax , qword ptr [ rbp - num ] mov esi , edx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] cmp rax , qword ptr [ rbp - hexvar ] jne hexvar nop leave ret
push rax mov r8d , edx mov rcx , rsi add rdi , hexvar mov esi , hexvar mov edx , hexvar call hexvar xor ecx , ecx test rax , rax setne cl mov eax , ecx pop rcx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ eax ] , hexvar mov eax , hexvar add esp , hexvar pop ebp ret
push rbx mov edx , hexvar mov edi , num mov esi , num mov ecx , hexvar call hexvar mov ebx , dword ptr [ rip + hexvar ] lea eax , [ rbx + num ] mov dword ptr [ rip + hexvar ] , eax mov edx , hexvar mov edi , hexvar mov esi , num mov ecx , hexvar call hexvar mov eax , ebx pop rbx ret
push rbx mov rbx , rdi mov esi , hexvar call hexvar mov rdx , rax mov qword ptr [ rbx + hexvar ] , rax mov eax , num test rdx , rdx je hexvar mov dword ptr [ rdx + hexvar ] , num lea rax , [ rip - hexvar ] mov qword ptr [ rdx + hexvar ] , rax mov qword ptr [ rdx + hexvar ] , num mov qword ptr [ rdx + hexvar ] , num lea rdi , [ rdx + hexvar ] and rdi , hexvar sub edx , edi lea ecx , [ rdx + hexvar ] shr ecx , num mov ecx , ecx mov eax , num rep stosq qword ptr [ rdi ] , rax mov eax , num pop rbx ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , num ] ldr r3 , [ sp , num ] cmp r3 , hexvar bne hexvar bl hexvar mov r3 , r0 b hexvar ldr r3 , [ sp , num ] ldr r2 , [ pc , hexvar ] cmp r3 , r2 bne hexvar bl hexvar mov r3 , r0 b hexvar ldr r3 , [ sp , num ] ldr r2 , [ pc , hexvar ] cmp r3 , r2 bne hexvar bl hexvar mov r3 , r0 b hexvar ldr r3 , [ sp , num ] ldr r2 , [ pc , hexvar ] cmp r3 , r2 bne hexvar bl hexvar mov r3 , r0 b hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - num ] mov ecx , num mov esi , num mov rdi , rax call hexvar leave ret
sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar ret
ldr r3 , [ r0 , hexvar ] cmn r3 , num beq hexvar push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r1 mov r4 , r0 ldr r6 , [ r0 , num ] ldrb r3 , [ r0 , hexvar ] lsr r3 , r3 , num and r3 , r3 , num cmp r3 , num bls hexvar mov r1 , hexvar mov r0 , r6 bl hexvar cmp r0 , num beq hexvar sub r7 , r0 , r6 add r0 , r7 , num bl hexvar subs r8 , r0 , num beq hexvar mov r2 , r7 mov r1 , r6 mov r0 , r8 bl hexvar mov r3 , num strb r3 , [ r8 , r7 ] mov r0 , r8 bl hexvar ldr r3 , [ r5 ] add r2 , r3 , num str r2 , [ r5 ] str r0 , [ r3 ] str r0 , [ r4 , hexvar ] mov r0 , r8 bl hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
sub rsp , num mov edi , hexvar call hexvar lea rdi , [ rax + num ] mov rcx , rax mov qword ptr [ rax ] , num mov qword ptr [ rax + hexvar ] , num mov rdx , rax xor eax , eax and rdi , hexvar sub rcx , rdi add ecx , hexvar shr ecx , num rep stosq qword ptr [ rdi ] , rax mov rax , rdx add rsp , num ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] lea esi , [ ebp - hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax call hexvar mov eax , dword ptr [ ebp + hexvar ] lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar pop esi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] add r0 , r3 , hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp ] ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r3 , num b hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi movsd qword ptr [ rbp - hexvar ] , xmm0 movsd qword ptr [ rbp - hexvar ] , xmm1 movsd qword ptr [ rbp - hexvar ] , xmm2 movsd qword ptr [ rbp - hexvar ] , xmm3 movsd qword ptr [ rbp - hexvar ] , xmm4 movsd qword ptr [ rbp - hexvar ] , xmm5 mov rdi , qword ptr [ rbp - num ] test rdi , rdi setne al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov rax , qword ptr [ rip + hexvar ] jmp rax movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov ecx , hexvar sub rax , rcx sete dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rip + hexvar ] jmp rax movabs rdi , hexvar movabs rsi , hexvar mov edx , hexvar movabs rcx , hexvar call hexvar mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] test ecx , ecx setne dl movzx ecx , dl mov eax , ecx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] add rax , num mov esi , hexvar mov edx , hexvar mov r8d , hexvar xor ecx , ecx mov dil , cl mov ecx , hexvar mov r9d , hexvar mov byte ptr [ rbp - hexvar ] , dil mov edi , ecx mov rcx , r9 mov r9 , rax mov al , byte ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rip + hexvar ] mov dword ptr [ rbp - hexvar ] , eax jmp rcx mov rdi , qword ptr [ rbp - num ] movsd xmm0 , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rbp - hexvar ] movsd xmm2 , qword ptr [ rbp - hexvar ] movsd xmm3 , qword ptr [ rbp - hexvar ] movsd xmm4 , qword ptr [ rbp - hexvar ] movsd xmm5 , qword ptr [ rbp - hexvar ] movabs rsi , hexvar mov al , num call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s2 , a0 lw v0 , - hexvar ( gp ) lw v0 , ( v0 ) sw v0 , hexvar ( sp ) lw v0 , num ( a0 ) addiu v1 , sp , hexvar sw v1 , hexvar ( sp ) addiu v1 , zero , hexvar sw v1 , hexvar ( sp ) lw t9 , hexvar ( v0 )
push ebp mov ebp , esp push eax xor eax , eax cmp eax , dword ptr [ hexvar ] jne hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] shl eax , num lea ecx , [ hexvar ] add ecx , eax cmp dword ptr [ ecx + num ] , num je hexvar mov eax , dword ptr [ ebp - num ] shl eax , num lea ecx , [ hexvar ] add ecx , eax mov eax , num cmp eax , dword ptr [ ecx ] jne hexvar mov eax , dword ptr [ ebp - num ] shl eax , num lea ecx , [ hexvar ] add ecx , eax mov dword ptr [ hexvar ] , ecx jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ hexvar ] add esp , num pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rsi + hexvar ] and eax , num mov dword ptr [ rbp - num ] , eax mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov dword ptr [ rbp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] sub eax , hexvar mov dword ptr [ rbp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ rbp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ rbp - hexvar ] , ecx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax + hexvar ] and ecx , num cmp ecx , num mov ecx , hexvar mov edx , hexvar cmovne edx , ecx mov dword ptr [ rbp - hexvar ] , edx jmp hexvar mov edi , num call hexvar mov dword ptr [ rbp - num ] , num mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call rax mov dword ptr [ rbp - num ] , eax mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax lea eax , [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + hexvar ] , ebx mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push rbp push r14 push rbx mov ebp , esi mov r14 , rdi call hexvar test rax , rax je hexvar mov rbx , rax test ebp , hexvar jne hexvar mov rdi , rbx mov rsi , r14 xor edx , edx mov ecx , ebp call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar xor ebx , ebx mov rax , rbx pop rbx pop r14 pop rbp ret
push ebx sub esp , hexvar call hexvar add ebx , hexvar cmp dword ptr [ esp + hexvar ] , num je hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] lea edx , [ eax + num ] sub esp , num push hexvar lea eax , [ ebx - hexvar ] push eax push edx call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov edx , eax mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax + num ] sub esp , num push edx push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov eax , dword ptr [ eax ] mov edx , eax mov eax , dword ptr [ esp + hexvar ] add eax , edx mov byte ptr [ eax ] , num mov eax , dword ptr [ esp + hexvar ] add esp , hexvar pop ebx ret
addiu sp , sp , - hexvar lw v0 , ( a3 ) lui gp , hexvar move v1 , a1 addiu gp , gp , - hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw s7 , hexvar ( sp ) move a0 , v1 sw ra , hexvar ( sp ) sll v1 , v0 , num sw s4 , hexvar ( sp ) lui s7 , hexvar sw s2 , hexvar ( sp ) sw gp , hexvar ( sp ) addu a2 , a2 , v1 sw fp , hexvar ( sp ) addiu v0 , v0 , num sw s6 , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s1 , hexvar ( sp ) sb zero , hexvar ( s7 ) sw v0 , ( a3 ) lw t9 , - hexvar ( gp ) lw a1 , - hexvar ( gp ) bal hexvar lw s2 , ( a2 ) addiu v1 , zero , num lw gp , hexvar ( sp ) move a0 , s0 sb v1 , hexvar ( v0 ) move s4 , v0 sb v1 , hexvar ( v0 ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( v0 )
push ebp push edi xor eax , eax push esi push ebx call hexvar add ebp , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov ebx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] test byte ptr [ edi + hexvar ] , num jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] sub rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , hexvar jg hexvar lea rax , [ rip + hexvar ] jmp hexvar cmp qword ptr [ rbp - hexvar ] , hexvar jg hexvar mov rcx , qword ptr [ rbp - hexvar ] movabs rdx , hexvar mov rax , rcx imul rdx sar rdx , hexvar mov rax , rcx sar rax , hexvar sub rdx , rax mov rax , rdx mov dword ptr [ rbp - hexvar ] , eax mov rsi , qword ptr [ rbp - hexvar ] movabs rdx , hexvar mov rax , rsi imul rdx sar rdx , hexvar mov rax , rsi sar rax , hexvar mov rcx , rdx sub rcx , rax imul rax , rcx , hexvar sub rsi , rax mov rcx , rsi movabs rdx , hexvar mov rax , rcx imul rdx lea rax , [ rdx + rcx ] sar rax , num mov rdx , rax mov rax , rcx sar rax , hexvar sub rdx , rax mov rax , rdx mov dword ptr [ rbp - hexvar ] , eax mov edx , dword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov ecx , edx mov edx , eax lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] mov eax , num call hexvar jmp hexvar mov rcx , qword ptr [ rbp - hexvar ] movabs rdx , hexvar mov rax , rcx imul rdx sar rdx , hexvar mov rax , rcx sar rax , hexvar sub rdx , rax mov rax , rdx mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , rax lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] mov eax , num call hexvar lea rax , [ rip + hexvar ] leave ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] str r2 , [ sp , num ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r1 , [ sp , num ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , num ] str r2 , [ r3 , hexvar ] ldr r3 , [ sp , num ] cmp r3 , num movne r3 , num moveq r3 , num and r3 , r3 , hexvar mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov dword ptr [ esp + hexvar ] , num sub esp , num lea eax , [ esp + hexvar ] push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num jg hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] sub esp , hexvar push dword ptr [ esp + hexvar ] push eax push hexvar push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] xor edx , dword ptr gs : [ hexvar ] je hexvar call hexvar add esp , hexvar pop ebx ret
push { r4 , lr } cmp r1 , num beq hexvar ldrb r3 , [ r1 ] cmp r3 , num beq hexvar sub r3 , r3 , hexvar cmp r3 , hexvar ldrls pc , [ pc , r3 , lsl num ] b hexvar andeq r7 , sb , ip , ror num ldrdeq r7 , r8 , [ sb ] , -r8 ldrdeq r7 , r8 , [ sb ] , -r8 ldrdeq r7 , r8 , [ sb ] , -r8 ldrdeq r7 , r8 , [ sb ] , -r8 ldrdeq r7 , r8 , [ sb ] , -r8 ldrdeq r7 , r8 , [ sb ] , -r8 ldrdeq r7 , r8 , [ sb ] , -r8 ldrdeq r7 , r8 , [ sb ] , -r8 ldrdeq r7 , r8 , [ sb ] , -r8 ldrdeq r7 , r8 , [ sb ] , -r8 ldrdeq r7 , r8 , [ sb ] , -r8 andeq r7 , sb , r8 , lsr num ldrdeq r7 , r8 , [ sb ] , -r8 ldrdeq r7 , r8 , [ sb ] , -r8 andeq r7 , sb , r8 , ror r5 muleq sb , r8 , r5 andeq r7 , sb , r8 , lsl num ldrdeq r7 , r8 , [ sb ] , -r8 strheq r7 , [ sb ] , -r8 add r4 , r1 , num mov r0 , r4 pop { r4 , pc }
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r4 , r1 sub sp , sp , hexvar mov r5 , r2 str r2 , [ sp , num ] mov r8 , r3 mov sl , r0 bl hexvar ldr fp , [ r4 ] cmp fp , num beq hexvar mov r6 , num mov r7 , r0 str r6 , [ sp ] mvn sb , num b hexvar mla r3 , r8 , sb , r3 mov r2 , r8 mov r0 , r3 mov r1 , r5 bl hexvar cmp r0 , num ldr r3 , [ sp ] movne r3 , num str r3 , [ sp ] ldr fp , [ r4 , num ] ! add r6 , r6 , num cmp fp , num add r5 , r5 , r8 beq hexvar mov r2 , r7 mov r1 , sl mov r0 , fp bl hexvar cmp r0 , num bne hexvar mov r0 , fp bl hexvar cmp r0 , r7 beq hexvar cmn sb , num moveq sb , r6 beq hexvar ldr r3 , [ sp , num ] cmp r3 , num bne hexvar mov r3 , num str r3 , [ sp ] b hexvar ldr r3 , [ sp ] cmp r3 , num mvnne sb , num mov r0 , sb add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push r12 push rbp push rbx mov ebp , dword ptr [ rdi + hexvar ] mov rbx , rdi lea edi , [ rbp + rbp ] call hexvar test rax , rax mov qword ptr [ rbx + hexvar ] , rax je hexvar mov esi , dword ptr [ rbx + hexvar ] test esi , esi je hexvar mov dword ptr [ rbx + hexvar ] , ebp xor eax , eax pop rbx pop rbp pop r12 ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , eax mov eax , dword ptr [ eax + hexvar ] test eax , eax je hexvar mov ebp , edx mov edi , ecx lea eax , [ ebx - hexvar ] mov dword ptr [ esp + num ] , eax lea eax , [ ebx - hexvar ] mov dword ptr [ esp + hexvar ] , eax test ecx , ecx jne hexvar mov edx , ebp mov eax , esi call hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx xor ecx , ecx test eax , eax je hexvar lea edi , [ eax - num ] lea eax , [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax sub esp , num push dword ptr [ esp + hexvar ] push esi push ebp call hexvar push ebp push num push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar xor eax , hexvar or edx , eax jne hexvar add esi , hexvar sub edi , num cmp edi , - num jne hexvar mov eax , num jmp hexvar mov eax , hexvar mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] test rdi , rdi setne al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rcx ] sub rax , rcx setl dl movzx esi , dl mov ecx , esi mov rcx , qword ptr [ rcx * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] lea rcx , [ rcx + rcx * num ] shl rcx , num mov rdi , qword ptr [ rax + rcx + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] lea rcx , [ rcx + rcx * num ] shl rcx , num mov rdi , qword ptr [ rax + rcx + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] jmp rax xor eax , eax add rsp , hexvar pop rbp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } clz r4 , r2 cmp r1 , num lsr r4 , r4 , num moveq r4 , num cmp r4 , num bne hexvar ldr r3 , [ r0 , num ] mov sb , r2 cmp r3 , num mov r8 , r1 mov r6 , r0 beq hexvar ldr r3 , [ r0 , num ] cmp r3 , num beq hexvar mov r0 , hexvar bl hexvar mov r2 , num mov r1 , r4 mov r7 , r0 add r0 , r0 , r2 bl hexvar mov r3 , hexvar mov r0 , num stm r7 , { r3 , r4 } bl hexvar mov r5 , r0 mov r0 , hexvar str r5 , [ r7 , hexvar ] str sb , [ r5 , num ] strb r4 , [ r5 ] ldr sb , [ r6 , num ] strb r4 , [ r5 , num ] strb r4 , [ r5 , num ] strb r4 , [ r5 , num ] bl hexvar mov r2 , hexvar mov r1 , r4 mov r6 , r0 bl hexvar mov r3 , num ldr r0 , [ sb , num ] str r3 , [ r6 , hexvar ] cmp r0 , num str r8 , [ r6 , num ] str r4 , [ r6 , hexvar ] ldrne r3 , [ r0 , num ] beq hexvar str r6 , [ r3 ] str r6 , [ r0 , num ] str r7 , [ r6 , hexvar ] str r6 , [ r5 ] mov r0 , r7 pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andhs r0 , r0 , r0 andeq r0 , r0 , r0 , lsr num
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] test rdi , rdi setne al movzx ecx , al mov edi , ecx mov rdi , qword ptr [ rdi * num ] jmp rdi mov rax , qword ptr [ rbp - num ] mov cl , byte ptr [ rax ] test cl , cl setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num ] jmp rax mov rsi , qword ptr [ rbp - num ] mov eax , num mov edx , hexvar mov rdi , rax mov qword ptr [ rbp - hexvar ] , rax call hexvar mov esi , num mov edx , num mov r8d , num xor ecx , ecx mov r9b , cl mov edi , hexvar mov ecx , hexvar mov r10 , qword ptr [ rbp - hexvar ] mov byte ptr [ rbp - hexvar ] , r9b mov r9 , r10 mov r11b , byte ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov al , r11b call hexvar mov rcx , qword ptr [ rip ] mov dword ptr [ rbp - hexvar ] , eax jmp rcx movsx eax , byte ptr [ num ] cmp eax , num movabs rcx , num movabs rdx , num cmove rdx , rcx mov rax , rdx add rsp , hexvar pop rbp ret
push rbp push r14 push rbx mov rbx , rdx mov rax , rsi mov r14 , rdi mov esi , hexvar mov rdi , rax call hexvar mov ebp , hexvar test eax , eax je hexvar mov eax , ebp pop rbx pop r14 pop rbp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] mov r3 , num str r3 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar mov r3 , r0 add r3 , r3 , num str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] lsl r3 , r3 , num ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] mov r0 , r3 bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r2 , r3 ble hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , num bl hexvar b hexvar ldr r3 , [ sp , num ] ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] b hexvar mov r0 , r0 ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rdi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdi + hexvar ] shr rdi , num add rdi , - num mov rax , rdi sub rax , num mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rax ja hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax * num ] jmp rcx mov rdi , qword ptr [ rbp - hexvar ] call hexvar cvtsi2sd xmm0 , eax movsd qword ptr [ rbp - num ] , xmm0 jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov cx , ax movsx edx , ax cvtsi2sd xmm0 , edx movsd qword ptr [ rbp - num ] , xmm0 mov word ptr [ rbp - hexvar ] , cx jmp hexvar cmp dword ptr [ rbp - hexvar ] , num jle hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar cvtsi2sd xmm0 , eax movsd qword ptr [ rbp - num ] , xmm0 jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar cvtss2sd xmm0 , xmm0 movsd qword ptr [ rbp - num ] , xmm0 jmp hexvar cmp dword ptr [ rbp - hexvar ] , num jle hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar cvtsi2sd xmm0 , rax movsd qword ptr [ rbp - num ] , xmm0 jmp hexvar jmp hexvar jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] call hexvar movsd qword ptr [ rbp - num ] , xmm0 movsd xmm0 , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov al , byte ptr [ ebp + num ] movsx ecx , byte ptr [ ebp + num ] add ecx , - hexvar mov edx , ecx sub edx , hexvar mov byte ptr [ ebp - num ] , al mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , edx ja hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov byte ptr [ ebp + num ] , num jmp hexvar mov byte ptr [ ebp + num ] , num jmp hexvar mov byte ptr [ ebp + num ] , hexvar jmp hexvar mov byte ptr [ ebp + num ] , hexvar jmp hexvar mov byte ptr [ ebp + num ] , hexvar jmp hexvar mov byte ptr [ ebp + num ] , hexvar jmp hexvar mov byte ptr [ ebp + num ] , num jmp hexvar mov byte ptr [ ebp + num ] , hexvar jmp hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar xor ecx , ecx movsx edx , byte ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx call hexvar movsx eax , byte ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw zero , hexvar ( fp ) b hexvar nop lw v0 , hexvar ( fp ) lw v0 , num ( v0 )
push r12 push rbp push rbx sub rsp , hexvar mov rbx , rdi mov r12d , esi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + num ] , rax xor eax , eax mov qword ptr [ rsp ] , num mov rax , qword ptr [ rdi + hexvar ] mov rbp , rsp cmp byte ptr [ rax ] , sil je hexvar mov rdi , rbx call hexvar test rax , rax je hexvar mov ecx , num mov rdx , rax mov esi , hexvar mov rdi , rbx call hexvar mov qword ptr [ rbp ] , rax test rax , rax je hexvar lea rbp , [ rax + hexvar ] mov rax , qword ptr [ rbx + hexvar ] cmp byte ptr [ rax ] , r12b jne hexvar add rax , num mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rsp ] mov rdx , qword ptr [ rsp + num ] xor rdx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push num call hexvar add esp , hexvar test eax , eax je hexvar sub esp , num push eax push hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov eax , num add esp , num pop ebx ret
lea eax , [ ebx - hexvar ] sub esp , num push eax push num call hexvar mov dword ptr [ esp ] , ebp push dword ptr [ esp + hexvar ] push num push edi push esi call hexvar add esi , dword ptr [ esp + hexvar ] add esp , hexvar test edx , edx mov edi , eax mov eax , dword ptr [ esp + hexvar ] je hexvar or eax , num mov dword ptr [ esp + hexvar ] , eax test al , num jne hexvar test al , num jne hexvar test edi , edi je hexvar cmp edi , num jne hexvar sub esp , num lea eax , [ ebx - hexvar ] push num push eax push num call hexvar pop edx pop ecx push eax push num call hexvar add esp , hexvar jmp hexvar nop
cmp qword ptr [ rdi + hexvar ] , num je hexvar mov rdx , rdi mov edi , hexvar mov esi , hexvar mov ecx , hexvar mov r8d , num xor r9d , r9d jmp hexvar mov eax , num ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edx , dword ptr [ edx + num ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ edi ] mov edi , dword ptr [ edi + num ] xor edx , edi xor esi , ebx or esi , edx sete dl and dl , num movzx edi , dl mov dword ptr [ ebp - hexvar ] , eax mov eax , edi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi add esp , hexvar pop esi pop edi pop ebx pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw a3 , hexvar ( sp ) move a3 , a1 lui a1 , hexvar sw a2 , hexvar ( sp ) sw ra , hexvar ( sp ) move a2 , a0 sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) lw a0 , - hexvar ( gp ) bal hexvar addiu a1 , a1 , - hexvar lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] lea edi , [ ebp - hexvar ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar sub esp , num mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + hexvar ] , hexvar call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebp ret
push esi push ebx sub esp , hexvar call hexvar add esi , hexvar mov ebx , dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push ebx call hexvar add esp , hexvar test eax , eax jne hexvar add esp , num pop ebx pop esi ret
lui v1 , hexvar lui v0 , hexvar lw a0 , hexvar ( v1 ) ori v0 , v0 , hexvar beq a0 , v0 , hexvar lui v0 , hexvar lw v0 , hexvar ( v1 ) addiu v0 , v0 , num sw v0 , hexvar ( v1 ) lui v0 , hexvar addiu v1 , zero , num sw v1 , hexvar ( v0 ) jr ra nop
push rbp push r15 push r14 push r13 push r12 push rbx push rax mov r15 , r9 mov r14d , r8d mov r12 , rcx mov r13 , rdx mov rbp , rsi xor esi , esi call hexvar test rax , rax je hexvar mov rbx , rax sub rsp , num mov rdi , rax mov rsi , rbp mov edx , num mov ecx , hexvar mov r8 , r13 mov r9 , r12 push qword ptr [ rsp + hexvar ] push r15 push r14 call hexvar add rsp , hexvar mov ebp , eax mov rdi , rbx call hexvar mov eax , ebp jmp hexvar mov ecx , hexvar mov edi , num mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar xor eax , eax add rsp , num pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) addiu a1 , zero , hexvar lui a0 , hexvar addiu a0 , a0 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s1 , a0 lw v0 , - hexvar ( gp ) lw a0 , ( v0 ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw v0 , - hexvar ( gp ) lw s0 , ( v0 ) lui v0 , hexvar lw s2 , - hexvar ( v0 ) addiu a2 , zero , num lui a1 , hexvar addiu a1 , a1 , hexvar move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s3 , v0 addiu a2 , zero , num lui a1 , hexvar addiu a1 , a1 , hexvar move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) move s4 , v0 addiu a2 , zero , num lui a1 , hexvar addiu a1 , a1 , hexvar move a0 , zero lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) sw zero , hexvar ( sp ) sw v0 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) move a3 , s2 lui a2 , hexvar addiu a2 , a2 , hexvar move a1 , s1 move a0 , s0 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , num mov dword ptr [ rbp - hexvar ] , num mov qword ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num jge hexvar mov rdi , qword ptr [ rbp - num ] call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , - num je hexvar cmp dword ptr [ rbp - hexvar ] , hexvar jne hexvar cmp dword ptr [ rbp - hexvar ] , hexvar jne hexvar mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] and eax , hexvar mov dword ptr [ rbp - hexvar ] , eax call hexvar mov rax , qword ptr [ rax ] movsxd rcx , dword ptr [ rbp - hexvar ] movzx edx , word ptr [ rax + rcx * num ] and edx , hexvar cmp edx , num jne hexvar jmp hexvar movsxd rax , dword ptr [ rbp - hexvar ] shl rax , num mov ecx , eax mov rax , qword ptr [ rbp - hexvar ] movsxd rdx , dword ptr [ rbp - hexvar ] movsx esi , word ptr [ rax + rdx * num ] add ecx , esi mov dword ptr [ rbp - hexvar ] , ecx mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , hexvar mov dword ptr [ ebp - num ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a3 , hexvar ( sp ) sw a2 , hexvar ( sp ) move a3 , a1 move a2 , a0 lui a1 , hexvar addiu a1 , a1 , - hexvar lw a0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rdi + num ] mov rax , qword ptr [ rax + hexvar ] call rax test eax , eax setne cl movzx eax , cl mov edi , eax mov rdi , qword ptr [ rdi * num + hexvar ] jmp rdi mov dword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov rdi , rax call rcx test eax , eax sete dl movzx eax , dl mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] test eax , eax setne dl movzx eax , dl mov ecx , eax mov rcx , qword ptr [ rcx * num + hexvar ] jmp rcx mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov rdi , qword ptr [ rip + hexvar ] jmp rdi mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - num ] , eax mov rdi , qword ptr [ rip + hexvar ] jmp rdi mov eax , dword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov esi , dword ptr [ esp + hexvar ] lea eax , [ ebx - hexvar ] push eax push esi call hexvar add esp , hexvar test eax , eax je hexvar lea eax , [ ebx - hexvar ] sub esp , num push eax push esi call hexvar add esp , hexvar test eax , eax je hexvar lea eax , [ ebx - hexvar ] sub esp , num push eax push esi call hexvar mov edx , eax add esp , hexvar xor eax , eax test edx , edx jne hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ eax ] , num add esp , num mov eax , num pop ebx pop esi ret
push edi push esi push ebx call hexvar add ebx , hexvar call hexvar sub esp , hexvar push eax call hexvar add esp , hexvar test eax , eax je hexvar mov esi , eax push dword ptr [ esp + hexvar ] push num push hexvar push eax call hexvar add esp , num push dword ptr [ esp + hexvar ] push esi call hexvar mov edi , eax mov dword ptr [ esp ] , esi call hexvar add esp , hexvar mov eax , edi pop ebx pop esi pop edi ret
push r13 push r12 push rbp push rbx sub rsp , num mov rbp , rdi mov r12 , qword ptr [ rsi - num ] mov r13 , qword ptr [ rsi ] mov rbx , qword ptr [ rsi - hexvar ] test rbx , rbx jne hexvar mov eax , num test rbp , rbp je hexvar mov rbp , qword ptr [ rbp + hexvar ] test rbp , rbp je hexvar mov rsi , r13 mov rdi , rbp call hexvar test rax , rax je hexvar jmp hexvar mov rbx , qword ptr [ rbx ] test rbx , rbx je hexvar cmp qword ptr [ rbx + hexvar ] , r12 jne hexvar mov rdi , qword ptr [ rbx + num ] mov rsi , r13 call hexvar test eax , eax jne hexvar lea rax , [ rbx + hexvar ] jmp hexvar mov eax , num add rsp , num pop rbx pop rbp pop r12 pop r13 ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ ebp - num ] , eax call hexvar add esp , num pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax jmp ecx mov eax , dword ptr [ ebp + num ] mov cl , byte ptr [ eax ] test cl , cl setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] mov cl , byte ptr [ eax ] sub cl , hexvar sete dl movzx eax , dl mov eax , dword ptr [ eax * num + hexvar ] mov byte ptr [ ebp - num ] , cl jmp eax mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax + num ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] inc eax mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + num ] inc eax mov dword ptr [ ebp + num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov ebp , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov eax , dword ptr [ ebp + hexvar ] cmp dword ptr [ eax + hexvar ] , num je hexvar mov edx , dword ptr [ ebp + hexvar ] mov eax , num cmp dword ptr [ edx + hexvar ] , num je hexvar mov edi , dword ptr [ esp + hexvar ] xor edi , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r13 , r9 mov r14d , r8d mov rbx , rcx mov ebp , edx mov r12 , rsi mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp ] , num call hexvar mov qword ptr [ rsp + num ] , rax test rax , rax je hexvar movsxd r15 , r14d lea rdi , [ rsp + num ] lea rsi , [ rsp + hexvar ] mov rdx , r15 call hexvar test rax , rax je hexvar mov dword ptr [ rsp + hexvar ] , ebp mov qword ptr [ rsp + hexvar ] , r13 mov rdi , qword ptr [ rsp + num ] mov rsi , rsp call hexvar mov r13d , eax mov ebp , hexvar cmp eax , r14d jne hexvar mov rsi , qword ptr [ rsp ] mov rdi , rbx mov rdx , r15 call hexvar test eax , eax je hexvar test r13d , r13d jle hexvar mov rdi , qword ptr [ rsp ] movsxd rsi , r13d call hexvar mov rdi , qword ptr [ rsp ] call hexvar jmp hexvar mov ebp , hexvar jmp hexvar mov ebp , hexvar mov rdi , qword ptr [ rsp + num ] call hexvar mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rsi + hexvar ] mov rsi , qword ptr [ rsi + hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - num ] call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edi , eax mov qword ptr [ rsi + rdi * num ] , num mov rsi , qword ptr [ rip + hexvar ] jmp rsi mov rax , qword ptr [ rbp - hexvar ] test rax , rax setne cl movzx edx , cl mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] add edx , - num mov dword ptr [ rbp - hexvar ] , edx mov esi , edx mov qword ptr [ rcx + rsi * num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rdi , qword ptr [ rbp - num ] call hexvar mov eax , eax add rsp , hexvar pop rbp ret
mov eax , dword ptr [ esp + hexvar ] lea eax , [ eax - hexvar ] mov dword ptr [ esp + hexvar ] , eax movzx eax , byte ptr [ esp + hexvar ] sub esp , num xor edx , edx mov dword ptr [ esp + hexvar ] , eax push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] call hexvar add esp , hexvar mov ebx , dword ptr [ esp + hexvar ] mov edx , num mov ecx , ebp not ecx test ebx , ebx cmovns edx , ebx cmp eax , edx mov edi , edx cmovae edi , eax cmp ecx , edi jbe hexvar mov ecx , dword ptr [ esp + hexvar ] test ecx , ecx jne hexvar add ebp , edi mov edi , esi jmp hexvar
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r4 , r0 mov r5 , r1 orrs ip , r4 , r5 sub sp , sp , hexvar mov sl , r2 mov fp , r3 bne hexvar mov r0 , r2 mov r1 , r3 mov r2 , num add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } b hexvar add r3 , pc , hexvar ldm r3 , { r2 , r3 } bl hexvar add r3 , pc , hexvar ldm r3 , { r2 , r3 } str r0 , [ sp , num ] str r1 , [ sp , hexvar ] mov r0 , r4 mov r1 , r5 add r5 , pc , hexvar ldm r5 , { r4 , r5 } bl hexvar mov r6 , r2 mov r2 , num mov ip , hexvar mov r7 , r3 mov r0 , r2 mov r3 , r2 mov r1 , r2 str ip , [ sp , num ] lsrs sb , r1 , num rrx r8 , r0 orr r1 , sb , r4 , lsl num lsrs r5 , r5 , num rrx r4 , r4 adds lr , r2 , r2 mov r0 , r8 adc r8 , r3 , r3 cmp r5 , r7 cmpeq r4 , r6 mov r3 , r8 mov r2 , lr blo hexvar moveq sb , num movne sb , num cmp r1 , fp cmpeq r0 , sl movhi sb , num andls sb , sb , num cmp sb , num beq hexvar adds r2 , lr , num adc r3 , r8 , num cmp r1 , fp cmpeq r0 , sl movhi r8 , num movls r8 , num mov lr , num subs sl , sl , r0 sbc fp , fp , r1 subs sb , r6 , r4 sbc ip , r7 , r5 subs r6 , sb , r8 sbc r7 , ip , lr ldr ip , [ sp , num ] subs ip , ip , num str ip , [ sp , num ] bne hexvar add r1 , sp , num ldm r1 , { r0 , r1 } bl hexvar mov r0 , sl mov r1 , fp mov r2 , num add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } b hexvar bllo hexvar andeq r0 , r0 , r0
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , hexvar mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax jne hexvar lea rcx , [ rip - hexvar ] mov rax , qword ptr [ rip + hexvar ] mov rdx , rax lea rax , [ rip - hexvar ] mov rsi , rax lea rax , [ rip - hexvar ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] lea rdx , [ rbp - hexvar ] lea rsi , [ rip - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax je hexvar mov eax , hexvar jmp hexvar mov eax , num mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , ecx test byte ptr [ hexvar ] , num mov dword ptr [ ebp - num ] , eax je hexvar mov eax , dword ptr [ ebp + num ] sub eax , dword ptr [ hexvar ] mov dword ptr [ hexvar ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax cmp eax , dword ptr [ ebp + num ] jg hexvar mov dword ptr [ esp ] , hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ hexvar ] , eax add esp , hexvar pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] mov r2 , num mov r1 , num ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 cmp r3 , num beq hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] mov r0 , r3 bl hexvar ldr r3 , [ sp , hexvar ] ldr r2 , [ sp , num ] str r2 , [ r3 ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] add r0 , r3 , hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , num mov r1 , num bl hexvar mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
push rbx sub rsp , hexvar mov r8 , r9 lea rax , [ rsp + num ] mov qword ptr [ rsp ] , rax xor ebx , ebx xor r9d , r9d call hexvar test eax , eax je hexvar mov rbx , qword ptr [ rsp + num ] mov rax , rbx add rsp , hexvar pop rbx ret
push ebx call hexvar add ebx , hexvar sub esp , num mov ecx , dword ptr [ ebx + hexvar ] lea eax , [ ebx + hexvar ] test ecx , ecx mov byte ptr [ eax + hexvar ] , num je hexvar sub esp , hexvar push ecx call hexvar mov byte ptr [ eax + hexvar ] , num mov byte ptr [ eax + hexvar ] , num mov dword ptr [ eax + hexvar ] , hexvar add esp , hexvar mov eax , num pop ebx ret
push ebp push edi push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov ebp , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov edx , dword ptr [ ebp ] test edx , edx mov dword ptr [ esp + num ] , edx je hexvar call hexvar mov edx , dword ptr [ esp + num ] mov dword ptr [ esp + num ] , eax jmp hexvar nop lea esi , [ esi ] mov eax , dword ptr [ ebp ] mov eax , dword ptr [ eax ] and eax , hexvar cmovne eax , edx sub esp , hexvar mov dword ptr [ ecx ] , eax push dword ptr [ ebp + num ] call dword ptr [ ebp + num ] mov edx , dword ptr [ ebp ] add esp , hexvar push edx push edi push num push esi call hexvar mov ecx , dword ptr [ esp + hexvar ] add esi , eax add esp , hexvar sub edi , eax mov edx , dword ptr [ ecx ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov dword ptr [ rbp - hexvar ] , r8d mov eax , dword ptr [ rbp - hexvar ] and eax , hexvar test eax , eax je hexvar mov eax , num jmp hexvar mov eax , dword ptr [ rbp - hexvar ] and eax , num test eax , eax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax + hexvar ] and eax , hexvar test al , al je hexvar mov r9 , qword ptr [ rbp - num ] mov r8 , qword ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] sub rsp , num mov edi , dword ptr [ rbp - hexvar ] push rdi push num push num mov rdi , rax call hexvar add rsp , hexvar mov dword ptr [ rbp - hexvar ] , eax jmp hexvar mov r9 , qword ptr [ rbp - num ] mov r8 , qword ptr [ rbp - num ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] sub rsp , num mov edi , dword ptr [ rbp - hexvar ] push rdi push qword ptr [ rbp - hexvar ] push qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar add rsp , hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num setne al movzx eax , al leave ret
push rbp push r15 push r14 push r12 push rbx sub rsp , hexvar xor ebx , ebx test rdi , rdi je hexvar mov r14 , rcx mov r12 , rdx mov r15d , esi mov rbp , rdi lea rsi , [ rsp + num ] mov edx , hexvar call hexvar mov rcx , qword ptr [ rsp + num ] test rcx , rcx je hexvar cmp byte ptr [ rcx ] , num je hexvar movsxd rdx , r15d add rdx , rbp cmp rcx , rdx ja hexvar test rax , rax js hexvar mov dword ptr [ r12 ] , eax test rcx , rcx je hexvar sub ebp , ecx add ebp , r15d jne hexvar mov dword ptr [ r14 ] , hexvar mov ebx , num jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov eax , ebx add rsp , hexvar pop rbx pop r12 pop r14 pop r15 pop rbp ret
push rax test rdi , rdi je hexvar test rsi , rsi je hexvar cmp rdx , num jb hexvar movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + num ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 movaps xmm0 , xmmword ptr [ rip ] movups xmmword ptr [ rdi + hexvar ] , xmm0 xor r11d , r11d xor ecx , ecx xor r8d , r8d nop dword ptr [ rax ] movzx r9d , byte ptr [ rdi + r11 + num ] mov r10d , r9d add r10d , r8d movzx r8d , byte ptr [ rsi + rcx ] add rcx , num add r8d , r10d movzx r8d , r8b cmp rcx , rdx mov eax , num cmove rcx , rax movzx eax , byte ptr [ rdi + r8 + num ] mov byte ptr [ rdi + r11 + num ] , al mov byte ptr [ rdi + r8 + num ] , r9b add r11 , num cmp r11 , hexvar jne hexvar mov qword ptr [ rdi ] , num xor eax , eax pop rcx ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] or eax , ecx mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ eax + num ] mov eax , dword ptr [ eax + hexvar ] or ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jne hexvar jmp hexvar jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar movsd xmm0 , qword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp + num ] movsd qword ptr [ eax ] , xmm0 movsd xmm0 , qword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp + num ] movsd qword ptr [ eax + num ] , xmm0 jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , ecx mov dword ptr [ esi ] , eax mov dword ptr [ esi + hexvar ] , num call hexvar add esp , hexvar pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov dword ptr [ esp ] , num lea eax , [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax call hexvar cmp eax , num jne hexvar xor eax , eax movzx ecx , word ptr [ ebp - hexvar ] cmp eax , ecx jge hexvar movzx eax , word ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , num lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , ecx lea ecx , [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar cmp eax , num jne hexvar xor eax , eax cmp eax , dword ptr [ ebp - hexvar ] jge hexvar cmp dword ptr [ ebp - hexvar ] , hexvar jle hexvar mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r7 , [ r0 ] sub sp , sp , hexvar cmp r7 , num beq hexvar mov fp , r1 mov r4 , num ldr r3 , [ r7 , num ] lsr r3 , r3 , hexvar and r3 , r3 , num str r3 , [ sp , num ] ldr r3 , [ r7 , num ] cmp r3 , num beq hexvar cmp r3 , num bne hexvar ldr r5 , [ r7 , hexvar ] ldr r6 , [ r7 , hexvar ] ldr r2 , [ r5 , num ] ands r8 , r2 , hexvar movne r3 , num moveq r3 , num cmp r6 , num str r3 , [ sp , num ] beq hexvar mov sb , num add r5 , r5 , hexvar b hexvar add sb , sb , num cmp r6 , sb add r5 , r5 , num beq hexvar ldr r2 , [ r5 , - num ] mov r1 , fp ldr r0 , [ r5 , - hexvar ] bl hexvar cmp r0 , num beq hexvar clz r3 , r8 lsr r3 , r3 , num str r3 , [ sp , num ] ldr r3 , [ sp , num ] ldr r2 , [ sp , num ] cmp r3 , r2 bne hexvar ldr r7 , [ r7 ] cmp r7 , num bne hexvar mov r0 , r4 bl hexvar ldr r0 , [ sp , num ] add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 ldrshlt sp , [ r0 , r2 ] !
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ hexvar ] or eax , hexvar mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ esp + num ] , ebx mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
mov rax , qword ptr [ rdi + num ] mov edx , hexvar cmp byte ptr [ rax + hexvar ] , hexvar mov eax , hexvar cmovne eax , edx cmp byte ptr [ rsi ] , al sete al movzx eax , al ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov ecx , dword ptr [ ebp - num ] add ecx , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar xor eax , eax add esp , hexvar pop ebp ret
mov rcx , qword ptr [ rsi ] mov rax , qword ptr [ rdx ] mov rdx , rcx sub rdx , rax cmp rcx , rdx setl cl shr rax , hexvar cmp cl , al jne hexvar mov qword ptr [ rdi ] , rdx ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rax , num mov rdi , rax mov rsi , rax movabs rdx , num call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] xor ecx , num mov dword ptr [ rax + hexvar ] , ecx mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] or ecx , hexvar mov dword ptr [ rax + hexvar ] , ecx mov rdi , qword ptr [ rbp - num ] call hexvar mov edx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rdx add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar add rsp , hexvar pop rbp ret
push r15 push r14 push r13 push r12 mov r13 , rcx push rbp push rbx mov rbp , rdx mov ebx , edi mov r12 , rbp lea rdi , [ rip + hexvar ] sub rsp , hexvar shl r12 , num mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov qword ptr [ rsp + num ] , rsi mov rsi , rdx mov qword ptr [ rsp + hexvar ] , r8 mov byte ptr [ rsp + hexvar ] , num call hexvar lea rax , [ r12 + hexvar ] lea rdi , [ rip + hexvar ] mov rsi , rax mov qword ptr [ rsp ] , rax xor eax , eax call hexvar lea rsi , [ r12 + hexvar ] xor edx , edx mov edi , ebx call hexvar test rax , rax jns hexvar lea rbp , [ rip + hexvar ] call hexvar mov rbx , rax mov edi , dword ptr [ rbx ] cmp edi , hexvar jle hexvar call hexvar mov rsi , rax xor eax , eax mov rdi , rbp call hexvar mov eax , dword ptr [ rbx ] mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s0 , a0 lw v0 , - hexvar ( gp ) lw a0 , ( v0 ) lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) beqz s0 , hexvar lw s2 , - hexvar ( gp ) lui s1 , hexvar addiu s1 , s1 , hexvar lw a3 , hexvar ( s0 )
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] lea esi , [ ebp - hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx lea eax , [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax lea eax , [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] lea ecx , [ ebp - hexvar ] mov dword ptr [ esp ] , ecx lea ecx , [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar sub esp , num mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx + hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar fstp dword ptr [ ebp - hexvar ] movss xmm0 , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ ebp - hexvar ] movss dword ptr [ eax + hexvar ] , xmm0 mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov rbx , rdi mov qword ptr [ rsp + num ] , num mov edi , hexvar call hexvar mov r15 , rax call hexvar mov rdi , rax call hexvar mov r14 , rax test r15 , r15 je hexvar test r14 , r14 je hexvar mov edx , num mov rdi , r14 mov esi , hexvar mov rcx , rbx call hexvar test rax , rax je hexvar xor r13d , r13d lea rsi , [ rsp + num ] mov rdi , r14 xor edx , edx xor ecx , ecx call hexvar test rax , rax je hexvar xor r13d , r13d lea r12 , [ rsp + num ] nop dword ptr [ rax + rax ] test r13 , r13 jne hexvar call hexvar mov r13 , rax test rax , rax je hexvar mov rdi , qword ptr [ rsp + num ] call hexvar test rax , rax je hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov rbx , rax mov rdi , r15 mov rsi , rax call hexvar test eax , eax js hexvar mov rdi , rbx call hexvar jmp hexvar nop word ptr cs : [ rax + rax ] mov rdi , r15 mov rsi , rbx call hexvar mov rdi , r13 mov rsi , rbx call hexvar mov rdi , r14 mov rsi , r12 xor edx , edx xor ecx , ecx call hexvar test rax , rax jne hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor r13d , r13d test r15 , r15 je hexvar mov rdi , r15 call hexvar test r14 , r14 je hexvar mov rdi , r14 call hexvar mov rdi , qword ptr [ rsp + num ] test rdi , rdi je hexvar call hexvar test r13 , r13 je hexvar call hexvar mov rax , r13 add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , edx mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx + num ] mov edx , dword ptr [ edx + hexvar ] mov edi , dword ptr [ ebp - hexvar ] mov ebx , dword ptr [ edi + num ] mov edi , dword ptr [ edi + hexvar ] xor edx , edi xor esi , ebx or esi , edx sete dl movzx edi , dl mov edi , dword ptr [ edi * num + hexvar ] xor ebx , ebx mov dl , bl mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , esi mov byte ptr [ ebp - hexvar ] , dl jmp edi mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov eax , dword ptr [ eax + num ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov edx , dword ptr [ edx + num ] xor eax , edx xor ecx , esi or ecx , eax sete bl mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , bl jmp eax mov al , byte ptr [ ebp - hexvar ] and al , num movzx eax , al add esp , hexvar pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) sw a2 , hexvar ( sp ) sw a3 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 jalr t9 nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) bnez v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( sp ) lw v0 , hexvar ( v0 ) lw v0 , num ( v0 )
push ebx sub esp , num call hexvar add eax , hexvar sub esp , num lea edx , [ eax - hexvar ] push edx push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] mov ebx , eax call hexvar add esp , hexvar add esp , num pop ebx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - num ] , hexvar jae hexvar xor eax , eax imul ecx , dword ptr [ ebp - num ] , hexvar lea edx , [ hexvar ] add edx , ecx mov ecx , dword ptr [ edx ] mov edx , dword ptr [ ebp + num ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi ] , ecx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov ecx , dword ptr [ ebp - hexvar ] cmp ecx , eax jne hexvar imul eax , dword ptr [ ebp - num ] , hexvar lea ecx , [ hexvar ] add ecx , eax mov eax , dword ptr [ ecx + num ] add esp , hexvar pop esi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] cmp r3 , num beq hexvar add r3 , sp , hexvar str r3 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar b hexvar mov r3 , num str r3 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 ] mov r1 , r3 ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , num ] mov r0 , r3 ldr r3 , [ sp , hexvar ] ldr r2 , [ r3 , num ] ldr r3 , [ sp , hexvar ] str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , num ] mov r3 , num str r3 , [ sp , num ] mov r3 , num str r3 , [ sp ] mov r3 , r2 mov r2 , r0 ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ sp , hexvar ] mov r1 , hexvar ldr r0 , [ sp , hexvar ] bl hexvar b hexvar ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] mov r0 , r3 ldr r3 , [ pc , hexvar ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r3 ] cmp r2 , r3 beq hexvar bl hexvar add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] lea ecx , [ ebp - num ] lea edx , [ ebp + hexvar ] mov dword ptr [ ecx ] , edx mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx xor eax , eax mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , num mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + hexvar ] , edx mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ esp ] , num call hexvar nop word ptr cs : [ eax + eax ] nop dword ptr [ eax ]
push { r4 , r5 , r6 , lr } subs r4 , r0 , num blt hexvar bl hexvar adds r4 , r4 , num movne r4 , num cmp r0 , num movne r4 , num cmp r4 , num mov r5 , r0 beq hexvar mov r0 , num bl hexvar mov r0 , r5 pop { r4 , r5 , r6 , pc }
cmp qword ptr [ rip + hexvar ] , rdi push rbx mov rbx , rdi je hexvar mov esi , num call hexvar mov rdi , rax test rdi , rdi je hexvar pop rbx jmp hexvar nop dword ptr [ rax ] mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi jne hexvar mov rax , qword ptr [ rbx + hexvar ] pop rbx ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar add esp , num pop ebp ret
push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx + hexvar ] push eax call hexvar add esp , hexvar test eax , eax mov esi , eax je hexvar push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push hexvar push eax call hexvar add esp , hexvar add esp , num mov eax , esi pop ebx pop esi ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar mov r7 , r0 mov r4 , r1 str r2 , [ sp , hexvar ] mov r8 , r3 ldr r6 , [ sp , hexvar ] ldr r5 , [ r1 , hexvar ] ldr r3 , [ r1 ] ldr sb , [ r3 ] ldr r3 , [ sb , hexvar ] ldr r2 , [ pc , hexvar ] cmp r3 , r2 beq hexvar cmp r5 , num beq hexvar mov fp , num ldr sl , [ r5 , hexvar ] cmp sl , num beq hexvar ldr r3 , [ sp , hexvar ] str r3 , [ sp , num ] str r6 , [ sp , num ] str r8 , [ sp ] ldr r3 , [ sp , hexvar ] mov r2 , sb mov r1 , r4 mov r0 , r7 blx sl cmp r0 , num beq hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } ble hexvar andeq r0 , r0 , r0
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] cmp dword ptr [ ebp + hexvar ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jne hexvar lea eax , [ hexvar ] mov dword ptr [ ebp + hexvar ] , eax xor eax , eax mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax call hexvar add esp , hexvar pop esi pop ebp ret
push edi push esi xor eax , eax push ebx mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar mov edi , dword ptr [ esi + hexvar ] test edi , edi je hexvar mov eax , dword ptr [ edi + num ] test eax , eax je hexvar sub esp , hexvar push eax call hexvar add esp , hexvar sub esp , hexvar push edi call hexvar mov dword ptr [ esi + hexvar ] , num mov dword ptr [ esi + hexvar ] , num add esp , hexvar mov dword ptr [ esi + hexvar ] , num mov eax , num pop ebx pop esi pop edi ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] fld xword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax fstp xword ptr [ ebp - hexvar ] mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp mov edx , ecx add edx , - hexvar mov esp , edx mov esi , esp mov edi , esi add edi , - hexvar mov esp , edi mov ebx , esp mov dword ptr [ ebp - hexvar ] , eax mov eax , ebx add eax , - hexvar mov esp , eax fld xword ptr [ ebp - hexvar ] fstp xword ptr [ ecx - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esi - hexvar ] , eax fld xword ptr [ ecx - hexvar ] fstp xword ptr [ ebx - hexvar ] cmp dword ptr [ edi ] , num sete cl mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , edi mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar fld1 mov eax , dword ptr [ ebp - hexvar ] fstp xword ptr [ eax ] jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] add ecx , - num mov dword ptr [ eax ] , ecx cmp ecx , num je hexvar mov eax , dword ptr [ ebp - hexvar ] fld xword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] fld xword ptr [ ecx ] fmulp st ( num ) fstp xword ptr [ ecx ] jmp hexvar mov eax , dword ptr [ ebp - hexvar ] fld xword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] fstp xword ptr [ ecx ] jmp hexvar mov eax , dword ptr [ ebp - hexvar ] fld xword ptr [ eax ] fstp xword ptr [ ebp - hexvar ] fld xword ptr [ ebp - hexvar ] lea esp , [ ebp - hexvar ] pop esi pop edi pop ebx pop ebp ret
addiu sp , sp , - hexvar lui gp , hexvar sw s0 , hexvar ( sp ) move s0 , a0 sw s1 , hexvar ( sp ) addiu gp , gp , hexvar sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw a0 , hexvar ( a0 )
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp + num ] , num je hexvar mov eax , dword ptr [ ebp + num ] test byte ptr [ eax + hexvar ] , num je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ ebp + num ] , eax jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
push rbp push rbx mov ebp , edi sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax cmp byte ptr [ rip + hexvar ] , num je hexvar mov r8d , ebp mov ecx , hexvar mov edx , hexvar mov esi , num mov rdi , rsp xor eax , eax call hexvar mov rbx , rsp mov rax , rsp mov ecx , dword ptr [ rax ] add rax , num lea edx , [ rcx - hexvar ] not ecx and edx , ecx and edx , hexvar je hexvar mov ecx , edx shr ecx , hexvar test edx , hexvar cmove edx , ecx lea rcx , [ rax + num ] mov esi , edx cmove rax , rcx add sil , dl sbb rax , num sub eax , ebx mov rsi , qword ptr [ rsp + hexvar ] xor rsi , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp ret
push r15 push r14 push r12 push rbx push rax mov r14 , rcx mov r15 , rdx mov r12 , rsi mov rbx , rdi call hexvar test rax , rax je hexvar mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rbx mov rsi , r12 mov rdx , r15 mov rcx , r14 add rsp , num pop rbx pop r12 pop r14 pop r15 jmp rax xor eax , eax add rsp , num pop rbx pop r12 pop r14 pop r15 ret
push ebp mov ebp , esp push ebx sub esp , num call hexvar add ebx , hexvar mov eax , dword ptr [ ebx + hexvar ] and eax , hexvar test eax , eax je hexvar mov eax , dword ptr [ ebx + hexvar ] test eax , eax js hexvar mov eax , dword ptr [ ebx + hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar mov dword ptr [ ebx + hexvar ] , hexvar nop mov ebx , dword ptr [ ebp - num ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov eax , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rdi , rax mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx mov qword ptr [ rbp - hexvar ] , rcx call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rcx mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , edx mov rdi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov r8 , qword ptr [ rbp - hexvar ] test r8 , r8 setne r9b movzx r10d , r9b mov r8d , r10d mov r8 , qword ptr [ r8 * num + hexvar ] mov dword ptr [ rbp - hexvar ] , eax jmp r8
push rbp push r15 push r14 push r13 push r12 push rbx sub rsp , hexvar mov r12 , r9 mov r13 , r8 mov r14 , rcx mov rbx , rdx mov rbp , rsi mov r15 , qword ptr [ rsp + hexvar ] test r15 , r15 je hexvar test byte ptr [ rbx + hexvar ] , num je hexvar mov qword ptr [ rsp + num ] , rdi mov rdi , r14 call hexvar mov rdi , qword ptr [ rsp + num ] cmp eax , hexvar jne hexvar lea r14 , [ rsp + hexvar ] mov r12 , rdi mov rdi , rbp mov esi , num mov rdx , r14 call hexvar lea rbp , [ rsp + hexvar ] mov rdi , rbx mov esi , num mov rdx , rbp call hexvar add r15 , num lea rbx , [ rsp + hexvar ] mov rdi , rbx mov rsi , r14 mov rdx , rbp mov rcx , r15 call hexvar mov rdi , r12 mov rsi , rbx call hexvar mov eax , num add rsp , hexvar pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov r8 , qword ptr [ rbp - hexvar ] mov ecx , num call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
push { r4 , lr } mov r4 , r0 tst r1 , hexvar and r3 , r1 , hexvar ldr r2 , [ pc , hexvar ] ldrne r1 , [ pc , hexvar ] ldreq r1 , [ pc , hexvar ] mov r0 , num bl hexvar mov r0 , r4 pop { r4 , pc }
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov bl , byte ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , ecx mov cl , bl mov dword ptr [ ebp - hexvar ] , eax mov eax , esi shl eax , cl mov cl , bl mov dword ptr [ ebp - hexvar ] , eax mov eax , edi shld eax , esi , cl xor ecx , ecx test bl , hexvar mov dword ptr [ ebp - hexvar ] , ecx mov ecx , dword ptr [ ebp - hexvar ] cmovne eax , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] cmovne ecx , eax mov bh , hexvar sub bh , bl mov dword ptr [ ebp - hexvar ] , ecx mov cl , bh mov eax , edi shr eax , cl mov cl , bh shrd esi , edi , cl test bh , hexvar cmovne esi , eax mov edi , dword ptr [ ebp - hexvar ] cmovne eax , edi mov ecx , dword ptr [ ebp - hexvar ] or ecx , esi mov esi , dword ptr [ ebp - hexvar ] or esi , eax mov eax , ecx mov dword ptr [ ebp - hexvar ] , edx mov edx , esi add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } mov r6 , r2 mov r2 , r1 ldr r4 , [ sp , hexvar ] ldr r1 , [ r6 ] add ip , r4 , num bic ip , ip , num add fp , ip , hexvar mov sl , r0 add r1 , fp , r1 mov r0 , r2 mov sb , r3 bl hexvar subs r7 , r0 , num beq hexvar mov r8 , num ldr r5 , [ r6 ] ldr r2 , [ sl , num ] add r3 , fp , r5 add r5 , r7 , r5 str r3 , [ r6 ] mov r1 , r5 ldr r3 , [ r2 , hexvar ] mov r0 , num blx r3 ldr r3 , [ sl , num ] add r1 , r5 , num ldr r3 , [ r3 , hexvar ] mov r0 , r4 blx r3 ldr r3 , [ sl , num ] add r1 , r5 , num ldr r3 , [ r3 , hexvar ] ldr r0 , [ pc , hexvar ] blx r3 add r6 , r5 , hexvar mov r2 , num ldr r1 , [ pc , hexvar ] add r0 , r5 , hexvar bl hexvar mov r1 , sb mov r0 , r6 strb r8 , [ r5 , hexvar ] strb r8 , [ r5 , hexvar ] mov r2 , r4 bl hexvar tst r4 , num add r0 , r6 , r4 beq hexvar mov r1 , r8 mov r2 , r0 strb r1 , [ r2 ] , num add r3 , r2 , r4 sub r3 , r3 , r0 tst r3 , num bne hexvar mov r0 , r7 pop { r3 , r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push ebp mov ebp , esp sub esp , hexvar movss xmm0 , dword ptr [ ebp + num ] movss dword ptr [ ebp - num ] , xmm0 movss xmm0 , dword ptr [ hexvar ] mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx movss xmm1 , dword ptr [ ebp - num ] movss dword ptr [ ecx ] , xmm1 movss xmm2 , dword ptr [ ecx ] ucomiss xmm2 , xmm0 seta dl mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov byte ptr [ ebp - hexvar ] , dl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar movss xmm0 , dword ptr [ hexvar ] mov eax , dword ptr [ ebp - hexvar ] movss dword ptr [ eax ] , xmm0 jmp hexvar mov eax , dword ptr [ ebp - hexvar ] movss xmm0 , dword ptr [ eax ] cvtss2sd xmm0 , xmm0 xorps xmm1 , xmm1 ucomisd xmm1 , xmm0 seta cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar xorps xmm0 , xmm0 mov eax , dword ptr [ ebp - hexvar ] movss dword ptr [ eax ] , xmm0 jmp hexvar mov eax , dword ptr [ ebp - hexvar ] movss xmm0 , dword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] movss dword ptr [ ecx ] , xmm0 jmp hexvar mov eax , dword ptr [ ebp - hexvar ] movss xmm0 , dword ptr [ eax ] movss dword ptr [ ebp - num ] , xmm0 fld dword ptr [ ebp - num ] mov esp , ebp pop ebp ret
mov r3 , num ldr ip , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] str lr , [ sp , - num ] ! ldr lr , [ pc , hexvar ] str ip , [ r0 , num ] add ip , ip , hexvar str lr , [ r0 ] add ip , ip , hexvar ldr lr , [ pc , hexvar ] str r1 , [ r0 , num ] str r2 , [ r0 , hexvar ] ldr r1 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] add ip , ip , hexvar str lr , [ r0 , hexvar ] str ip , [ r0 , hexvar ] str r1 , [ r0 , hexvar ] str r2 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] pop { pc }
test rdi , rdi je hexvar push rbx mov rax , rsi mov rcx , rdi movsxd rbx , edx mov esi , num mov rdi , rax mov rdx , rbx call hexvar mov rcx , rax mov edx , ebx xor eax , eax cmp rcx , rdx sete al pop rbx ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s2 , hexvar ( sp ) move s2 , a0 sw s4 , hexvar ( sp ) addiu a0 , zero , num sw s3 , hexvar ( sp ) move s4 , a3 sw s1 , hexvar ( sp ) move s3 , a2 sw s0 , hexvar ( sp ) sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal - hexvar move s1 , a1 lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 lw t9 , - hexvar ( gp ) move a1 , s1 jalr t9 move a0 , v0 bnez v0 , hexvar lw gp , hexvar ( sp ) lui a3 , hexvar lw t9 , - hexvar ( gp ) addiu v0 , zero , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar sw v0 , hexvar ( sp ) addiu a1 , zero , hexvar jalr t9 addiu a0 , zero , hexvar lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) bal - hexvar move a0 , s0 move v0 , zero lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lw ra , hexvar ( sp ) move a3 , s4 lw s1 , hexvar ( sp ) move a2 , s3 lw s4 , hexvar ( sp ) move a1 , s0 lw s3 , hexvar ( sp ) move a0 , s2 lw s0 , hexvar ( sp ) lw s2 , hexvar ( sp ) j hexvar addiu sp , sp , hexvar
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] xor edx , edx mov esi , dword ptr [ hexvar ] sub edx , num sub esi , edx mov dword ptr [ hexvar ] , esi mov edx , dword ptr [ hexvar ] mov esi , dword ptr [ hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ hexvar ] , eax imul eax , dword ptr [ ebp + num ] , hexvar lea ecx , [ hexvar ] add ecx , eax mov eax , dword ptr [ hexvar ] mov edx , dword ptr [ hexvar ] sub edx , num mov dword ptr [ eax + edx * num ] , ecx cmp dword ptr [ ebp + hexvar ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ hexvar ] sub edx , num mov ecx , dword ptr [ ecx + edx * num ] mov dword ptr [ ecx + hexvar ] , eax imul eax , dword ptr [ ebp + num ] , hexvar lea ecx , [ hexvar ] add ecx , eax test byte ptr [ ecx + hexvar ] , num je hexvar lea eax , [ hexvar ] mov dword ptr [ esp ] , eax lea eax , [ hexvar ] mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , hexvar lea eax , [ hexvar ] mov dword ptr [ esp + hexvar ] , eax call hexvar imul eax , dword ptr [ ebp + num ] , hexvar lea ecx , [ hexvar ] add ecx , eax mov byte ptr [ ecx + hexvar ] , num add esp , hexvar pop esi pop ebp ret
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , num ] ldr r3 , [ sp , num ] cmp r3 , num bne hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] add r3 , r3 , hexvar mov r0 , r3 bl hexvar mov r3 , r0 cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , hexvar mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar ldr r3 , [ pc , hexvar ] str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , num mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r0 , [ sp , num ] bl hexvar ldr r2 , [ sp , num ] mov r1 , num ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldr r1 , [ sp , hexvar ] mov r0 , r3 bl hexvar str r0 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , esp add eax , - hexvar mov esp , eax mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , ecx mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] sub esp , hexvar mov dword ptr [ esp ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , eax call hexvar add esp , hexvar cmp eax , num je hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - hexvar ] cmp eax , hexvar jne hexvar call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , hexvar jmp hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax xor eax , eax mov ecx , dword ptr [ ebp - hexvar ] cmp ecx , num mov edx , hexvar cmove edx , eax mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov esp , ebp pop ebp ret
cmp r1 , r2 beq hexvar push { r4 , r5 , r6 , r7 , r8 , lr } mov r5 , r2 mov r7 , r1 mov r6 , r0 mov r4 , r1 b hexvar ldr r4 , [ r4 ] cmp r5 , r4 beq hexvar ldr r1 , [ r4 , num ] mov r0 , r6 bl hexvar cmp r0 , num bne hexvar ldr r3 , [ r4 , num ] ldr r3 , [ r3 , hexvar ] add r2 , r3 , hexvar ldrh r2 , [ r2 , num ] tst r2 , hexvar beq hexvar mov r2 , r4 mov r1 , r7 ldr r0 , [ r3 , hexvar ] bl hexvar cmp r0 , num beq hexvar mov r0 , num pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
push rbp push r15 push r14 push r12 push rbx test rdi , rdi je hexvar mov r14 , rsi test rsi , rsi je hexvar mov r15d , ecx mov r12 , rdx mov rbp , rdi mov rdi , r14 call qword ptr [ rip ] mov ebx , eax mov rdi , rbp mov esi , eax jmp hexvar mov rdi , rbp mov esi , ebx mov rdx , r12 mov ecx , r15d call hexvar test eax , eax jne hexvar mov rdi , rbp xor esi , esi call qword ptr [ rip ] cmp eax , num jne hexvar mov rdi , rbp mov rsi , r14 call qword ptr [ rip ] cmp eax , - num jne hexvar xor eax , eax pop rbx pop r12 pop r14 pop r15 pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov byte ptr [ ebp - num ] , num mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov ecx , esp mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + num ] , hexvar call hexvar cmp eax , num je hexvar mov eax , dword ptr [ ebp - num ] mov ecx , esp mov dword ptr [ ecx ] , eax mov dword ptr [ ecx + num ] , hexvar call hexvar cmp eax , num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + hexvar ] , eax mov eax , dword ptr [ esp + hexvar ] mov dword ptr [ esp + num ] , eax mov eax , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , eax xor eax , eax mov dword ptr [ esp + hexvar ] , num mov eax , dword ptr [ esp + num ] mov eax , dword ptr [ eax + hexvar ] sub esp , num lea edx , [ esp + hexvar ] push edx push eax call hexvar add esp , hexvar mov dword ptr [ esp + hexvar ] , eax cmp dword ptr [ esp + hexvar ] , num jg hexvar mov eax , num jmp hexvar mov esi , dword ptr [ esp + hexvar ] sub esp , hexvar push num call hexvar add esp , hexvar sub esp , num push dword ptr [ esp + hexvar ] push esi push num push num push eax push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar test eax , eax je hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] sub esp , hexvar push eax call hexvar add esp , hexvar mov eax , num mov ecx , dword ptr [ esp + hexvar ] xor ecx , dword ptr gs : [ hexvar ] je hexvar call hexvar add esp , hexvar pop ebx pop esi ret
mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov rcx , qword ptr [ rdi ] xor eax , eax cmp dword ptr [ rcx + num ] , num je hexvar ret nop word ptr [ rax + rax ] mov rdx , qword ptr [ rdx ] cmp dword ptr [ rdx + num ] , num jne hexvar test byte ptr [ rdx + hexvar ] , hexvar mov eax , num jne hexvar mov rsi , qword ptr [ rsi ] lea rdi , [ rip + hexvar ] mov ecx , hexvar repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] seta al sbb al , num test al , al sete al movzx eax , al ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar mov r5 , r0 mov sb , r1 str r2 , [ sp , hexvar ] mov r8 , r3 add r6 , r0 , hexvar ldr r7 , [ r0 , hexvar ] sub r3 , r7 , num str r3 , [ sp , hexvar ] mov r4 , num add fp , r8 , num str r3 , [ sp , hexvar ] add r3 , r4 , num cmp r3 , r7 blo hexvar add r3 , fp , r4 cmp r7 , r3 blo hexvar add sl , r4 , num mov r2 , r8 ldr r1 , [ sp , hexvar ] add r0 , r6 , sl bl hexvar cmp r0 , num bne hexvar mov r3 , num str r3 , [ r5 , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ r5 , hexvar ] ldr r3 , [ sp , hexvar ] str r3 , [ r5 , hexvar ] ldr r3 , [ sb ] add r3 , r3 , num add r8 , r3 , r8 str r8 , [ sb ] mov r3 , num strb r3 , [ r6 , r4 ] ldrb r3 , [ r5 , hexvar ] cmp r4 , num orrne r3 , r3 , num cmp r3 , num beq hexvar str r4 , [ sp , hexvar ] add r3 , r5 , hexvar ldm r3 , { r2 , r3 } str r2 , [ sp , hexvar ] str r3 , [ sp , hexvar ] str r6 , [ sp , num ] ldr r3 , [ r5 , hexvar ] str r3 , [ sp , num ] ldr r3 , [ r5 , hexvar ] str r3 , [ sp ] ldr r6 , [ r5 , num ] ldr r3 , [ r5 , hexvar ] ldr r2 , [ r5 , hexvar ] mov r1 , num ldr r0 , [ r5 , num ] blx r6 cmp r0 , num streq r0 , [ r5 , hexvar ] beq hexvar mov r3 , num strb r3 , [ r5 , hexvar ] add r3 , r5 , hexvar ldm r3 , { r2 , r3 } adds r0 , r2 , r4 adc r1 , r3 , num str r0 , [ r5 , hexvar ] str r1 , [ r5 , hexvar ] ldr r0 , [ sb ] add r4 , r0 , r4 str r4 , [ sb ] mov r0 , num add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call eax mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax + num ] , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov dword ptr [ ebp - hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] cmp eax , dword ptr [ ebp - hexvar ] mov cl , num mov byte ptr [ ebp - hexvar ] , cl je hexvar mov eax , dword ptr [ ebp - hexvar ] cmp dword ptr [ eax + num ] , num sete cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov dword ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax + num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar xor eax , eax mov qword ptr [ rbp - num ] , rdi mov rdi , qword ptr [ rbp - num ] mov rdi , qword ptr [ rdi + hexvar ] mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rdi + hexvar ] and ecx , hexvar cmp eax , ecx jne hexvar jmp hexvar mov rax , qword ptr [ num ] mov rdi , qword ptr [ num ] movabs rsi , num mov edx , hexvar movabs rcx , num call rax xor eax , eax mov ecx , eax mov rdx , qword ptr [ rbp - num ] cmp rcx , qword ptr [ rdx + hexvar ] je hexvar mov rdi , qword ptr [ rbp - hexvar ] movabs rsi , num mov al , num call hexvar jmp hexvar mov rdi , qword ptr [ rbp - num ] call hexvar add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax sete al mov byte ptr [ rbp - hexvar ] , al cmp byte ptr [ rbp - hexvar ] , num je hexvar lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax mov qword ptr [ rcx + num ] , rdx movzx eax , byte ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] xor rdx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar movabs rax , num mov rdi , rax mov rsi , rax movabs rdx , num call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] movabs rdx , num mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov ecx , dword ptr [ rax + hexvar ] xor ecx , num mov dword ptr [ rax + hexvar ] , ecx mov rdi , qword ptr [ rbp - num ] call hexvar mov edx , hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , rdx add rsp , hexvar pop rbp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) sw a2 , hexvar ( fp ) lw v0 , hexvar ( fp ) beqz v0 , hexvar nop lw v0 , hexvar ( fp ) lw v0 , num ( v0 ) blez v0 , hexvar nop lw v0 , hexvar ( fp ) beqz v0 , hexvar nop lw v0 , hexvar ( fp ) lw v0 , num ( v0 )
push rbp mov rbp , rsp sub rsp , hexvar movabs rdi , hexvar call hexvar movabs rdi , hexvar mov dword ptr [ rbp - num ] , eax call hexvar movabs rdi , hexvar mov dword ptr [ rbp - num ] , eax call hexvar mov dword ptr [ rbp - hexvar ] , eax add rsp , hexvar pop rbp ret
mov ip , num push { r4 , r5 , r6 , lr } ldr r5 , [ sp , hexvar ] cmp r2 , num str ip , [ r5 ] movne r6 , num addne r2 , r1 , r2 bne hexvar b hexvar orr ip , lr , ip , lsl num stm r0 , { r6 , ip } cmp r1 , r2 beq hexvar ldrb ip , [ r1 ] , num cmp ip , hexvar sub lr , ip , hexvar beq hexvar cmp lr , num bhi hexvar sub ip , ip , hexvar clz ip , ip ldr lr , [ r0 ] lsr ip , ip , num cmp lr , num sub r4 , lr , num ldr lr , [ r0 , num ] beq hexvar orr ip , lr , ip , lsl r4 cmp r4 , num stm r0 , { r4 , ip } bne hexvar str r4 , [ r0 , num ] ldr lr , [ r5 ] strb ip , [ r3 ] cmp r1 , r2 add ip , lr , num str ip , [ r5 ] add r3 , r3 , num str r4 , [ r0 ] bne hexvar mov r0 , num pop { r4 , r5 , r6 , pc } andeq r0 , r0 , r1 andeq r0 , r0 , r0
sub rsp , num mov r8d , dword ptr [ rip + hexvar ] test r8d , r8d je hexvar cmp dword ptr [ rip + hexvar ] , num je hexvar cmp edi , hexvar je hexvar cmp edi , hexvar je hexvar cmp edi , hexvar ja hexvar mov edx , edi lea rcx , [ rip + hexvar ] movsxd rax , dword ptr [ rcx + rdx * num ] add rax , rcx jmp rax cmp dword ptr [ rip + hexvar ] , num je hexvar lea rdi , [ rip + hexvar ] call hexvar add rsp , num ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov dword ptr [ rbp - hexvar ] , num mov rdx , qword ptr [ rbp - num ] mov rdx , qword ptr [ rdx + hexvar ] mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] call rax mov eax , dword ptr [ rbp - hexvar ] add eax , num mov dword ptr [ rbp - hexvar ] , eax mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] cmp eax , dword ptr [ rcx + hexvar ] je hexvar movabs rdi , hexvar mov esi , hexvar movabs rdx , hexvar call hexvar add rsp , hexvar pop rbp ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi lea edx , [ ebp - num ] mov dword ptr [ esp + num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp dword ptr [ ebp - hexvar ] , - num jne hexvar xor eax , eax mov dword ptr [ ebp - hexvar ] , eax jmp hexvar cmp dword ptr [ ebp - hexvar ] , num jne hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop ebp ret
push rbx mov rbx , rdi lea rdi , [ rdi + num ] call hexvar lea rdi , [ rbx + hexvar ] call hexvar lea rdi , [ rbx + hexvar ] call hexvar mov dword ptr [ rbx + hexvar ] , num mov eax , num pop rbx ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw fp , hexvar ( sp ) move fp , sp lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( fp ) sw a1 , hexvar ( fp ) lw a0 , hexvar ( fp ) jal hexvar nop lw gp , hexvar ( fp ) beqz v0 , hexvar nop move v0 , zero b hexvar nop lw v0 , hexvar ( fp ) sw v0 , hexvar ( fp ) lw v0 , hexvar ( fp ) lw v1 , ( v0 )
push r14 push rbx push rax mov r14 , rsi mov rbx , qword ptr [ rdi + hexvar ] call hexvar mov rdi , rbx mov esi , eax mov rdx , r14 call hexvar mov eax , num add rsp , num pop rbx pop r14 ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov esi , dword ptr [ esi + hexvar ] test esi , esi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , num mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ecx + hexvar ] mov ecx , dword ptr [ ecx + hexvar ] sub edx , eax sbb ecx , num mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , ecx jae hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ecx + hexvar ] mov ecx , dword ptr [ ecx + hexvar ] xor esi , esi sub eax , edx sbb esi , ecx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , esi jae hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ecx + hexvar ] mov ecx , dword ptr [ ecx + hexvar ] xor eax , edx or eax , ecx mov dword ptr [ ebp - hexvar ] , eax jne hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop esi pop ebp ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar addiu a2 , zero , hexvar sw s2 , hexvar ( sp ) lui s2 , hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw s0 , hexvar ( sp ) addiu a1 , s2 , hexvar sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 addiu a0 , zero , hexvar lw gp , hexvar ( sp ) beqz v0 , hexvar move s0 , v0 beqz s1 , hexvar nop sw s1 , ( v0 )
push ebp push edi push esi push ebx mov esi , eax call hexvar add ebx , hexvar sub esp , hexvar push num call hexvar add esp , hexvar test eax , eax js hexvar sub esp , hexvar push num call hexvar add esp , hexvar test eax , eax js hexvar call hexvar call hexvar sub esp , hexvar push esi call hexvar sub esp , hexvar push dword ptr [ ebx + hexvar ] call hexvar mov ebp , eax lea eax , [ ebx - hexvar ] add esp , hexvar push num push eax push num call hexvar mov edi , eax call hexvar push ebp push edi push dword ptr [ eax ] push num call hexvar add esp , hexvar jmp hexvar sub esp , hexvar push dword ptr [ ebx + hexvar ] call hexvar mov ebp , eax lea eax , [ ebx - hexvar ] add esp , hexvar push num push eax push num call hexvar mov edi , eax call hexvar push ebp push edi push dword ptr [ eax ] push num call hexvar add esp , hexvar jmp hexvar lea esi , [ esi ]
push ebp push edi mov edi , ecx push esi push ebx mov esi , edx call hexvar add ebx , hexvar sub esp , hexvar mov ecx , dword ptr gs : [ hexvar ] mov dword ptr [ esp + hexvar ] , ecx xor ecx , ecx mov ebp , dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push edi push edx push eax call hexvar add esp , hexvar test edx , edx js hexvar mov edi , dword ptr [ esp + hexvar ] xor edi , dword ptr gs : [ hexvar ] jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push rax mov rax , qword ptr [ rdi ] mov r8 , qword ptr [ rax + hexvar ] test r8 , r8 je hexvar cmp rax , qword ptr [ rsi ] jne hexvar cmp rax , qword ptr [ rdx ] je hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar mov eax , hexvar pop rcx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov edx , ecx sub edx , num mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jb hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] add eax , - num sub eax , num mov dword ptr [ ebp - hexvar ] , eax ja hexvar jmp hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar jmp hexvar mov dword ptr [ ebp - num ] , hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp push ebx sub esp , hexvar xor eax , eax mov ecx , esp add ecx , - hexvar mov esp , ecx cmp eax , dword ptr [ hexvar ] sete dl mov dword ptr [ ebp - num ] , ecx mov byte ptr [ ebp - num ] , dl mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax ] , num mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] shl ecx , num lea edx , [ hexvar ] add edx , ecx cmp dword ptr [ edx + num ] , num setne bl mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] shl ecx , num lea edx , [ hexvar ] add edx , ecx mov ecx , num cmp ecx , dword ptr [ edx ] sete bl mov byte ptr [ ebp - hexvar ] , bl mov al , byte ptr [ ebp - hexvar ] test al , num jne hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] shl ecx , num lea edx , [ hexvar ] add edx , ecx mov dword ptr [ hexvar ] , edx jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ eax ] add ecx , num mov dword ptr [ eax ] , ecx jmp hexvar jmp hexvar mov eax , dword ptr [ hexvar ] lea esp , [ ebp - num ] pop ebx pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] cmp dword ptr [ ebp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx jne hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar xor ecx , ecx mov dl , cl cmp eax , num mov byte ptr [ ebp - hexvar ] , dl je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov byte ptr [ ebp - hexvar ] , al mov al , byte ptr [ ebp - hexvar ] and al , num mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ ebp - num ] mov dword ptr [ esp ] , ecx call hexvar test al , num jne hexvar jmp hexvar test byte ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp + num ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp + hexvar ] shl eax , num mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp + num ] cmp dword ptr [ eax + num ] , num jne hexvar mov dword ptr [ ebp - num ] , hexvar jmp hexvar mov dword ptr [ ebp - num ] , num jmp hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] xor ecx , ecx mov edx , dword ptr [ ebp + num ] mov dword ptr [ edx + hexvar ] , hexvar mov dword ptr [ edx + num ] , hexvar mov edx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax cmp eax , - num jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar xor eax , eax mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , eax cmp eax , - num je hexvar mov eax , dword ptr [ ebp - hexvar ] cmp eax , dword ptr [ ebp - num ] je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov byte ptr [ ebp - num ] , num mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
mov rcx , qword ptr [ rdi ] bswap rcx mov rdx , qword ptr [ rsi ] bswap rdx cmp rcx , rdx jne hexvar mov rcx , qword ptr [ rdi + num ] mov rdx , qword ptr [ rsi + num ] bswap rcx bswap rdx xor eax , eax cmp rcx , rdx jne hexvar ret
push ebp push edi xor ebp , ebp push esi push ebx call hexvar add ebx , hexvar sub esp , hexvar mov edi , dword ptr [ esp + hexvar ] movzx edx , byte ptr [ edi ] mov esi , edi test dl , dl jne hexvar jmp hexvar nop lea esi , [ esi ] add esi , num movzx edx , byte ptr [ esi ] test dl , dl je hexvar cmp dl , hexvar jne hexvar mov byte ptr [ esi ] , num add esi , num cmp byte ptr [ edi ] , num mov byte ptr [ esp + hexvar ] , dl je hexvar sub esp , hexvar push edi call hexvar add esp , hexvar test eax , eax movzx edx , byte ptr [ esp + hexvar ] jle hexvar add ebp , eax test dl , dl jne hexvar cmp ebp , hexvar jle hexvar mov dword ptr [ ebx + hexvar ] , num add esp , hexvar mov eax , ebp pop ebx pop esi pop edi pop ebp ret
mov edx , dword ptr [ rdi + hexvar ] mov r8 , rsi cmp edx , num sete cl cmp edx , num sete al or eax , ecx mov ecx , dword ptr [ rsi + hexvar ] cmp ecx , num sete sil cmp ecx , num sete dl or edx , esi cmp dl , al jb hexvar mov eax , num jbe hexvar ret nop dword ptr [ rax ] mov rsi , qword ptr [ rdi + hexvar ] cmp qword ptr [ r8 + hexvar ] , rsi jg hexvar jl hexvar mov rax , qword ptr [ rdi + hexvar ] sub eax , dword ptr [ r8 + hexvar ] jne hexvar mov rsi , qword ptr [ rdi ] mov rdi , qword ptr [ r8 ] jmp hexvar nop dword ptr [ rax ] mov eax , hexvar ret
push ebp push edi push esi push ebx sub esp , hexvar call hexvar add ebx , hexvar mov esi , dword ptr [ esp + hexvar ] mov edi , dword ptr [ esp + hexvar ] mov eax , hexvar test edi , edi je hexvar mov eax , num cmp dword ptr [ esi + num ] , num jne hexvar add esp , hexvar pop ebx pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , num mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] cmp dword ptr [ ecx + hexvar ] , num mov dl , num mov dword ptr [ ebp - num ] , eax mov byte ptr [ ebp - num ] , dl je hexvar mov eax , dword ptr [ ebp + num ] cmp dword ptr [ eax + hexvar ] , num sete cl mov byte ptr [ ebp - num ] , cl mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , num pop ebp ret
push edi push esi push ebx mov esi , dword ptr [ esp + hexvar ] call hexvar add ebx , hexvar sub esp , num push num push esi call hexvar mov dword ptr [ esp ] , esi mov edi , eax call hexvar add esp , hexvar cmp eax , - num je hexvar push num push num push num push esi call hexvar add esp , hexvar test edi , edi setne dl test eax , eax sete al movzx eax , al and eax , edx mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ edx + num ] , eax xor eax , eax pop ebx pop esi pop edi ret
push r13 push r12 push rbp push rbx sub rsp , num mov rbx , qword ptr [ rdi + hexvar ] test rbx , rbx je hexvar mov rbp , rdi mov r13 , rsi mov r12 , rdx jmp hexvar nop dword ptr [ rax ] mov rbx , qword ptr [ rbx + hexvar ] test rbx , rbx je hexvar mov rdx , r12 mov rsi , rbx mov rdi , rbp call r13
push { r4 , r5 , r6 , r7 , r8 , lr } ldr r6 , [ pc , hexvar ] sub sp , sp , hexvar ldr r3 , [ r6 ] cmp r1 , num mov r5 , r1 mov r4 , r0 str r1 , [ r0 , hexvar ] str r3 , [ sp , hexvar ] moveq r8 , r1 bne hexvar ldr r3 , [ r4 ] mov r0 , r8 ldr r3 , [ r3 , num ] mov r1 , sp ldr r3 , [ r3 , hexvar ] blx r3 mov r2 , hexvar ldr r3 , [ r4 ] strh r2 , [ sp , num ] ldr r3 , [ r3 , num ] add r1 , sp , num ldr r3 , [ r3 , hexvar ] mov r0 , num blx r3 ldr r3 , [ r4 ] add r1 , sp , num ldr r3 , [ r3 , num ] mov r0 , num ldr r3 , [ r3 , hexvar ] blx r3 ldr r3 , [ r4 , num ] ldr r1 , [ r4 , hexvar ] add r2 , r3 , hexvar cmp r2 , r1 bhi hexvar ldr r0 , [ r4 , num ] add r0 , r0 , r3 mov r1 , sp mov r2 , hexvar bl hexvar mov r0 , num ldr r3 , [ r4 , num ] add r3 , r3 , hexvar str r3 , [ r4 , num ] ldr r2 , [ sp , hexvar ] ldr r3 , [ r6 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , pc } andeq r0 , r0 , r0 ldrbvc r5 , [ r3 , hexvar ] !
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx xor eax , eax mov edx , eax mov edi , num mov esi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - num ] call hexvar mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rdx ] , rax mov rdi , qword ptr [ rbp - num ] call hexvar mov rdx , qword ptr [ rbp - hexvar ] add rdx , num mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rcx mov rdx , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rdx + num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ rax + num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rdi , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rdi mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar mov rsi , qword ptr [ rbp - hexvar ] mov qword ptr [ rsi + hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] add rsp , hexvar pop rbp ret
adds r3 , r0 , num movne r3 , num cmp r1 , num movne r3 , num cmp r3 , num push { r4 , lr } bne hexvar mov r4 , r1 bl hexvar adds r4 , r4 , num movne r4 , num cmp r0 , num movne r4 , num cmp r4 , num popeq { r4 , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - num ] , ecx mov eax , dword ptr [ ebp - num ] mov dword ptr [ esp ] , eax call hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , ecx call hexvar add esp , hexvar pop ebp ret
push rbp push r15 push r14 push r12 push rbx sub rsp , hexvar mov ebp , edx mov rbx , rsi mov r14 , rdi mov qword ptr [ rsp + num ] , num call hexvar mov r12 , rax movsxd rdx , ebp lea rdi , [ rsp + num ] mov rsi , rbx call hexvar xor ebp , ebp test rax , rax je hexvar mov rdi , qword ptr [ rsp + num ] call hexvar mov r15d , eax mov rdi , qword ptr [ rsp + num ] call hexvar test r12 , r12 jne hexvar call hexvar mov r12 , rax mov rdi , r14 mov esi , hexvar mov rdx , rax call hexvar test eax , eax je hexvar mov rdi , r12 mov esi , r15d call hexvar xor ebp , ebp test eax , eax setne bpl mov eax , ebp add rsp , hexvar pop rbx pop r12 pop r14 pop r15 pop rbp ret
push rbp push rbx sub rsp , hexvar mov ebp , edi cmp qword ptr [ rip + hexvar ] , num jne hexvar mov edx , hexvar mov edi , num mov esi , num mov ecx , hexvar call hexvar cmp qword ptr [ rip + hexvar ] , num je hexvar mov edx , hexvar mov edi , hexvar mov esi , num mov ecx , hexvar call hexvar jmp hexvar mov edi , hexvar mov esi , hexvar call hexvar mov rbx , rax mov qword ptr [ rip + hexvar ] , rax mov edx , hexvar mov edi , hexvar mov esi , num mov ecx , hexvar call hexvar test rbx , rbx je hexvar mov dword ptr [ rsp ] , ebp mov edx , hexvar mov edi , num mov esi , num mov ecx , hexvar call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rsp call hexvar test rax , rax je hexvar mov rbx , rax mov edx , hexvar mov edi , hexvar mov esi , num mov ecx , hexvar call hexvar jmp hexvar mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov dword ptr [ rax ] , ebp mov dword ptr [ rax + hexvar ] , num call hexvar mov qword ptr [ rbx + num ] , rax test rax , rax je hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbx call hexvar jmp hexvar mov rdi , rbx call hexvar mov edx , hexvar mov edi , hexvar mov esi , num mov ecx , hexvar call hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor ebx , ebx mov rax , rbx add rsp , hexvar pop rbx pop rbp ret
cmp r0 , num sbcs r3 , r1 , num mov r3 , num push { r4 , r5 , r6 , lr } mov r4 , r0 mov r5 , r1 add r6 , r2 , hexvar strb r3 , [ r2 , hexvar ] blt hexvar mov r0 , r4 mov r1 , r5 mov r2 , hexvar mov r3 , num bl hexvar add r2 , r2 , hexvar strb r2 , [ r6 , - num ] ! mov r0 , r4 mov r1 , r5 mov r3 , num mov r2 , hexvar bl hexvar mov r4 , r0 mov r5 , r1 orrs r3 , r4 , r5 bne hexvar mov r0 , r6 pop { r4 , r5 , r6 , pc }
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov dword ptr [ ebp - num ] , eax xor eax , eax mov cl , al mov eax , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax + edx ] cmp eax , hexvar mov byte ptr [ ebp - num ] , cl je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax + ecx ] cmp eax , num setne dl mov byte ptr [ ebp - num ] , dl mov al , byte ptr [ ebp - num ] test al , num jne hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui a2 , hexvar addiu a2 , a2 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) lui v0 , hexvar addiu a2 , v0 , hexvar lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) lw v0 , - hexvar ( gp ) move t9 , v0 bal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) addiu sp , sp , hexvar jr ra nop
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov al , byte ptr [ ebp + num ] cmp dword ptr [ hexvar ] , num mov byte ptr [ ebp - num ] , al jne hexvar mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov al , byte ptr [ hexvar ] xor al , hexvar mov byte ptr [ hexvar ] , al mov dword ptr [ hexvar ] , num mov eax , esp add eax , - hexvar mov esp , eax mov ecx , esp add ecx , - hexvar mov esp , ecx mov dl , byte ptr [ ebp - num ] mov byte ptr [ eax ] , dl sub esp , hexvar mov dword ptr [ esp ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax call hexvar mov eax , dword ptr [ eax ] mov ecx , dword ptr [ ebp - hexvar ] movzx esi , byte ptr [ ecx ] movzx eax , word ptr [ eax + esi * num ] and eax , hexvar cmp eax , num je hexvar mov eax , dword ptr [ ebp - hexvar ] mov cl , byte ptr [ eax ] mov edx , dword ptr [ ebp - hexvar ] mov esi , dword ptr [ edx ] mov byte ptr [ esi ] , cl mov esi , dword ptr [ edx ] mov byte ptr [ esi + num ] , num jmp hexvar lea eax , [ hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov edx , dword ptr [ ecx ] mov esi , dword ptr [ ebp - hexvar ] movzx edi , byte ptr [ esi ] sub esp , hexvar mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , eax mov dword ptr [ esp + num ] , edi call hexvar add esp , hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov eax , dword ptr [ eax ] lea esp , [ ebp - num ] pop esi pop edi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov byte ptr [ ebp - num ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ hexvar ] , num je hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp + num ] cmp dword ptr [ eax ] , - num je hexvar jmp hexvar call hexvar mov eax , dword ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar and al , num movzx ecx , al mov al , byte ptr [ ebp - num ] and al , num movzx edx , al and edx , ecx cmp edx , num setne al and al , num mov byte ptr [ ebp - num ] , al call hexvar and al , num movzx ecx , al mov al , byte ptr [ ebp - num ] and al , num movzx edx , al and edx , ecx cmp edx , num setne al and al , num mov byte ptr [ ebp - num ] , al jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push r14 push rbx push rax xor eax , eax test rdi , rdi je hexvar mov rbx , rdi mov rcx , qword ptr [ rdi ] mov rcx , qword ptr [ rcx + hexvar ] test rcx , rcx je hexvar mov r14 , rsi cmp qword ptr [ rcx ] , rsi je hexvar mov rdi , r14 call hexvar test rax , rax je hexvar mov r14 , rax mov rax , qword ptr [ rbx ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax ] call hexvar mov rax , qword ptr [ rbx ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rax ] , r14 jmp hexvar xor r14d , r14d xor eax , eax test r14 , r14 setne al add rsp , num pop rbx pop r14 ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr r4 , [ pc , hexvar ] ldr r8 , [ r4 , num ] ldr r6 , [ r4 ] add r5 , r8 , num ldr r7 , [ r6 , r5 , lsl num ] add sb , r6 , r5 , lsl num mov r0 , r7 bl hexvar cmp r0 , num bne hexvar ldr sl , [ sb , - num ] ldr r1 , [ pc , hexvar ] mov r0 , sl bl hexvar cmp r0 , num bne hexvar ldr r3 , [ r4 , num ] str r5 , [ r4 , num ] cmp r5 , r3 bge hexvar bl hexvar eor r0 , r0 , num and r0 , r0 , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc } andeq r0 , r0 , r0 strpl r0 , [ pc , - hexvar ]
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } sub sp , sp , hexvar stmib sp , { r0 , r1 } mov r0 , hexvar mov r4 , r1 mov r5 , r2 bl hexvar mov r1 , num mov sb , r0 mov r0 , r4 bl hexvar subs r4 , r0 , num blt hexvar mov r2 , r5 mov r1 , r4 mov r0 , num bl hexvar cmp r0 , num blt hexvar ldr r6 , [ r5 , hexvar ] str r6 , [ sb , hexvar ] mov r0 , r6 bl hexvar subs r5 , r0 , num beq hexvar mov r2 , r6 mov r1 , r5 mov r0 , r4 bl hexvar ldr r3 , [ sb , hexvar ] cmp r0 , r3 beq hexvar mov r0 , r5 bl hexvar mov r0 , r4 bl hexvar mov r0 , sb mov sb , num bl hexvar mov r0 , sb add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc } andeq r0 , r0 , r0 andeq r0 , r0 , r0
mov eax , dword ptr [ ebx + hexvar ] mov eax , dword ptr [ eax ] call hexvar sub esp , hexvar push dword ptr [ ebp - hexvar ] call hexvar mov dword ptr [ ebp - hexvar ] , num add esp , hexvar mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , num mov dword ptr [ ebp - hexvar ] , hexvar sub esp , hexvar lea eax , [ ebp - hexvar ] push eax lea eax , [ ebx - hexvar ] push eax lea eax , [ ebx - hexvar ] push eax push edi push dword ptr [ ebp - hexvar ] call hexvar mov esi , eax add esp , hexvar cmp eax , - num je hexvar lea eax , [ eax - hexvar ] cmp eax , num jbe hexvar add esi , hexvar cmp esi , hexvar ja hexvar mov eax , ebx add eax , dword ptr [ ebx + esi * num - hexvar ] jmp eax
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] str r3 , [ sp , num ] ldr r3 , [ sp , hexvar ] cmp r3 , num beq hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldrb r3 , [ r3 , hexvar ] add r3 , r3 , num ldr r2 , [ sp , num ] cmp r2 , r3 bge hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] ldr r2 , [ pc , hexvar ] ldr r1 , [ pc , hexvar ] mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldrb r2 , [ r3 , hexvar ] ldr r3 , [ sp , hexvar ] strb r2 , [ r3 ] ldr r3 , [ sp , hexvar ] add r3 , r3 , num str r3 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] add r1 , r3 , hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldrb r3 , [ r3 , hexvar ] mov r2 , r3 ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] ldr r3 , [ r3 , hexvar ] ldrb r3 , [ r3 , hexvar ] add r2 , r3 , num ldr r3 , [ sp , hexvar ] str r2 , [ r3 ] mov r3 , num mov r0 , r3 add sp , sp , hexvar pop { pc }
lui gp , hexvar lw v0 , ( a0 ) addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw s1 , hexvar ( sp ) move s1 , a1 sw s0 , hexvar ( sp ) move s0 , a0 sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) beqz v0 , hexvar sw gp , hexvar ( sp ) lw a1 , num ( a0 ) bnez a1 , hexvar lw s2 , num ( a0 ) sw s1 , ( s2 ) addiu v0 , zero , num lw v1 , num ( a0 ) addiu v1 , v1 , num sw v1 , num ( a0 ) lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu v0 , zero , num lw t9 , - hexvar ( gp ) addiu a0 , zero , num sw v0 , ( s0 )
push r15 push r14 push rbx sub rsp , hexvar mov r8 , rsi mov r15 , rdi mov dword ptr [ rsp + num ] , hexvar mov qword ptr [ rsp + hexvar ] , num mov qword ptr [ rsp + hexvar ] , num mov qword ptr [ rsp + num ] , num lea rdi , [ rsp + num ] lea rsi , [ rsp + num ] lea rdx , [ rsp + hexvar ] lea rcx , [ rsp + hexvar ] call hexvar xor ebx , ebx test eax , eax je hexvar test r15 , r15 je hexvar mov rsi , qword ptr [ rsp + num ] mov rdi , r15 call hexvar test eax , eax je hexvar xor ebx , ebx cmp dword ptr [ rsp + num ] , - num je hexvar call hexvar test rax , rax je hexvar mov r14 , rax movsxd rsi , dword ptr [ rsp + num ] mov rdi , rax call hexvar test eax , eax je hexvar xor ebx , ebx mov rdi , r15 mov esi , hexvar mov rdx , r14 xor ecx , ecx xor r8d , r8d call hexvar test eax , eax je hexvar mov rdx , qword ptr [ rsp + hexvar ] test rdx , rdx jne hexvar jmp hexvar xor r14d , r14d jmp hexvar xor r14d , r14d xor eax , eax cmp dword ptr [ rsp + num ] , - num sete al mov ebx , num sub ebx , eax mov rdi , qword ptr [ rsp + hexvar ] call hexvar mov rdi , qword ptr [ rsp + hexvar ] call hexvar mov rdi , r14 call hexvar mov rdi , qword ptr [ rsp + num ] call hexvar mov eax , ebx add rsp , hexvar pop rbx pop r14 pop r15 ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , lr } ldr r4 , [ pc , hexvar ] ldr r5 , [ pc , hexvar ] ldr ip , [ r4 ] ldr r3 , [ r5 ] sub sp , sp , hexvar cmp ip , num str r3 , [ sp , hexvar ] bne hexvar ldr r3 , [ r4 , hexvar ] cmp r3 , num beq hexvar ldr r2 , [ sp , hexvar ] ldr r3 , [ r5 ] cmp r2 , r3 bne hexvar add sp , sp , hexvar pop { r4 , r5 , r6 , r7 , r8 , sb , sl , fp , pc }
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdi , qword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] call hexvar xor ecx , ecx cmp eax , num mov eax , num cmove ecx , eax mov eax , ecx add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar mov eax , dword ptr [ ebp - hexvar ] sub eax , hexvar mov dword ptr [ ebp - hexvar ] , eax je hexvar jmp hexvar jmp hexvar mov eax , dword ptr [ ebp - num ] cmp eax , num mov eax , hexvar mov ecx , hexvar cmovne ecx , eax mov dword ptr [ ebp - hexvar ] , ecx jmp hexvar lea eax , [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar call hexvar lea eax , [ ebp - hexvar ] mov dword ptr [ esp ] , eax call hexvar mov dword ptr [ ebp - hexvar ] , hexvar jmp hexvar call hexvar add esp , hexvar pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jmp edx mov eax , dword ptr [ ebp + num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov byte ptr [ ebp - num ] , al mov ecx , dword ptr [ ebp + hexvar ] mov edx , esp mov dword ptr [ edx ] , ecx call hexvar mov byte ptr [ ebp - num ] , al movzx ecx , byte ptr [ ebp - num ] and ecx , num mov ecx , dword ptr [ ecx * num + hexvar ] jmp ecx movzx eax , byte ptr [ ebp - num ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov dword ptr [ ebp - num ] , hexvar mov eax , dword ptr [ hexvar ] jmp eax movzx eax , byte ptr [ ebp - num ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax movzx eax , byte ptr [ ebp - num ] and eax , num mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov dword ptr [ ebp - num ] , num mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , esp mov dword ptr [ edx + num ] , ecx mov dword ptr [ edx ] , eax mov dword ptr [ edx + num ] , hexvar call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ hexvar ] jmp eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax mov rsi , qword ptr [ rdi + hexvar ] mov rdx , rsp mov edi , num call hexvar cmp eax , num sbb eax , eax and eax , hexvar add eax , num mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) lui a2 , hexvar addiu a2 , a2 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) sw a0 , hexvar ( sp ) sw a1 , hexvar ( sp ) addiu a2 , zero , - num addiu a1 , zero , hexvar lw a0 , hexvar ( sp ) jal hexvar nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) addiu a2 , zero , - num addiu a1 , zero , hexvar lw a0 , hexvar ( sp ) jal hexvar nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) bgez v0 , hexvar nop lw v0 , hexvar ( sp ) bgez v0 , hexvar nop addiu v0 , zero , num b hexvar nop lw v0 , hexvar ( sp ) bltz v0 , hexvar nop lw v0 , hexvar ( sp ) bgez v0 , hexvar nop addiu v0 , zero , - num b hexvar nop lw v0 , hexvar ( sp ) bgez v0 , hexvar nop lw v0 , hexvar ( sp ) bltz v0 , hexvar nop addiu v0 , zero , num b hexvar nop lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) jal hexvar nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw a1 , hexvar ( sp ) lw a0 , hexvar ( sp ) jal hexvar nop lw gp , hexvar ( sp ) sw v0 , hexvar ( sp ) lw v0 , hexvar ( sp ) lw v1 , num ( v0 )
str lr , [ sp , - num ] ! sub sp , sp , hexvar str r0 , [ sp , hexvar ] str r1 , [ sp , hexvar ] str r2 , [ sp , hexvar ] mov r3 , num str r3 , [ sp , hexvar ] ldr r1 , [ pc , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r3 , [ sp , hexvar ] cmp r3 , num bne hexvar mov r3 , hexvar str r3 , [ sp ] ldr r3 , [ pc , hexvar ] mov r2 , num mov r1 , hexvar mov r0 , hexvar bl hexvar mov r3 , num b hexvar ldr r2 , [ sp , hexvar ] ldr r1 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar str r0 , [ sp , hexvar ] ldr r0 , [ sp , hexvar ] bl hexvar ldr r3 , [ sp , hexvar ] mov r0 , r3 add sp , sp , hexvar pop { pc }
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , edx mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + num ] , hexvar mov dword ptr [ esp + hexvar ] , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar add esp , hexvar pop esi pop ebp ret
push rbp push rbx xor eax , eax mov ebp , esi mov ebx , edi sub rsp , num cmp byte ptr [ rip + hexvar ] , num jne hexvar call hexvar add rsp , num mov edx , ebp mov rsi , rbx pop rbx pop rbp mov rdi , rax jmp hexvar nop dword ptr [ rax ]
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , edx mov edx , dword ptr [ ebp - num ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax ] mov edx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , ecx mov dword ptr [ esp + num ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ ebp - num ] mov edx , dword ptr [ ecx + num ] mov ecx , dword ptr [ ecx + num ] xor eax , edx mov edx , dword ptr [ ebp + hexvar ] mov esi , esp mov dword ptr [ esi + num ] , edx mov dword ptr [ esi + num ] , ecx mov dword ptr [ esi ] , eax mov dword ptr [ esi + hexvar ] , num call hexvar add esp , hexvar pop esi pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] cmp qword ptr [ rax + rcx * num ] , num je hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] imul rcx , qword ptr [ rbp - hexvar ] add rax , rcx mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rax call hexvar cmp eax , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + rcx * num ] mov qword ptr [ rbp - num ] , rax jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + hexvar ] cmp byte ptr [ edx ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx je hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov ecx , dword ptr [ ebp + num ] sub eax , ecx mov dword ptr [ ebp - num ] , eax jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + num ] mov ecx , esp mov dword ptr [ ecx ] , eax call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov edi , hexvar call hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - num ] , eax jmp hexvar mov edi , hexvar call hexvar sub dword ptr [ rbp - num ] , num cmp dword ptr [ rbp - num ] , num jne hexvar nop leave ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi jmp hexvar mov rax , qword ptr [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ hexvar ] mov rdx , qword ptr [ hexvar ] shl rdx , num add rcx , rdx cmp rax , rcx jae hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] cmp rax , qword ptr [ rbp - hexvar ] jne hexvar xor eax , eax mov ecx , eax mov rdx , qword ptr [ hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rdi , qword ptr [ hexvar ] sub rcx , rdi add rsi , rcx sar rsi , num mov rcx , qword ptr [ rdx + rsi * num ] mov qword ptr [ rbp - num ] , rcx jmp hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] pop rbp ret
push r14 push rbx push rax test rdi , rdi je hexvar mov rbx , rdi mov rax , qword ptr [ rdi ] cmp qword ptr [ rax + hexvar ] , num je hexvar mov esi , hexvar mov edi , hexvar mov edx , hexvar call hexvar test rax , rax je hexvar mov r14 , rax mov rax , qword ptr [ rbx ] mov qword ptr [ r14 ] , rax mov rdi , r14 call qword ptr [ rax + hexvar ] test eax , eax jne hexvar mov rdi , r14 call hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar jmp hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , hexvar mov r8d , hexvar call hexvar xor r14d , r14d mov rax , r14 add rsp , num pop rbx pop r14 ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov byte ptr [ ebp - num ] , num mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - num ] cmp dword ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp - num ] mov eax , dword ptr [ eax ] mov dword ptr [ esp ] , eax call hexvar cmp eax , num jne hexvar mov eax , dword ptr [ ebp - num ] mov dword ptr [ eax ] , hexvar mov byte ptr [ ebp - num ] , num mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , lr } mov r5 , r1 bl hexvar subs r4 , r0 , num beq hexvar mov r2 , r5 mov r1 , num mov r0 , r4 bl hexvar mov r0 , r4 pop { r4 , r5 , r6 , pc }
push r14 push r13 mov r14 , rsi push r12 push rbp mov r13d , edx push rbx mov rax , qword ptr [ rdi ] mov rbx , rdi mov edi , num call qword ptr [ rax + hexvar ] lea r12 , [ rax + hexvar ] movsxd rsi , r13d mov rbp , rax mov rdi , r12 call hexvar mov rsi , r14 mov rdi , r12 call hexvar lea rsi , [ rip + hexvar ] mov rdi , r12 call hexvar lea rsi , [ rbp + hexvar ] lea rdi , [ rbx + hexvar ] pop rbx pop rbp pop r12 pop r13 pop r14 jmp hexvar nop dword ptr [ rax ]
test rsi , rsi je hexvar push rbx xor r8d , r8d xor ecx , ecx mov ebx , edx xor edx , edx call hexvar test rax , rax je hexvar or ebx , hexvar mov dword ptr [ rax + hexvar ] , ebx mov eax , num pop rbx ret
push ebx call hexvar add ebx , hexvar sub esp , hexvar lea eax , [ ebx - hexvar ] push num push num push num push num push num push dword ptr [ esp + hexvar ] push dword ptr [ esp + hexvar ] push eax push dword ptr [ ebx + hexvar ] call hexvar add esp , hexvar pop ebx ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp + num ] mov ecx , eax inc ecx mov dword ptr [ ebp + num ] , ecx movsx eax , byte ptr [ eax ] mov ecx , eax sub ecx , hexvar mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx ja hexvar mov eax , dword ptr [ ebp - hexvar ] mov ecx , dword ptr [ eax * num + hexvar ] jmp ecx mov eax , dword ptr [ ebp + hexvar ] and eax , hexvar cmp eax , num je hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov eax , dword ptr [ ebp + hexvar ] and eax , hexvar cmp eax , num je hexvar jmp hexvar xor eax , eax mov cl , al mov eax , dword ptr [ ebp + hexvar ] and eax , num cmp eax , num mov byte ptr [ ebp - hexvar ] , cl jne hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] cmp eax , num setne cl mov byte ptr [ ebp - hexvar ] , cl mov al , byte ptr [ ebp - hexvar ] and al , num movzx ecx , al add ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp + num ] , ecx jmp hexvar mov eax , dword ptr [ ebp + hexvar ] and eax , hexvar cmp eax , num je hexvar mov eax , dword ptr [ ebp + num ] movsx eax , byte ptr [ eax ] cmp eax , hexvar jne hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar mov byte ptr [ ebp - num ] , num jmp hexvar jmp hexvar mov al , byte ptr [ ebp - num ] and al , num movzx eax , al add esp , hexvar pop ebp ret
push esi sub esp , hexvar mov eax , dword ptr [ esp + hexvar ] mov ecx , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov esi , dword ptr [ esp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edx mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , eax call hexvar add esp , hexvar pop esi ret
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) move s0 , a0 lw v0 , - hexvar ( gp ) lw a0 , hexvar ( v0 ) addiu v0 , zero , - hexvar beq a0 , v0 , hexvar move s1 , a1 bltz a0 , hexvar lui a3 , hexvar move a3 , zero move a2 , s1 move a1 , s0 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) bnez v0 , hexvar move a2 , v0 lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu a3 , a3 , - hexvar addiu a2 , zero , hexvar lui a1 , hexvar addiu a1 , a1 , - hexvar lui a0 , hexvar addiu a0 , a0 , - hexvar lw t9 , - hexvar ( gp ) jalr t9 nop move a1 , s1 move a0 , s0 jal hexvar nop lw gp , hexvar ( sp ) b hexvar lw ra , hexvar ( sp )
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , hexvar sw gp , hexvar ( sp ) move s0 , a0 move s1 , a1 move s2 , a2 lw t9 , - hexvar ( gp ) bal hexvar nop lw gp , hexvar ( sp ) beqz v0 , hexvar move a3 , s2 move a2 , s1 move a1 , s0 move a0 , v0 jal hexvar nop lw gp , hexvar ( sp ) lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar addiu v0 , zero , hexvar sw v0 , hexvar ( sp ) lui a3 , hexvar addiu a3 , a3 , hexvar addiu a2 , zero , hexvar addiu a1 , zero , hexvar addiu a0 , zero , hexvar lw t9 , - hexvar ( gp ) jalr t9 nop lw gp , hexvar ( sp ) b hexvar move v0 , zero
add edi , num xor eax , eax cmp edi , num ja hexvar push rax call hexvar mov ecx , dword ptr [ rax ] mov eax , num lea edx , [ rcx - hexvar ] cmp edx , hexvar lea rsp , [ rsp + num ] ja hexvar movabs rsi , hexvar bt rsi , rdx jb hexvar cmp ecx , num je hexvar cmp ecx , hexvar jne hexvar ret
push rbx mov rax , - num mov rbx , rsi mov rsi , rdx xor edx , edx div rsi cmp rbx , rax ja hexvar imul rsi , rbx call hexvar test rax , rax jne hexvar test rbx , rbx jne hexvar pop rbx ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + hexvar ] cmp edx , dword ptr [ esi + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx jae hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + ecx * num + num ] mov dword ptr [ ebp - num ] , eax cmp dword ptr [ ebp - num ] , num je hexvar mov eax , dword ptr [ ebp + hexvar ] mov eax , dword ptr [ eax + hexvar ] mov ecx , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + ecx * num ] mov ecx , dword ptr [ ebp - num ] mov edx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , num mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar cmp dword ptr [ hexvar ] , num je hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar jmp hexvar cmp dword ptr [ hexvar ] , num je hexvar mov eax , dword ptr [ hexvar ] mov ecx , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , ecx call hexvar mov dword ptr [ ebp - hexvar ] , eax jmp hexvar add esp , hexvar pop esi pop ebp ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ esp ] , hexvar mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx call hexvar mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp - num ] lea ecx , [ hexvar ] mov dword ptr [ eax + num ] , ecx mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - num ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp - num ] add esp , hexvar pop ebp ret
push { r4 , r5 , r6 , r7 , r8 , sb , sl , lr } ldr r3 , [ r1 , hexvar ] ldr r5 , [ r3 , hexvar ] ldr r7 , [ r5 ] cmp r7 , num movne lr , r7 movne ip , num bne hexvar mov r7 , num mov r0 , r7 pop { r4 , r5 , r6 , r7 , r8 , sb , sl , pc }
push { r4 , lr } sub sp , sp , num str r0 , [ sp , num ] ldr r3 , [ pc , hexvar ] ldr r3 , [ r3 ] mov r1 , r3 ldr r0 , [ sp , num ] bl hexvar mov r3 , r0 mov r4 , r1 mov r0 , r3 mov r1 , r4 add sp , sp , num pop { r4 , pc }
ldr r3 , [ r1 , hexvar ] ldr r2 , [ r0 , hexvar ] cmp r3 , num cmpne r3 , num moveq r3 , num movne r3 , num cmp r2 , num cmpne r2 , num beq hexvar ldr r2 , [ r0 , hexvar ] cmp r3 , num and r2 , r2 , hexvar beq hexvar cmp r2 , hexvar beq hexvar mov r0 , num bx lr cmp r3 , num bne hexvar ldr r3 , [ r1 , hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar beq hexvar mvn r0 , num bx lr ldr r3 , [ r1 , hexvar ] and r3 , r3 , hexvar cmp r3 , hexvar beq hexvar cmp r2 , hexvar beq hexvar ldr r1 , [ r1 ] ldr r0 , [ r0 ] b hexvar
lui gp , num addiu sp , sp , - hexvar addiu gp , gp , num sw ra , hexvar ( sp ) sw gp , hexvar ( sp ) lw v0 , hexvar ( a0 ) lw a1 , hexvar ( a0 ) addu v0 , a3 , v0 addu a2 , a2 , a1 sltu a3 , v0 , a3 addu a3 , a3 , a2 bltz a3 , hexvar lw v1 , hexvar ( sp ) bgez v1 , hexvar nop lui v1 , hexvar ori v1 , v1 , hexvar lw a0 , hexvar ( a0 ) move a2 , v1 lw t9 , ( gp ) lw a1 , hexvar ( sp ) sw a3 , hexvar ( sp ) jalr t9 sw v0 , hexvar ( sp ) beqz v0 , hexvar nop bltz v0 , hexvar nop lw ra , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar addiu v0 , zero , - num b hexvar addiu v0 , zero , - num
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , num mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , edx mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov eax , dword ptr [ ebp - num ] cmp byte ptr [ eax ] , num je hexvar mov eax , dword ptr [ ebp - num ] movsx eax , byte ptr [ eax ] mov ecx , dword ptr [ ebp - num ] shl ecx , num mov edx , dword ptr [ ebp - num ] shr edx , hexvar or ecx , edx add eax , ecx mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] add eax , num mov dword ptr [ ebp - num ] , eax jmp hexvar mov eax , dword ptr [ ebp - num ] xor edx , edx div dword ptr [ ebp + hexvar ]
addiu sp , sp , - hexvar sw ra , hexvar ( sp ) sw s5 , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) lui gp , hexvar addiu gp , gp , - hexvar sw gp , hexvar ( sp ) lw s0 , hexvar ( sp ) lw v1 , num ( a2 )
push r15 push r14 push r13 push r12 push rbp push rbx mov rbp , rdi sub rsp , hexvar mov r14 , qword ptr [ rsi + hexvar ] mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax cmp qword ptr [ rsi + hexvar ] , r14 jle hexvar movzx r13d , byte ptr [ rdi + hexvar ] mov r15 , rdx mov rdx , qword ptr [ rsi + num ] mov rbx , rsi movzx r12d , byte ptr [ rdx + r14 ] and r13d , hexvar mov byte ptr [ rdi + hexvar ] , r13b mov eax , dword ptr [ rsi + hexvar ] mov byte ptr [ rdi ] , r12b cmp eax , num jle hexvar cmp r14 , qword ptr [ rsi + hexvar ] je hexvar mov rcx , qword ptr [ rsi + hexvar ] mov ecx , dword ptr [ rcx + r14 * num ] cmp ecx , - num je hexvar cmp r12b , hexvar je hexvar mov byte ptr [ rdi + num ] , num mov edi , ecx mov qword ptr [ rsp + num ] , rdx mov dword ptr [ rsp ] , ecx call hexvar mov ecx , dword ptr [ rsp ] test eax , eax setne al cmp ecx , hexvar sete cl or eax , ecx shl eax , num or r13d , eax mov byte ptr [ rbp + hexvar ] , r13b mov rdx , qword ptr [ rsp + num ] jmp hexvar nop word ptr cs : [ rax + rax ] mov byte ptr [ rdi + num ] , num mov rdi , qword ptr [ rsp + hexvar ] xor rdi , qword ptr fs : [ hexvar ] jne hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
cmp r1 , num beq hexvar ldrb r3 , [ r1 ] cmp r2 , hexvar cmpeq r3 , hexvar movne r3 , num moveq r3 , num bne hexvar cmp r0 , num push { r4 , r5 , r6 , lr } mov r4 , r0 beq hexvar ldr r5 , [ r0 , hexvar ] str r3 , [ r0 , hexvar ] cmp r5 , num ldreq r3 , [ pc , hexvar ] streq r5 , [ r4 , hexvar ] moveq r0 , r5 streq r3 , [ r4 , hexvar ] moveq r5 , r3 ldr r3 , [ r4 , hexvar ] ldrne r0 , [ r0 , hexvar ] cmp r3 , num ldreq r3 , [ pc , hexvar ] mov r1 , num streq r3 , [ r4 , hexvar ] ldr r2 , [ pc , hexvar ] blx r5 subs r1 , r0 , num beq hexvar mov r0 , num ldr r2 , [ r4 , hexvar ] ldr r3 , [ pc , hexvar ] cmp r2 , r0 str r1 , [ r4 , hexvar ] ldr r2 , [ r4 , hexvar ] str r4 , [ r1 ] str r0 , [ r1 , hexvar ] str r3 , [ r1 , num ] beq hexvar cmp r2 , r0 beq hexvar mov r2 , num mov r6 , num mov r5 , hexvar mov lr , hexvar mvn ip , num str r0 , [ r1 , hexvar ] str r0 , [ r1 , hexvar ] str r0 , [ r1 , hexvar ] str r0 , [ r1 , hexvar ] str r6 , [ r1 , hexvar ] str r5 , [ r1 , hexvar ] str r0 , [ r4 , hexvar ] str r0 , [ r4 , num ] str r0 , [ r4 , hexvar ] str r2 , [ r4 , hexvar ] str r3 , [ r1 , num ] add r3 , r1 , hexvar add r3 , r3 , num str r3 , [ r1 , hexvar ] str r3 , [ r1 , hexvar ] str r3 , [ r1 , hexvar ] add r3 , r1 , hexvar str r0 , [ r1 , num ] str r0 , [ r1 , hexvar ] str r0 , [ r1 , hexvar ] str r0 , [ r1 , hexvar ] str r0 , [ r1 , hexvar ] str lr , [ r1 , hexvar ] str r2 , [ r3 , hexvar ] str ip , [ r3 , hexvar ] pop { r4 , r5 , r6 , pc } stcllo p9 , c6 , [ r8 ] , hexvar andeq r3 , r0 , r4 , lsr pc
beqz a1 , hexvar nop addiu sp , sp , - hexvar sw s4 , hexvar ( sp ) move s4 , a1 sw s3 , hexvar ( sp ) move s3 , a3 sw s2 , hexvar ( sp ) move s2 , a0 sw s1 , hexvar ( sp ) move s1 , zero sw s0 , hexvar ( sp ) move s0 , a2 b hexvar sw ra , hexvar ( sp ) beq s4 , s1 , hexvar addiu v0 , zero , num lw v0 , ( s2 )
push r14 push rbx push rax mov r14 , rsi mov rbx , qword ptr [ rdi + hexvar ] call hexvar mov rdi , rbx mov esi , eax mov rdx , r14 call hexvar mov eax , num add rsp , num pop rbx pop r14 ret
lui v1 , hexvar lui gp , hexvar addiu sp , sp , - hexvar lw v1 , - hexvar ( v1 ) addiu gp , gp , hexvar addiu v0 , zero , - num sw ra , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) beq v1 , v0 , hexvar sw gp , hexvar ( sp ) lui v0 , num move s2 , a0 ori v0 , v0 , hexvar and a0 , a1 , v0 beqz a0 , hexvar move s0 , a1 lui s1 , num addiu v0 , s1 , hexvar and v0 , s0 , v0 bnez v0 , hexvar lw t9 , - hexvar ( gp ) andi v0 , s0 , hexvar bnez v0 , hexvar lw t9 , - hexvar ( gp ) andi v0 , s0 , num bnez v0 , hexvar lw t9 , - hexvar ( gp ) andi v0 , s0 , hexvar bnez v0 , hexvar ext v0 , s0 , hexvar , num bnez v0 , hexvar move v0 , zero lw ra , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui s1 , num and v0 , v1 , v0 or s0 , a1 , v0 addiu v0 , s1 , hexvar and v0 , s0 , v0 beqz v0 , hexvar andi v0 , s0 , hexvar lw t9 , - hexvar ( gp ) move a1 , s0 bal hexvar move a0 , s2 bnez v0 , hexvar lw gp , hexvar ( sp ) and s1 , s0 , s1 beqz s1 , hexvar move v0 , zero b hexvar lw ra , hexvar ( sp ) move a1 , s0 bal hexvar move a0 , s2 bnez v0 , hexvar lw gp , hexvar ( sp ) andi v0 , s0 , hexvar beqz v0 , hexvar move v0 , zero b hexvar lw ra , hexvar ( sp ) lw ra , hexvar ( sp ) move a1 , s0 lw s1 , hexvar ( sp ) move a0 , s2 lw s0 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw t9 , - hexvar ( gp )
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , ecx mov dword ptr [ ebp - num ] , eax mov eax , dword ptr [ ebp - num ] shr eax , hexvar mov eax , dword ptr [ eax * num + hexvar ] jmp eax mov eax , hexvar mov ecx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , eax jmp ecx mov eax , dword ptr [ ebp - num ] test eax , eax setne cl movzx eax , cl mov eax , dword ptr [ eax * num + hexvar ] mov cl , num mov byte ptr [ ebp - hexvar ] , cl jmp eax mov eax , dword ptr [ ebp - num ] test eax , eax setne cl mov eax , dword ptr [ hexvar ] mov byte ptr [ ebp - hexvar ] , cl jmp eax mov al , byte ptr [ ebp - hexvar ] movzx ecx , al and ecx , num mov edx , dword ptr [ hexvar ] mov dword ptr [ ebp - hexvar ] , ecx jmp edx mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop ebp ret
push ebx sub esp , num call hexvar add ebx , hexvar sub esp , hexvar push dword ptr [ esp + hexvar ] call hexvar add esp , hexvar cmp eax , - num jne hexvar sub esp , hexvar push hexvar lea eax , [ ebx - hexvar ] push eax push hexvar push hexvar push hexvar call hexvar add esp , hexvar mov eax , num jmp hexvar mov eax , dword ptr [ esp + hexvar ] mov edx , dword ptr [ esp + hexvar ] mov dword ptr [ eax ] , edx mov eax , num add esp , num pop ebx ret
push ebp mov ebp , esp push ebx push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov bl , num and bl , num movzx esi , bl mov dword ptr [ ebp - hexvar ] , eax mov eax , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx add esp , hexvar pop esi pop ebx pop ebp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] lea rsi , [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdi , qword ptr [ rbp - hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov qword ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdi , qword ptr [ rax + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push r12 push rbp push rbx mov rbp , rdi mov edi , hexvar call hexvar mov rbx , rax mov qword ptr [ rax + hexvar ] , num lea rdi , [ rax + num ] and rdi , hexvar mov rcx , rax sub rcx , rdi add ecx , hexvar shr ecx , num mov ecx , ecx mov eax , num rep stosq qword ptr [ rdi ] , rax mov qword ptr [ rbx ] , num mov qword ptr [ rbx + num ] , num cmp byte ptr [ rip + hexvar ] , num mov edx , num mov eax , hexvar cmove rax , rdx mov qword ptr [ rbx + hexvar ] , rax mov edi , hexvar call hexvar mov qword ptr [ rbx + hexvar ] , rax mov eax , num mov rcx , - num mov rdi , rbp repne scasb al , byte ptr [ rdi ] not rcx lea rsi , [ rcx - num ] movsxd rsi , esi mov rdx , rbx mov rdi , rbp call hexvar test rax , rax je hexvar mov r12 , rax mov rdi , rbp call hexvar mov rbp , rax mov edx , num mov esi , hexvar mov edi , num call hexvar mov r8 , rbp mov rcx , r12 mov rdx , rax mov esi , num mov edi , num mov eax , num call hexvar mov rdi , rbx call hexvar mov rsi , qword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rbx ] call hexvar mov qword ptr [ rbx ] , rax mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rbx + num ] , rax mov rax , rbx pop rbx pop rbp pop r12 ret
push ebp mov ebp , esp push esi sub esp , hexvar mov eax , dword ptr [ ebp + num ] mov ecx , dword ptr [ hexvar ] mov edx , dword ptr [ ebp + num ] lea esi , [ hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , ecx mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , ecx mov dword ptr [ esp + num ] , eax call hexvar call hexvar nop nop nop nop nop nop
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num jne hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] test eax , eax je hexvar lea r8 , [ rip + hexvar ] mov ecx , hexvar lea rdx , [ rip + hexvar ] lea rsi , [ rip + hexvar ] mov edi , hexvar mov eax , num call hexvar mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + hexvar ] mov eax , hexvar cmp rdx , rax je hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] test eax , eax setne al movzx eax , al leave ret
push ebp mov ebp , esp sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov dword ptr [ ebp - num ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov eax , dword ptr [ hexvar ] mov dword ptr [ esp ] , eax call hexvar nop word ptr [ eax + eax ]
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , - hexvar sw ra , hexvar ( sp ) sw s0 , hexvar ( sp ) beqz a0 , hexvar sw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) move v0 , a0 addiu a2 , zero , num move a0 , zero move s0 , a1 jalr t9 move a1 , v0 move a1 , zero lw gp , hexvar ( sp ) move a0 , zero move a3 , s0 lw t9 , - hexvar ( gp ) jalr t9 move a2 , v0 lw gp , hexvar ( sp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) addiu a2 , zero , num addiu a1 , a1 , hexvar jalr t9 move a0 , zero move a1 , zero lw gp , hexvar ( sp ) move a2 , v0 addiu a0 , zero , num lw v0 , - hexvar ( gp ) lw t9 , - hexvar ( gp ) jalr t9 lw a3 , ( v0 ) lw gp , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 nop
push rbp push rbx sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax cmp byte ptr [ rip + hexvar ] , num jne hexvar mov edi , hexvar call hexvar mov dword ptr [ rip + hexvar ] , num mov edi , dword ptr [ rip + hexvar ] call hexvar call hexvar cmp qword ptr [ rip + hexvar ] , num jne hexvar mov edx , num mov esi , hexvar mov edi , num call hexvar mov rdx , rax mov esi , num mov edi , num mov eax , num call hexvar mov rbx , qword ptr [ rip + hexvar ] lea rax , [ rbx + num ] mov qword ptr [ rip + hexvar ] , rax mov edx , num mov esi , hexvar mov edi , num call hexvar mov rbp , rsp mov r8 , rbx mov rcx , rax mov edx , hexvar mov esi , num mov rdi , rsp mov eax , num call hexvar mov ebx , dword ptr [ rip + hexvar ] mov esi , num mov rdi , rsp call hexvar sub ebx , eax mov eax , num cmovs ebx , eax mov ecx , ebx sar ecx , num sub rsp , num push rbp push hexvar sub ebx , ecx push rbx mov r9 , qword ptr [ rip + hexvar ] mov r8d , hexvar mov rdx , qword ptr [ rip + hexvar ] mov esi , hexvar mov edi , num call hexvar mov byte ptr [ rip + hexvar ] , num mov dword ptr [ rip + hexvar ] , num add rsp , hexvar mov rax , qword ptr [ rsp + hexvar ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret
push r14 push rbx push rax xor r14d , r14d test rsi , rsi je hexvar mov rbx , rdi mov ecx , dword ptr [ rdi + hexvar ] test ecx , ecx je hexvar mov rax , rsi movsxd rdx , edx mov rcx , qword ptr [ rbx + hexvar ] mov esi , num mov rdi , rax call hexvar mov r14 , rax mov rdi , qword ptr [ rbx + hexvar ] call hexvar test eax , eax je hexvar call hexvar mov edx , dword ptr [ rax ] mov ecx , hexvar mov edi , num mov esi , hexvar mov r8d , hexvar call hexvar mov ecx , hexvar mov edi , hexvar mov esi , hexvar mov edx , num mov r8d , hexvar call hexvar mov r14d , hexvar mov eax , r14d add rsp , num pop rbx pop r14 ret
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] lea esi , [ ebp - hexvar ] mov edi , dword ptr [ ebp + hexvar ] mov ebx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + hexvar ] mov dword ptr [ esp ] , eax mov dword ptr [ esp + num ] , esi mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , edi mov dword ptr [ ebp - hexvar ] , ebx call hexvar mov ecx , dword ptr [ ebp + num ] mov ecx , dword ptr [ ecx + hexvar ] add ecx , num mov edx , dword ptr [ ebp + num ] mov edx , dword ptr [ edx + hexvar ] mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp ] , esi mov esi , dword ptr [ ebp - hexvar ] mov dword ptr [ esp + num ] , esi lea esi , [ hexvar ] mov dword ptr [ esp + num ] , esi mov dword ptr [ esp + hexvar ] , eax mov dword ptr [ esp + hexvar ] , ecx mov dword ptr [ esp + hexvar ] , edx call hexvar mov ecx , dword ptr [ ebp + hexvar ] mov dword ptr [ ebp - hexvar ] , eax mov eax , ecx add esp , hexvar pop esi pop edi pop ebx pop ebp ret
sub rsp , hexvar mov rcx , rsi mov rdx , rdi xorps xmm0 , xmm0 movups xmmword ptr [ rsp + num ] , xmm0 mov dword ptr [ rsp ] , num mov edi , hexvar mov esi , hexvar xor r8d , r8d xor r9d , r9d call hexvar add rsp , hexvar ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar slt v0 , a1 , a3 sw ra , hexvar ( sp ) sw s4 , hexvar ( sp ) sw s3 , hexvar ( sp ) sw s2 , hexvar ( sp ) sw s1 , hexvar ( sp ) sw s0 , hexvar ( sp ) bnez v0 , hexvar sw gp , hexvar ( sp ) subu s2 , a1 , a3 lw t9 , - hexvar ( gp ) move s0 , a1 move a1 , zero move s3 , a2 move a2 , s2 move s1 , a3 jalr t9 move s4 , a0 lw gp , hexvar ( sp ) addu a0 , s4 , s2 move a2 , s1 lw t9 , - hexvar ( gp ) jalr t9 move a1 , s3 move v0 , s0 lw ra , hexvar ( sp ) lw s4 , hexvar ( sp ) lw s3 , hexvar ( sp ) lw s2 , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar lui a3 , hexvar lw t9 , - hexvar ( gp ) addiu v0 , zero , hexvar addiu a3 , a3 , - hexvar addiu a2 , zero , hexvar sw v0 , hexvar ( sp ) addiu a1 , zero , hexvar jalr t9 addiu a0 , zero , num b hexvar addiu v0 , zero , - num
mov eax , num mov rdx , qword ptr [ rsi + num ] cmp qword ptr [ rdi + num ] , rdx jne hexvar mov rax , qword ptr [ rsi ] cmp qword ptr [ rdi ] , rax sete al movzx eax , al and eax , num ret
lui gp , hexvar addiu sp , sp , - hexvar addiu gp , gp , hexvar sw s1 , hexvar ( sp ) move s1 , a0 sw gp , hexvar ( sp ) sw ra , hexvar ( sp ) lw t9 , - hexvar ( gp ) jalr t9 sw s0 , hexvar ( sp ) lb v1 , ( s1 ) addiu v1 , v1 , - hexvar sltiu v1 , v1 , hexvar beqz v1 , hexvar lw gp , hexvar ( sp ) lui a1 , hexvar lw t9 , - hexvar ( gp ) move a0 , s1 addiu a1 , a1 , - hexvar jalr t9 move s0 , v0 xor v0 , v0 , s0 sltiu v0 , v0 , num lw ra , hexvar ( sp ) lw s1 , hexvar ( sp ) lw s0 , hexvar ( sp ) jr ra addiu sp , sp , hexvar b hexvar move v0 , zero
push ebp mov ebp , esp push ebx push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] xor esi , esi mov edi , dword ptr [ ebp + num ] mov dword ptr [ esp ] , edi mov dword ptr [ esp + num ] , num mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx mov dword ptr [ ebp - hexvar ] , esi call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp - hexvar ] lea ecx , [ hexvar ] mov dword ptr [ eax ] , ecx mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov byte ptr [ eax + hexvar ] , num mov bl , num and bl , num movzx eax , bl add esp , hexvar pop esi pop edi pop ebx pop ebp ret
push ebp mov ebp , esp push edi push esi sub esp , hexvar mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp + hexvar ] mov edx , dword ptr [ ebp + num ] mov esi , dword ptr [ ebp + num ] mov edi , dword ptr [ ebp + hexvar ] mov dword ptr [ esp ] , esi mov dword ptr [ esp + num ] , edi mov dword ptr [ ebp - hexvar ] , eax mov dword ptr [ ebp - hexvar ] , ecx mov dword ptr [ ebp - hexvar ] , edx call hexvar mov dword ptr [ ebp - hexvar ] , eax mov eax , dword ptr [ ebp + hexvar ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx ] , eax mov eax , dword ptr [ ebp + num ] mov eax , dword ptr [ eax + num ] mov ecx , dword ptr [ ebp - hexvar ] mov dword ptr [ ecx + num ] , eax mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + num ] , num mov eax , dword ptr [ ebp - hexvar ] mov dword ptr [ eax + hexvar ] , num mov eax , dword ptr [ ebp - hexvar ] add esp , hexvar pop esi pop edi pop ebp ret
push ebx sub esp , num call hexvar add eax , hexvar sub esp , num lea edx , [ eax - hexvar ] push edx push dword ptr [ esp + hexvar ] mov ebx , eax call hexvar add esp , hexvar nop add esp , num pop ebx ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rdi , qword ptr [ rbp - hexvar ] mov ax , word ptr [ rdi + hexvar ] shr ax , num and ax , num movzx ecx , ax cmp ecx , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rdi , qword ptr [ rbp - hexvar ] lea rsi , [ rbp - hexvar ] call hexvar cmp eax , num je hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] add rsp , hexvar pop rbp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi + hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi + hexvar ] mov rsi , qword ptr [ rsi + num ] mov rsi , qword ptr [ rsi + hexvar ] mov qword ptr [ rbp - hexvar ] , rsi mov rsi , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rsi + hexvar ] test rsi , rsi sete al movzx ecx , al mov esi , ecx mov rsi , qword ptr [ rsi * num + hexvar ] jmp rsi mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rcx + hexvar ] mov ecx , edx lea rcx , [ rax + rcx - num ] sub rcx , rax setae sil movzx edx , sil mov eax , edx mov rax , qword ptr [ rax * num + hexvar ] mov qword ptr [ rbp - hexvar ] , rcx jmp rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rcx + hexvar ] add edx , - num mov ecx , edx add rax , rcx not rcx and rax , rcx mov rcx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , - num mov rcx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp rcx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] sub rax , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rcx + hexvar ] mov rcx , qword ptr [ rcx + hexvar ] sub rax , rcx mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rip + hexvar ] jmp rax mov rax , qword ptr [ rbp - num ] pop rbp ret
push rbp mov rbp , rsp mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rbp - hexvar ] , rdx movzx eax , byte ptr [ rax ] mov byte ptr [ rbp - num ] , al cmp byte ptr [ rbp - num ] , hexvar jne hexvar mov byte ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rbp - hexvar ] , rdx movzx eax , byte ptr [ rax ] mov byte ptr [ rbp - num ] , al cmp byte ptr [ rbp - num ] , hexvar jne hexvar mov byte ptr [ rbp - num ] , num cmp byte ptr [ rbp - num ] , num jne hexvar movzx edx , byte ptr [ rbp - num ] movzx eax , byte ptr [ rbp - num ] sub edx , eax mov eax , edx jmp hexvar movzx eax , byte ptr [ rbp - num ] cmp al , byte ptr [ rbp - num ] je hexvar movzx edx , byte ptr [ rbp - num ] movzx eax , byte ptr [ rbp - num ] sub edx , eax mov eax , edx pop rbp ret
push rbx mov rbx , rdi mov edi , hexvar call hexvar mov qword ptr [ rax ] , rbx mov qword ptr [ rax + hexvar ] , num mov qword ptr [ rax + num ] , num pop rbx ret
push ebp mov ebp , esp call hexvar add eax , hexvar mov eax , dword ptr [ ebp + hexvar ] add eax , num cmp dword ptr [ ebp + hexvar ] , eax jae hexvar mov eax , num jmp hexvar mov eax , dword ptr [ ebp + hexvar ] movzx eax , byte ptr [ eax ] xor eax , hexvar movzx eax , al add eax , - hexvar pop ebp ret
